{"version":3,"sources":["queries/stationQuery.js","mutations/stationMutation.js","components/StationLoginPage.js","queries/shiftReportQuery.js","components/StationReportPage/MenuBar.js","components/ShiftReport/TaskInfo.js","components/ShiftReport/GenericTasksPanel.js","components/ShiftReport/AircraftTasksPanel.js","components/ShiftReport/StaffWorkTime.js","components/ShiftReport/index.js","components/StationReportPage/Context.js","components/StationReportPage/stationReducer.js","components/StationReportPage/NewReportForm/FormFields.js","utils/DateHelper.js","components/StationReportPage/NewReportForm/validator.js","components/StationReportPage/NewReportForm/ErrorMessage.js","mutations/timeSheetMutation.js","components/StationReportPage/NewReportForm/StaffEditModel.js","components/StationReportPage/NewReportForm/StaffForm.js","components/StationReportPage/NewReportForm/StaffForms.js","components/StationReportPage/NewReportForm/TaskForm.js","components/StationReportPage/NewReportForm/TaskForms.js","components/StationReportPage/NewReportForm/AircraftSelectionForm.js","components/StationReportPage/NewReportForm/StaffAddModel.js","mutations/submitShiftReport.js","components/StationReportPage/NewReportForm/index.js","components/ShiftReport/ReportViewModal.js","components/StationReportPage/AllReportsTable.js","components/StationReportPage/index.js","mutations/staffMutation.js","components/StaffLoginPage.js","queries/timeSheetQuery.js","components/TimeSheetsReport/TimeSheetEditFields.js","components/TimeSheetsReport/TimeSheetEditModel.js","components/TimeSheetsReport/TImeSheetRow.js","components/TimeSheetsReport/index.js","components/StaffPage/TimeSheet.js","queries/staffQuery.js","components/TimeSheetsOverview/TimeSheetsFilter.js","components/TimeSheetsOverview/index.js","components/AdminPages/ManageTimeSheets.js","mutations/permissionMutation.js","components/StaffPage/PermissionManager.js","components/StaffPage/StaffEditModel.js","components/StaffPage/PasswordChangeModel.js","components/StaffPage/Profile.js","components/StaffPage/RegisterPage.js","components/StaffPage/StaffMenuBar.js","components/StaffPage/StaffSubMenu.js","components/StaffPage/index.js","components/AdminPages/NewStaffModal.js","components/AdminPages/AllStaffs.js","queries/costumerQuey.js","components/AdminPages/NewStationModal.js","components/AdminPages/AllStations.js","components/StationInfo/stationMenu.js","components/StationInfo/Index.js","components/AdminPages/AdminMenuBar.js","components/AdminPages/index.js","App.js","index.js"],"names":["ALL_STATION","gql","GET_STATION","LOGIN_TO_STATION","ADD_STATION","StationLoginPage","history","useHistory","useState","radioButton","setRadioButton","stationKey","setStationKey","remember","setRemember","useQuery","notifyOnNetworkStatusChange","loading","error","data","useMutation","onError","console","log","loginStation","loginToStationResult","useEffect","station","loginToStation","sessionStorage","setItem","JSON","stringify","localStorage","push","value","event","a","preventDefault","variables","id","password","storedStationKey","parse","getItem","key","toggleRemember","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","Header","as","color","Image","src","Form","size","onSubmit","Segment","clearing","stacked","basic","allStations","map","Field","float","clear","marginRight","Radio","label","location","checked","onChange","radioButtonChange","Input","name","target","fluid","icon","iconPosition","placeholder","type","Checkbox","onClick","Button","renderPasswordInput","Divider","horizontal","content","GET_SHIFT_REPORT","GET_REPORTLIST","GET_SHIFTREPORT_ID","MenuBar","activeItem","setActiveItem","handleMenuClick","e","Menu","inverted","stackable","Item","header","active","position","primary","removeItem","TaskInfo","task","handoverId","updateOnthisHandover","_","find","updates","action","Label","circular","status","length","Icon","compact","description","GenericTaskPanel","genericTasks","legth","block","taskCategory","SegmentGroup","AircraftTaskPanel","aircraftTasks","aircrafts","key_costumerName","tasks","key_aircraft","StaffWorkTime","timesheets","Table","celled","Row","HeaderCell","Body","timesheet","Cell","staff","startTime","substring","endTime","ShiftReport","reportData","tasksByCat","groupBy","mapValues","cat","k","chain","AIRCRAFT","taskcat","aircraft","costumer","registration","floated","shift","staffAndTime","tasksByType","key_taskType","Context","createContext","lastShiftReport","reducer","state","payload","DateInputField","props","useFormikContext","setFieldValue","setFieldTouched","useField","field","meta","width","touched","popupPosition","dateTimeFormat","closable","onBlur","preserveViewMode","pointing","prompt","InputField","inputlabel","AircraftCheckBox","children","display","toggle","marginLeft","toUpperCase","TextAreaField","TextArea","formatDate","dateToFormat","isNaN","findIndex","regex","match","splitT","split","date","time","dateSplit","timeSplit","Date","getDate","toString","padStart","getMonth","getFullYear","getHours","getMinutes","operateDate","duration","unit","operation","ndate","isNumber","splitDateTime","splitDate","newDate","toDate","stringDate","getWeekNumber","dt","tdt","valueOf","dayn","getDay","setDate","firstThursday","setMonth","Math","ceil","getDatefromWeek","w","y","simpleStartDate","UTC","dayOfWeek","IsoWeekStart","getMonthOptions","currentMonth","Array","v","i","text","monthInt","Proxy","get","prop","parseInt","getWeekOptions","today","dYear","lastYearWeekNum","lastRetriveable","options","week","option","validateStaffInputField","validateStartEndTime","startDate","now","validateTaskField","trim","validateEmail","email","validateName","ErrorMessage","form","getIn","errors","SIGN_OFF_SHIFT","UPDATE_TIMESHEET","APPROVE_TIMESHEET","DELETE_TIMESHEET","REQUEST_CLARIFICATION","StaffEditModel","setOpen","open","fieldName","removeClick","removeStaff","setRemoveStaff","getFieldMeta","signOff","shiftStartTime","shiftEndTime","ibreakt","notifyResult","setNotifyResult","username","setUsername","setPassword","setStartTime","setEndTime","breakt","setBreakt","message","signOffTimeSheet","submit","values","signOffData","break","additionalAction","Dimmer","Loader","Modal","closeIcon","closeOnEscape","closeOnDimmerClick","onClose","onOpen","Content","Message","success","onDismiss","enableReinitialize","initialValues","fullname","resetEmail","validate","handleSubmit","Group","maxDate","minDate","labelPosition","min","columns","vertical","StaffForm","index","remove","signOffKey","attached","readOnly","changing","staffs","StaffForms","addStaffOpen","replace","TaskForm","onRemove","disabled","getFieldProps","noteFieldVisibile","setNoteFieldVisibile","taskAction","taskStatus","taskNotes","actionButtonClick","toggleNotes","notes","TaskStatusBar","padding","marginBottom","rows","visibility","removeButtonClick","actionCloseCheckBoxClick","actionOpenCheckBoxClick","actionDeferCheckBoxClick","margin","Accordion","panels","title","positive","Or","negative","hidden","paddingBotton","TaskForms","tasksIdentifier","aircraftId","newTaskField","AircraftSelectionForm","costumers","setCheckedAircrafts","checkedAircrafts","confirmOpen","setConfirmOpen","Confirm","onCancel","onConfirm","StaffAddModel","registerUserOpen","setRegisterUserOpen","forgotPasswordOpen","setForgotPasswordOpen","addedStaff","emailError","usernameError","FormField","warning","visible","FormGroup","SUBMIT_REPORT","NewReport","context","useContext","openAddStaffModel","setOpenAddStaffModel","setCostumers","initialFields","setInitialFields","submitReport","list","taskList","costumerList","simplifiedTask","newNote","disbleCheck","matchesProperty","submitShiftReport","staffErrors","errList","isEmpty","mapKeys","validateStaffsField","taskErrors","typedTasks","pickBy","identity","validateTasks","submitData","formdata","reduce","tasksByIdentifier","identifier","initialTask","difference","Object","keys","filter","reducedTask","p","c","beforeSubmit","OTHER","LOGISTICS","ReportViewModal","openReport","setOpenReport","useLazyQuery","getReport","onMount","getShiftReport","AllReportsTable","transformData","stationId","getReportList","report","striped","structured","stations","entries","reports","collapsing","rowSpan","List","StationReportPage","initialState","useReducer","dispatch","queryParams","params","useParams","flag","loadingReport","errorReport","dataReport","dataStation","getStation","Provider","NewReportForm","LOGIN_STAFF","RESET_REGISTER_CODE","RESET_PASSWORD_REQ","CHANGE_PASSWORD","STAFF_EDIT","STAFF_ADD","COMPLETE_REGISTRATION","StaffLoginPage","login","staffLogin","handleLogin","storedStaffKey","GET_TIMESHEETS","GET_ALL_TIMESHEETS","RemarkField","remarkTitle","remarkDate","remarkBy","remarkText","remarkEdit","Subheader","val","fontStyle","textDecoration","DropDownField","labeled","input","Dropdown","borderTopLeftRadius","borderBottomLeftRadius","TimeSheetEditModel","self","skip","add","shiftReportLoading","shiftReportData","updateTimeSheet","updateTimeSheetLoading","stationOptions","setStationOptions","newRemarkField","setNewRemarkField","getShiftList","shifts","handleShiftChange","st","ISODate","toISOString","vars","getShiftReportByShift","handover","remarks","splice","update","store","response","modify","fields","getTimeSheetByUser","existingTimeSheetRefs","readField","newTimeSheet","addToTimeSheet","some","ref","getAllTimeSheets","period","cloneDeep","totHours","toFixed","itemsPending","parseFloat","broadcast","closeModel","modalHeader","init","staffId","setHours","by","getInitValues","insertAt","newRemarks","edit","autoAddRemarks","placholder","search","selection","sdt","splitSt","setMinutes","diff","getRecomendedShiftOption","secondary","remark","TimeSheetRow","timeSheet","permission","shiftReport","totalHours","total","ot","overTime","setAdd","deleteOpen","setDeleteOpen","clarifyOpen","setClarifyOpen","clarifyText","setClarifyText","approveTimesheet","timesheetSignLoading","mutatedeleteTimesheet","deleteLoading","requestClarification","clarifyLoading","isEmptyRow","isWeekDay","href","_id","Popup","trigger","sign","approved","approveTimeSheet","wide","clearify","writeFragment","fragment","test","readFragment","askToclarify","on","deleteTimeSheet","DELETE","TimeSheetsReport","shiftDate","endDate","setAllApproved","calenderArray","n","day","calenderObject","zipObject","netTotal","netOt","formatData","timeSheets","totalDaily","reqHours","stickyTh","top","zIndex","Footer","colSpan","TimeSheet","setStaffName","selected","selectedYear","timesheetOnly","selectBy","setSelectBy","number","setNumber","year","setYear","filterDuration","getStaff","months","start","sdate","filterStartDate","end","ed","sd","filterEndDate","isAllApproved","GET_STAFF","GET_STAFF_REG","GET_ALL_STAFF_MINIMAL","GET_ALL_STAFF","VERIFY_USERNAME","TimeSheetsFilter","setFilter","loggedInStaff","setStaff","setPeriod","setStations","setGroupBy","from","setFrom","to","setTo","basePage","useLocation","pathname","filterStatus","setFilterStatus","staffOptions","setStaffOptions","getAllStaffs","staffLoading","staffData","staffOpt","allStaff","toLowerCase","view","widths","multiple","clearable","onFocus","dateFormat","TimeSheetsOverview","periodTitle","month","TableHeader","TableRow","TableHeaderCell","TableBody","TableCell","ManageTimeSheets","setName","staffName","page","Breadcrumb","Section","link","Link","CHANGE_PERMISSION","PermissionManager","permissions","admin","superUserSet","setSuperUserSet","hasSuperPermission","updatePermission","pLoading","mapPermission","permssionType","hasPermission","mod","setOptions","getStationOptions","soptions","allStationIds","formValues","prev","cur","scope","isEqual","pType","dirty","resetForm","className","updateStaff","updateStaffLoading","initVal","phone","contractType","contractHours","ModalHeader","ModalContent","updatedValues","omitBy","PasswordChangeModel","changePassword","newPassword","confirmPassword","marginTop","Profile","handleCancel","handleConfirm","confirm","setConfirm","passwordChangeOpen","setPasswordChangeOpen","withPermission","staffCanEdit","resetPassword","rpLoading","rpError","resetRegisterCode","rcLoading","rcError","resetConfirm","registered","registerCode","centered","idCardCode","lastActive","activeAt","editModelOpen","setEditModelOpen","RegisterPage","completeRegistration","regstrationLoading","registrationError","registrationData","validateUsernameQuery","usernameLoading","usernameData","verified","usernameVerified","setUsernameVerified","verifyUsername","registerStaff","handleChange","handleBlur","undefined","currentTarget","StaffMenuBar","includes","menuItems","item","StaffSubMenu","StaffPage","subMenuActiveItem","setSubMenuActiveItem","loggedInStaffName","setLoggedInStaffName","locationPaths","staffHasMangeRights","toLocaleLowerCase","BreadcrumbSection","BreadcrumbDivider","NewStaffModel","addStaffMutation","existingStaffRefs","newStaff","addStaff","Actions","AllStaffs","staffsData","setStaffsData","staffAddOpen","setStaffAddOpen","filterData","ALL_COSTUMERS","NewStationModel","addStationMutation","countryList","setCountryList","setCostumerList","costumerLoading","onCompleted","allCostumers","costumerOptions","fetch","json","countries","countryArray","country","alpha2Code","fetchCountries","address","street","postcode","city","stationKeyConfirm","allStation","existingStationRefs","newStation","addStation","autoComplete","padded","paddingTop","AllStations","detailed","stationsData","setStationsData","stationAddOpen","setStationAddOpen","activeStaffs","Flag","StationMenu","stationLocation","StationInfo","stationData","setStationData","staffList","Card","raised","contract","extra","AdminMenuBar","AdminPages","App","path","authLink","setContext","headers","token","authorization","httpLink","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","concat","ReactDOM","render","Container","document","getElementById"],"mappings":"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","file":"static/js/main.09db5621.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\nexport const ALL_STATION = gql`\n query ($detailed: Boolean = false ){\n  allStations {\n    id\n    location\n    shifts @skip(if: $detailed){\n      name\n      startTime\n    }\n    address @include(if: $detailed){\n      country\n      postcode\n      city\n      street\n    }\n    phone @include(if: $detailed)\n    email @include(if: $detailed)\n    activeStaffs @include(if: $detailed)\n    \n  }\n}`\n\nexport const GET_STATION = gql`\n  query fetchStation($id: String!){\n    getStation(id: $id) {\n      costumers {\n        contract\n        aircrafts {\n          registration\n        }\n        name\n        id\n      }\n      shifts {\n        name\n        startTime\n      }\n      location\n      id\n      address {\n        country\n        postcode\n        city\n        street\n      }\n      phone\n      email\n      staffList{\n        id\n        name\n        lastActive{\n          activeAt\n        }\n      }\n      procedures{\n        title\n        description\n      }\n    }\n  }\n\n`","import { gql } from '@apollo/client'\nexport const LOGIN_TO_STATION = gql`\n  mutation stationLogin($id: String!, $password:String!){\n    loginToStation(id: $id, password: $password) \n  }\n`\n\nexport const ADD_STATION = gql`\n  mutation addStation ($location:String! , $address: AddressInput! , $phone: String! ,$email: String!, $shifts: [ShiftInfoInput], $costumers: [String], $stationKey:String! ){\n    addStation(\n      location:$location\n      address:$address\n      phone:$phone\n      email:$email\n      shifts:$shifts\n      costumers:$costumers\n      stationKey: $stationKey\n    ){\n      id\n    }\n  }\n`","import React, { useState,useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Button, Form, Radio, Grid, Header, Image, Segment, Divider } from 'semantic-ui-react'\nimport { ALL_STATION } from '../queries/stationQuery'\nimport { LOGIN_TO_STATION } from '../mutations/stationMutation'\n\n\nconst StationLoginPage = () => {\n  const history = useHistory()\n  const [radioButton, setRadioButton] = useState({})\n  const [stationKey,setStationKey]= useState('')\n  const [remember, setRemember] = useState(false)\n  const { loading, error, data } =  useQuery(ALL_STATION,{ notifyOnNetworkStatusChange: true })\n\n  /**\n   * loginStation mutation hook\n   */\n  const [loginStation,loginToStationResult] = useMutation(LOGIN_TO_STATION,{\n    onError: (error) => {\n      console.log(error)\n    }\n  })\n\n  /**\n   * side effect when the loginStation mutation is executed and loginToStationResult is set\n   */\n  useEffect(() => {\n    if ( loginToStationResult.data ) {\n      const station = loginToStationResult.data.loginToStation\n      setStationKey(station)\n      sessionStorage.setItem('stationKey',JSON.stringify(station))\n      //If remember button is checked store key in local storage\n      if(remember){\n        localStorage.setItem('stationKey',JSON.stringify(station))\n      }\n      history.push(`/shiftReport/station/${radioButton.value}`)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loginToStationResult.data])\n\n  /**\n   * function for station loginStation action\n   * @param {event} event submit button event\n   */\n  const loginToStation = async (event) => {\n    event.preventDefault()\n    loginStation({ variables:{ id:radioButton.value, password: stationKey } })\n\n  }\n\n  /**\n   * If stationKey is found on localStorage/sessionStorage skip the loginStation and browse shift report\n   */\n  let storedStationKey = JSON.parse(sessionStorage.getItem('stationKey'))\n  if(!storedStationKey){\n    const key = localStorage.getItem('stationKey')\n    storedStationKey = JSON.parse(key)\n    /**\n     * store the key to session storage*\n     */\n    sessionStorage.setItem('stationKey',JSON.stringify(key))\n  }\n  if(storedStationKey){\n    history.push(`/shiftReport/station/${storedStationKey.id}`)\n  }\n\n  /**\n   * remeber checkbox toggle action\n   */\n  const toggleRemember = () => {\n    if (remember) {\n      setRemember(false)\n    }else {\n      setRemember(true)\n    }\n  }\n\n  /**\n   * Renders station password input filed\n   * @param {radioButton DOM} radioButton\n   * @returns {Component} password input field\n   */\n\n  const renderPasswordInput = (radioButton) => {\n    return (\n      <>\n        <Form.Input\n          name= 'stationKey'\n          value={stationKey}\n          onChange= {({ target }) => setStationKey(target.value)}\n\n          label= {`Enter password for ${radioButton.label}`}\n          fluid\n          icon='lock'\n          iconPosition='left'\n          placeholder='Password'\n          type='password'\n\n\n        />\n        <Form.Checkbox name=\"rememberKey\" label='Remember on this computer' checked={remember} onClick = {toggleRemember}/>\n        <Button fluid size='large' color=\"blue\">Retrieve Shift Report</ Button>\n      </>)\n\n  }\n  /**\n   * Radiobutton change action\n   * @param {event} event\n   * @param {DOM {value, label}} value,label\n   *\n   */\n  const radioButtonChange = (event,{ value,label }) => {\n    setRadioButton({ value,label })\n  }\n\n  /**If Login mutation error */\n  if (error) return `Error! ${error}`\n\n\n  return (\n\n    <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as='h2' color='blue' textAlign='center'>\n          <Image src='/LogoMin.png' /> Please select a station\n        </Header>\n        <Form size='large' style={{ textAlign:'left' } } onSubmit={loginToStation}>\n          <Segment clearing stacked>\n            {  loading &&\n             <Segment loading basic>\n             </Segment>\n            }\n\n            {!loading && data.allStations && data.allStations.map(station =>  <Form.Field style={{ float: 'left', clear:'none',  marginRight:'10px' }} key={station.id}>\n              <Radio  label={station.location} value={station.id} checked={ radioButton.value === station.id} onChange={(event,value) => radioButtonChange(event,value)}>\n              </Radio>\n            </Form.Field>)}\n\n            <div style={{ clear:'both' }}></div>\n\n            {radioButton.value && renderPasswordInput(radioButton)\n            }\n\n\n          </Segment>\n        </Form>\n        <Divider horizontal>Or</Divider>\n        <Segment clearing stacked>\n          <Button content='Log in to personal page' icon='user'  size='large' color=\"teal\" fluid onClick = {() => history.push('/staffLogin')} />\n        </Segment>\n\n      </Grid.Column>\n\n    </Grid>\n\n\n  )\n\n\n}\n\nexport default StationLoginPage","import { gql } from '@apollo/client'\n\nexport const GET_SHIFT_REPORT = gql `\nquery fetchReport($id:String, $station: String, $flag: String){\n    getShiftReport(id: $id, station: $station, flag: $flag) {\n      endTime\n      id\n      shift\n      staffAndTime {\n        id\n        staff {\n          name\n        }\n        endTime\n        startTime\n      }\n      startTime\n      station {\n        location\n        id\n      }\n      tasks {\n        aircraft {\n          registration\n          id\n          costumer {\n            name\n          }\n        }\n        taskCategory\n        description\n        id\n        status\n        updates {\n          action\n          handoverId {\n            id\n            shift\n          }\n          note\n        }\n        \n      }\n    } \n}\n\n`\n\nexport const GET_REPORTLIST = gql ` \n  query fetchReportList ( $stationId: String,  ){\n    getReportList (stationId: $stationId){\n      startTime,\n      endTime,\n      id,\n      shift\n      station{\n        location\n      }\n    }\n  }\n\n\n`\n\nexport const GET_SHIFTREPORT_ID = gql `\n  query fetchReportbyShift($station: String!, $shift: String!, $date: Date!){\n    getShiftReportByShift(station: $station, shift: $shift, date: $date) {\n      startTime,\n      endTime,\n      id,\n      shift,\n      station{\n        location\n      }\n    }\n  }\n`\n/** */","import React from 'react'\nimport { Button, Menu } from 'semantic-ui-react'\nimport { useHistory } from 'react-router-dom'\n\n\nconst MenuBar = ({ activeItem, setActiveItem }) => {\n  const history = useHistory()\n  const handleMenuClick = (e, { name }) => setActiveItem( name )\n  const switchStation = () => {\n    localStorage.removeItem('stationKey')\n    sessionStorage.removeItem('stationKey')\n    history.push('/')\n  }\n\n  return (\n    <Menu inverted color=\"blue\" stackable >\n      <Menu.Item header>  Shift Reporting System </Menu.Item>\n      <Menu.Item name= \"lastShiftReport\"\n        active = {activeItem === 'lastShiftReport'}\n        onClick = {handleMenuClick}>\n      </Menu.Item>\n\n      <Menu.Item name= \"browseAllReports\"\n        active = {activeItem === 'browseAllReports'}\n        onClick = {handleMenuClick}>\n      </Menu.Item>\n\n      <Menu.Item name= \"startNewReport\"\n        active = {activeItem === 'startNewReport'}\n        onClick = {handleMenuClick}>\n      </Menu.Item>\n\n      <Menu.Item name= \"allOpenTasks\"\n        active = {activeItem === 'allOpenTasks'}\n        onClick = {handleMenuClick}>\n      </Menu.Item>\n\n      <Menu.Menu position='right'>\n        <Button primary\n          name='Switch Station '\n          active={activeItem === 'logout'}\n          onClick={switchStation}\n        >Switch Station</Button>\n      </Menu.Menu>\n    </Menu>\n\n\n\n\n  )\n\n\n}\n\nexport default MenuBar","import React from 'react'\nimport { Segment,Label,Icon } from 'semantic-ui-react'\nimport _ from 'lodash'\n\nconst TaskInfo = ({ task , handoverId }) => {\n  const updateOnthisHandover = _.find(task.updates, ['handoverId',{ 'id':handoverId }] )\n  return (\n    <Segment >\n      {\n        updateOnthisHandover.action !== 'TASK_CREATED' &&\n        <Label  size='mini' basic>Tasks from previous shifts</Label>\n      }\n      {\n        updateOnthisHandover.action === 'TASK_CREATED' &&\n        <Label circular size='mini' color = 'teal' basic>New</Label>\n      }\n\n      {\n        task.status ==='DEFERRED' &&\n        <><Label size='mini' color='red' basic> Deferred </Label><Label color='red'size='mini' basic> Action Required </Label></>\n      }\n      {\n        /**If task is  not created on last report this task is older open task that was completed on last shift */\n        updateOnthisHandover.action !== 'TASK_CREATED' && task.status ==='CLOSED' &&\n       <Label color='green' size='mini' basic> Completed </Label>\n      }\n      {\n        /**If open task and some action was performed on the last shift */\n        task.status ==='OPEN' && updateOnthisHandover &&\n        <>{\n          updateOnthisHandover.action !== 'TASK_CREATED' &&\n          <Label size='mini' basic> {updateOnthisHandover.action} </Label>\n        }\n        <Label color='purple'size='mini' basic> Open </Label></>\n      }\n\n      { /** If task is not new then show toggle update history button */\n        task.updates.length > 1 &&\n      <Label as=\"a\" size='mini' onClick = {() => {\n        /**TO BE IMPLEMENTED  */\n      }}> <Icon name =\"history\"/> Action History   </Label>\n      }\n\n      <Segment style= {{ 'paddingTop': 0,'paddingLeft': 0 }}basic compact>{task.description}   </Segment>\n    </Segment>)\n}\n\nexport default TaskInfo","import React from 'react'\nimport { Segment, Header, SegmentGroup } from 'semantic-ui-react'\nimport TaskInfo from './TaskInfo'\nimport  _ from  'lodash'\n\nconst GenericTaskPanel = ({ genericTasks,handoverId }) => {\n  if(genericTasks.legth === 0){\n    return null\n  }\n  return (\n    <>\n      <Segment stacked>\n\n        <Header color = \"blue\" as=\"h4\" block> {genericTasks[0].taskCategory} </Header>\n\n        <SegmentGroup >\n          { _.map(genericTasks,task =>\n            <TaskInfo key={task.id} task ={task} handoverId = {handoverId}/>\n          )}\n\n        </SegmentGroup>\n      </Segment>\n\n\n    </>\n\n  )\n}\n\nexport default  GenericTaskPanel","import React from 'react'\nimport { Segment, Header, SegmentGroup ,Icon } from 'semantic-ui-react'\nimport TaskInfo from './TaskInfo'\nimport  _ from  'lodash'\n\nconst AircraftTaskPanel = ({ aircraftTasks ,handoverId }) => {\n  if(aircraftTasks.legth === 0){\n    return null\n  }\n  return (\n\n    <Segment stacked>\n      {_.map(aircraftTasks,(aircrafts,key_costumerName) =>\n        <SegmentGroup   key ={key_costumerName}>\n\n          <Header color = \"blue\" as=\"h4\" block  > <Icon name = 'plane'/> Work Performed for {key_costumerName}</Header>\n\n\n          { _.map(aircrafts,((tasks,key_aircraft) =>\n            <SegmentGroup key={key_aircraft}>\n              <Segment  >\n                {key_aircraft}\n              </Segment>\n              {_.map(tasks,task =>\n                <TaskInfo key={task.id} task ={task} handoverId={handoverId}/>\n              )}\n\n            </SegmentGroup>))\n          }\n\n        </SegmentGroup>\n\n\n\n      )\n      }</Segment>\n  )\n}\n\nexport default AircraftTaskPanel","import React from 'react'\nimport { Segment, Table } from 'semantic-ui-react'\n\nconst StaffWorkTime = ({ timesheets }) => {\n  return(\n    <Segment>\n      <Table celled >\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Staff</Table.HeaderCell>\n            <Table.HeaderCell>Start Time</Table.HeaderCell>\n            <Table.HeaderCell>End TIme</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {timesheets.map(timesheet =>\n            <Table.Row key={timesheet.id}>\n              <Table.Cell>{timesheet.staff.name}</Table.Cell>\n              <Table.Cell>{timesheet.startTime.substring(10)}</Table.Cell>\n              <Table.Cell>{timesheet.endTime.substring(10)}</Table.Cell>\n            </Table.Row>\n          )}\n        </Table.Body>\n\n      </Table>\n\n    </Segment>\n\n  )\n\n}\n\nexport default StaffWorkTime","import React from 'react'\nimport GenericTaskPanel from './GenericTasksPanel'\nimport AircraftTaskPanel from './AircraftTasksPanel'\nimport { SegmentGroup, Segment, Header } from 'semantic-ui-react'\nimport _ from 'lodash'\nimport StaffWorkTime from './StaffWorkTime'\n\n\nconst ShiftReport = ({ reportData }) => {\n\n  if(!reportData){\n    return<Segment>No reports found</Segment>\n  }\n  const tasksByCat = _.groupBy(reportData.tasks, task => task.taskCategory)\n  const tasks = _.mapValues(\n    tasksByCat,(cat,k) =>\n      k === 'AIRCRAFT'?\n        _.chain(tasksByCat.AIRCRAFT)\n          .groupBy(taskcat  =>  taskcat.aircraft.costumer.name)\n          .mapValues( costumer => {\n            return(_.groupBy(costumer, task => task.aircraft.registration))\n          })\n          .value()\n        :cat\n  )\n\n\n  return (\n    <SegmentGroup>\n      <Segment basic clearing>\n        <Header floated =\"left\"> Shift Report from {reportData.shift} shift <span><h5>({reportData.startTime.substring(10)} - {reportData.endTime.substring(10)})</h5></span></Header>\n        <Header floated =\"right\" as=\"h5\">  {reportData.startTime.substring(10,0)}<span><br/>{reportData.station.location}</span> </Header>\n      </Segment>\n\n      <StaffWorkTime timesheets = {reportData.staffAndTime} />\n\n      {_.map(tasks, (tasksByType,key_taskType) => {\n        if(key_taskType === 'AIRCRAFT') return (\n          <AircraftTaskPanel key={key_taskType} aircraftTasks={ tasksByType} handoverId= {reportData.id}/>\n\n        )\n\n        return (\n          <GenericTaskPanel key = {key_taskType} genericTasks= {tasksByType} handoverId= {reportData.id}/>\n        )\n      }\n      )}\n\n\n    </SegmentGroup>\n  )\n}\n\nexport default ShiftReport","import { createContext } from 'react'\n\nconst Context = createContext( {\n  lastShiftReport: [],\n  station: []\n})\n\nexport default Context","const reducer = (state,action) => {\n  switch(action.type) {\n  case 'ADD_LASTSHIFTREPORT':\n    return {\n      ...state, lastShiftReport: action.payload\n    }\n  case 'INIT_STATION':\n    return {\n      ...state, station: action.payload\n    }\n  default:\n    return state\n  }\n}\n\nexport default reducer","import React from 'react'\r\nimport { useField, useFormikContext } from 'formik'\r\nimport { DateTimeInput } from 'semantic-ui-calendar-react'\r\nimport { Form, Label, Segment, Checkbox, Input } from 'semantic-ui-react'\r\n\r\n\r\nexport const DateInputField = ({ label,...props }) => {\r\n  const { setFieldValue,setFieldTouched } = useFormikContext()\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <Form.Field width = '4' >\r\n      {label &&\r\n      <label>{label}</label>}\r\n\r\n      <DateTimeInput  error = {meta.touched && meta.error?true:false} popupPosition='right center'  {...field} {...props} dateTimeFormat= 'DD-MM-YYYY HH:mm' closable onBlur= {() => {\r\n        setFieldTouched(field.name,true)\r\n      }} onChange={(event,{ value }) => {\r\n        setFieldValue(field.name, value)\r\n      }}\r\n      preserveViewMode={false}/>\r\n\r\n      {meta.touched && meta.error ?\r\n        <Label pointing prompt>\r\n          {meta.error}\r\n        </Label>:''}\r\n    </Form.Field>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport const InputField = ({ width,...props }) => {\r\n  const [field,meta] = useField(props)\r\n  return (\r\n    <>\r\n      <Form.Field error= { meta.touched && meta.error ? true: false} width={width} >\r\n        <label>{props.inputlabel?props.inputlabel:'' }</label>\r\n        <Input   {...field} {...props} />\r\n        { props.type !== 'hidden' && meta.touched && meta.error &&\r\n        <Label pointing prompt>\r\n          {meta.error}\r\n        </Label>\r\n        }\r\n\r\n      </Form.Field>\r\n\r\n    </>\r\n  )\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport const AircraftCheckBox = ({ label,children,checked,...props }) => {\r\n  return(\r\n    <Segment\r\n      style= {{ display:checked?'block':'inline-block'  }}>\r\n      <Checkbox checked={checked} {...props} toggle/>\r\n      <label style={{ display: 'inline-block' , marginLeft: '5px', verticalAlign: 'super' }}> {label.toUpperCase()} </label>\r\n      {children}\r\n    </Segment>\r\n  )}\r\n\r\nexport const TextAreaField = ({ label,...props }) => {\r\n  const [field,meta] = useField(props)\r\n  return (\r\n    <Form.TextArea  error = { meta.touched && meta.error} {...field} {...props}/>\r\n  )}\r\n","import { isNumber } from 'lodash'\n\n/**\n *\n * @param {int OR String } dateToFormat  supported string formats :YYYY-MM-DDTHH:MM:SS.Z\n * @returns Date format DD-MM-YYYY HH:MM\n */\nexport const formatDate = (dateToFormat) => {\n  if(!dateToFormat){\n    return null\n  }\n  if(isNaN(dateToFormat)){\n    const regexFormats = [\n      /^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z)?$/,\n    ]\n    const dateFormat = regexFormats.findIndex((regex) => {\n      if (dateToFormat.match(regex)){\n        return true\n      }\n      return false\n    })\n\n    switch (dateFormat)\n    {\n    case 0:\n    { const splitT = dateToFormat.split('T')\n      const date= splitT[0]\n      const time= splitT[1]\n\n      const dateSplit = date.split('-')\n      const timeSplit = time.split('.')[0].split(':')\n\n      return dateSplit[2]+'-'+dateSplit[1]+'-'+dateSplit[0]+ ' '+ timeSplit[0] +':'+ timeSplit[1]\n    }\n\n    default:\n      return null\n    }\n  }\n\n  const date = new Date(dateToFormat)\n  return (`${(date.getDate()).toString().padStart(2,0)}-${(date.getMonth()+1).toString().padStart(2,0)}-${date.getFullYear()} ${(date.getHours()).toString().padStart(2,0)}:${(date.getMinutes()).toString().padStart(2,0)}`)\n\n}\n\n/**\n *\n * @param {int or date format} date javascript date int or DD-MM-YYYY\n * @param {Double} duration duration to operate\n * @param {String} unit 'd for days, h for hours , m for minutes'\n * @param {String} operation 'add or sub'\n * @returns {string} Date format DD-MM-YYYY HH:MM\n */\nexport const operateDate = (date, duration, unit , operation) => {\n  if(!date){\n    return null\n  }\n  let ndate\n  if(!isNumber(date)){\n    const splitDateTime = date.split(' ')\n    const splitDate = splitDateTime[0].split('-')\n    const newDate =`${splitDate[2]}-${splitDate[1]}-${splitDate[0]} ${splitDateTime[1]}`\n\n    ndate = Date.parse(newDate)\n\n  }\n  else{\n    ndate = new Date(date)\n  }\n\n  switch (unit){\n  case 'd':\n    if(operation === 'add') return  formatDate((ndate + (duration * 24 * 60 * 60 * 1000)))\n    if(operation === 'sub') return  formatDate((ndate - (duration * 24 * 60 * 60 * 1000)))\n    break\n  case 'h':\n    if(operation === 'add') return formatDate((ndate + (duration * 60 * 60 * 1000)))\n    if(operation === 'sub') return  formatDate((ndate - (duration * 60 * 60 * 1000)))\n    break\n  case 'm':\n    if(operation === 'add') return formatDate((ndate + (duration * 60 * 1000)))\n    if(operation === 'sub') return  formatDate(ndate - (duration * 60 * 1000))\n    break\n  default:\n    return formatDate(ndate)\n  }\n}\n\n/**\n *\n * @param {String} stringDate format DD-MM-YYYY HH:MM\n * @returns {Int} Javascript date int\n */\nexport const toDate = (stringDate) => {\n  let ndate\n  if(!isNumber(stringDate)){\n    const splitDateTime = stringDate.split(' ')\n    const splitDate = splitDateTime[0].split('-')\n    const newDate =`${splitDate[2]}-${splitDate[1]}-${splitDate[0]} ${splitDateTime[1] || '00' }:${splitDateTime[2] | '00'}`\n\n    ndate = Date.parse(newDate)\n  }\n  else{\n    ndate = new Date(stringDate)\n  }\n\n  return ndate\n\n}\n\nexport const getWeekNumber= (dt) => {\n  var tdt = new Date(dt.valueOf())\n  var dayn = (dt.getDay() + 6) % 7\n  tdt.setDate(tdt.getDate() - dayn + 3)\n  var firstThursday = tdt.valueOf()\n  tdt.setMonth(0, 1)\n  if (tdt.getDay() !== 4)\n  {\n    tdt.setMonth(0, 1 + ((4 - tdt.getDay()) + 7) % 7)\n  }\n  return 1 + Math.ceil((firstThursday - tdt) / 604800000)\n}\n\n/**\n* Returns the week start date(Monday) for given year and weeknumber\n* @param {Int} w between 1-52/53\n* @param {Int} y year\n* @returns {Date}\n*/\nexport const getDatefromWeek = (w,y) => {\n  const simpleStartDate = new Date(Date.UTC(y,0,1 + (w-1) *7))\n  const dayOfWeek = simpleStartDate.getDay()\n\n  let IsoWeekStart = simpleStartDate\n  if(dayOfWeek <=4) {\n    IsoWeekStart.setDate(simpleStartDate.getDate() - simpleStartDate.getDay()+1)\n  }else {\n    IsoWeekStart.setDate(simpleStartDate.getDate()+8 - simpleStartDate.getDay())\n  }\n  return IsoWeekStart\n}\n\nexport const getMonthInt= (name) => {\n  const months = ['january','february','march','april','may','june','july','august','september','october','november','december']\n  const ind = months.findIndex((month) => {\n    return month === name.toLowerCase()\n  })\n  return ind\n}\n\n/**\n  * Positive prop gets month from  beginning of year\n  * Negative index gets month from end  of year\n  * @param  {Int} monthInt Month Number\n  */\nexport const getMonthName = (monthInt) => {\n  const months = new Proxy(['January','February','March','April','May','June','July','August','September','October','November','December'], {\n    get(target, prop) {\n      if (!isNaN(prop)) {\n        prop = parseInt(prop, 10)\n        if (prop < 0) {\n          prop += target.length\n        }\n      }\n      return target[prop]\n    }\n  })\n  return months[monthInt]\n}\n\n/**\n * Retrive months form given month duration including current month\n *\n *  */\nexport const getMonthOptions = (duration) => {\n  /**Default Duration is 4 months */\n  if(!duration ){\n    duration = 4\n  }\n\n  const today = new Date()\n  const currentMonth = today.getMonth()\n\n  const options = [...new Array(duration)].map((v,i) => {\n    return (\n      { key:i ,\n        text: getMonthName(currentMonth - i), value: currentMonth -1 < 0 ? 11 + currentMonth -i  : currentMonth -i }\n    ) })\n  return options\n}\n\n/**Retrieve all weeks that falls within given month duration including current month*/\nexport const getWeekOptions = (duration) => {\n  /**Default Duration is 4 months */\n  if(!duration ){\n    duration = 4\n  }\n  const today = new Date()\n  const currentMonth = today.getMonth()\n  let dYear = today.getFullYear()\n  const lastYearWeekNum = getWeekNumber( new Date(dYear-1,11,28))\n  const lastRetriveable  = getWeekNumber(new Date(dYear, currentMonth - duration ,1))\n  let currentWeek = getWeekNumber(today)\n  let options = []\n\n  let week = currentWeek\n  while ( week !== lastRetriveable-1  ){\n    const option = { key: week, text: week, value: week }\n    options.push (option )\n    week = week -1\n    if(week === 0) {\n      week = lastYearWeekNum\n    }\n  }\n  return options\n\n}\n\n","import { formatDate, toDate } from '../../../utils/DateHelper'\r\nimport _ from 'lodash'\r\n\r\n\r\nexport const validateStaffsField= (value) => {\r\n  let error\r\n  /**\r\n   * If np staff is set\r\n   */\r\n  if(!value ||  !value.length ){\r\n    error = 'Report must have staff information, please add staff'\r\n    return error\r\n  }\r\n  /**\r\n   * If at least one staff is set\r\n   */\r\n  if (value && value.length){\r\n    error = _.mapValues(value, staff => {\r\n      let errList = validateStaffInputField(staff)\r\n      /**\r\n       * If the staff input fields have error other than signOffKey\r\n       */\r\n      if(!_.isEmpty(errList)){\r\n        errList = { ...errList,  'signOffKey':'Please fix staff inputs' }\r\n        return errList\r\n      }\r\n\r\n      /**\r\n       * If staff is not signed off\r\n       */\r\n      if (!staff.signOffKey ){\r\n        errList = { ...errList,  'signOffKey':'Each staff must sign off' }\r\n      }\r\n\r\n\r\n      return errList\r\n\r\n    }) }\r\n\r\n  /**\r\n     * Removing the empty key value pairs from error\r\n     */\r\n  _.mapKeys(error,(v,k) => {\r\n    if(_.isEmpty(v)) {\r\n      delete error[k]\r\n    }\r\n  })\r\n\r\n  return error\r\n\r\n\r\n}\r\n\r\nexport const validateStaffInputField = (staff) => {\r\n\r\n  let error\r\n  if(!staff) {\r\n    return undefined\r\n  }\r\n  /**\r\n   * If staff name is not set\r\n   */\r\n  if(!staff.name ){\r\n    error = { ...error, 'name':'Staff name is required' }\r\n  }\r\n  /**\r\n   * Validating starttime and endtime\r\n   * */\r\n  error = { ...error,...validateStartEndTime(staff.startTime,staff.endTime) }\r\n\r\n  return error\r\n}\r\n\r\n\r\nexport const validateStartEndTime = (startTime,endTime,startDate)  => {\r\n\r\n  let error\r\n  /**\r\n   * If start time is not set\r\n   */\r\n  if(!startTime){\r\n    error = { ...error, 'startTime':'Start time is required' }\r\n  }\r\n  /**\r\n   * If end time is not set\r\n   */\r\n  if(!endTime){\r\n    error = { ...error,  'endTime':'End time is required' }\r\n  }\r\n\r\n  /**\r\n   * Id starttime is not correct format DD-MM-YYY HH:MM\r\n   */\r\n  if(!startTime.match(/^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-\\d\\d\\d\\d (0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$/)){\r\n    error = { ...error,  'startTime':'Start time should be on format DD-MM-YYYY HH:MM' }\r\n  }\r\n\r\n  /**\r\n   * Id starttime is not correct format DD-MM-YYY HH:MM\r\n   */\r\n  if(!endTime.match(/^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-\\d\\d\\d\\d (0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$/)){\r\n    error = { ...error,  'endTime':'End time should be on format DD-MM-YYYY HH:MM' }\r\n  }\r\n\r\n  /**\r\n   * If starttime is earlier than 24H\r\n   */\r\n  if( !startDate && toDate(startTime) + (24 *3600 * 1000) <= Date.now()){\r\n    error = { ...error,  'startTime':'Start time should be within last 24 hours' }\r\n  }\r\n\r\n  if(startDate && new Date(startDate).getDate() !== new Date(toDate(startTime)).getDate()){\r\n    error = { ...error,  'startTime':`Start time should be on ${formatDate(new Date(startDate)).split(' ')[0]}` }\r\n  }\r\n\r\n\r\n  /**\r\n   * If starttime isgreater than end time\r\n   */\r\n  if( toDate(startTime) >= toDate(endTime)){\r\n    error = { ...error,  'startTime':'Start time cannot be later than endtime' }\r\n  }\r\n\r\n  /**\r\n   * If starttime is set to end time\r\n   */\r\n\r\n  if( toDate(startTime) > Date.now()){\r\n    error = { ...error,  'startTime':'Start time cannot be on future' }\r\n  }\r\n  /**\r\n   * If endtime is set in future\r\n   */\r\n\r\n  if( toDate(endTime) > Date.now()){\r\n    error = { ...error,  'endTime':'End time cannot be on future' }\r\n  }\r\n\r\n  return error\r\n\r\n}\r\n\r\nexport const validateTasks = (tasks) => {\r\n  if(!tasks) return null\r\n  const error = _.mapValues(tasks,typedTasks => {\r\n    const taskErrors = _.mapValues( typedTasks,task => {\r\n      /**\r\n       * Validating individual tasks\r\n       */\r\n      const taskError = validateTaskField(task)\r\n      return taskError\r\n    })\r\n\r\n    /**\r\n     * Removing empty nested objects\r\n     */\r\n    return(_.pickBy(taskErrors,_.identity))\r\n\r\n\r\n\r\n  })\r\n\r\n\r\n  /**\r\n   * Removing empty key value pair\r\n   */\r\n  _.mapKeys(error,(v,k) => {\r\n    if(_.isEmpty(v)) {\r\n      delete error[k]\r\n    }\r\n    //console.log(k)\r\n  })\r\n\r\n  return error\r\n}\r\n\r\n\r\n\r\n\r\nconst validateTaskField = (task) => {\r\n  let error = null\r\n  /**\r\n   * If task status is open\r\n   */\r\n  if(task.status === 'DEFERRED') {\r\n    /**\r\n     * If there is no action on DEFERRED task\r\n     */\r\n    if(!task.action || task.action === 'NOTES_ADDED'){\r\n      console.log(task)\r\n      error = { ...error, action:'Action was requested on this task. Please perform a action. ' }\r\n    }\r\n  }\r\n\r\n  if(!task.status && !task.action){\r\n    error = { ...error, action: 'Task must have one of the following status' }\r\n  }\r\n\r\n  /**\r\n   * If task description is empty or spaces\r\n   */\r\n  if((!task.description || task.description.trim() === '')){\r\n    error= { ...error,description:'Please add task description' }\r\n  }\r\n  return error\r\n\r\n\r\n}\r\n\r\nexport const validateEmail = (email) => {\r\n\r\n  if(!email) {\r\n    return 'Email is required'\r\n  }\r\n  if(!email.match(/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/)){\r\n    return 'Incorrect email format'\r\n  }\r\n\r\n}\r\n\r\n\r\nexport const validateName = (name) => {\r\n\r\n  if(!name || name.trim === '') return 'Full name is required'\r\n  if(name.length < 4){\r\n    return 'Name must be at least 4 character long'\r\n  }\r\n\r\n\r\n}","import React from 'react'\r\nimport { Field, getIn } from 'formik'\r\nimport {  Label } from 'semantic-ui-react'\r\n\r\nconst ErrorMessage = ({ name,pointing }) => (\r\n  <Field\r\n    name={name}>\r\n    {({ form }) => {\r\n\r\n      const error = getIn(form.errors, name)\r\n      const touch = getIn(form.touched, name)\r\n      return touch && error && typeof error === 'string' ?\r\n        <Label pointing={pointing} style={{ height:'fit-content' }}color='red'  basic>{error}</Label> : null\r\n    }}\r\n  </Field>\r\n)\r\n\r\nexport default ErrorMessage","import { gql } from '@apollo/client'\nexport const SIGN_OFF_SHIFT = gql`\n  mutation signOff($startTime: String!, $break:Int, $endTime:String!, $username: String, $password:String, $idCardCode: String, $additionalAction: String, $id:String, $email: String, $name: String ){\n    signOffTimeSheet(\n      startTime: $startTime, \n      endTime:$endTime, \n      break: $break,\n      username: $username, \n      password: $password , \n      additionalAction: $additionalAction,\n      email: $email,\n      name: $name,\n      idCardCode: $idCardCode\n      id: $id\n      ) {\n        name,\n        value,\n        break,\n        startTime,\n        endTime,\n        id\n      }\n  }`\nexport const UPDATE_TIMESHEET = gql`\n mutation updateTimeSheet($id: String, $startTime: String , $endTime: String, $station: String, $shift : String, $break: Int, $staff: String, $remarks: [RemarkInput], $handover: String){\n  addToTimeSheet(\n      id: $id\n      startTime: $startTime , \n      endTime: $endTime,\n      station: $station, \n      shift: $shift,  \n      staff: $staff\n      break: $break,\n      remarks:$remarks,\n      handover:$handover,\n  )\n    {\n      id\n      startTime\n      status\n      date\n      endTime\n      break\n      remarks{\n        by\n        date\n        edit\n        text\n        title\n      }\n      staff{\n        id\n        name\n        reqHours\n      }\n      shiftReport {\n        shift\n        id\n        station {\n          id\n          location\n        }\n      }\n\n      shift\n      station{\n        id\n        location\n      }\n\n  } \n  \n\n }\n`\nexport const APPROVE_TIMESHEET = gql`\n mutation approveTimeSheet($id: String!, $status: String!){\n   approveTimeSheet(\n     id: $id,\n     status: $status\n   ){\n     id \n     status \n     remarks{\n      by\n      date\n      edit\n      text\n      title\n    }\n   }\n }\n`\nexport const DELETE_TIMESHEET = gql`\n mutation deleteTimeSheet($id: String!){\n   deleteTimeSheet(\n     id: $id,    \n   ){\n     status\n     message\n   }\n }\n`\nexport const REQUEST_CLARIFICATION = gql`\n mutation requestClarification($id: String!, $clearify: String){\n  requestClarification(\n     id: $id,\n     clearify:$clearify,    \n   ){\n    remarks{\n      by\n      date\n      edit\n      text\n      title\n    }\n   }\n }\n`","import React, { useState, useEffect } from 'react'\nimport { Modal,Grid,Header,Form ,Divider,Segment ,Icon,Button,Message, FormGroup, FormField, Dimmer,Loader } from 'semantic-ui-react'\nimport { DateInputField, InputField } from './FormFields'\nimport { operateDate, formatDate } from '../../../utils/DateHelper'\nimport { DateTimeInput } from 'semantic-ui-calendar-react'\nimport { useFormikContext, Formik } from 'formik'\nimport { validateEmail, validateName, validateStartEndTime } from './validator'\nimport { SIGN_OFF_SHIFT } from '../../../mutations/timeSheetMutation'\nimport { useMutation } from '@apollo/client'\nimport _ from 'lodash'\n//import { remove } from '../../../../../backend/Src/models/Staff'\n\n\nconst  StaffEditModel = ({ setOpen,open, fieldName, removeClick ,removeStaff ,setRemoveStaff }) => {\n\n  const{ getFieldMeta,setFieldValue } = useFormikContext()\n\n  const [signOff,{ loading, error, data }] = useMutation(SIGN_OFF_SHIFT,{\n    onError: (error) => {\n      console.log(error)\n    }\n  })\n\n  const shiftStartTime = getFieldMeta(`${fieldName}.startTime`).value\n  const shiftEndTime = getFieldMeta(`${fieldName}.endTime`).value\n  const ibreakt = getFieldMeta(`${fieldName}.break`).value\n  const [notifyResult,setNotifyResult] = useState('')\n  const [username,setUsername] = useState('')\n  const [password,setPassword] = useState('')\n  const [startTime,setStartTime] = useState(shiftStartTime)\n  const [endTime,setEndTime] = useState(shiftEndTime)\n  const [breakt,setBreakt] = useState(ibreakt)\n\n  useEffect(() => {\n    setStartTime(shiftStartTime)\n    setEndTime(shiftEndTime)\n  },[shiftEndTime, shiftStartTime])\n\n\n  useEffect (() => {\n    /**If the staff sign off is not sucessfull */\n    if(error){\n      setNotifyResult({ type: 'error', message:`Sorry, ${error.message}` })\n    }\n    /**\n     * If the staff signoff is successFull\n     */\n    if(data && data.signOffTimeSheet != null ){\n\n      if(removeStaff) {\n        removeClick()\n        setRemoveStaff(false)\n        setOpen(false)\n\n      }else {\n        setFieldValue(`${fieldName}.startTime`,data.signOffTimeSheet.startTime)\n        setFieldValue(`${fieldName}.endTime`,data.signOffTimeSheet.endTime)\n        setFieldValue(`${fieldName}.signOffKey`,data.signOffTimeSheet.value)\n        setOpen(false)\n\n      }\n\n\n\n\n\n    }\n\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[error, data])\n\n  const submit = async (values) => {\n    let signOffData\n    signOffData = { startTime:values.startTime ,endTime: values.endTime ,break: values.breakt, username: username, password: password, additionalAction: removeStaff?'remove':'update',id:getFieldMeta(`${fieldName}`).value.id }\n\n    console.log(signOffData)\n    await signOff({ variables:signOffData })\n  }\n\n  const renderAlert = () => {\n    if(!notifyResult) return null\n    return(\n      <Message\n        success = {notifyResult.type === 'success'}\n        error = {notifyResult.type === 'error'}\n        onDismiss = {() => setNotifyResult('')\n        }\n      > {notifyResult.message}\n      </Message>)\n\n\n  }\n\n  if(loading){\n    return<Dimmer active inverted>\n      <Loader active inverted>Verifying</Loader>\n    </Dimmer>\n  }\n\n  return (\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {open}\n      onClose= {() => {\n\n        setNotifyResult(false)\n        setOpen(false)}}\n      onOpen= {() => setOpen (true)}\n    >\n      <Modal.Header>{getFieldMeta(`${fieldName}.name`).value} </Modal.Header>\n      <Modal.Content>\n        {notifyResult &&\n         renderAlert()\n        }\n        <Formik\n          enableReinitialize\n          initialValues = {{\n            startTime: startTime,\n            endTime: endTime,\n            breakt: breakt,\n            username:'',\n            password:'',\n            email:'',\n            fullname:'',\n            resetEmail:''\n          }}\n\n          validate = {values => {\n            let errors = {}\n            errors = { ...errors,...validateStartEndTime(values.startTime,values.endTime)  }\n            return errors\n          } }\n\n          onSubmit = {(values) =>\n          {\n            submit(values)}\n          }\n\n\n        >\n\n\n          {({ values,handleSubmit,errors,touched }) =>\n\n            <Form size='large' onSubmit = { handleSubmit} >\n              <Form.Group >\n\n                < DateInputField\n                  label= 'Start Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name ='startTime'\n                  maxDate = {operateDate(Date.now(),30,'m','sub')}\n                  minDate= {operateDate(Date.now(),20,'h','sub')}\n                  onChange = {(e,{ value }) => {\n                    setStartTime(value)}\n                  }\n                />\n\n\n                < DateInputField\n                  label = 'End Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name='endTime'\n                  maxDate = {formatDate(Date.now())}\n                  minDate= {operateDate(startTime,20,'m','add')}\n                  onChange = {(e,{ value }) => {\n                    setEndTime(value)}\n                  }/>\n\n                <InputField\n                  inputlabel= 'Break'\n                  label = 'Minutes '\n                  labelPosition='right corner'\n                  name= 'breakt'\n                  type='number'\n                  min='0'\n                  onChange = {(e,{ value }) => {\n                    setBreakt(value)}\n                  }>\n                </InputField>\n\n\n\n              </Form.Group>\n\n              <Header as='h3' color='red' textAlign='center'>\n                {removeStaff?'Enter credentials to confirm remove.' : 'Enter credential to save changes'}\n\n              </Header>\n\n\n              <>\n                <Segment >\n\n                  <Grid columns={2} stackable >\n                    <Divider vertical>Or</Divider>\n                    <Grid.Row verticalAlign='middle'>\n                      <Grid.Column>\n                        <Grid.Row style={{ textAlign:'center' }}>\n                          <Header as ='h5' icon>\n                            <Icon name='sign in alternate' />\n                    Use Credentials\n                          </Header>\n                        </Grid.Row>\n                        <Grid.Row>\n                          <Form.Group>\n                            <Form.Input label='Username' onChange= {(e,{ value }) => setUsername(value)}></Form.Input>\n                            <Form.Input label= 'Password' type='password' onChange= {(e,{ value }) => setPassword(value)}></Form.Input>\n                          </Form.Group>\n                          <Form.Field style={{ textAlign:'center' }}>\n                            <Button type='submit' primary > Sign </Button>\n                          </Form.Field>\n                        </Grid.Row>\n                      </Grid.Column>\n\n                      <Grid.Column textAlign='center'>\n                        <Grid.Row >\n                          <Header icon>\n                            <Icon name='barcode' size='massive' />\n                  Use IdCard\n                          </Header>\n                        </Grid.Row>\n                        <Grid.Row><Button primary>Scan</Button></Grid.Row>\n\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n\n                </Segment>\n\n              </>\n            </Form>}\n        </Formik>\n      </Modal.Content>\n\n    </Modal>\n\n\n  )\n}\n\nexport default StaffEditModel","import React, { useState } from 'react'\nimport { Label, Form, Button, Segment } from 'semantic-ui-react'\nimport { InputField, DateInputField } from './FormFields'\nimport { Field } from 'formik'\nimport { formatDate, operateDate } from '../../../utils/DateHelper'\nimport StaffEditModel from './StaffEditModel'\n\nconst StaffForm = ({ staff,fieldName,values,index,remove }) => {\n  const [open, setOpen] = useState(false)\n  const [removeStaff, setRemoveStaff] = useState(false)\n\n  if(!staff) return null\n  return(\n    <Segment >\n      {staff.signOffKey &&\n      <Label attached='top left' size='mini' basic color=\"grey\" >Signed Off </Label> }\n      <Form.Group  >\n        <InputField  width= {4} readOnly = {staff.signOffKey } name={`${fieldName}.name`}></InputField>\n        < DateInputField\n          readOnly = {(staff.signOffKey && !staff.changing) }\n          maxDate = {operateDate(Date.now(),30,'m','sub')}\n          minDate= {operateDate(Date.now(),20,'h','sub')}\n          name = {`${fieldName}.startTime`}/>\n\n        < DateInputField\n          readOnly= {(staff.signOffKey  && !staff.changing) }\n          maxDate = {formatDate(Date.now())}\n          minDate= {operateDate(values.startTime,20,'m','add')}\n          name = {`${fieldName}.endTime`}/>\n\n        <Field type='hidden' value=\"\" name={`${fieldName}.signOffKey`}></Field>\n        <Field type='hidden' value=\"\" name={`${fieldName}.break`}></Field>\n\n        <Button\n          style={{ height:'fit-content' }}\n          type='button'\n          circular\n          icon='cancel'\n          basic\n          onClick = {() => {\n            setRemoveStaff(true)\n            setOpen(true)\n          }}\n        />\n\n\n        <>\n          <Button\n            style={{ height:'fit-content' }}\n            type='button'\n            inverted\n            color='red'\n            size=\"small\"\n            onClick = {() => {\n              setOpen(true)\n            }\n            }> Change</Button>\n        </>\n\n      </Form.Group>\n\n      <StaffEditModel\n        setOpen={setOpen}\n        open={open}\n        startTime ={values.staffs[index].startTime}\n        endTime ={values.staffs[index].endTime}\n        breakt = {values.staffs[index].break}\n        fieldName = {fieldName}\n        removeStaff = {removeStaff}\n        setRemoveStaff= {setRemoveStaff}\n        removeClick = {() => remove(index)}\n      />\n\n    </Segment>\n  )}\n\nexport default StaffForm","import React, { Fragment } from 'react'\nimport { FieldArray } from 'formik'\nimport ErrorMessage from './ErrorMessage'\nimport { Segment, Button,Icon,Header } from 'semantic-ui-react'\nimport StaffForm from './StaffForm'\n\nconst StaffForms = ({ values ,addStaffOpen }) => {\n\n  return (\n    <>\n      <FieldArray name=\"staffs\">\n        {({ remove, push, replace }) => (\n          <Fragment >\n            <Header as=\"h3\">Staffs</Header>\n            <Segment.Group >\n              { values.staffs.length >0 && values.staffs.map((staff,index) =>\n                <StaffForm\n                  key={index}\n                  index ={index}\n                  staff={staff}\n                  fieldName={`staffs.${index}`}\n                  values= {values}\n                  remove= {remove}\n                ></StaffForm>\n              )\n              }\n            </Segment.Group>\n            <Button type='button' icon\n              primary onClick={ () =>\n                addStaffOpen(true)\n                /*push({ name:'',startTime:'',endTime:'' ,signOffKey:'' })*/}>< Icon name=\"plus circle\"/> Add </Button>  <ErrorMessage name='staffs' pointing='left'/>\n          </Fragment>\n        )}\n\n      </FieldArray>\n\n    </>\n\n  )\n}\n\nexport default StaffForms","import React, { useState } from 'react'\nimport { useFormikContext } from 'formik'\nimport { Label, Icon, Divider,Form,Button,Accordion } from 'semantic-ui-react'\nimport ErrorMessage from './ErrorMessage'\nimport { TextAreaField } from './FormFields'\n\n\nexport const TaskForm = ({ label,onRemove,disabled,children,name, ...props }) => {\n  const { setFieldValue,getFieldProps,setFieldTouched, getFieldMeta } = useFormikContext()\n\n  const removeButtonClick = ( e ) => {\n    e.preventDefault()\n    onRemove()\n  }\n\n  const [noteFieldVisibile, setNoteFieldVisibile] = useState(false)\n\n  const taskAction = getFieldProps(`${name}.action`).value\n  const taskStatus = getFieldProps(`${name}.status`).value\n  const taskNotes =  getFieldProps(`${name}.newNote`).value\n\n  const actionButtonClick = (e,value) => {\n    e.preventDefault()\n    setFieldValue(`${name}.action`,value)\n    if(noteFieldVisibile && !taskNotes){\n      toggleNotes()\n    }\n  }\n\n  const actionOpenCheckBoxClick = (e,checked) => {\n    setFieldTouched(`${name}.description`,true)\n    if(!getFieldMeta(`${name}.description`).error){\n\n      if(checked){\n\n        setFieldValue(`${name}.action`,'OPEN')\n\n      }else{\n        setFieldValue(`${name}.action`,'')\n      }\n    }\n    else{\n      setFieldTouched(`${name}.description`)\n    }\n  }\n\n  const actionCloseCheckBoxClick = (e,checked) => {\n    setFieldTouched(`${name}.description`,true)\n    if(!getFieldMeta(`${name}.description`).error){\n      if(checked){\n        setFieldValue(`${name}.action`,'CLOSED')\n      }else{\n        setFieldValue(`${name}.action`,'')\n      }\n    }\n    else{\n      setFieldTouched(`${name}.description`)\n    }\n\n  }\n\n  const actionDeferCheckBoxClick = (e,checked) => {\n    setFieldTouched(`${name}.description`,true)\n    if(!getFieldMeta(`${name}.description`).error){\n      if(checked){\n        setFieldValue(`${name}.action`,'DEFERRED')\n      }else{\n        setFieldValue(`${name}.action`,'OPEN')\n      }\n    }\n    else{\n      setFieldTouched(`${name}.description`)\n    }\n\n\n  }\n\n  const undoButtonClick = () => {\n    setFieldValue(`${name}.action`,'')\n    if(taskNotes) {\n      setNoteFieldVisibile(true)\n    }\n  }\n\n  const toggleNotes = () => {\n    if(noteFieldVisibile){\n      const notes= taskNotes.trim()\n      setNoteFieldVisibile(false)\n      setFieldValue(`${name}.newNote`,notes)\n    }else{\n      setNoteFieldVisibile(true)\n    }\n\n  }\n\n  const TaskStatusBar = () => {\n\n    if( taskAction && taskAction !== 'NOTES_ADDED'){\n      return (\n        <div style={{ padding:'0.3125em 1.5em' }}>\n          <Label  size='mini' basic >Task from previous shifts </Label>\n\n          {taskNotes && taskNotes.trim() && <Label size='mini' basic color=\"blue\" as='a' onClick = {() => toggleNotes() }>Notes Added </Label>}\n          <Label size='mini' basic color=\"green\" >{taskAction} </Label>\n\n          <Label as=\"a\" size='mini' basic color='yellow'\n            onClick = {(e) => undoButtonClick(e)}> <Icon name='undo'/> Undo Action </Label>\n\n        </div>)\n    }\n\n    return (\n      <div style={{ padding:'0.3125em 1.5em' }}>\n        <Label  size='mini' basic >Task from previous shifts </Label>\n\n        {taskNotes && taskNotes.trim() && <Label size='mini' basic color=\"blue\" >Notes Added </Label>}\n        <Label  size='mini' basic color=\"purple\" >Open </Label>\n\n        {disabled && taskStatus === 'DEFERRED' &&\n        <Label size='mini' basic color=\"red\" >Action Required </Label>}\n      </div>)\n\n\n  }\n\n\n\n\n  const rootPanels = [\n    { key: 'panel-1', title: 'Updates', content: 'These are updates' },\n  ]\n\n\n  return(\n    <>\n      <Divider></Divider>\n      {disabled &&\n       <TaskStatusBar></TaskStatusBar>\n      }\n\n      <Form.Group style={{ marginBottom:'0px' }}>\n\n        <label style={{ display: 'inline-block', padding: '0.9375em 0px 0px 0.3125em', width:'1.5625em' }}>{label+1}</label>\n\n        <TextAreaField  name= {`${name}.description`} readOnly={disabled} rows ='1' width='16'></TextAreaField>\n\n\n\n        <Button\n          type='button'\n          circular\n          icon='cancel'\n          style= {{ visibility: disabled?'hidden':'',height:'fit-content' }}\n          basic\n          onClick = {(e) => removeButtonClick(e)}/>\n\n\n\n      </Form.Group>\n\n      {!disabled &&\n      <div style={{ padding:'0.5em 1.5em' }}>\n        <ErrorMessage name = {`${name}.action`} pointing='below' ></ErrorMessage>\n        <Form.Group>\n          <Form.Checkbox\n            checked ={ taskAction === 'CLOSED' }\n            label=\"closed\" onChange = {(e,{ checked }) => actionCloseCheckBoxClick(e,checked)}/>\n          <Form.Checkbox\n            checked ={ taskAction === 'DEFERRED'  || taskAction === 'OPEN'}\n            label=\"Is Open Task\" onChange = {(e,{ checked }) => actionOpenCheckBoxClick(e,checked)}/>\n          <Form.Checkbox\n            label=\"Action Required\"\n            checked= {taskAction === 'DEFERRED' }\n            onChange = {(e,{ checked }) => actionDeferCheckBoxClick (e,checked) }/>\n        </Form.Group>\n\n      </div> }\n\n      {disabled &&  taskAction !== 'CLOSED' && taskAction !== 'DEFERRED' &&\n\n\n      <div style={{ margin:'0px 3.125em 0.625em 1.5em' }}>\n        <Accordion  panels={rootPanels} />\n        <ErrorMessage name = {`${name}.action`} pointing='below' ></ErrorMessage>\n        <div>\n          <Button size='mini'\n            type='button'\n            onClick = {(e) => toggleNotes(e)}> {noteFieldVisibile?'Hide Notes' : taskNotes?'Show Notes':'Add Notes'}</Button>\n          <Button.Group size='mini'>\n            <Button type='button'\n              size='mini' positive\n              value= 'CLOSED'\n              onClick = {(e,{ value }) => actionButtonClick(e,value)}>Close Task</Button>\n\n            <Button.Or size='mini' />\n            <Button  type='button'\n              size='mini' negative\n              value= 'DEFERRED'\n              onClick = {(e,{ value }) => actionButtonClick(e,value)}> Defer Task to next Shift</Button>\n          </Button.Group>\n        </div>\n      </div>\n\n\n      }\n      <TextAreaField rows='1'\n        readOnly = {taskAction && taskAction !== 'NOTES_ADDED' ? true:false}\n        hidden= {!noteFieldVisibile}\n        style= {{ paddingBotton:'0.3125em',margin:'0px 3.125em 0.625em 1.5em'  }}\n        name={`${name}.newNote`  }\n        width='14'\n        onChange= {(e,{ value }) => {\n          if(value.trim() !== ''){\n            setFieldValue(`${name}.newNote`,value)\n            if (!taskAction){\n              setFieldValue(`${name}.action`,'NOTES_ADDED')\n            }\n\n          }else{\n            setFieldValue(`${name}.newNote`,'')\n            if (taskAction  === 'NOTES_ADDED'){\n              setFieldValue(`${name}.action`,'')\n\n            }\n\n          }\n\n        }}/>\n\n\n    </>\n  )\n\n}\n\nexport default TaskForm","import React from 'react'\nimport { FieldArray } from 'formik'\nimport TaskForm from './TaskForm'\nimport { Button, Icon } from 'semantic-ui-react'\n\n\nconst TaskForms = ({ tasksIdentifier,tasks,taskCategory,onRemove,aircraftId }) => {\n\n  const newTaskField = () => {\n    const newTaskField = { description:'',status:'',action:'',taskCategory: tasksIdentifier }\n    if(taskCategory && taskCategory === 'AIRCRAFT'){\n      newTaskField.aircraft = aircraftId\n      newTaskField.taskCategory = taskCategory\n    }\n\n    return newTaskField\n\n  }\n\n  return  <FieldArray name={`tasks.${tasksIdentifier}`}>\n    {({ push,remove }) => (<>\n      {tasks && tasks.map((task,index) =>\n        <TaskForm key={index}\n          label= {index}\n          name={`tasks.${tasksIdentifier}.${index}`}\n          //The input Field is disabled if the task is open or deferred from previous shifts implied by task.id field\n          disabled = {task.id && (task.status === 'DEFERRED' || task.status==='OPEN')}\n          onRemove = {\n            () => {\n              if(onRemove) onRemove()\n              remove(index)\n            }\n          }\n        >\n        </TaskForm>\n      )}\n\n      {/**\n       * Add new row button\n       */}\n      <Button\n        type='button'\n        icon\n        style={{ marginLeft:'10px' }}\n        primary\n        onClick={ (e) => push (newTaskField())\n        }>\n        <Icon name=\"plus circle\"/> Add\n      </Button>\n    </>)}\n  </FieldArray>}\n\nexport default TaskForms","import React, { Fragment, useState } from 'react'\nimport { Header, Confirm } from 'semantic-ui-react'\nimport { AircraftCheckBox } from './FormFields'\nimport { useFormikContext } from 'formik'\nimport TaskForms from './TaskForms'\n\nconst AircraftSelectionForm = ({ costumers,setCheckedAircrafts,checkedAircrafts,values }) => {\n  const { setFieldValue } = useFormikContext()\n  const [confirmOpen,setConfirmOpen] = useState ({ open:false,aircraft:'',event:'' })\n\n  return (<>\n    {costumers && costumers.map(costumer =>\n      <Fragment key= {costumer.name }>\n        <Header as=\"h3\">Work Performed for {costumer.name}</Header>\n\n\n        {costumer.aircrafts.map(aircraft =>\n\n          <Fragment key={aircraft.id}>\n            <AircraftCheckBox\n              label = {aircraft.registration}\n\n              // If the aircaft registration is on the checked list the checkbox should be checked\n              checked = {checkedAircrafts[aircraft.registration]&& checkedAircrafts[aircraft.registration]['checked']}\n\n              //If the aircraft reistration is on the checked list and is disabled the checkbox is disabled\n              disabled = {checkedAircrafts[aircraft.registration]&& checkedAircrafts[aircraft.registration]['disbleCheck']}\n\n              onChange={\n                (e,{ checked }) =>  {\n                  e.preventDefault()\n                  //if the aircraft is checked by user it should initalize with a taskarea input\n                  if(checked && (!values.tasks[aircraft.registration] || values.tasks[aircraft.registration].length === 0) ){\n                    setCheckedAircrafts({ ...checkedAircrafts,[aircraft.registration]:{ 'checked':checked } })\n                    setFieldValue(`tasks.${aircraft.registration}`,[{ description:'',status:'' ,action:'',taskCategory:'AIRCRAFT' ,aircraft: aircraft.id }])\n                  }\n                  if(!checked) {\n                    if(values.tasks[aircraft.registration].length >0 ){\n                      setConfirmOpen({ open:true, aircraft:aircraft.registration })\n                    }\n                  }\n                }\n\n              }>\n\n\n              {/**\n              * If Unchecked diaplay all task will be erased warning\n              */}\n              <Confirm\n                open = {confirmOpen.open}\n                header = {`Uncheck Aircraft ${confirmOpen.aircraft}`}\n                content= {'Are you sure you want to uncheck this aircraft? Doing so will remove all the entered tasks for this Aircraft'}\n                onCancel = { () => {\n                  setConfirmOpen({ open:false })\n                }}\n                onConfirm = { () => {\n                  console.log('called me')\n                  setFieldValue(`tasks.${confirmOpen.aircraft}`,null)\n                  setCheckedAircrafts({ ...checkedAircrafts,[confirmOpen.aircraft]:{ 'checked':false } })\n                  setConfirmOpen({ open:false })\n                }}\n              />\n\n              {checkedAircrafts[aircraft.registration]&& checkedAircrafts[aircraft.registration]['checked'] &&\n              <TaskForms\n                tasksIdentifier={aircraft.registration}\n                tasks={values.tasks[aircraft.registration]}\n                taskCategory= 'AIRCRAFT'\n                aircraftId = {aircraft.id}\n                onRemove = {\n                  () => {\n                    /**\n                     * If the last remaining task is removed then the aircraft chekbox should uncheck\n                     */\n                    if(values.tasks[aircraft.registration].length===1){\n                      setCheckedAircrafts({ ...checkedAircrafts,[aircraft.registration]:{ 'checked':false } })\n                    }\n\n                  }}\n              ></TaskForms>\n              }\n            </AircraftCheckBox>\n\n          </Fragment>\n        )}\n\n\n      </Fragment>)}\n  </>\n\n  )\n}\n\nexport default AircraftSelectionForm","import React, { useState, useEffect } from 'react'\nimport { Modal,Grid,Header,Form ,Divider,Segment ,Icon,Button,Message, FormGroup, FormField, Dimmer,Loader } from 'semantic-ui-react'\nimport { DateInputField, InputField } from './FormFields'\nimport { operateDate, formatDate } from '../../../utils/DateHelper'\nimport { useFormikContext, Formik } from 'formik'\nimport { validateEmail, validateName, validateStartEndTime } from './validator'\nimport { SIGN_OFF_SHIFT } from '../../../mutations/timeSheetMutation'\nimport { useMutation } from '@apollo/client'\nimport _ from 'lodash'\n\n\nconst  StaffAddModel = ({ setOpen,open ,e }) => {\n\n  const{ getFieldMeta,setFieldValue } = useFormikContext()\n\n  const [signOff,{ loading, error, data }] = useMutation(SIGN_OFF_SHIFT,{\n    onError: (error) => {\n      console.log(error)\n    }\n  })\n\n  const shiftStartTime = getFieldMeta('startTime').value\n  const shiftEndTime = getFieldMeta('endTime').value\n  const [notifyResult,setNotifyResult] = useState('')\n  const [username,setUsername] = useState('')\n  const [password,setPassword] = useState('')\n  const [startTime,setStartTime] = useState(shiftStartTime)\n  const [endTime,setEndTime] = useState(shiftEndTime)\n  const [breakt,setBreakt] = useState('30')\n  const [registerUserOpen,setRegisterUserOpen]= useState(false)\n  const [forgotPasswordOpen,setForgotPasswordOpen] = useState(false)\n\n  useEffect(() => {\n    setStartTime(shiftStartTime)\n    setEndTime(shiftEndTime)\n  },[shiftEndTime, shiftStartTime])\n\n\n  useEffect (() => {\n    /**If the staff sign off is not sucessfull */\n    if(error){\n      if(registerUserOpen){\n        setNotifyResult({ type: 'error', message:`Failed to register user. ${error.message}` })\n      }if(forgotPasswordOpen){\n        setNotifyResult({ type: 'error', message:`Failed to reset password. ${error.message}` })\n      }\n      else{\n        setNotifyResult({ type: 'error', message:`Failed to add user. ${error.message}` })\n      }\n    }\n    /**\n     * If the staff signoff is successFull\n     */\n    if(data && data.signOffTimeSheet != null ){\n      /**\n       * Check if the staff is alrady added if so notify user to remove old entry\n       */\n      const staffs= getFieldMeta('staffs').value\n      if(_.find(staffs,{ id:data.signOffTimeSheet.id })){\n\n        setNotifyResult({ type: 'error', message: `${data.signOffTimeSheet.name} is already exist on report` } )\n\n      }else {\n        const addedStaff = [...staffs,{ name:data.signOffTimeSheet.name, startTime:data.signOffTimeSheet.startTime, endTime: data.signOffTimeSheet.endTime ,signOffKey:data.signOffTimeSheet.value ,id: data.signOffTimeSheet.id, break: data.signOffTimeSheet.break }]\n        setFieldValue('staffs', addedStaff)\n\n        if(registerUserOpen){\n\n          setNotifyResult({ type: 'success', message:`${data.signOffTimeSheet.name} is added to report.<br/> Further registration instruction sent to email. Please complete registration within 48 hours` })\n          setRegisterUserOpen(false)\n\n        }if(forgotPasswordOpen){\n          setNotifyResult({ type: 'success', message:`${data.signOffTimeSheet.name} is added to report <br/> Password reset link sent to email.`  })\n          setForgotPasswordOpen(false)\n        }\n        else{\n          setNotifyResult({ type: 'success', message: `${data.signOffTimeSheet.name} is added to report` } )\n        }\n      }\n\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[error, data])\n\n\n\n\n\n  const submit = async (values) => {\n\n    let signOffData\n\n    if(registerUserOpen){\n      signOffData = {  startTime:values.startTime ,endTime:values.endTime , break:parseInt(breakt), email: values.email, name: values.fullname ,additionalAction:'register' }\n    }\n    else if(forgotPasswordOpen){\n      signOffData = { startTime:values.startTime ,endTime:values.endTime ,break:parseInt(breakt), email:values.resetEmail,additionalAction:'reset' }\n    }else {\n      signOffData = { startTime:values.startTime ,endTime: values.endTime ,break:parseInt(breakt), username: username, password: password }\n    }\n    console.log(signOffData)\n    await signOff({ variables:signOffData })\n  }\n\n  const renderAlert = () => {\n    if(!notifyResult) return null\n    return(\n      <Message\n        success = {notifyResult.type === 'success'}\n        error = {notifyResult.type === 'error'}\n        onDismiss = {() => setNotifyResult('')\n        }\n      > {notifyResult.message}\n      </Message>)\n\n\n  }\n  const renderNewUserInput = (values) => {\n\n    return(\n\n      <Segment basic>\n        <Message positive>\n          <Message.Header>Register info</Message.Header>\n\n            Please enter following information to add yourself to shift . Registraion instruction will be forwarded to you on the provided email.\n            It is important that you register as soon as possible.\n        </Message>\n\n        <Message warning visible>\n          <Message.Header>Attention!!</Message.Header>\n        Your info will be added to report automatically after this step, make sure you enter your name and work time correctly\n        </Message>\n        <Form.Group>\n          <InputField width= '12' name ='fullname' label='Full Name' />\n          <InputField width= '12' name = 'email' label = 'Email Address'/>\n        </Form.Group>\n        <FormGroup>\n          <Button  positive >Register</Button>\n          <Button type='button' negative onClick ={() => setRegisterUserOpen(false)}>Cancel</Button>\n        </FormGroup>\n\n\n      </Segment>\n    )\n  }\n\n  const renderForgotPassword = (values) => {\n    return(\n      <Segment basic>\n        <Message warning visible>\n          <Message.Header>Reset Password</Message.Header>\n            Please enter your email address used while creating account.\n        </Message>\n\n        <Message warning visible>\n          <Message.Header>Attention!!</Message.Header>\n        Your info will be added to report automatically after this step, make sure you <strong>Enter your work time correctly</strong>\n        </Message>\n\n        <InputField width= '12' name = 'resetEmail'label = 'Email Address'/>\n        <FormGroup>\n          <Button  primary >Reset</Button>\n          <Button  negative onClick ={() => setForgotPasswordOpen(false)}>Cancel</Button>\n        </FormGroup>\n      </Segment>\n    )\n  }\n\n\n  if(loading){\n    return<Dimmer active inverted>\n      <Loader active inverted>Veryfing User</Loader>\n    </Dimmer>\n  }\n\n  return (\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {open}\n      onClose= {() => {\n        setForgotPasswordOpen(false)\n        setRegisterUserOpen(false)\n        setNotifyResult(false)\n        setOpen(false)}}\n      onOpen= {() => setOpen (true)}\n    >\n      <Modal.Header>Add User to Shift </Modal.Header>\n      <Modal.Content>\n\n        {notifyResult &&\n         renderAlert()\n        }\n\n        <Formik\n          enableReinitialize\n          initialValues = {{\n            startTime: startTime,\n            endTime: endTime,\n            breakt:breakt,\n            username:'',\n            password:'',\n            email:'',\n            fullname:'',\n            resetEmail:''\n          }}\n\n          validate = {values => {\n            let errors = {}\n            errors = { ...errors,...validateStartEndTime(values.startTime,values.endTime) }\n\n            if(forgotPasswordOpen){\n              let emailError = validateEmail(values.resetEmail)\n              if(emailError) errors.resetEmail = emailError\n            }\n            if(registerUserOpen){\n              let emailError = validateEmail(values.email)\n              if(emailError) errors.email = emailError\n\n              let usernameError = validateName(values.fullname)\n              if(usernameError) errors.fullname = usernameError\n\n            }\n            console.log(errors)\n            return errors\n          } }\n\n          onSubmit = {(values) =>\n          {\n            console.log(values ,'submitted')\n            submit(values)}\n          }\n\n\n        >\n\n\n          {({ values,handleSubmit,errors,touched }) =>\n\n            <Form size='large' onSubmit = { handleSubmit} >\n              <Form.Group >\n\n                < DateInputField\n                  label= 'Start Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name ='startTime'\n                  maxDate = {operateDate(Date.now(),30,'m','sub')}\n                  minDate= {operateDate(Date.now(),20,'h','sub')}\n                  onChange = {(e,{ value }) => {\n                    setStartTime(value)}\n                  }\n                />\n\n\n                < DateInputField\n                  label = 'End Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name='endTime'\n                  maxDate = {formatDate(Date.now())}\n                  minDate= {operateDate(startTime,20,'m','add')}\n                  onChange = {(e,{ value }) => {\n                    setEndTime(value)}\n                  }/>\n\n                <InputField\n                  inputlabel= 'Break'\n                  label = 'Minutes '\n                  labelPosition='right corner'\n                  name= 'breakt'\n                  type='number'\n                  min='0'\n                  onChange = {(e,{ value }) => {\n                    setBreakt(value)}\n                  }>\n                </InputField>\n\n\n\n              </Form.Group>\n\n              <Header as='h5' color='blue' textAlign='center'>\n\n              </Header>\n\n              {!registerUserOpen && !forgotPasswordOpen &&\n\n\n            <>\n              <Segment >\n\n                <Grid columns={2} stackable >\n                  <Divider vertical>Or</Divider>\n                  <Grid.Row verticalAlign='middle'>\n                    <Grid.Column>\n                      <Grid.Row style={{ textAlign:'center' }}>\n                        <Header as ='h5' icon>\n                          <Icon name='sign in alternate' />\n                    Use Credentials\n                        </Header>\n                      </Grid.Row>\n                      <Grid.Row>\n                        <Form.Group>\n                          <Form.Input label='Username' onChange= {(e,{ value }) => setUsername(value)}></Form.Input>\n                          <Form.Input label= 'Password' type='password' onChange= {(e,{ value }) => setPassword(value)}></Form.Input>\n                        </Form.Group>\n                        <Form.Field style={{ textAlign:'center' }}>\n                          <Button type='submit' primary > Sign </Button>\n                        </Form.Field>\n                        <Form.Field style={{ textAlign:'center' }}>\n                          <Button size='tiny' onClick={() => setForgotPasswordOpen(true)}>Forgot Password</Button>\n                        </Form.Field>\n                      </Grid.Row>\n                    </Grid.Column>\n\n                    <Grid.Column textAlign='center'>\n                      <Grid.Row >\n                        <Header icon>\n                          <Icon name='barcode' size='massive' />\n                  Use IdCard\n                        </Header>\n                      </Grid.Row>\n                      <Grid.Row><Button primary>Scan</Button></Grid.Row>\n\n                    </Grid.Column>\n                  </Grid.Row>\n                </Grid>\n\n              </Segment>\n              <FormField style={{ textAlign:'center' }}>\n                <label> If you do not have a account yet, contact your supervisor or click below.</label>\n                <Button type='button' onClick={() => setRegisterUserOpen(true)}> New User </Button>\n              </FormField>\n            </>\n              }\n\n\n              {registerUserOpen && renderNewUserInput( values)}\n              {forgotPasswordOpen && renderForgotPassword(values)}\n            </Form>}\n        </Formik>\n      </Modal.Content>\n\n    </Modal>\n\n\n  )\n}\n\nexport default StaffAddModel","import { gql } from '@apollo/client'\nexport const SUBMIT_REPORT = gql`\n  mutation submitReport($station: String!, $shift:String! , $startTime: String! ,$endTime: String!, $tasks: [ShiftReportTask]! , $staffs: [ShiftReportStaffs!]! ) { \n  submitShiftReport(\n    station:$station\n    shift:$shift\n    startTime: $startTime\n    endTime: $endTime\n    tasks:$tasks\n    staffs: $staffs\n  ){\n    endTime\n    id\n    shift\n    staffAndTime {\n      id\n      staff {\n        name\n      }\n      endTime\n      startTime\n    }\n    startTime\n    station {\n      location\n      id\n    }\n    tasks {\n      aircraft {\n        registration\n        id\n        costumer {\n          name\n        }\n      }\n      taskCategory\n      description\n      id\n      status\n      \n    }\n  } \n}\n`","import React, { useState, useContext, useEffect } from 'react'\r\nimport { Formik } from 'formik'\r\nimport Context from '../Context'\r\nimport { Form, Header, Button, Icon } from 'semantic-ui-react'\r\nimport { DateInputField } from './FormFields'\r\nimport { validateStaffsField, validateStartEndTime, validateTasks } from './validator'\r\nimport { formatDate, operateDate } from '../../../utils/DateHelper'\r\nimport _ from 'lodash'\r\nimport StaffForms from './StaffForms'\r\nimport AircraftSelectionForm from './AircraftSelectionForm'\r\nimport TaskForms from './TaskForms'\r\nimport StaffAddModel from './StaffAddModel'\r\nimport { useMutation } from '@apollo/client'\r\nimport { SUBMIT_REPORT } from '../../../mutations/submitShiftReport'\r\n\r\n\r\n\r\nconst NewReport = () => {\r\n  const context = useContext(Context)\r\n  const station = context.state.station\r\n  const reportData = context.state.lastShiftReport\r\n\r\n  const [openAddStaffModel,setOpenAddStaffModel] = useState (false)\r\n\r\n  // costumers assigned to this station\r\n  const [costumers,setCostumers] = useState(station.costumers)\r\n\r\n  const [checkedAircrafts, setCheckedAircrafts] = useState({})\r\n  const init = {\r\n    startTime:'', //default shift starttime\r\n    endTime:'',\r\n    staffs:[],\r\n    tasks:{}\r\n  }\r\n  const [initialFields,setInitialFields] = useState(init)\r\n\r\n  const [submitReport,{ data }] = useMutation(SUBMIT_REPORT,{\r\n    onError: (error) => {\r\n      console.log(error)\r\n    }\r\n  })\r\n\r\n\r\n  useEffect (() => {\r\n    //initial aircraft list from last shift report\r\n    let list = {}\r\n    //initial task list from last shift report\r\n    let taskList = {}\r\n    let costumerList = []\r\n\r\n    // eslint-disable-next-line array-callback-return\r\n\r\n    reportData && reportData.tasks && reportData.tasks.map(task =>  {\r\n      if( (task.status==='DEFERRED' || task.status==='OPEN') ){\r\n        // Initial field for deferred or open tasks\r\n        const simplifiedTask = { id:task.id, description:task.description, status:task.status ,updates: task.updates ,action:'', newNote:'',taskCategory:task.taskCategory }\r\n\r\n        //From the last shift report if the task is aircraft tasks aircraft has open tasks it is checked by default and cannot be disabled\r\n        if(task.aircraft) {\r\n          list[task.aircraft.registration] = { checked:true,disbleCheck:true }\r\n        }\r\n\r\n        //arranging tasks based on aircraft registration\r\n        if(task.aircraft && taskList[task.aircraft.registration]){\r\n          taskList[task.aircraft.registration].push( { ...simplifiedTask })\r\n\r\n        }else if (task.aircraft){\r\n          taskList[task.aircraft.registration] = [ { ...simplifiedTask }]\r\n\r\n        }else{\r\n          if(taskList[task.taskCategory]){\r\n            taskList[task.taskCategory].push(simplifiedTask)\r\n          }else{\r\n            taskList[task.taskCategory] = [simplifiedTask]\r\n          }\r\n\r\n\r\n        }\r\n\r\n        //if there is a task from a costumer who is not assigned to this station we add that arcraft & costumer to list\r\n        if(task.aircraft){\r\n          if(! _.find( station.costumers,_.matchesProperty('name',task.aircraft.costumer.name))){\r\n\r\n            if( ! _.find( costumerList,_.matchesProperty('name',task.aircraft.costumer.name))){\r\n              costumerList.push({ name:task.aircraft.costumer.name,aircrafts:[{ registration:task.aircraft.registration,id: task.aircraft.id }] })\r\n            }else{\r\n              costumerList.aircrafts.push({ registration:task.aircraft.registration , id: task.aircraft.id })\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    )\r\n\r\n    setCostumers([...costumers,...costumerList])\r\n\r\n    //Set initail form values based on shiftreport\r\n    setInitialFields({ ...initialFields,tasks:taskList })\r\n    setCheckedAircrafts(list)\r\n\r\n  }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  ,[])\r\n\r\n  useEffect(() => {\r\n    if(data){\r\n      console.log(data.submitShiftReport)\r\n    }\r\n  })\r\n\r\n  /**Format submit data  before submit*/\r\n  const beforeSubmit = (formdata) => {\r\n    let submitData = { station: station.id , staffs: formdata.staffs, startTime:formdata.startTime, endTime: formdata.endTime, tasks:{} }\r\n\r\n    /**Reduce the tasks to be only array of tasks */\r\n    const tasks =  _.reduce(formdata.tasks, (tasks,tasksByIdentifier,identifier) => {\r\n      let taskList = _.map(tasksByIdentifier, (task,index) => {\r\n        let initialTask\r\n        /**Compare the task with the initial tasks, reduce to only include the changes */\r\n        if(initialFields.tasks[identifier] && initialFields.tasks[identifier][index]){\r\n          initialTask = initialFields.tasks[identifier] && initialFields.tasks[identifier][index]\r\n          const difference = Object.keys(initialTask).filter(k => initialTask[k] !== task[k])\r\n\r\n          /**If no changes return null */\r\n          if(!difference) return null\r\n          const reducedTask = difference.reduce((p,c) => p[c] = { ...p,[c]:task[c] },{})\r\n          task = { id: task.id, ...reducedTask }\r\n        }\r\n\r\n        return task\r\n      })\r\n\r\n      /**remove null tasks */\r\n      taskList = taskList.filter(task => task !== null)\r\n\r\n      return [...tasks,...taskList]\r\n    },[])\r\n\r\n\r\n    /**Only include staff signoff Key and name */\r\n    const staffs = formdata.staffs.map((staff) => {return { signOffKey: staff.signOffKey, name:staff.name }})\r\n\r\n    submitData = { ...submitData,tasks: tasks, staffs: staffs ,shift: 'Day' }\r\n\r\n    return submitData\r\n\r\n  }\r\n\r\n  /*if(loading) {\r\n    return(\r\n      <Segment>\r\n        <Dimmer active inverted>\r\n          <Loader inverted>Submitting Data</Loader>\r\n        </Dimmer>\r\n      </Segment>\r\n    )\r\n  }*/\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues = {initialFields}\r\n        validate = { values => {\r\n          let errors = {}\r\n          errors = { ...errors,...validateStartEndTime(values.startTime,values.endTime) }\r\n          const staffErrors = validateStaffsField(values.staffs)\r\n          const taskErrors = validateTasks(values.tasks)\r\n\r\n          if(!_.isEmpty(taskErrors) ) errors.tasks = taskErrors\r\n          if(!_.isEmpty(staffErrors) ) errors.staffs = staffErrors\r\n          return errors\r\n\r\n        }}\r\n        onSubmit={(values) => {\r\n\r\n          console.log('submit Clicked',values)\r\n          const submitData = beforeSubmit(values)\r\n          submitReport({ variables: submitData })\r\n\r\n        }}\r\n      >\r\n\r\n        {({ values,handleSubmit,errors,touched  }) =>\r\n          <>\r\n            <Form onSubmit = {handleSubmit}>\r\n              {/*Shift start end times*/}\r\n              <Form.Group >\r\n                <DateInputField\r\n                  label = \"Shift Start Time\"\r\n                  name='startTime'\r\n                  maxDate = {operateDate(Date.now(),30,'m','sub')}\r\n                  minDate= {operateDate(Date.now(),20,'h','sub')}/>\r\n\r\n                <DateInputField\r\n                  label = \"Shift End Time\"\r\n                  name='endTime'\r\n                  maxDate = {formatDate(Date.now())}\r\n                  minDate= {operateDate(values.startTime,20,'m','add')}/>\r\n              </Form.Group>\r\n\r\n              {/*Dynamic Input fields for staff Information*/}\r\n              <StaffForms values={values} touched={touched} errors={errors} addStaffOpen =  {setOpenAddStaffModel}/>\r\n\r\n              {/*Dynamic Input fields for Aircraft Tasks*/}\r\n              <AircraftSelectionForm costumers ={costumers} checkedAircrafts={checkedAircrafts} setCheckedAircrafts= {setCheckedAircrafts} values={values} />\r\n\r\n              {/**\r\n           * TODO:\r\n           * Input fields if the aircraft/costumer is not listed on the reporting page\r\n           */}\r\n              <Header as=\"h3\">Work Performed for Other Costumer</Header>\r\n              <Button  type='button' icon primary><Icon name=\"plus circle\"/> Add </Button>\r\n\r\n              <Header as=\"h3\">Other Tasks</Header>\r\n              <TaskForms tasksIdentifier = 'OTHER' tasks = {values.tasks.OTHER}> </TaskForms>\r\n\r\n              <Header as=\"h3\">Logistics Task</Header>\r\n              <TaskForms tasksIdentifier = 'LOGISTICS' tasks = {values.tasks.LOGISTICS}> </TaskForms>\r\n\r\n\r\n\r\n\r\n              <Button   primary type=\"submit\"> Submit Report </Button>\r\n            </Form>\r\n\r\n\r\n            <StaffAddModel setOpen= {setOpenAddStaffModel} open= {openAddStaffModel} shiftStartTime = {values.startTime} shiftEndTime={values.endTime}></StaffAddModel></>}\r\n\r\n\r\n      </Formik>\r\n\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default NewReport","import { useLazyQuery } from '@apollo/client'\nimport React ,{  } from 'react'\nimport { Loader, Header, Modal } from 'semantic-ui-react'\nimport { GET_SHIFT_REPORT } from '../../queries/shiftReportQuery'\n\nimport _ from 'lodash'\n\nimport ShiftReport from '.'\n\n\nconst ReportViewModal = ({ openReport,setOpenReport }) => {\n  const [getReport,{ error,loading,data }] = useLazyQuery(GET_SHIFT_REPORT)\n\n  const onMount = () => {\n    if(openReport.id) {\n      getReport({ variables:{ id: openReport.id } })\n    } else{\n      setOpenReport({ ...openReport,id:'', open: false })\n    }\n\n\n  }\n\n  return (\n    <Modal\n      onClose={() => setOpenReport({ id:'',open:false })}\n      onMount={() => onMount()}\n      open= {openReport.open}\n    >\n      { error &&\n      <>\n        <Modal.Content> <Header as ='h5'>Oouch...Something Went Wrong, Please try again</Header> </Modal.Content>\n      </>\n      }\n      { loading &&\n      <Loader active>Retriving Report</Loader>\n\n      }\n\n      {data && data.getShiftReport &&\n      <>\n        <Modal.Header>Shift Report: {data.getShiftReport.startTime.split(' ')[0]} {data.getShiftReport.station.location} {data.getShiftReport.shift} shift</Modal.Header>\n        <Modal.Content>\n          <ShiftReport reportData = {data.getShiftReport}> </ShiftReport>\n        </Modal.Content></>\n      }\n    </Modal>\n  )\n\n}\n\nexport default ReportViewModal","import { useQuery } from '@apollo/client'\nimport React ,{ Fragment, useContext, useState } from 'react'\nimport { Table,Loader, Header, List } from 'semantic-ui-react'\nimport { GET_REPORTLIST } from '../../queries/shiftReportQuery'\nimport Context from './Context'\nimport _ from 'lodash'\n\nimport ReportViewModal from '../ShiftReport/ReportViewModal'\n\n\nconst AllReportsTable = () => {\n  const context = useContext(Context)\n  const station = context.state.station\n\n  const { error,loading,data } = useQuery(GET_REPORTLIST, { variables:{ stationId: station.id } })\n  const [openReport,setOpenReport]= useState({ id:'', open: false })\n\n  let transformData\n  if(data) {\n    transformData = data.getReportList\n    transformData = _.groupBy(transformData, report => report.startTime.split(' ')[0] )\n    transformData = _.mapValues(transformData, date => _.groupBy(date,report => report.station.location))\n\n  }\n\n  if (loading) {\n    return (\n      <Loader active>Initiatilizing reporting</Loader>\n    )\n  }\n\n  if (error) {\n    console.log(error)\n    return (\n      <Header as ='h5'>Something Went Wrong, Please try again</Header>\n    )\n  }\n\n  return (\n    <>\n      <Table  compact celled striped structured>\n        <Table.Header>\n          <Table.Row><Table.HeaderCell> Date </Table.HeaderCell><Table.HeaderCell textAlign='center'> Station </Table.HeaderCell><Table.HeaderCell> Shift </Table.HeaderCell></Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {transformData && _.map(transformData,(stations,date) =>\n            <Fragment key = {date}>\n              {Object.entries(stations).map(([station,reports],index) =>\n                <Table.Row  key = {station}>\n                  {index === 0 && <Table.Cell collapsing rowSpan={Object.keys(transformData[date]).length}>{date}</Table.Cell>}\n                  <Table.Cell textAlign='center' >{station}</Table.Cell>\n                  <Table.Cell>\n                    <List horizontal>\n                      {_.map(reports, report =>\n                        <List.Item as = 'a' key={report.id}\n                          onClick = {() => {\n                            setOpenReport({ id: report.id,open:true })\n                          }}>{report.shift}\n                        </List.Item>)}\n                    </List>\n                  </Table.Cell>\n                </Table.Row>\n              )\n              }</Fragment>\n          )\n          }\n        </Table.Body>\n      </Table>\n      <ReportViewModal setOpenReport= {setOpenReport} openReport={openReport}></ReportViewModal>\n    </>\n  )\n}\n\nexport default AllReportsTable","import React,{ useState, useContext, useReducer, useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { GET_SHIFT_REPORT } from '../../queries/shiftReportQuery'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { Loader,Image,Segment, Header } from 'semantic-ui-react'\nimport MenuBar from './MenuBar'\nimport ShiftReport from '../ShiftReport'\nimport Context from './Context'\nimport reducer from './stationReducer'\nimport { GET_STATION } from '../../queries/stationQuery'\nimport NewReportForm from './NewReportForm'\nimport AllReportsTable from './AllReportsTable'\n\n\nconst StationReportPage = () => {\n  const history = useHistory()\n\n  const initialState = useContext(Context)\n  const [state,dispatch] = useReducer(reducer, initialState)\n\n\n  if(!JSON.parse( sessionStorage.getItem('stationKey'))){\n    history.push('/')\n  }\n\n  const params = useParams()\n  const id =params.id\n  const station = params.station\n\n  const [activeItem, setActiveItem] = useState('lastShiftReport')\n\n  let queryParams\n\n  if (station && id ){\n    queryParams = {\n      station: id,\n      flag:'MOST_RECENTLY_COMPLETED'\n    }\n  }\n\n  const useMultipleQuery = () => {\n    const res1 = useQuery(GET_SHIFT_REPORT,{ variables:queryParams })\n    const res2 = useQuery(GET_STATION,{ variables:{ id: id } })\n    return [res1, res2]\n  }\n\n  const [\n    { loading:loadingReport, error:errorReport, data: dataReport },\n    {  data: dataStation }\n  ] = useMultipleQuery()\n\n  useEffect(() => {\n    if(dataStation) dispatch({ type:'INIT_STATION',payload:dataStation.getStation })\n  },[dataStation])\n\n  useEffect(() => {\n    if(dataReport) dispatch({ type:'ADD_LASTSHIFTREPORT',payload:dataReport.getShiftReport })\n  },[dataReport])\n\n  //const { loading:loadingReport, error:errorReport, data: dataReport } = useQuery(GET_SHIFT_REPORT,{ variables:queryParams })\n\n\n  if (loadingReport) {\n    return (\n      <Loader active>Fetching Data</Loader>\n    )\n  }\n\n\n\n  if (errorReport) return `Error! ${errorReport}`\n\n  return (\n    <>\n      <Context.Provider value={{ state, dispatch }}>\n        <Segment  basic>\n          <Header textAlign =\"right\" color =\"blue\" floated=\"right\">Shift Reporting System <br/><span><h5> Station: {dataStation && dataStation.getStation.location} </h5></span></Header>\n          <Image src='\\LogoBig.png' size=\"medium\" />\n        </Segment>\n\n        <MenuBar activeItem= {activeItem} setActiveItem={setActiveItem}/>\n\n        { activeItem === 'lastShiftReport' &&\n          <ShiftReport reportData= {dataReport.getShiftReport} />\n        }\n        { activeItem === 'browseAllReports' &&\n          <AllReportsTable  />\n        }\n\n        {activeItem === 'startNewReport'&&\n          //<NewReportShiftSelectModel  stationId={id} ></NewReportShiftSelectModel>\n          <NewReportForm ></NewReportForm>\n        }\n      </Context.Provider>\n    </>\n  )\n}\n\nexport default StationReportPage\n\n","import { gql } from '@apollo/client'\nexport const LOGIN_STAFF = gql`\n  mutation staffLogin($username: String!, $password:String!){\n    staffLogin(username: $username, password: $password) \n  }\n`\n\nexport const RESET_PASSWORD = gql`\nmutation resetPassword ($resetCode: String!, $password: String!){\n  resetPassword(\n    password: $password,\n    resetCode: $resetCode\n  ){\n    status\n    message\n  }\n}`\n\nexport const RESET_REGISTER_CODE = gql`\nmutation resetRegisterCode ($id: String!){\n  resetRegisterCode(\n    id: $id,\n  ){\n    status\n    message\n  }\n}`\n\nexport const RESET_PASSWORD_REQ = gql`\nmutation resetPasswordReq ($id: String!){\n  resetPasswordReq(\n    id: $id,\n  ){\n    status\n    message\n  }\n}`\n\nexport const CHANGE_PASSWORD = gql`\nmutation changePassword ( $id: String!, $password: String!, $newPassword: String! ){\n  changePassword ( \n    id: $id,\n    password: $password,\n    newPassword: $newPassword\n    ){\n      status\n      message\n    }\n}`\n\nexport const STAFF_EDIT = gql`\nmutation staffEdit($id:String! $email:String, $phone: String , $contractType: String , $reqHours: Float , $position :String){\n  staffEdit(\n    id: $id,\n    email:$email,\n    phone:$phone,\n    contractType: $contractType,\n    reqHours: $reqHours,\n    position: $position\n  ){\n    id\n    email\n    phone\n    contractType\n    reqHours\n    position\n  }\n}`\n\nexport const STAFF_ADD = gql`\n  mutation addStaff( $name: String!, $email: String!, $contractType: String! , $ contractHours: Int!, $position: String, $idCardCode: String){\n    addStaff(\n      name: $name,\n      email:$email,\n      contractType: $contractType,\n      contractHours: $contractHours,\n      position: $position\n      idCardCode: $idCardCode\n    ){\n      id,\n      name,\n      email,\n      phone\n    }\n  }\n`\n\nexport const COMPLETE_REGISTRATION = gql`\n  mutation registerStaff( $registerCode:String!, $username: String!, $password: String!){\n    registerStaff(\n      registerCode: $registerCode\n      username: $username,\n      password:$password,\n    ){\n      status,\n      message\n\n    }\n  }`\n","import React, { useState,useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Button, Form, Radio, Grid, Header, Image, Segment, Divider } from 'semantic-ui-react'\nimport { ALL_STATION } from '../queries/stationQuery'\nimport { LOGIN_STAFF } from '../mutations/staffMutation'\n\n\nconst StaffLoginPage = () => {\n  const history = useHistory()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  /**\n   * staff Login mutation hook\n   */\n  const [login,{ loading, error, data }] = useMutation(LOGIN_STAFF,{\n    onError: (error) => {\n      console.log(error)\n    }\n  })\n\n  /**\n   * side effect when the staff login mutation is executed and loginToStationResult is set\n   */\n  useEffect(() => {\n    if ( data ) {\n      const staff = data.staffLogin\n      sessionStorage.setItem('staffKey',JSON.stringify(staff))\n      history.push(`/staff/${staff.id}`)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data])\n\n  /**\n   * function for station loginStation action\n   * @param {event} event submit button event\n   */\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    login({ variables:{ username:username, password: password } })\n\n  }\n\n  /**\n   * If stationKey is found on localStorage/sessionStorage skip the loginStation and browse shift report\n   */\n  let storedStaffKey = JSON.parse(sessionStorage.getItem('staffKey'))\n  if(storedStaffKey){\n    history.push(`/staff/${storedStaffKey.id}`)\n  }\n\n  /**If Login mutation error */\n  if (error) return `Error! ${error}`\n\n\n  return (\n\n    <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as='h2' color='blue' textAlign='center'>\n          <Image src='/LogoMin.png' />  Log-in to your account\n        </Header>\n        <Form size='large' style={{ textAlign:'left' } } onSubmit={handleLogin}>\n          <Segment stacked>\n            <Form.Input fluid icon='user' iconPosition='left' placeholder='username' onChange = {(e,{ value }) => setUsername(value) }/>\n            <Form.Input\n              fluid\n              icon='lock'\n              iconPosition='left'\n              placeholder='Password'\n              type='password'\n              onChange = {(e,{ value }) => setPassword(value) }\n            />\n            <Button type = 'submit' color='blue' fluid size='large' >\n            Login\n            </Button>\n\n          </Segment>\n        </Form>\n        <Divider horizontal>Or</Divider>\n        <Segment  stacked>\n          <Button type = 'button' content='Log in to station'size='large' color=\"teal\" fluid\n            onClick = {() => history.push('/stationLogin')}/>\n        </Segment>\n\n      </Grid.Column>\n\n    </Grid>\n\n\n  )\n\n\n}\n\nexport default StaffLoginPage","import { gql } from '@apollo/client'\r\nexport const GET_TIMESHEETS =\r\ngql `query getTimesheetByUser($staff: String!, $filterDuration: String! ,$number: Int!, $year: Int!){\r\n  getTimeSheetByUser(\r\n    staff: $staff,\r\n     filterDuration: $filterDuration, \r\n     number: $number, \r\n     year: $year\r\n    ) {\r\n      id\r\n      startTime\r\n      status\r\n      date\r\n      endTime\r\n      break\r\n      remarks{\r\n        by\r\n        date\r\n        edit\r\n        text\r\n        title\r\n      }\r\n      staff{\r\n        name\r\n        reqHours\r\n        contractType\r\n      }\r\n      shiftReport {\r\n        shift\r\n        id\r\n        station {\r\n          id\r\n          location\r\n        }\r\n      }\r\n\r\n      shift\r\n      station{\r\n        id\r\n        location\r\n      }\r\n\r\n  },\r\n\r\n  getStaff(\r\n    id: $staff\r\n    ){    \r\n  name}\r\n\r\n}`\r\n\r\nexport const GET_ALL_TIMESHEETS = gql`\r\nquery getAllTimeSheets(\r\n  $staffId: String, $staff: [String] ,$period: String, $from: String , $to: String, $number: Int, $groupBy: String , $year: Int, $stations: [String], $filterStatus: String\r\n){\r\n  getAllTimeSheets(\r\n    staff:$staff,\r\n    period:$period,\r\n    from: $from,\r\n    to:$to ,\r\n    number:$number ,\r\n    groupBy:$groupBy,\r\n    year:$year ,\r\n    stations:$stations\r\n    filterStatus: $filterStatus\r\n    )\r\n  getStaff(\r\n      id: $staffId\r\n      ){    \r\n    name}\r\n   \r\n}`","import React from 'react'\nimport { Form, Input, Dropdown, Segment, Header, List, Label } from 'semantic-ui-react'\nimport { TextAreaField } from '../StationReportPage/NewReportForm/FormFields'\nimport { useField, useFormikContext } from 'formik'\nimport _ from 'lodash'\n\nexport const InputField = ({ ...props }) => {\n  const [field, meta] = useField(props)\n  return (\n    <Form.Field>\n      <label>{props.inputlabel }</label>\n      <Input  {...field} {...props}  error= {meta.touched && meta.error} />\n    </Form.Field>\n  )\n\n}\n\n\nexport const RemarkField = ({ name }) => {\n  const { getFieldProps } = useFormikContext()\n  const remarkTitle = getFieldProps(`${name}.title`).value\n  const remarkDate = getFieldProps(`${name}.date`).value\n  const remarkBy = getFieldProps(`${name}.by`).value\n  const remarkText = getFieldProps(`${name}.text`).value\n  const remarkEdit = getFieldProps(`${name}.edit`).value\n\n  if (!remarkTitle || remarkTitle === 'Add Clearification')\n  {\n    return (\n      <Segment basic>\n        {remarkTitle &&\n        <Header as ='h5'>\n          {remarkTitle === 'Add Clearification'&& 'Clearification Added' }\n          <Header.Subheader>by {remarkBy} on {remarkDate}</Header.Subheader>\n        </Header>\n        }\n        <TextAreaField name={`${name}.text`}></TextAreaField>\n      </Segment>\n    )\n  }\n\n  return (\n    <Segment>\n      <Header as ='h5'>\n        {remarkTitle}\n        <Header.Subheader>by {remarkBy} on {remarkDate}</Header.Subheader>\n      </Header>\n      {remarkTitle && <p>{remarkText}</p>}\n      {remarkEdit && <List>\n        {_.map(remarkEdit,(val,k) =>\n          <List.Item key={k}>\n            {k[0].toUpperCase() + k.substring(1).replace(/([a-z])([A-Z])/g, '$1 $2')}:\n            <span style={{ color:'red',fontStyle: 'italic', textDecoration: 'line-through' }}> {val.split('to')[0]} </span>\n            to\n            <span style={{ color:'green' }}> {val.split('to')[1]} </span>\n          </List.Item> )}\n\n      </List> }\n\n    </Segment>\n  )\n\n}\n\nexport const DropDownField = ({ label,...props }) => {\n  const{ setFieldValue }= useFormikContext()\n  const [field,meta] = useField(props)\n  return (\n    <Form.Field error= { meta.touched && meta.error?true:false}>\n      {!props.labeled && <label>{label }</label>}\n      <Input\n        label= {props.labeled? label :false}\n        input = {<Dropdown {...field} {...props}\n          style= {\n            props.labeled? { margin: 0,\n              borderTopLeftRadius: 0,\n              borderBottomLeftRadius: 0 }:{}\n          }\n          onChange = {props.onChange? props.onChange: (e,{ value }) => {\n            setFieldValue(props.name,value)\n          }}\n        ></Dropdown>}></Input>\n      {meta.touched && meta.error &&\n      <Label pointing prompt>\n        {meta.error}\n      </Label>}\n    </Form.Field>\n  )\n\n}","import React, { useEffect, useState } from 'react'\nimport { Modal,Form, Button, Message, Segment, Header, Icon, Dimmer, Loader } from 'semantic-ui-react'\nimport { DateInputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { operateDate, formatDate, toDate } from '../../utils/DateHelper'\nimport { FieldArray, Formik } from 'formik'\nimport { validateStartEndTime } from '../StationReportPage/NewReportForm/validator'\nimport _ from 'lodash'\nimport { ALL_STATION } from '../../queries/stationQuery'\nimport { GET_SHIFTREPORT_ID } from '../../queries/shiftReportQuery'\nimport { UPDATE_TIMESHEET } from '../../mutations/timeSheetMutation'\nimport { gql, useLazyQuery, useMutation, useQuery } from '@apollo/client'\nimport { DropDownField, InputField, RemarkField } from './TimeSheetEditFields'\nimport { useParams } from 'react-router-dom'\n\nconst  TimeSheetEditModel = (props) => {\n  const params= useParams()\n  const self=  JSON.parse( sessionStorage.getItem('staffKey'))\n  const { loading,data } = useQuery(ALL_STATION,{ skip: props.add === false  })\n\n\n  const [getShiftReport,{ loading:shiftReportLoading, data:shiftReportData }] = useLazyQuery(GET_SHIFTREPORT_ID)\n  const [updateTimeSheet,{ loading: updateTimeSheetLoading }] = useMutation(UPDATE_TIMESHEET)\n  const [stationOptions, setStationOptions] = useState([])\n  const [newRemarkField,setNewRemarkField] = useState(false)\n\n  useEffect(() => {\n    if(data){\n      const stations = data.allStations\n      const stationOptions = stations.map((station,index) => {\n        return { key:index, value: station.id, text: station.location }\n      })\n      setStationOptions(stationOptions)\n    }\n  },[data])\n\n\n  const getShiftList= (stationId) => {\n    if(data){\n      const station = data.allStations.filter(station => station.id === stationId)\n\n      if(station && station[0].shifts) {\n\n        const shiftList = station[0].shifts.map((shift,index) => {\n\n          return{ key:index, value: shift.name, text: shift.name }\n        })\n\n        return shiftList\n\n      }\n    }\n  }\n\n  /**returns approprite shift selection value to appropite shift based on starttime for choosen station  */\n  const getRecomendedShiftOption = (startTime,stationId) => {\n    if(data){\n      const station = data.allStations.filter(station => station.id === stationId)\n      if(station && station[0].shifts) {\n        const sdt = new Date(toDate(startTime))\n        const shiftName = station[0].shifts.reduce((p,c) => {\n          /**Setting the shiftTime to given startTime for comparision  */\n          const splitSt = c.startTime.split(':')\n          const st = new Date(sdt)\n          st.setHours(splitSt[0])\n          st.setMinutes(splitSt[1])\n          /** Diffence between given startTIme and shift startttime */\n          const diff = (sdt-st)/(60*60*1000)\n          /**return the lowest positive diffence if exist or highest negative differnce*/\n          if((p.diff<0 && diff > p.diff) || (p.diff >= 0 && diff < p.diff && diff < 0)){\n            return { name: c.name ,diff: diff }\n          }\n\n          return p\n\n        },{ name:'',diff:-24 })\n\n        return shiftName.name\n\n      }\n    }\n\n\n  }\n\n  const handleShiftChange = (startTime,shift,station) => {\n\n    const st = new Date(toDate(startTime))\n    const ISODate = new Date ( Date.UTC(st.getFullYear() , st.getMonth() , st.getDate())).toISOString()\n    const vars = { date:ISODate ,shift: shift, station:station }\n    getShiftReport({ variables: vars })\n  }\n\n  const submit = async (values) => {\n    const vars = { ...values,break: parseInt(values.break) }\n    if(shiftReportData && shiftReportData.getShiftReportByShift &&  shiftReportData.getShiftReportByShift.id){\n      vars.handover = shiftReportData.getShiftReportByShift.id\n    }\n\n    if(!props.add){\n      vars.id = props.id\n    }\n\n    /**If new remarks is added only update added remarks */\n    if(values.remarks.length >= props.remarks.length){\n      vars.remarks.splice(0,props.remarks.length)\n    }\n    updateTimeSheet(\n      {\n        variables: vars,\n        update:(store,response) => {\n        /** Need to update cache only if add , graphql auto updates timesheet on update */\n          if(props.add){\n            store.modify ({\n              fields:{\n                getTimeSheetByUser(existingTimeSheetRefs , { readField }){\n                  const newTimeSheet = response.data.addToTimeSheet\n\n                  if(existingTimeSheetRefs.some(ref => readField('id',ref) === newTimeSheet.id)){\n                    return existingTimeSheetRefs\n                  }\n\n                  return [...existingTimeSheetRefs,newTimeSheet]\n\n                },\n\n                getAllTimeSheets(existingTimeSheetRefs, { readField }){\n                  const period = params.period\n                  if(!period){\n                    return existingTimeSheetRefs\n                  }\n                  const newTimeSheet = response.data.addToTimeSheet\n                  const modify = _.cloneDeep(existingTimeSheetRefs)\n\n                  const totHours = (((toDate(newTimeSheet.endTime) - toDate(newTimeSheet.startTime) )/ (60*1000*60)) - (newTimeSheet.break || 0)/60).toFixed(1)\n                  if(!modify[period]){\n                    modify[period] = {}\n                  }\n\n                  if(!modify[period][newTimeSheet.staff.name]){\n                    modify[period][newTimeSheet.staff.name]= {}\n                    modify[period][newTimeSheet.staff.name].station = { [newTimeSheet.station.location]:1 }\n                    modify[period][newTimeSheet.staff.name].itemsPending = 1\n                    modify[period][newTimeSheet.staff.name].totHours = totHours\n\n                    return modify\n                  }\n\n                  const stations = modify[period][newTimeSheet.staff.name].station\n                  modify[period][newTimeSheet.staff.name] = {\n                    ...modify[period][newTimeSheet.staff.name],\n                    itemsPending:modify[period][newTimeSheet.staff.name].itemsPending+1,\n                    totHours: (parseFloat(modify[period][newTimeSheet.staff.name].totHours) + parseFloat(totHours)).toFixed(1),\n                    station:  { ...stations,[newTimeSheet.station.location]: stations[newTimeSheet.station.location]+1 }\n                  }\n\n                  return modify\n\n                }\n              },\n              broadcast: false\n            })\n          }\n        }\n      })\n  }\n\n  const closeModel = () => {\n    props.setOpen(false)\n    setNewRemarkField(false)\n\n  }\n\n  const getInitValues = () => {\n    const init = {\n      startTime: props.startTime ,\n      endTime: props.endTime ,\n      break: props.break || 30,\n      remarks: props.remarks || [],\n\n    }\n\n    if(props.add){\n      init.staff = props.staffId\n      init.startTime = formatDate((new Date(props.date).setHours(0)))\n      init.endTime= (new Date(props.date).setHours(8)) > Date.now() ? formatDate(toDate(Date.now())) : formatDate((new Date(props.date).setHours(8)))\n      init.station = ''\n      init.shift = ''\n      init.remarks = [{ title:'Manually Entered to TimeSheet' , date: formatDate(Date.now()), by: self.name }]\n\n    }\n    /**/\n    return init\n  }\n\n  /**Function to auto generate remarks field based on user actions */\n  const autoAddRemarks = (values) => {\n    /**If the user is not making a new entry */\n    if (!props.add) {\n      const insertAt = props.remarks.length === 0 ? 0 : props.remarks.length\n      let newRemarks = [...values.remarks]\n      /**If start time and end time is modified from the original  */\n      if((values.startTime !== props.startTime || values.endTime !== props.endTime)){\n        /**Adding Filed Edited remarks to the last index of original remarks field, user entered remark should appear after this if there is any */\n        if(!newRemarks[insertAt] || (newRemarks[insertAt] && newRemarks[insertAt].title!== 'Edited')){\n          newRemarks.splice(insertAt,0,{ title:'Edited',date: formatDate(Date.now()),by:self.name, edit:{} })\n        }\n\n        if(values.startTime !== props.startTime){\n          newRemarks[insertAt].edit.startTime = `${props.startTime} to  ${values.startTime}`\n        }\n        if(values.endTime !== props.endTime){\n          newRemarks[insertAt].edit.endTime= `${props.endTime} to  ${values.endTime}`\n        }\n        values.remarks= newRemarks\n      }\n      /**If startTime is not modified or restored to original Value */\n      if(values.startTime === props.startTime){\n\n        if(newRemarks[insertAt] && values.remarks[insertAt].edit){\n          delete newRemarks[insertAt].edit.startTime\n        }\n      }\n      /**If startTime is not modified or restored to original Value */\n      if(values.endTime === props.endTime){\n        if(newRemarks[insertAt] && values.remarks[insertAt].edit){\n          delete newRemarks[insertAt].edit.endTime\n        }\n      }\n      /*If everything was restored to original value then remove the edited remarks */\n      if(newRemarks[insertAt] && newRemarks[insertAt].edit && _.isEmpty(newRemarks[insertAt].edit)){\n        newRemarks.splice(insertAt,1)\n      }\n      values.remarks= newRemarks\n    }\n  }\n\n  const modalHeader = props.add? `Adding Work Time Record to Date ${formatDate (Date.parse(props.date)).split(' ')[0]}`: `Editing Work Time Record to Date ${formatDate (Date.parse(props.date)).split(' ')[0]}`\n  return (\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {props.open}\n      onClose= {() => closeModel()}\n      onOpen= {() => props.setOpen (true)}\n    >\n      <Modal.Header>{modalHeader} </Modal.Header>\n      <Modal.Content>\n\n\n\n        {updateTimeSheetLoading &&\n            <Dimmer active>\n              <Loader />\n            </Dimmer>\n        }\n        <Formik\n\n          initialValues = {getInitValues()}\n          validate = {values => {\n\n            let errors = {}\n            errors = { ...errors,...validateStartEndTime(values.startTime,values.endTime,props.date) }\n            if(_.isEmpty(errors)){\n              autoAddRemarks(values)\n            }\n\n            return errors\n\n\n          } }\n\n          onSubmit = {(values) =>\n          {\n            /**If last added remark is empty remark then remove from values\n             * Retrived Remarks from database will have a title, new remark will always be at the end of array and may not have either title or text\n             */\n            if(values.remarks.length &&  !values.remarks[values.remarks.length-1].title  &&  !values.remarks[values.remarks.length-1].text ){\n\n              const newRemarks = [...values.remarks]\n              newRemarks.splice(values.remarks.length-1,1)\n              values.remarks = newRemarks\n            }\n            /**If last added remark has text but no title then set title */\n            if(values.remarks.length &&  ! values.remarks[values.remarks.length-1].title &&  values.remarks[values.remarks.length-1].text){\n              values.remarks[values.remarks.length-1].title = 'Remark Added'\n            }\n\n            submit(values)}\n          }\n\n\n        >\n\n\n          {({ values,handleSubmit,setFieldValue }) =>\n\n            <Form size='large' style={{ marginBottom:'5rem' }} onSubmit = { handleSubmit} >\n\n              <Form.Group >\n\n                < DateInputField\n                  label= 'Start Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name ='startTime'\n                  maxDate = {operateDate(Date.now(),30,'m','sub')}\n                  minDate= {formatDate (Date.parse(props.date))}\n\n                />\n\n\n                < DateInputField\n                  label = 'End Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name='endTime'\n                  maxDate = {\n                    Date.now() < toDate(values.endTime)? formatDate(Date.now()) : operateDate(values.startTime,20,'h','add')\n                  }\n                  minDate= {operateDate(values.startTime,20,'m','add')}\n\n                />\n\n                <InputField\n                  inputlabel= 'Break'\n                  label = 'Minutes '\n                  labelPosition='right corner'\n                  name= 'break'\n                  type='number'\n                  min='0'>\n                </InputField>\n\n              </Form.Group>\n\n\n              {\n                /** If the user is inserting new timesheet  */\n                props.add &&\n      <Form.Group>\n\n        <DropDownField\n          label =' Select Station'\n          loading= {loading}\n          name = 'station'\n          placholder= 'Select Station'\n          search\n          selection\n          options= {stationOptions}\n          onChange = {  (e,{ value }) => {\n            setFieldValue('station',value)\n            const shift = getRecomendedShiftOption(values.startTime,value)\n            setFieldValue('shift',shift)\n            handleShiftChange(values.startTime,shift,value)\n\n          }}\n        ></DropDownField>\n\n        <DropDownField\n          label =' Select Shift'\n\n          disabled = {!values.station}\n          name = 'shift'\n          placholder= 'Select Shift'\n          search\n          selection\n          options= {values.station? getShiftList(values.station):[]}\n          onChange = {(e,{ value } ) => {\n            setFieldValue('shift',value)\n            handleShiftChange(values.startTime,value,values.station)\n          }}\n        ></DropDownField>\n\n\n      </Form.Group>\n              }\n\n              {shiftReportLoading &&\n      <Segment secondary loading>\n        Verifying {values.shift} Shift\n      </Segment>\n              }\n\n              {values.shift && shiftReportData && shiftReportData.getShiftReportByShift &&\n      <Segment clearing secondary>\n        <Header as='h3'><Icon name='check circle' color='green'></Icon> Verified</Header>\n        <Header floated='left' as='h5'>{shiftReportData.getShiftReportByShift.station.location} {values.shift} Shift {shiftReportData.getShiftReportByShift.startTime.split(' ')[0]}\n          <Header.Subheader><strong> Shift Start : </strong> {shiftReportData.getShiftReportByShift.startTime}<strong> Shift End : </strong> {shiftReportData.getShiftReportByShift.endTime} </Header.Subheader>\n        </Header>\n        <Button floated='right' onClick={() => props.openReport({ id: shiftReportData.getShiftReportByShift.id, open:true })} > View Shift Report</Button>\n\n      </Segment>\n              }\n\n              { /**If the shift is set and the shift report doesnot exist for corresponding shift */\n                values.shift && shiftReportData && !shiftReportData.getShiftReportByShift &&\n      <Message warning visible\n        header='Selected shift is not reported'\n        content='Adding to record to unreported shift will not be reflected on any shift reports thus cannot be verified. This may result on work time not being approved'\n      />\n              }\n\n              <label ><strong>Remarks</strong></label>\n              <FieldArray name='remarks'>\n                {({ push,remove }) => <>\n\n                  {values.remarks && values.remarks.length > 0 && values.remarks.map((remark,index) =>\n                    <RemarkField key= {index} name={`remarks.${index}`}></RemarkField>\n                  )}\n\n                  <Form.Button type='button'\n                    onClick= {(e) => {\n                      e.preventDefault()\n                      if(newRemarkField){\n                        remove(values.remarks.length-1)\n                        setNewRemarkField(false)\n                      } else{\n                        if(values.remarks.length > 0 && values.remarks[values.remarks.length-1].title === 'Clearification Requested'){\n                          push({ title:'Add Clearification',date: formatDate(Date.now()),by:self.name,text:'' })\n                        } else {\n                          push({ title:'',date: formatDate(Date.now()),by:self.name,text:'' })\n                        }\n                        setNewRemarkField(true)\n                      }\n                    }}>\n                    {!newRemarkField && values.remarks.length > 0 && values.remarks[values.remarks.length-1].title === 'Clearification Requested' ?\n                      'Add Clearification' :\n                      newRemarkField?'Remove Remark':\n                        'Add Remark'}\n                  </Form.Button>\n\n\n\n                </>\n                }\n              </FieldArray>\n              <Button type='submit' floated='right' positive>Save</Button>\n              <Button type='button' floated='right' negative onClick={() => closeModel()}>Cancel</Button>\n            </Form>}\n        </Formik>\n\n\n\n      </Modal.Content>\n\n    </Modal>\n\n\n  )\n}\n\nexport default TimeSheetEditModel","import {  gql, useMutation } from '@apollo/client'\nimport React, { useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { Table,Button, Popup, Header, Message,  Segment,Form } from 'semantic-ui-react'\nimport { APPROVE_TIMESHEET, DELETE_TIMESHEET, REQUEST_CLARIFICATION } from '../../mutations/timeSheetMutation'\nimport TimeSheetEditModel from './TimeSheetEditModel'\nimport _ from 'lodash'\n\nconst TimeSheetRow = ({ timeSheet, rowSpan ,openReport ,index ,date ,staffId }) => {\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\n\n  const params= useParams()\n\n  const permission = staff.permission && staff.permission.timesheet\n\n  //console.log(permission)\n\n  const startTime = timeSheet.startTime\n  const endTime = timeSheet.endTime\n  const station = timeSheet.station && timeSheet.station.location\n  const shift = (timeSheet.shiftReport && timeSheet.shiftReport.shift) || timeSheet.shift\n  const  breakt = timeSheet.break\n  const totalHours = timeSheet.total\n  const ot = timeSheet.overTime\n  const remarks = timeSheet.remarks || []\n  const [open,setOpen] = useState(false)\n  const [add,setAdd] = useState(false)\n  const [deleteOpen,setDeleteOpen]=  useState(false)\n  const [clarifyOpen,setClarifyOpen]=  useState(false)\n\n  const [clarifyText,setClarifyText] = useState('')\n\n  const [approveTimesheet,{ loading:timesheetSignLoading }] = useMutation(APPROVE_TIMESHEET)\n  const [mutatedeleteTimesheet,{ loading:deleteLoading }] = useMutation(DELETE_TIMESHEET)\n  const [requestClarification,{ loading:clarifyLoading }] = useMutation(REQUEST_CLARIFICATION)\n\n  const deleteTimeSheet = () => {\n    mutatedeleteTimesheet(\n      { variables:{ id: timeSheet.id },\n        update: (store,response) => {\n          if(response.data.deleteTimeSheet && response.data.deleteTimeSheet.status === 'SUCCESS') {\n            store.modify({\n              fields:{\n                getTimeSheetByUser({ DELETE }){\n                  return DELETE\n                },\n\n                getAllTimeSheets(existingTimeSheetRefs, { readField }){\n                  const period = params.period\n                  if(!period){\n                    return existingTimeSheetRefs\n                  }\n\n                  const modify = _.cloneDeep(existingTimeSheetRefs)\n\n\n                  const totHours = modify[period][timeSheet.staff.name].totHours-totalHours\n                  if (totHours === 0){\n                    delete (modify[period])\n                    return modify\n                  }\n\n                  const stations = modify[period][timeSheet.staff.name].station\n                  modify[period][timeSheet.staff.name] = {\n                    ...modify[period][timeSheet.staff.name],\n                    itemsPending:modify[period][timeSheet.staff.name].itemsPending-1,\n                    totHours: totHours,\n                    station:  { ...stations,[timeSheet.station.location]: stations[timeSheet.station.location]-1 }\n\n                  }\n\n                  return modify\n                }\n              },\n\n              broadcast: false\n\n            })\n\n          }\n\n        }\n      })\n\n  }\n\n  const askToclarify = () => {\n    const vars = {\n      id: timeSheet.id,\n      clearify: clarifyText\n    }\n\n    requestClarification({ variables: vars ,\n      update:(store,response) => {\n        store.writeFragment({\n          id: `TimeSheet:${timeSheet.id}`,\n          fragment: gql `fragment AddRemarks on TimeSheet {\n            remarks\n          }`,\n          data: {\n            remarks : response.data.requestClarification.remarks\n          }\n        },\n        )\n\n        const test = store.readFragment({\n          id: `TimeSheet:${timeSheet.id}`,\n          fragment: gql ` fragment ReadRemarks on TimeSheet {\n            remarks\n          }`\n        })\n\n        console.log(test)\n\n\n      } }\n\n\n    )\n\n  }\n\n  const updateTimeSheetApproval = () => {\n    approveTimesheet({\n      variables:{ id:timeSheet.id , status:timeSheet.status==='APPROVED'?'':'APPROVED' },\n      update: (store,response) => {\n        store.modify({\n          fields: {\n            getAllTimeSheets(existingTimeSheetRefs, {  readField }){\n              const period = params.period\n              if(!period){\n                return existingTimeSheetRefs\n              }\n\n              const approved = response.data.approveTimeSheet.status\n              const modify = _.cloneDeep(existingTimeSheetRefs)\n\n              console.log('before',modify[period][timeSheet.staff.name].itemsPending)\n\n              modify[period][timeSheet.staff.name].itemsPending = approved==='APPROVED'? modify[period][timeSheet.staff.name].itemsPending-1: (modify[period][timeSheet.staff.name].itemsPending)+1\n\n\n              return modify\n\n            }\n          }\n        })\n\n\n      }\n    })\n\n  }\n\n  const isWeekDay = ()  => {\n    const today = new Date(date).getDay()\n    if( today === 0 || today ===6){\n      return false\n    }\n    return true\n  }\n  /**If the id is a valid id string, empty rows with no data will not have valid ids. */\n  const isEmptyRow = timeSheet.id.toString().match(/^[0-9a-fA-F]{24}$/) ? false: true\n\n  return (\n    <Table.Row  key = {timeSheet.id} negative= {!isWeekDay()}>\n      {index === 0 && <Table.Cell collapsing rowSpan={rowSpan}>{ date.split('T')[0]}</Table.Cell>}\n      <Table.Cell> {station} </Table.Cell>\n      <Table.Cell onClick= {(e) => {\n        e.preventDefault()\n        openReport({ id: timeSheet.shiftReport && timeSheet.shiftReport.id, open:true })\n      }}>\n        {  // eslint-disable-next-line jsx-a11y/anchor-is-valid\n          timeSheet.shiftReport && timeSheet.shiftReport.id ? <a href =\"\"> {shift} </a> : shift?`${shift} `:''\n        }  </Table.Cell>\n      <Table.Cell >{ startTime && startTime.split(' ')[1]}</Table.Cell>\n      <Table.Cell> {endTime &&endTime.split(' ')[1]} </Table.Cell>\n      <Table.Cell> {breakt} </Table.Cell>\n      <Table.Cell> {totalHours?totalHours:''} </Table.Cell>\n      {index === 0 &&  <Table.Cell  rowSpan={rowSpan} > {ot?ot:''} </Table.Cell>}\n      <Table.Cell> {timeSheet.status === 'PENDING_APPROVAL'? 'No' : timeSheet.status === 'APPROVED'? 'Yes' : timeSheet.status  } </Table.Cell>\n      <Table.Cell>\n        {remarks && remarks.length>0 &&\n        <>{`${remarks[remarks.length-1].title} ${remarks[remarks.length-1].date.split(' ')[0]}` }  <br/>  {remarks[remarks.length-1].text}`  <br/>\n          {// eslint-disable-next-line jsx-a11y/anchor-is-valid\n            <a href='#'\n              onClick = {(e ) => {\n                e.preventDefault()\n                setOpen(true)\n              }\n\n              }>See all</a>}\n\n        </>\n        }</Table.Cell>\n      <Table.Cell  >\n\n        <Segment loading={timesheetSignLoading || deleteLoading || clarifyLoading} disabled={timesheetSignLoading || deleteLoading || clarifyLoading} size='tiny' basic  style={{ width:'max-content', display:'inline-block' }} >\n\n\n          {\n            /**\n               * Add Button,\n               * visible only if data staff is loggedin Staff or  logged in staff has permission and no record exists for  that day\n               */\n            isEmptyRow  && permission && (  permission.edit.length >0 || staff.id === staffId ) &&\n              <Button icon='add' size='mini' circular onClick = {() => {\n                setAdd(true)\n                setOpen(true)\n\n              }}/>\n\n          }\n          {\n          /**\n           * If the record exist for that day\n           */\n            !isEmptyRow &&\n            <>\n              {\n                /**\n                 * Edit Button,\n                 * visible only\n                 *    if data staff is loggedin Staff\n                 *    or\n                 *    logged in staff has permission to edit timesheet for that station\n                 *    and\n                 *    record exists for that day\n                 *    and\n                 *    record is not already approved\n                 *\n                 */\n                timeSheet.status !== 'APPROVED' && ((permission.edit.filter(station => timeSheet.station && station._id === timeSheet.station.id ).length !== 0 )) &&\n                  <Popup\n                    trigger=  {<Button icon='edit' size='mini' circular onClick = {() => {\n                      setAdd(false)\n                      setOpen(true)\n                    }}/>}\n                    content='Edit Timesheet'\n                    position='bottom center'\n                  />}\n\n\n              { /**\n                   * Approve Button,\n                   * visible only\n                   *    if data staff is not loggedin Staff\n                   *    or\n                   *    logged in staff has permission to sign timesheet for that station\n                   *    and\n                   *    record is not already approved\n                   */\n                permission.sign.filter(station => timeSheet.station && station._id === timeSheet.station.id ).length !== 0  &&  staff.id !== staffId &&\n                  <>\n                    <Popup\n                      trigger=  { <Button  color ={timeSheet.status === 'APPROVED'?'green':'grey'} icon='check' size='mini' circular onClick = {() => {\n                        updateTimeSheetApproval()\n                      }}/>}\n                      content={timeSheet.status === 'APPROVED'? 'Undo Approve': 'Approve'}\n                      position='bottom center'\n                    />\n\n                    {\n                      /**\n                      * Request Clarification button,\n                      * visible only\n                      *    record is not already approved\n                      */\n\n                      timeSheet.status !== 'APPROVED' &&\n                      <Popup size='huge' wide='very' style={{ width:'100%' }}\n                        trigger=  { <Button color='blue' icon='talk' size='mini' circular />}\n                        onOpen= {() => setClarifyOpen(true)}\n                        onClose= {() => setClarifyOpen(false)}\n                        open = {clarifyOpen}\n                        content={\n                          <Form onSubmit = {() => {\n                            askToclarify()\n                            setClarifyOpen(false)\n                          }}>\n                            <Header as ='h5'>Request Clearification </Header>\n                            <Form.TextArea\n                              value= {clarifyText}\n                              onChange= {\n                                (e,{ value }) => setClarifyText(value)\n                              }>\n\n                            </Form.TextArea>\n                            <Form.Button floated='right' type= 'submit' primary> Send</Form.Button>\n                          </Form>\n                        }\n                        on='click'\n                        position='bottom right'\n                      />\n                    }\n                  </>\n              }\n\n              {\n                /**\n                * Delete Button,\n                * visible only\n                *    if data staff is  loggedin Staff\n                *    or\n                *    logged in staff has permission to edit timesheet for that station\n                *    and\n                *    record is not already approved\n                */\n\n                timeSheet.status !== 'APPROVED' &&((permission.edit.filter(station => timeSheet.station && station._id === timeSheet.station.id ).length !== 0)   || staff.id === staffId  ) &&\n                <Popup as={Message} warning\n                  trigger=  { <Button  color = 'red' icon='trash' size='mini' circular />}\n                  content={\n                    <>\n\n                      <Message.Header>Are you sure, you want to remove this record?</Message.Header>\n                      <p> Action is non reversible and will remove all the instances of this record from the system.</p>\n\n                      <Button fluid color='red' icon='trash' content='Confirm' onClick = {() => {\n                        deleteTimeSheet(timeSheet.id)\n                        setDeleteOpen(false)\n\n                      }} /></>}\n                  on='click'\n                  onOpen= {() => setDeleteOpen(true)}\n                  onClose= {() => setDeleteOpen(false)}\n                  open={deleteOpen}\n                  position='bottom center'\n                />}\n            </>}\n        </Segment>\n\n\n\n      </Table.Cell>\n      <TimeSheetEditModel\n        staffId = {staffId}\n        id= {timeSheet.id}\n        openReport={openReport}\n        date = {date}\n        open={open}\n        setOpen= {setOpen}\n        startTime= {startTime}\n        endTime= {endTime}\n        break= {breakt}\n        add= {add}\n        remarks= {remarks} >\n      </TimeSheetEditModel>\n    </Table.Row>)\n\n}\n\nexport default TimeSheetRow","import React,{ Fragment, useState } from 'react'\nimport { Button, Header, Table } from 'semantic-ui-react'\nimport { toDate } from '../../utils/DateHelper'\nimport _ from 'lodash'\nimport ReportViewModal from '../ShiftReport/ReportViewModal'\nimport TimeSheetRow from './TImeSheetRow'\n\n\nconst TimeSheetsReport = ({ startDate,endDate,data, staffId, setAllApproved ,title })  => {\n  const [openReport,setOpenReport]= useState({ id:'', open: false })\n\n  /** sets the calender from start date and end dates so the empty dates will also be displayed on report*/\n  const calenderArray =[...new Array( Math.ceil((endDate - startDate)/(24*60*60*1000)) +1 )].map((n,index) => {\n    const day = index\n    const date = new Date ( Date.UTC(startDate.getFullYear() , startDate.getMonth() , startDate.getDate()+day)).toISOString()\n    return date\n  } )\n\n  /**Converting calender array to object */\n  const calenderObject = _.zipObject(calenderArray,calenderArray.map((val,index) => [{ id:index }]))\n  let netTotal =0\n  let netOt = 0\n\n  let shiftDate\n  if(data) {\n\n    /**There is chance that the staff might be on 2 shifts on the day so grouping by date */\n    shiftDate = _.groupBy(data.getTimeSheetByUser, 'date')\n\n    const formatData = shiftDate && _.mapValues(shiftDate,(timeSheets,date) => {\n      let totalDaily = 0\n      let ot = 0\n      timeSheets = timeSheets.map((timesheet,index) => {\n        const breakt = (timesheet.break*60*1000)\n        const total =  ((toDate(timesheet.endTime) - toDate(timesheet.startTime) - breakt)/ (60*1000*60)).toFixed(1)\n\n        timesheet = { ...timesheet,total:parseFloat(total) }\n\n        totalDaily = totalDaily + parseFloat(total)\n\n        /**Overtime rules can be imlemented here\n         * For now for simplicity for Employee sundays is 100% saturday is 50%  and 8 hrs(specified by contractType) + is overtime, for contractor 10hrs + is overtime\n         */\n\n        /**If staff is a employee\n        const today = new Date(toDate(timesheet.startTime)).getDay()\n        if( timesheet.staff.contractType === 'Employee') {\n          /**If sunday */\n        /*if(today === 0 ){\n            ot = (totalDaily+parseFloat(total) - timesheet.staff.reqHours).toFixed(1)\n          }\n          /**If saturday */\n        /* else if(today === 6 ){\n            ot = (totalDaily + 0.5 * parseFloat(total) - timesheet.staff.reqHours).toFixed(1)\n          }\n          else{\n            ot = (totalDaily - timesheet.staff.reqHours).toFixed(1)\n          }\n        }\n        else{\n          ot =  (totalDaily - timesheet.staff.reqHours).toFixed(1)\n        }*/\n        ot =  (totalDaily - timesheet.staff.reqHours).toFixed(1)\n        return timesheet\n      })\n      timeSheets[0] = { ...timeSheets[0],overTime:ot }\n      netOt = netOt + parseFloat(ot)\n      netTotal = netTotal + totalDaily\n      return timeSheets\n    } )\n\n    shiftDate = ( { ...calenderObject,...formatData })\n\n  }\n\n  const stickyTh = {\n    position: 'sticky',\n    top : '0',\n    zIndex: 1\n\n\n  }\n\n  return (\n    <>\n      {title &&\n     <Header as = 'h5' floated='right'>{title}</Header>\n      }\n      <Table celled striped structured textAlign='center'>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell style= {stickyTh}> Date </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Station </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Shift </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Start Time </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> End Time </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Break (Mins) </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Total (Hrs) </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> OverTime </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Approved </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Remarks </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Actions</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {shiftDate && _.map(shiftDate,(timeSheets,date) =>\n            <Fragment key = {date}>\n              {timeSheets.map( (timeSheet,index) =>\n                <TimeSheetRow  staffId= {staffId} date = {date} index = {index} key = {timeSheet.id} openReport= {setOpenReport} timeSheet={timeSheet} rowSpan={timeSheets.length} />\n              )\n              }</Fragment>\n          )\n          }\n\n        </Table.Body>\n        <Table.Footer>\n          <Table.Row >\n            <Table.HeaderCell  colSpan='6'>Total</Table.HeaderCell>\n            <Table.HeaderCell> {netTotal.toFixed(1)} </Table.HeaderCell>\n            <Table.HeaderCell> {netOt.toFixed(1)} </Table.HeaderCell>\n            <Table.HeaderCell colSpan='3' />\n          </Table.Row>\n        </Table.Footer>\n      </Table>\n\n      <ReportViewModal setOpenReport= {setOpenReport} openReport={openReport}></ReportViewModal>\n    </>)\n}\n\nexport default TimeSheetsReport","import { useQuery } from '@apollo/client'\nimport React ,{ useEffect, useState } from 'react'\nimport { Loader, Header, Segment,Dropdown, Button ,Form, Popup } from 'semantic-ui-react'\n\nimport { GET_TIMESHEETS } from '../../queries/timeSheetQuery'\nimport { getWeekNumber, getDatefromWeek  } from '../../utils/DateHelper'\nimport TimeSheetsReport from '../TimeSheetsReport'\n\nconst TimeSheet = ({ staffId,setStaffName, period ,selected ,selectedYear ,timesheetOnly }) => {\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const [selectBy,setSelectBy] = useState (period || 'week')\n  const today = new Date()\n  const [number,setNumber] = useState (selected || getWeekNumber(today))\n  const [year,setYear] = useState(selectedYear || today.getFullYear())\n  const queryParams = { staff: staffId || staff.id , filterDuration: selectBy  , number:number, year: year }\n\n  const { error,loading,data } = useQuery(GET_TIMESHEETS, { variables:queryParams })\n\n  useEffect(() => {\n    if (data && data.getStaff )\n      setStaffName(data.getStaff.name)\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[data])\n\n  /** Get Month name from index\n  * Negative index gets month from end of array\n  */\n  const months = new Proxy(['January','February','March','April','May','June','July','August','September','October','November','December'], {\n    get(target, prop) {\n      if (!isNaN(prop)) {\n        prop = parseInt(prop, 10)\n        if (prop < 0) {\n          prop += target.length\n        }\n      }\n      return target[prop]\n    }\n  })\n\n\n  /**Get startDate of timeSheet Report */\n  const filterStartDate  =  () => {\n    let sdate\n    if(selectBy==='month'){\n      sdate = new Date(year,number,1)\n    } else {\n      sdate  = getDatefromWeek(number,year)\n    }\n    sdate = new Date(Date.UTC( sdate.getFullYear(), sdate.getMonth(), sdate.getDate()))\n    return (sdate)\n  }\n\n  /**Get startDate of timeSheet Report */\n  const filterEndDate  =  () => {\n    let ed\n    if(selectBy==='month'){\n      ed = new Date(year,number+1,0)\n    } else {\n      const sd  = getDatefromWeek(number,year)\n      ed = new Date(Date.UTC( sd.getFullYear(), sd.getMonth(), sd.getDate()+6))\n    }\n    if(ed >= today ){\n      ed = new Date(Date.UTC(today.getFullYear(),today.getMonth(),today.getDate()))\n    }\n    return (ed )\n  }\n\n  const start = filterStartDate()\n  const end = filterEndDate()\n\n  if (loading) {\n    return (\n      <Loader active>Fetching timesheets</Loader>\n    )\n  }\n\n  if (error) {\n    console.log(error)\n    return (\n      <Header as ='h5'>Something Went Wrong, Please try again</Header>\n    )\n  }\n\n  const isAllApproved = () => {\n    let approved = false\n    if(data && data.getTimeSheetByUser && data.getTimeSheetByUser.length > 0){\n      approved = !data.getTimeSheetByUser.some(timeSheet => timeSheet.status !== 'APPROVED')\n    }\n\n    return approved\n  }\n\n\n  /**Retrive last four month including current month */\n  const getMonthOptions = () => {\n    let options = []\n\n    const currentMonth = today.getMonth()\n    options = [\n      { key:1 ,text: months[currentMonth] , value: currentMonth },\n      { key:2 ,text: months[currentMonth -1 ] , value: currentMonth -1 < 0 ? months.length + currentMonth -1  : currentMonth -1 },\n      { key:3 ,text: months[currentMonth -2] , value: currentMonth -2 < 0 ? months.length + currentMonth -2: currentMonth -2 },\n      { key:4 ,text: months[currentMonth -3] , value: currentMonth -3 < 0 ? months.length + currentMonth -3: currentMonth -3 },\n    ]\n    return options\n  }\n\n  /**Retrieve all weeks that falls within last four month including current month*/\n  const getWeekOptions = () => {\n    const currentMonth = today.getMonth()\n    let dYear = today.getFullYear()\n    const lastYearWeekNum = getWeekNumber( new Date(dYear-1,11,28))\n    const lastRetriveable  = getWeekNumber(new Date(dYear, currentMonth -3 ,1))\n    let currentWeek = getWeekNumber(today)\n    let options = []\n\n    let week = currentWeek\n    while ( week !== lastRetriveable-1  ){\n      const option = { key: week, text: week, value: week }\n      options.push (option )\n      week = week -1\n      if(week === 0) {\n        week = lastYearWeekNum\n      }\n    }\n    return options\n\n  }\n\n\n\n  return (\n    <>\n      <Segment basic style= {{ marginBottom:'20em' }} >\n        <Form>\n          {!timesheetOnly &&\n            <><label> Select by: </label>\n              <Form.Group>\n                <Form.Field>\n                  <Dropdown\n                    selection\n                    options = {[ { key:1 ,text: 'Month' , value: 'month' }, { key:2 ,text: 'Week' , value: 'week' }]}\n                    onChange = {(e,{ value }) => {\n                      setSelectBy(value)\n                      if(value==='month') {\n                        setNumber (today.getMonth())\n                      }else {\n                        setNumber (getWeekNumber(today))\n                      }\n\n                    }\n                    }\n                    value = {selectBy}/>\n                </Form.Field>\n                <Form.Field>\n                  <Dropdown\n                    compact = { selectBy === 'month'? false:true }\n                    selection\n                    options = { selectBy === 'month'?getMonthOptions():getWeekOptions()}\n                    onChange ={(e,{ value }) => {\n                      setNumber(value)\n                      if( selectBy === 'week' && value > getWeekNumber(today)) {\n                        setYear(today.getFullYear -1)\n                      }\n                      if(selectBy === 'month' && value > today.getMonth()) {\n                        setYear(today.getFullYear -1)\n                      }\n\n                    }}\n                    value = {number}/>\n                </Form.Field>\n              </Form.Group>\n            </> }\n          <TimeSheetsReport staffId={staffId} startDate={start} endDate= {end} data={data} title = {`Timesheet ${selectBy === 'month'? months[number]:  `Week ${number},` } ${year} `}></TimeSheetsReport>\n\n\n          { staffId === staff.id &&\n            <Segment  basic clearing>\n              <Popup\n                trigger = {<span  floated='right' ><Button  floated='right' disabled ={!isAllApproved()} type='button' color='blue'> Submit to Payroll</Button></span>}\n                disabled= {isAllApproved()}\n                content= ' All records should be approved for submission'\n              />\n            </Segment>\n          }\n\n\n\n        </Form>\n      </Segment>\n\n\n\n    </>\n  )\n}\n\nexport default TimeSheet","import { gql } from '@apollo/client'\nexport const GET_STAFF = gql`\nquery fetchStaff($id:String, $registerCode:String, $withPermission: Boolean!){\n    getStaff(\n      id: $id\n      registerCode: $registerCode\n      ){ \n    id     \n    name\n    idCardCode\n    currentStation{\n      location\n    }\n    email\n    position\n    contractType\n    lastActive{\n      station{\n        location\n      }\n      activeAt\n    }\n    username\n    resetCode\n    phone\n    reqHours\n    registerCode\n    permission  @include(if: $withPermission ) {\n      id\n      station\n      timesheet\n      staff\n      admin\n    }\n    }\n  }\n`\nexport const GET_STAFF_REG = gql`\nquery fetchStaff($registerCode:String,){\n    getStaff(\n      registerCode: $registerCode\n      ){ \n    name\n    }\n  }\n`\n\nexport const GET_ALL_STAFF_MINIMAL = gql`\n  query{ allStaff {\n    id\n    name\n  }}\n`\n\nexport const GET_ALL_STAFF = gql`\n  query{ allStaff {\n    id\n    name\n    email\n    phone\n    lastActive{\n      station{\n        location\n      }\n      activeAt\n    }\n  }}\n`\n\n\nexport const VERIFY_USERNAME = gql`\n  query verifyUsername( $username: String!){\n    verifyUsername(   \n      username: $username,\n    ){\n      status,\n      message\n    }\n  }`","import { useLazyQuery } from '@apollo/client'\nimport React, { useEffect, useState } from 'react'\nimport { useLocation, useParams } from 'react-router-dom'\nimport { DateInput } from 'semantic-ui-calendar-react'\nimport { Form, FormGroup, Segment,Label } from 'semantic-ui-react'\n//import { GET_ALL_STAFF_MINIMAL } from '../../../queries/staffQuery'\nimport { formatDate, getMonthOptions, getWeekOptions,getWeekNumber } from '../../utils/DateHelper'\nimport { GET_ALL_STAFF_MINIMAL } from '../../queries/staffQuery'\n\nconst TimeSheetsFilter = ({ setFilter }) => {\n  const loggedInStaff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const params = useParams()\n  const today = new Date()\n  const [staff,setStaff] = useState([])\n  const [period,setPeriod] = useState('date')\n  const [stations,setStations] = useState( [])\n  const [groupBy,setGroupBy] = useState('week')\n  const [from,setFrom] = useState(formatDate(new Date(today.getFullYear(), today.getMonth() -3, 1 )).split(' ')[0])\n  const [to,setTo] = useState(formatDate(today).split(' ')[0])\n  const [number,setNumber] = useState(getWeekNumber(today))\n  const [year,setYear] = useState(today.getFullYear())\n\n  const location = useLocation ()\n  const basePage =  location.pathname.split('/')[2]\n\n\n  const [filterStatus,setFilterStatus] = useState('')\n\n  const [staffOptions,setStaffOptions] = useState([])\n\n  const [getAllStaffs,{ loading: staffLoading, data: staffData }] = useLazyQuery(GET_ALL_STAFF_MINIMAL)\n\n  useEffect(() => {\n    if(staffData){\n      const staffOpt = staffData.allStaff.map((staff,index) => {\n        return { key:index, value:staff.id, text: staff.name }\n      } )\n      setStaffOptions(staffOpt)\n    }\n\n\n  }, [staffData])\n\n  useEffect(() => {\n    setFilter({ staff, period ,stations ,groupBy ,from ,to , number, year, filterStatus })\n  },[staff, period, stations, groupBy, from, to, number, year, filterStatus, setFilter])\n\n  useEffect(() => {\n    if(params.staffId ){\n      setStaff([params.staffId])\n    }else{\n      setStaff([])\n    }\n    if(basePage.toLowerCase() === 'mypage'){\n      setStaff([loggedInStaff.id])\n    }\n  },[basePage, loggedInStaff.id, params])\n\n\n  const stationOptions = loggedInStaff.permission && loggedInStaff.permission.timesheet.view.map((station,index ) => {\n    return { key: index, value:station._id, text: station.location }})\n\n  return (\n\n    <>\n\n      <Segment size='tiny' clearing>\n        <Label size='mini' attached='top left'>Filters</Label>\n        <Form size='mini'>\n          <FormGroup widths='equal' >\n            {\n              !params.staffId && basePage.toLowerCase() !== 'mypage' &&\n              <Form.Dropdown\n                label='Staff'\n                value= {staff}\n                loading={staffLoading}\n                options={staffOptions}\n                selection multiple clearable\n                placeholder='All'\n                onFocus= {() => getAllStaffs()}\n                onChange= {(e,{ value }) => setStaff(value)}></Form.Dropdown>\n            }\n            <Form.Dropdown label='Period'\n              value= {period}\n              options= {[{ key:1, value:'date', text:'Date' },{ key:2, value:'week', text:'Week' },{ key:3, value:'month', text:'Month' }, ]}\n              placeholder='All' selection clearable compact\n              onChange ={(e,{ value }) => {\n                if(value ==='week'){\n                  setNumber(getWeekNumber(today))\n                }\n                if(value === 'month'){\n                  setNumber(today.getMonth())\n                }\n                setPeriod(value)\n              } }></Form.Dropdown>\n\n\n            {period === 'date' && <>\n              <DateInput value={from}  label='From'\n                dateFormat='DD-MM-YYYY'\n                onChange = {(e,{ value }) => {\n                  setFrom(value)\n                }}></DateInput>\n              <DateInput value={to} label='To' dateFormat='DD-MM-YYYY'\n                onChange = {(e,{ value }) => {\n                  setTo(value)\n                }}></DateInput>\n            </>}\n\n            {\n              (period === 'week' || period === 'month') && <>\n                <Form.Dropdown\n                  value={number}\n                  label={`Select ${period}`}\n                  options={period==='week'?getWeekOptions():getMonthOptions()}\n                  selection compact\n                  onChange ={(e,{ value }) => {\n                    setNumber(value)\n                    if( period === 'week' && value > getWeekNumber(today)) {\n                      setYear(today.getFullYear -1)\n                    }\n                    if(period === 'month' && value > today.getMonth()) {\n                      setYear(today.getFullYear -1)\n                    }\n\n                  }}></Form.Dropdown>\n              </>\n            }\n            <Form.Dropdown label= 'Group By'\n              value= {groupBy}\n              options= {[{ key:1,value:'week',text:'Week' }, { key:2,value:'month',text:'Month' },]}\n              onChange = {(e,{ value }) => setGroupBy(value)}\n              selection\n              compact>\n\n            </Form.Dropdown >\n            <Form.Dropdown\n              label= 'Station'\n              options={stationOptions}\n              value= {stations}\n              selection multiple clearable\n              placeholder='All'\n              onChange = {(e,{ value }) => setStations(value)}></Form.Dropdown>\n\n            <Form.Dropdown label= 'Status'\n              value= {filterStatus}\n              options= {[{ key:1,value:'approved',text:'Approved' }, { key:2,value:'pending',text:'Pending' },]}\n              onChange = {(e,{ value }) => setFilterStatus(value)}\n              placeholder='All'\n              clearable\n              selection\n              compact>\n\n            </Form.Dropdown >\n\n          </FormGroup>\n        </Form>\n      </Segment>\n    </>)\n\n\n\n\n\n}\nexport default TimeSheetsFilter","import { useQuery } from '@apollo/client'\nimport React, { useEffect, useState } from 'react'\nimport { Link, useLocation, useParams } from 'react-router-dom'\nimport  _  from 'lodash'\nimport { Table, TableHeader, TableRow, TableHeaderCell, TableBody, TableCell, Loader } from 'semantic-ui-react'\nimport { formatDate, getWeekNumber,getMonthInt } from '../../utils/DateHelper'\nimport TimeSheet from '../StaffPage/TimeSheet'\nimport { GET_ALL_TIMESHEETS } from '../../queries/timeSheetQuery'\nimport TimeSheetsFilter from './TimeSheetsFilter'\n\nconst TimeSheetsOverview = ({ setStaffName  }) => {\n  const today = new Date()\n  const params = useParams()\n  const location = useLocation()\n  const basePage =  location.pathname.split('/')[2]\n\n  const [filter,setFilter] = useState({\n    staff:[],\n    period:'date',\n    from:formatDate(new Date(today.getFullYear(), today.getMonth() -3, 1 )).split(' ')[0],\n    to:formatDate(today).split(' ')[0],\n    number:getWeekNumber(today),\n    groupBy:'week',\n    year:today.getFullYear(),\n    stations:[],\n    filterStatus: '' })\n\n  const variables  = { ...filter\n  }\n\n  if(filter.staff.length === 1){\n    variables.staffId = filter.staff[0]\n  }\n\n  const { loading,data } = useQuery(GET_ALL_TIMESHEETS,{ variables: variables,skip: params.period })\n\n  useEffect (() => {\n    if(data && data.getStaff){\n      setStaffName(data.getStaff.name)\n    }\n  },[data, setStaffName])\n\n\n  if(params.period) {\n    const periodTitle = params.period.split(' ')\n    let period\n    let selected\n    let selectedYear\n    if(periodTitle[0] === 'Week'){\n      period='week'\n      selected = periodTitle[1]\n      selectedYear = periodTitle[2]\n    }\n    else{\n      period='month'\n      selected = getMonthInt(periodTitle[0])\n      selectedYear = periodTitle[1]\n    }\n\n    return <TimeSheet period= {period} selected={parseInt(selected)} selectedYear={parseInt(selectedYear) } staffId={params.staffId } setStaffName={setStaffName} timesheetOnly />\n  }\n\n  return (\n\n    <>\n      <TimeSheetsFilter setFilter= {setFilter}></TimeSheetsFilter>\n\n      <Loader active={loading}> Loading TimeSheet Overview</Loader>\n\n      <Table >\n        <TableHeader>\n          <TableRow>\n            {!params.staffId && basePage.toLowerCase() !== 'mypage' &&\n            <TableHeaderCell>Staff Name</TableHeaderCell>\n            }\n            <TableHeaderCell>Period</TableHeaderCell>\n            <TableHeaderCell> Stations</TableHeaderCell>\n            <TableHeaderCell> Total Hours</TableHeaderCell>\n            <TableHeaderCell> Status</TableHeaderCell>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {data && data.getAllTimeSheets && _.map(data.getAllTimeSheets, (staffs,period) =>\n            _.map(staffs,(staff,name) =>\n              <TableRow key={name} positive= {staff.itemsPending?false:true} negative= {staff.itemsPending?true:false}>\n                {!params.staffId   && basePage.toLowerCase() !== 'mypage' &&\n                <TableCell><Link to={`/Manage/ManageTimesheets/${staff.id}`} onClick={() => {\n                  //setStaffName(name)\n                }}> {name}</Link></TableCell> }\n                <TableCell>{period}</TableCell>\n                <TableCell>{\n                  _.reduce(staff.station,(p,c,key) => {\n                    if(c !== 0){\n                      return ( (p?p+'/':'')+key)\n                    }\n                    return p\n\n                  },'')}\n                </TableCell>\n                <TableCell>{staff.totHours}</TableCell>\n                <TableCell><Link to={`${location.pathname}/${params.staffId?'':`${staff.id}/`}${period}`}\n                  onClick={() => {\n                    //setStaffName(name)\n                  }}>{staff.itemsPending ?  `${staff.itemsPending}  Items Pending`: 'All Approved' } </Link></TableCell>\n              </TableRow>)\n\n          )\n          }\n\n        </TableBody>\n      </Table>\n\n\n\n\n    </>)\n\n\n\n\n\n}\nexport default TimeSheetsOverview","import React, { useState } from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport { Breadcrumb } from 'semantic-ui-react'\nimport TimeSheetsOverview from '../TimeSheetsOverview'\n\nconst ManageTimeSheets = ({ setName , }) => {\n  const params = useParams()\n  const [staffName, setStaffName ] = useState('')\n\n  return <>\n    { /** If current page is not timesheetsoverview then show breadcrumbs*/\n      !(params.page && params.page.toLowerCase() === 'timesheetsoverview') &&\n      <>\n        <Breadcrumb>\n          { /**If currentpage is overview page of a staff or period is set on params */\n            (params.staffId) &&\n            <>\n              <Breadcrumb.Section link as = {Link} to = {'/Manage/ManageTimesheets'}> Manage Timesheets </Breadcrumb.Section>\n              <Breadcrumb.Divider/>\n              <Breadcrumb.Section active = {params.period? false: true}  as={params.period?  Link: ''} to={`/Manage/ManageTimesheets/${params.staffId}`}> {staffName } </Breadcrumb.Section>\n            </>\n          }\n          {params.period && <>\n            <Breadcrumb.Divider icon='right chevron'/>\n            <Breadcrumb.Section active>{params.period.replace('_',' ')}</Breadcrumb.Section>\n          </>}\n        </Breadcrumb>\n      </>\n    }\n\n    <TimeSheetsOverview setStaffName= { setName || setStaffName } ></TimeSheetsOverview>\n  </>\n\n}\nexport default ManageTimeSheets","import { gql } from '@apollo/client'\n\nexport const CHANGE_PERMISSION = gql`\nmutation changePermission( $id: String! $staff: JsonObject, $station: JsonObject, $timesheet: JsonObject ,$admin: Boolean){\n  changePermission(\n    id: $id\n    staff: $staff\n    station: $station\n    timesheet: $timesheet\n    admin: $admin\n    ){\n      id\n      staff\n      station\n      timesheet\n      admin\n    }\n}`","import { useMutation, useQuery } from '@apollo/client'\nimport React, { Fragment, useEffect, useState } from 'react'\nimport { Button, Checkbox, Dimmer, Form, Header,Loader, Table, TableBody } from 'semantic-ui-react'\nimport _ from 'lodash'\nimport { ALL_STATION } from '../../queries/stationQuery'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nimport { FieldArray, Formik } from 'formik'\nimport { CHANGE_PERMISSION } from '../../mutations/permissionMutation'\n\n\nconst PermissionManager = ({ permissions }) => {\n\n  const staff =  JSON.parse(sessionStorage.getItem('staffKey'))\n  const [superUserSet,setSuperUserSet] = useState((permissions && permissions.admin )|| false)\n\n  const hasSuperPermission = staff.permission.admin\n\n  // console.log(hasSuperPermission,staff ,superUserSet)\n  const [updatePermission,{ loading: pLoading, error: pError, data: pData }] = useMutation(CHANGE_PERMISSION)\n\n  const mapPermission = (permssionType,v) => permssionType && permssionType.map(v => {\n    if(!v) return null\n    return v._id\n  })\n\n  /**Generates station option based on user permission\n   * User can only assign permsission if the user have rights for the station\n   */\n\n  const hasPermission = (permissions) => {\n    if(hasSuperPermission){\n      return true\n    }\n    if((typeof permissions === 'object' )) {\n      if(!_.isEmpty(permissions)){\n        return true\n      }\n    }  else if(permissions){\n      return true\n    }\n    return false\n  }\n\n  const permission = _.mapValues(permissions,(v,k) => {\n    if(typeof v === 'object'){\n      const mod = { ...v }\n      if(k==='station'){\n        mod.edit = mapPermission (mod.edit )\n\n      }\n\n      if(k==='timesheet'){\n        mod.edit = mapPermission (mod.edit )\n        mod.view = mapPermission (mod.view )\n        mod.sign = mapPermission (mod.sign)\n\n      }\n      return mod\n\n    }\n    else return v\n\n  })\n\n  const { loading,data } = useQuery(ALL_STATION,{ skip: !hasSuperPermission })\n  const [options,setOptions] = useState([])\n\n\n\n  const getStationOptions = (fieldName) => {\n    if (hasSuperPermission) {\n      return options\n    }\n    let soptions = []\n    switch (fieldName){\n    case 'station.edit':\n      if(staff.permission.station.edit.length ) {\n        soptions= staff.permission.station.edit.map((v,i) => {\n          return { key:i, value: v._id, text: v.location }\n        })\n\n      }\n      return soptions\n    case 'timesheet.edit':\n      if(staff.permission.timesheet.edit.length ) {\n        soptions = staff.permission.timesheet.edit.map((v,i) => {\n          return { key:i, value: v._id, text: v.location }\n        })\n\n      }\n      return soptions\n    case 'timesheet.view':\n      if(staff.permission.timesheet.view.length ) {\n        soptions = staff.permission.timesheet.view.map((v,i) => {\n          return { key:i, value: v._id, text: v.location }\n        })\n\n      }\n      return  soptions\n    case 'timesheet.sign':\n      if(staff.permission.timesheet.sign.length ) {\n        soptions =  staff.permission.timesheet.sign.map((v,i) => {\n          return { key:i, value: v._id, text: v.location }\n        })\n      }\n      return soptions\n\n    default:\n      return soptions\n\n    }\n\n  }\n\n  useEffect(() => {\n    if(data){\n      const stations = data.allStations\n      const stationOptions = stations.map((station,index) => {\n        return { key:index, value: station.id, text: station.location }\n      })\n      setOptions(stationOptions)\n    }\n  },[data])\n\n\n  const allStationIds =  options.map(station => station.value)\n\n  return (\n    <Formik\n      initialValues = {{ ...permission }}\n      onSubmit= { (values ) => {\n        //delete(values.__typename)\n        const formValues = { ...values }\n\n        _.reduce(values,(prev,cur,scope) =>\n        {\n          if(permission[scope] && _.isEqual(permission[scope] , formValues[scope] )){\n            delete formValues[scope]\n\n          }\n          if(permission[scope] && !_.isEqual( permission[scope] ,formValues[scope] )){\n            _.reduce(formValues[scope],(prev,cur,pType) => {\n              console.log(scope,pType,formValues[scope][pType],permissions[scope][pType], _.isEqual( permissions[scope][pType],formValues[scope][pType]))\n              if( _.isEqual(permissions[scope][pType],formValues[scope][pType] )){\n                delete formValues[scope][pType]\n              }\n            },{})\n\n          }\n\n\n\n\n        },{})\n\n        updatePermission({ variables: { ...formValues,id: permissions.id } })\n      }\n\n      }\n\n    >\n      {({ setFieldValue,values,handleSubmit,dirty,resetForm }) => <>\n        <Header as ='h3'>Permission</Header>\n        <Checkbox\n          label = 'Administrator (All Permissions for all stations)'\n          disabled = { !hasSuperPermission}\n          toggle\n          name= 'admin'\n          checked = {values.admin}\n          onChange= {(e,{ checked }) => {\n            setFieldValue('admin',checked)\n            setSuperUserSet(checked)\n\n            /**If superUser is set then set all permission fileds  */\n            if(checked) {\n              setFieldValue('station.edit',allStationIds)\n              setFieldValue('station.add',true)\n              setFieldValue('timesheet.edit',allStationIds)\n              setFieldValue('timesheet.view',allStationIds)\n              setFieldValue('timesheet.sign',allStationIds)\n              setFieldValue('staff.edit',true)\n              setFieldValue('staff.add',true)\n              setFieldValue('staff.view',true)\n\n            }\n          }}/>\n\n\n        <Form as='table' loading={loading || pLoading} className='ui celled padded table' onSubmit={handleSubmit}>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>\n          Scope\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n          Edit\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n          Add\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n          View\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n          Sign\n              </Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <TableBody>\n\n            {_.map(permissions,(val,key) => <Fragment key={key}>\n              {key !== '__typename' && key !== 'id' &&  key !== 'admin' &&\n              <FieldArray>\n                {() => <Table.Row key={key}>\n                  <Table.Cell>\n                    {key.toUpperCase()}\n                  </Table.Cell>\n                  {/**EDIT COLUMN */}\n                  <Table.Cell >\n                    {(key=== 'station' || key=== 'timesheet') &&\n                    <DropDownField\n                      multiple\n                      selection\n                      options= {getStationOptions(`${key}.edit`)}\n                      placeholder = 'Add Stations'\n                      disabled = {loading || !hasPermission(staff.permission[key].edit) || superUserSet}\n                      loading= {loading}\n                      name={`${key}.edit`}\n                    />}\n\n                    {key === 'staff'?\n                      <Checkbox\n                        disabled = {  !hasPermission(staff.permission[key].edit) || superUserSet}\n                        toggle name={`${key}.edit` }\n                        checked = {values[`${key}`].edit }\n                        onChange= {(e,{ checked }) => {\n                          setFieldValue(`${key}.edit`,checked)\n\n                          /** If edit is enabled then user must have view permission */\n                          if(checked) {\n                            setFieldValue(`${key}.view`,checked)\n                          }\n\n                        }}/> : ''\n                    }\n                  </Table.Cell >\n\n                  {/**ADD COLUMN */}\n                  <Table.Cell >\n                    {key !== 'timesheet'?\n                      <Checkbox\n                        toggle\n                        disabled = {  !hasPermission(staff.permission[key].add) || superUserSet}\n                        name={`${key}.add`}\n                        checked = {values[`${key}`].add }\n                        onChange= {(e,{ checked }) => {\n                          setFieldValue(`${key}.add`,checked)\n                        }}/> : ''\n                    }\n                  </Table.Cell>\n\n                  {/**VIEW COLUMN */}\n                  <Table.Cell  >\n                    {key === 'staff' &&\n                     <Checkbox\n                       disabled = {  !hasPermission(staff.permission[key].view) || superUserSet }\n                       toggle\n                       name={`${key}.view` }\n                       checked = {values[`${key}`].view }\n                       onChange= {(e,{ checked }) => {\n                       /** If edit is enabled then user must have view permission */\n                         if(values.staff.edit){\n                           setFieldValue(`${key}.view`,true)\n                         }else{\n                           setFieldValue(`${key}.view`,checked)\n                         }\n                       }}/>\n                    }\n\n                    {key === 'timesheet' &&\n                     <DropDownField\n                       multiple\n                       selection\n                       options={superUserSet?options:getStationOptions(`${key}.view`)}\n                       placeholder = 'Add Stations'\n                       disabled = {loading  ||  !hasPermission(staff.permission[key].view) || superUserSet}\n                       loading= {loading}\n                       name={`${key}.view`}\n                     />\n                    }\n\n                  </Table.Cell>\n\n                  {/**SIGN COLUMN */}\n                  <Table.Cell disabled = {key !== 'timesheet'}>\n                    {key === 'timesheet' &&\n                    <DropDownField\n                      multiple\n                      selection\n                      options={superUserSet?options:getStationOptions(`${key}.sign`)}\n                      placeholder = 'Add Stations'\n                      disabled = {loading ||  !hasPermission(staff.permission[key].sign) || superUserSet}\n                      loading= {loading}\n                      name={`${key}.sign`}\n                    />\n                    }\n                  </Table.Cell>\n                </Table.Row>}\n\n              </FieldArray>\n              }</Fragment>\n            )\n            }\n\n          </TableBody>\n        </Form>\n        {dirty &&\n        <>\n          <Button  onClick = {() => handleSubmit()}> Save Changes</Button>\n          <Button  onClick = {() => resetForm()}> Discard Changes</Button>\n        </>\n        }</>\n      }\n    </Formik>\n\n  )\n\n}\n\nexport default PermissionManager","import { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useEffect } from 'react'\nimport { Button, Dimmer, Form, Grid, Loader, Modal,ModalContent, ModalHeader } from 'semantic-ui-react'\nimport { STAFF_EDIT } from '../../mutations/staffMutation'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nconst StaffEditModel = (props) => {\n\n  const [updateStaff,{ loading: updateStaffLoading }] = useMutation(STAFF_EDIT)\n\n\n  const initVal = { email: props.email,\n    phone: props.phone || '',\n    contractType: props.contractType,\n    contractHours: props.reqHours,\n    position: props.position || '',\n  }\n  return(\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {props.open}\n      onClose= {() =>  props.setOpen(false)}\n      onOpen= {() => props.setOpen (true)}\n    >\n      <ModalHeader>Editing Staff {props.name} </ModalHeader>\n      <ModalContent>\n\n        {updateStaffLoading &&\n            <Dimmer active>\n              <Loader />\n            </Dimmer>\n        }\n\n        <Formik\n          initialValues = { initVal }\n\n          onSubmit= {(values) => {\n            const updatedValues = _.omitBy(values, (v,k) => initVal[k] === v )\n\n            updateStaff({ variables:{ ...updatedValues,id:props.id } })\n          }}\n        >\n          {({ values,handleSubmit,setFieldValue,dirty }) => <Form style={{ marginBottom:'5rem' }} onSubmit= {handleSubmit}>\n            <Grid>\n              <Grid.Row>\n                <InputField name='email' label='Email' type='email'/>\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='phone' label='Phone' type='tel'/>\n\n              </Grid.Row>\n              <Grid.Row>\n                <DropDownField  name='contractType' labeled label='Contract'\n                  selection\n                  options= {[{\n                    key:1, value:'Contractor', text: 'Contractor' },\n                  { key:2, value:'Employee', text: 'Employee' }]}></DropDownField>\n\n\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='contractHours' label='Required Hours per day'/>\n\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='position' label='Position'/>\n              </Grid.Row>\n            </Grid>\n            {dirty &&\n            <Button type='submit' floated='right' positive>Save</Button>}\n\n          </Form>\n          }\n        </Formik></ModalContent>\n    </Modal>\n\n  )\n}\n\nexport default StaffEditModel","import { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React from 'react'\nimport { Button, Dimmer, Form, Grid, Loader, Modal,ModalContent, ModalHeader } from 'semantic-ui-react'\nimport { CHANGE_PASSWORD } from '../../mutations/staffMutation'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nconst PasswordChangeModel = (props) => {\n\n  const [changePassword,{ loading,error,data }] = useMutation(CHANGE_PASSWORD)\n\n\n  const initVal = {\n    password:'',\n    newPassword:'',\n    confirmPassword:''\n  }\n\n  if(error){\n    console.log(error)\n  }\n\n  return(\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {props.open}\n      onClose= {() =>  props.setOpen(false)}\n      onOpen= {() => props.setOpen (true)}\n    >\n      <ModalHeader>Password Change</ModalHeader>\n      <ModalContent>\n\n        {loading &&\n            <Dimmer active>\n              Updating Password\n              <Loader />\n            </Dimmer>\n        }\n\n        <Formik\n          initialValues = { initVal }\n          validate= {(values) =>\n          {\n            const errors = {}\n            if(!values.password){\n              errors.password = 'Old Password is required'\n            }\n\n            if(values.newPassword === values.password){\n              errors.newPassword = 'New password cannot be same as old password'\n            }\n\n            if(!values.newPassword ){\n              errors.newPassword = 'New password cannot be empty'\n            }\n\n            if(values.newPassword !== values.confirmPassword){\n              errors.confirmPassword = 'New password and confirm password must match'\n            }\n            console.log(errors)\n            return errors\n          }\n\n          }\n          onSubmit= {(values) => {\n            changePassword({ variables:{ id:props.id,password: values.password, newPassword: values.newPassword } })\n\n          }}\n        >\n          {({ values,handleSubmit,setFieldValue,dirty ,errors }) => <Form style={{ marginBottom:'5rem' }} onSubmit= {handleSubmit}>\n            <Grid>\n              <Grid.Row>\n                <InputField name='password' label='Old Password' type='password'/>\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='newPassword' label='New Password' type='password'/>\n\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='confirmPassword' label='Confirm Password' type='password'/>\n              </Grid.Row>\n            </Grid>\n            {dirty && _.isEmpty(errors) &&\n            <Button type='submit' style={{ marginTop: '1rem' }} positive>Change Password</Button>}\n\n          </Form>\n          }\n        </Formik></ModalContent>\n    </Modal>\n\n  )\n}\n\nexport default PasswordChangeModel","import { useMutation, useQuery } from '@apollo/client'\nimport React, { useEffect, useState } from 'react'\nimport { Button, Confirm, Grid,Header,Icon,Loader, Table, TableBody } from 'semantic-ui-react'\nimport { GET_STAFF } from '../../queries/staffQuery'\nimport PermissionManager from './PermissionManager'\nimport StaffEditModel from './StaffEditModel'\nimport {  RESET_PASSWORD_REQ, RESET_REGISTER_CODE } from '../../mutations/staffMutation'\nimport PasswordChangeModel from './PasswordChangeModel'\nimport { useParams } from 'react-router-dom'\nimport { formatDate } from '../../utils/DateHelper'\n\n\nconst Profile = (props) => {\n  const params = useParams()\n\n  const [confirm,setConfirm] = useState({ open:false, handleCancel:() => {}, handleConfirm:() => {} })\n\n  const [passwordChangeOpen,setPasswordChangeOpen] = useState(false)\n  const staff =  JSON.parse(sessionStorage.getItem('staffKey'))\n\n  /**Staff can edit if staff has edit or admin  permission and not own profile */\n  let staffId = staff.id\n\n  if(props.id){\n    staffId= props.id\n  } else if(params.staffId) {\n    staffId= params.staffId\n  }else {\n    staffId= staff.id\n  }\n\n\n  const { loading,error,data } = useQuery(GET_STAFF,{ variables:{ id:staffId ,withPermission: props.staffCanEdit || false  } })\n\n\n\n  const [resetPassword,{ loading: rpLoading,error:rpError }] = useMutation(RESET_PASSWORD_REQ)\n  const [resetRegisterCode,{ loading: rcLoading,error:rcError }] = useMutation(RESET_REGISTER_CODE)\n\n\n  const resetConfirm = () => {\n    setConfirm(({ open:false, handleCancel:() => {}, handleConfirm:() => {}  }))\n  }\n\n  useEffect(() => {\n    if(data && props.setStaffName)\n      props.setStaffName(data.getStaff.name)\n\n  },[data, props])\n\n  if ( rpError || rcError) {\n    console.log( rpError, rcError)\n  }\n\n\n  if (loading) {\n    return (\n      <Loader active>Fetching User Profile</Loader>\n    )\n  }\n\n  if (error) {\n    console.log(error)\n    return (\n      <Header as ='h5'>Something Went Wrong, Please try again</Header>\n    )\n  }\n\n  /**If the user has completed registration\n   * Registered user should have regiserCode empty\n  */\n\n  const registered =  data && data.getStaff.registerCode ? false: true\n\n  return (<>\n\n    <Grid columns='3' style={{ marginTop:'1rem' }}>\n      <Grid.Row centered  textAlign='center'>\n        <Grid.Column>\n          <Header as ='h4'>Basic Info</Header>\n          <Table compact>\n            <TableBody>\n              <Table.Row>\n                <Table.Cell width='8'> <strong> Id Card Saved </strong> </Table.Cell>\n                <Table.Cell width='7'>{data.getStaff.idCardCode ?\n                  <Icon name='checkmark' color='green'></Icon> : <Icon name='cancel' color='red'></Icon> }</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell width='8'> <strong> Registration Complete</strong> </Table.Cell>\n                <Table.Cell width='7'>{registered ?\n                  <Icon name='checkmark' color='green'></Icon> : <Icon name='cancel' color='red'></Icon> }</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Email </strong> </Table.Cell>\n                <Table.Cell > {data.getStaff.email}</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Phone </strong> </Table.Cell>\n                <Table.Cell > {data.getStaff.phone}</Table.Cell>\n              </Table.Row>\n              { registered &&\n              <Table.Row>\n                <Table.Cell> <strong> Username </strong> </Table.Cell>\n                <Table.Cell> {data.getStaff.username}</Table.Cell>\n              </Table.Row>}\n            </TableBody>\n            <Table.Footer>\n              {(props.staffCanEdit || staff.id === data.getStaff.id) &&\n              <Table.Row>\n                <Table.HeaderCell >\n                  <Button\n                    primary\n                    size='small'\n                  >\n                 Scan Id Card\n                  </Button>\n                </Table.HeaderCell>\n                <Table.HeaderCell >\n                  <Button\n                    loading = {rpLoading || rcLoading}\n                    disabled =  {rpLoading || rcLoading}\n                    primary\n                    size='small'\n                    onClick = { (e,{ children }) => {\n\n                      switch( children ){\n                      case 'Change Password':\n                        setPasswordChangeOpen(true)\n                        break\n                      case 'Reset Password':\n                        setConfirm({\n                          open:true,\n                          handleConfirm: () => {\n                            resetPassword({ variables:{ id:data.getStaff.id } })\n                            resetConfirm()\n                          },\n                          handleCancel:() => {\n                            resetConfirm()\n                          },\n                          content: 'Confirm Reset Password',\n                          header:'Confirm'\n                        })\n                        break\n                      case 'Resend Register Link':\n                        setConfirm({\n                          open:true,\n                          handleConfirm: () => {\n                            resetRegisterCode({ variables:{ id:data.getStaff.id } })\n                            resetConfirm()\n                          },\n                          handleCancel:() => {\n                            resetConfirm()\n                          },\n                          content: 'Confirm Reset Registration Link',\n                          header:'Confirm'\n                        })\n                        break\n                      default:\n                        break\n                      }\n                    }\n\n                    }\n                  >\n                    {registered\n                      ?staff.id === data.getStaff.id\n                        ? 'Change Password'\n                        : props.staffCanEdit?  'Reset Password':''\n                      :'Resend Register Link'}\n                  </Button>\n                </Table.HeaderCell>\n              </Table.Row>}\n            </Table.Footer>\n\n          </Table>\n        </Grid.Column>\n        <Grid.Column>\n          <Header as ='h4'>Contract</Header>\n          <Table compact>\n            <TableBody>\n              <Table.Row>\n                <Table.Cell> <strong> Type </strong> </Table.Cell>\n                <Table.Cell>{data && data.getStaff.contractType }</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Required Hrs/Day </strong> </Table.Cell>\n                <Table.Cell > {data && data.getStaff.reqHours}</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Position </strong> </Table.Cell>\n                <Table.Cell> {data && data.getStaff.position}</Table.Cell>\n              </Table.Row>\n            </TableBody>\n\n\n          </Table>\n        </Grid.Column>\n        <Grid.Column>\n          <Header as ='h4'>Last Active</Header>\n          <Table compact>\n            <TableBody>\n              <Table.Row>\n                <Table.Cell> <strong> Station </strong> </Table.Cell>\n                <Table.Cell>{ data && data.getStaff.lastActive &&  data.getStaff.lastActive.station && data.getStaff.lastActive.station.location }</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Active at </strong> </Table.Cell>\n                <Table.Cell > {data && data.getStaff.lastActive && formatDate(data.getStaff.lastActive.activeAt) }</Table.Cell>\n              </Table.Row>\n            </TableBody>\n\n          </Table>\n        </Grid.Column>\n\n      </Grid.Row>\n      {props.staffCanEdit &&\n      <Grid.Row > <Grid.Column><PermissionManager permissions= {data.getStaff.permission}></PermissionManager> </Grid.Column>  </Grid.Row>}\n\n      <StaffEditModel\n        open={props.editModelOpen}\n        setOpen= {props.setEditModelOpen}\n        email = {data.getStaff.email}\n        phone =  {data.getStaff.phone}\n        contractType ={data.getStaff.contractType}\n        reqHours =  {data.getStaff.reqHours}\n        position = {data.getStaff.position}\n        id= {data.getStaff.id}\n      ></StaffEditModel>\n\n      <PasswordChangeModel\n        open = {passwordChangeOpen}\n        setOpen = {setPasswordChangeOpen}\n        id= {data.getStaff.id }\n      ></PasswordChangeModel>\n\n\n      <Confirm\n        open={confirm.open}\n        content = {confirm.content}\n        header = {confirm.header}\n        onCancel={confirm.handleCancel}\n        onConfirm={confirm.handleConfirm}\n      />\n\n    </Grid>\n  </>\n\n\n\n\n  )\n}\n\n\n\n\n\nexport default Profile","import { useLazyQuery, useMutation, useQuery } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useEffect, useState } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { Button, Form, Header, Icon, Input, Label,  Message, Segment } from 'semantic-ui-react'\nimport { COMPLETE_REGISTRATION } from '../../mutations/staffMutation'\nimport { GET_STAFF_REG,VERIFY_USERNAME } from '../../queries/staffQuery'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nconst RegisterPage = ({ setName }) => {\n\n  const params= useParams()\n  const history = useHistory()\n\n  const { loading,error,data } = useQuery(GET_STAFF_REG, { variables: { registerCode: params.registerCode }, skip: !params.registerCode  })\n  const [completeRegistration,{ loading:regstrationLoading,error:registrationError,data:registrationData }] = useMutation(COMPLETE_REGISTRATION)\n  const [validateUsernameQuery,{ loading:usernameLoading,data:usernameData }] = useLazyQuery(VERIFY_USERNAME)\n  const [usernameVerified,setUsernameVerified] = useState({ verified:false })\n\n\n  useEffect(() => {\n    if(usernameData){\n\n      setUsernameVerified({ verified:true,status:usernameData.verifyUsername.status })\n      //setFieldError('username','This is a error')\n    }\n\n  }, [usernameData])\n\n  if(!params.registerCode){\n    return <Header>Registration code mising or invalid</Header>\n  }\n\n  if(error || registrationError){\n    console.log(error)\n\n  }\n\n  if(registrationData && registrationData.registerStaff.status === 'SUCCESS'){\n    history.push('/staff')\n    return null\n  }\n\n  if(data && data.getStaff){\n    console.log(data)\n    setName(data.getStaff.name)\n  }\n\n\n  const initVal = {\n    password:'',\n    username:'',\n    confirmPassword:''\n  }\n\n  const validateUsername =(value) => {\n    validateUsernameQuery({ variables:{ username:value } })\n\n  }\n\n\n  return(\n    <Segment basic loading ={loading || regstrationLoading}>\n      <Message success={data && data.getStaff} error={error?true:false}>\n        <Message.Header>\n          {data && data.getStaff && 'Please complete registration by setting  your username and password'}\n          {error && error.message}\n          {(data && !data.getStaff) && 'Registration code Invalid'}\n        </Message.Header>\n      </Message>\n\n      { data && data.getStaff &&\n      <Formik\n        initialValues = { initVal }\n        validate= {(values) =>\n        {\n          const errors = {}\n\n          if(!values.username || values.username.trim() === ''){\n            errors.username = 'Username is required'\n          }\n\n          if(values.username && values.username.length < 4){\n            errors.username = 'Username should be at least 4 character long'\n          }\n          if(!values.password || values.password.trim() === '') {\n            errors.password = 'Password is required'\n          }\n\n          if(values.password !== values.confirmPassword){\n            errors.confirmPassword = 'New password and confirm password must match'\n          }\n\n          return errors\n        }\n\n        }\n        onSubmit= {(values) => {\n\n          completeRegistration({ variables:{ registerCode: params.registerCode, password: values.password ,username: values.username } })\n\n\n        }}\n      >\n        {({ values,handleChange, handleSubmit,dirty ,errors, handleBlur, touched }) => <Form style={{ marginBottom:'5rem' }} onSubmit= {handleSubmit}>\n\n          <Form.Field width='8'>\n            <Input\n              loading={usernameLoading}\n              icon= {<Icon name= {errors.username === undefined && usernameVerified.verified?(usernameVerified.status==='SUCCESS'?'check circle':'cancel'):''} color={usernameVerified.verified?usernameVerified.status==='SUCCESS'?'green':'red':'red'} />}\n              onBlur= {handleBlur}\n              name='username' label='Username' width='8' onChange = {e => {\n              // call the built-in onchange\n                handleChange(e)\n                let username = e.currentTarget.value\n                validateUsername(username)\n              }}/>\n\n            { ((errors.username && touched.username) ||  (errors.username === undefined && usernameVerified.verified && usernameVerified.status!=='SUCCESS')) &&\n           <Label pointing prompt>\n             { errors.username || 'Selected username already taken, please select new username' }\n           </Label>}\n          </Form.Field>\n\n\n\n\n          <InputField name='password' label='Password' type='password' width='8'/>\n\n          <InputField name='confirmPassword' label='Confirm Password' type='password' width='8'/>\n\n\n          <Button disabled = {!( dirty && _.isEmpty(errors) && usernameVerified.verified && usernameVerified.status ==='SUCCESS') }type='submit' style={{ marginTop: '1rem' }} positive>Register</Button>\n\n        </Form>\n        }\n      </Formik>}\n    </Segment>\n\n  )\n}\nexport default RegisterPage","import React from 'react'\r\nimport { Dropdown, Menu } from 'semantic-ui-react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\n\r\n\r\nconst StaffMenuBar = ({ staffName, activeItem, setActiveItem }) => {\r\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\r\n  const history = useHistory()\r\n\r\n  const location = useLocation()\r\n\r\n  if(location.pathname.split('/')[1] === 'register'){\r\n    return (\r\n\r\n      <Menu inverted color=\"blue\" stackable >\r\n        <Menu.Item position='right'>\r\n          Welcome {staffName}\r\n        </Menu.Item>\r\n      </Menu>\r\n    )\r\n\r\n  }\r\n\r\n\r\n  const handleMenuClick = (e, { name }) => {\r\n    setActiveItem( name )\r\n    if( ['Profile','Timesheets','TimesheetsOverview'].includes(name) ){\r\n      history.push(`/staff/${staff.id}/${name}`)\r\n    }else{\r\n      history.push(`/${name}`)\r\n    }\r\n  }\r\n\r\n  const logout = () => {\r\n    sessionStorage.removeItem('staffKey')\r\n    history.push('/staffLogin')\r\n  }\r\n\r\n  const menuItems = []\r\n\r\n\r\n  const cornerButton = () => {\r\n    return (\r\n      <Dropdown item text = {`Welcome ${staff.name}` } >\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item text='Logout' onClick={() => logout()}/>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    )\r\n  }\r\n\r\n  /** Add Items to Menu*/\r\n  if (menuItems.length === 0) {\r\n    menuItems.push('Timesheets')\r\n    menuItems.push('TimesheetsOverview')\r\n    menuItems.push('Profile')\r\n  }\r\n\r\n\r\n  const getMenuItems = () => {\r\n    return menuItems.map(item =>\r\n      <Menu.Item  key={ item} name = {item} active = {activeItem ===  item }\r\n        onClick = {handleMenuClick} />)\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <Menu inverted color=\"blue\" stackable >\r\n\r\n      {getMenuItems()}\r\n      <Menu.Menu position='right'>\r\n        {cornerButton()}\r\n      </Menu.Menu>\r\n    </Menu>\r\n\r\n\r\n\r\n\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default StaffMenuBar","import React, { useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Menu } from 'semantic-ui-react'\n\nconst StaffSubMenu = ({  activeItem, setActiveItem ,staffName, staffId ,staffCanEdit ,setEditModelOpen }) => {\n  const history = useHistory()\n  useEffect(() => {\n    setActiveItem('')\n    return () => setActiveItem('')\n  },[setActiveItem])\n  return (\n    <Menu pointing secondary >\n      <Menu.Item header>{staffName}</Menu.Item>\n      <Menu.Item\n        position='right'\n        name='Profile'\n        active = {activeItem === 'Profile'}\n        onClick={() => {\n          setActiveItem('Profile')\n          history.push(`/Manage/AllStaffs/${staffId}/Profile`)\n        }}\n      />\n\n      <Menu.Item\n        name='Timesheets'\n        active = {activeItem === 'Timesheets'}\n        onClick={() => {\n          setActiveItem('Timesheets')\n          history.push(`/Manage/AllStaffs/${staffId}/Timesheets`)\n        }}\n      />\n\n      <Menu.Item\n        name='TimesheetsOverview'\n        active = {activeItem === 'TimesheetsOverview'}\n        onClick={() => {\n          setActiveItem('TimesheetsOverview')\n          history.push(`/Manage/AllStaffs/${staffId}/TimesheetsOverview`)\n\n\n        }}\n      />\n      {staffCanEdit &&<Menu.Item\n        position='right'\n        name='EditProfile'\n        icon = 'edit'\n        onClick={(e) => {\n          e.preventDefault()\n          history.push('Profile')\n          setActiveItem('Profile')\n          setEditModelOpen(true)\n        }}\n      />}\n\n    </Menu>\n\n  )}\n\nexport default StaffSubMenu","import React,{ useEffect, useState } from 'react'\nimport { Link, useHistory, useLocation, useParams } from 'react-router-dom'\nimport { Breadcrumb, BreadcrumbDivider, BreadcrumbSection } from 'semantic-ui-react'\nimport ManageTimeSheets from '../AdminPages/ManageTimeSheets'\nimport Profile from './Profile'\nimport RegisterPage from './RegisterPage'\nimport StaffMenuBar from './StaffMenuBar'\nimport StaffSubMenu from './StaffSubMenu'\nimport TimeSheet from './TimeSheet'\n/**\n * Staff page component\n * Can receive staffName as props  if props not set then retrives staffId from url nad fetches name\n * @param props {staffName,id}\n */\nconst StaffPage = ({ name ,id }) => {\n\n  const params = useParams()\n\n  let staffId = params && params.staffId\n  let page = params && params.page\n  const location = useLocation()\n  const history = useHistory()\n  const [staffName, setStaffName] = useState(name)\n\n  const [editModelOpen,setEditModelOpen] = useState(false)\n  const [activeItem, setActiveItem] = useState(page )\n  const [subMenuActiveItem, setSubMenuActiveItem] = useState(page || 'Profile')\n\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\n\n  const [loggedInStaffName, setLoggedInStaffName] = useState(staff && staff.name)\n\n  const locationPaths = location.pathname.split('/')\n\n  useEffect(() => {\n    setActiveItem(page)\n    setSubMenuActiveItem(page)\n  },[page])\n\n  /**If the user is trying to register via registration link  */\n  if(locationPaths[1].toLowerCase() === 'register'){\n    page = 'register'\n    return<>\n      <StaffMenuBar staffName = {loggedInStaffName} activeItem= {activeItem} setActiveItem={setActiveItem}></StaffMenuBar>\n      <RegisterPage setName={setLoggedInStaffName}></RegisterPage></>\n  }\n\n\n  /**If user is not logged in and is not requesting to register */\n  if(!staff && page !== 'register'){\n    history.push('/staffLogin')\n    return null\n  }\n\n\n  const staffCanEdit  = (staff.id !== staffId && staffId !== undefined)  && ((staff.permission && staff.permission.staff.edit) ||  staff.permission.admin || false)\n  const staffHasMangeRights =  staff.permission && (staff.permission.station.edit.length > 0 || staff.permission.station.add || staff.permission.staff.view || staff.permission.timesheet.view.length > 0\n  )\n\n  /**If id is passed as props then use that as staffId*/\n  if(id){\n    staffId= id\n  }\n  /**If the url have staff Id */\n  else if(params.staffId) {\n    staffId= params.staffId\n  }\n  /**staff is loggedIn user */\n  else {\n    staffId= staff.id\n  }\n\n  const basePage =  locationPaths[1] //root page\n  if(staff.id !== staffId && basePage.toLocaleLowerCase() === 'staff' ){ //if user is not same as logged in user then redirect to manage page\n    history.push(`/Manage/AllStaffs/${staffId}/${activeItem}`)\n  }\n\n  if(staffHasMangeRights && basePage.toLowerCase() !== 'manage' ){ // if user has manage rights then redirect to manage page\n    history.push('/Manage/MyPage/Profile')\n  }\n\n  /**\n   * Set bredcrumbs for diffent view based on root page\n   */\n\n  const getBreadCrumb = () => {\n\n    return(\n      <>\n        <Breadcrumb>\n          { staff.id === staffId &&\n            <>\n              <BreadcrumbSection> My Page </BreadcrumbSection>\n              <BreadcrumbDivider/>\n            </>\n          }\n          {\n            staff.id !== staffId &&\n            <>\n              <BreadcrumbSection link as = {Link} to = {`/${basePage}/${locationPaths[2]}`}> {locationPaths[2]} </BreadcrumbSection>\n              <BreadcrumbDivider/>\n              <BreadcrumbSection link as={Link} to={`/${basePage}/${locationPaths[2]}/${locationPaths[3]}/Profile`}> {staffName || staffId} </BreadcrumbSection>\n              <BreadcrumbDivider/>\n\n            </>\n          }\n          {\n            page && page.toLowerCase()=== 'timesheetsoverview'  && params.period ?\n              <>\n                <BreadcrumbSection link as={Link}\n                  to={\n                    locationPaths.reduce ((p,c,i) => {\n                      if(i === locationPaths.length -1 || c === ''){\n                        return p\n                      }\n                      return p+'/'+c\n                    })}\n                  active> {subMenuActiveItem} </BreadcrumbSection>\n                <BreadcrumbDivider icon='right chevron'/>\n                <BreadcrumbSection active>{params.period.replace('_',' ')}</BreadcrumbSection>\n              </>:\n              <BreadcrumbSection active> {subMenuActiveItem} </BreadcrumbSection>\n          }\n\n        </Breadcrumb>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {!staffHasMangeRights  && <StaffMenuBar staffName = {loggedInStaffName} activeItem= {activeItem} setActiveItem={setActiveItem}></StaffMenuBar> }\n      {getBreadCrumb()}\n\n      {staffId !== staff.id  && //If admin user is browsing staff\n      <StaffSubMenu\n        activeItem= {subMenuActiveItem}\n        setActiveItem = {setSubMenuActiveItem}\n        staffName= {staffName} staffId={staffId}\n        staffCanEdit={staffCanEdit}\n        setEditModelOpen = {setEditModelOpen}/>\n      }\n\n      { /**If submenu is timesheets  Or current page is timesheet */\n        ((subMenuActiveItem &&subMenuActiveItem.toLocaleLowerCase() === 'timesheets' )|| (activeItem && activeItem.toLowerCase() === 'timesheets')) && <>\n          <TimeSheet staffId ={staffId} setStaffName={setStaffName} />\n        </>\n      }\n      {/**If submenu is profile Or current page is profile */\n        ((subMenuActiveItem && subMenuActiveItem.toLocaleLowerCase() === 'profile' ) || ( activeItem && activeItem.toLowerCase() === 'profile') )&&\n        <>\n          <Profile id={staffId} staffCanEdit={staffCanEdit} setEditModelOpen={setEditModelOpen} editModelOpen={editModelOpen} setStaffName={setStaffName}/>\n        </>\n      }\n      {/**If submenu is timesheetsoverview  current page is managetimesheets or  timesheetsoverview*/\n        ((subMenuActiveItem && subMenuActiveItem.toLocaleLowerCase() === 'timesheetsoverview' ) || (activeItem && ( activeItem.toLowerCase() === 'timesheetsoverview'))) &&\n        <>\n          <ManageTimeSheets setName={setStaffName}></ManageTimeSheets>\n        </>\n      }\n    </>\n  )\n}\n\nexport default StaffPage","import { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useEffect } from 'react'\nimport { Button, Dimmer, Form, Grid, Icon, List, Loader, Modal,ModalContent, ModalHeader, Segment } from 'semantic-ui-react'\nimport { STAFF_ADD } from '../../mutations/staffMutation'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { validateEmail, validateName } from '../StationReportPage/NewReportForm/validator'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nconst NewStaffModel = (props) => {\n\n  const [addStaffMutation,{ loading,error }] = useMutation(STAFF_ADD)\n\n  const addStaff = (values) => {\n    addStaffMutation({\n      variables: values,\n      update: (store,response) => {\n        store.modify({\n          fields:{\n            allStaff(existingStaffRefs , { readField }){\n              const newStaff = response.data.addStaff\n              if(existingStaffRefs.some(ref => readField('id',ref) === newStaff.id)){\n                return existingStaffRefs\n              }\n              return [...existingStaffRefs,newStaff]\n\n            }\n          }\n\n        })\n      }\n    })\n\n  }\n  const initVal = {\n    name: '',\n    email: '',\n    phone: '',\n    contractType: '',\n    contractHours: '',\n    position: '',\n  }\n  return(\n    <Formik\n      initialValues = { initVal }\n      onSubmit= {(values) => {\n        addStaff(values)\n      }}\n      validate = {(values) => {\n        let errors = {}\n\n        errors.name = validateName(values.name)\n        errors.email = validateEmail(values.email)\n\n        if(_.isEmpty(errors.name)) delete errors.name\n        if(_.isEmpty(errors.email)) delete errors.email\n\n        if(!values.contractType ){\n          errors.contractType = 'Please select contract type'\n        }\n\n        if(!values.contractHours || !parseFloat(values.contractHours) ){\n          errors.contractHours = 'Invalid contract hours'\n        }\n\n        return errors\n\n      }}\n    >\n      {({ values,handleSubmit,setFieldValue,dirty }) =>\n        <Modal\n          closeIcon\n          closeOnEscape={false}\n          closeOnDimmerClick={false}\n          open = {props.open}\n          onClose= {() =>  props.setOpen(false)}\n          onOpen= {() => props.setOpen (true)}\n        >\n          <ModalHeader>New Staff {props.name} </ModalHeader>\n          <ModalContent>\n\n            { loading &&\n            <Dimmer active>\n              <Loader />\n            </Dimmer>\n            }\n\n\n            <Form style={{ marginBottom:'5rem' }}>\n              <Grid>\n                <Grid.Row>\n                  <InputField name='name' label='Name' type='text' width='8'/>\n                </Grid.Row>\n                <Grid.Row>\n                  <InputField name='email' label='Email' type='email'  width='8'/>\n                </Grid.Row>\n                <Grid.Row>\n                  <InputField name='phone' label='Phone' type='tel'  width='8'/>\n\n                </Grid.Row>\n                <Grid.Row>\n                  <DropDownField  name='contractType' labeled label='Contract'\n                    selection\n                    width='8'\n                    options= {[{\n                      key:1, value:'Contractor', text: 'Contractor' },\n                    { key:2, value:'Employee', text: 'Employee' }]}\n                    onChange = {  (e,{ value }) => {\n                      setFieldValue('contractType',value)\n                    }}\n                  >\n\n                  </DropDownField>\n\n\n                </Grid.Row>\n                <Grid.Row>\n                  <InputField name='contractHours' label='Required Hours per day' type='number'  width='8'/>\n\n                </Grid.Row>\n                <Grid.Row>\n                  <InputField name='position' label='Position' width='8'/>\n                </Grid.Row>\n                <Grid.Row>\n                  <Form.Button icon type='button'  labelPosition='right' primary><Icon size='big' name='barcode'/>Link Id card</Form.Button>\n                </Grid.Row>\n              </Grid>\n            </Form>\n          </ModalContent>\n          <Modal.Actions>\n            <Button   negative onClick={() => props.setOpen (false)}>Cancel</Button>\n            {dirty &&\n            <Button  positive onClick= {() => handleSubmit()}>Save</Button>}\n          </Modal.Actions>\n        </Modal>\n      }\n    </Formik>\n\n  )\n}\n\nexport default NewStaffModel","import React, { useState,useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { GET_ALL_STAFF } from '../../queries/staffQuery'\nimport { Segment, Dimmer, Loader, Table, TableHeaderCell, TableRow, TableCell, Button, Icon, FormButton, Input } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport NewStaffModel from './NewStaffModal'\nimport { formatDate } from '../../utils/DateHelper'\n\n\nconst AllStaffs = () => {\n  const { loading,error,data } = useQuery(GET_ALL_STAFF)\n  const  [staffsData,setStaffsData]  = useState([])\n  const [staffAddOpen,setStaffAddOpen ]= useState(false)\n\n  useEffect  (() => {\n    if(data  && data.allStaff ){\n      setStaffsData(data.allStaff)\n    }\n  }, [data])\n\n  if(loading){\n    return (\n      <Loader active>Fetching Staffs</Loader>\n    )\n  }\n\n  if(error){\n    return <Segment >Something Went Wrong </Segment>\n  }\n\n\n\n\n  return (\n    <>\n      <Button primary icon onClick= {() => setStaffAddOpen(true)}>Add New Staff <Icon name = 'add'> </Icon></Button>\n      {\n        staffsData &&\n      <Input icon='search' placeholder='Search...'\n        onChange ={ (event,{ value }) => {\n          if(!value || value.trim() === ''){\n            setStaffsData(data.allStaff)\n          }else{\n            const filterData = staffsData.filter(staff => staff.name.includes(value) )\n            setStaffsData(filterData)\n          }\n\n\n        }}\n      />}\n      <Table>\n        <Table.Header>\n          <TableRow>\n            <TableHeaderCell> Name </TableHeaderCell>\n            <TableHeaderCell> Email </TableHeaderCell>\n            <TableHeaderCell> Phone </TableHeaderCell>\n            <TableHeaderCell> Last Active </TableHeaderCell>\n            <TableHeaderCell> Recent Station </TableHeaderCell>\n          </TableRow>\n        </Table.Header>\n        <Table.Body>\n          {staffsData && staffsData.map( staff =>\n            <Table.Row key= {staff.id}>\n              <TableCell><Link to={`/Manage/AllStaffs/${staff.id}/Profile`}>{staff.name}</Link></TableCell>\n              <TableCell>{staff.email}</TableCell>\n              <TableCell>{staff.phone}</TableCell>\n              <TableCell>{staff.lastActive && formatDate(staff.lastActive.activeAt) }</TableCell>\n              <TableCell>{staff.lastActive && staff.lastActive.station && staff.lastActive.station.location}</TableCell>\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n      <NewStaffModel open={staffAddOpen} setOpen= {setStaffAddOpen}></NewStaffModel>\n    </>\n\n  )\n}\n\nexport default AllStaffs","import { gql } from '@apollo/client'\nexport const ALL_COSTUMERS = gql`\nquery fetchAllCostumers ($detailed: Boolean = false) {\n    allCostumers {\n      name\n      id\n      stations  @include(if: $detailed) {\n        id\n        location\n      }\n      \n      aircrafts @include(if: $detailed) {\n        id\n        registration\n      }\n    }\n  }\n`","import { useMutation, useQuery } from '@apollo/client'\nimport { FieldArray, Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useEffect, useState } from 'react'\nimport { Button, Dimmer, Form, Grid, Header, Icon, List, Loader, Modal,ModalContent, ModalHeader, Segment } from 'semantic-ui-react'\nimport { ADD_STATION } from '../../mutations/stationMutation'\nimport { ALL_COSTUMERS } from '../../queries/costumerQuey'\nimport { ALL_STATION } from '../../queries/stationQuery'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { validateEmail, validateName } from '../StationReportPage/NewReportForm/validator'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nconst NewStationModel = (props) => {\n\n  const [addStationMutation,{ loading,error }] = useMutation(ADD_STATION)\n  const [countryList,setCountryList]=  useState([])\n  const [costumerList,setCostumerList] = useState([])\n\n  const { loading: costumerLoading } = useQuery(ALL_COSTUMERS, { onCompleted : (data) => {\n    if(data.allCostumers){\n      const costumerOptions =data.allCostumers.map((costumer,index) => {\n        return { key:index, value: costumer.id, text: costumer.name }\n      } )\n      setCostumerList(costumerOptions)\n    }\n  } })\n\n  useEffect(() => {\n    const fetchCountries = async () => {\n      const response = await fetch('https://restcountries.eu/rest/v2/?fields=name;alpha2Code;')\n      const countries = await response.json()\n      const countryArray = countries.map((country,index) => {\n        const exclude = ['aq','bq','cw','gg','im','je','xk','bl','mf','sx','ss']\n        if(exclude.includes(country.alpha2Code.toLowerCase())){\n          return { key:index, value: country.name, text:  country.name  }\n        }\n        return { key:index, value: country.name, text:  country.name ,flag: country.alpha2Code.toLowerCase() }\n      })\n      setCountryList(countryArray)\n    }\n\n    fetchCountries()\n  },[])\n\n  const addStation = (values) => {\n    delete(values.stationKeyConfirm)\n    addStationMutation({\n      variables: values,\n      update: (store,response) => {\n        store.modify({\n          fields:{\n            allStation(existingStationRefs , { readField }){\n              const newStation = response.data.addStaff\n              if(existingStationRefs.some(ref => readField('id',ref) === newStation.id)){\n                return existingStationRefs\n              }\n              const update = { ...values,id: newStation.id }\n              return [...existingStationRefs,update]\n\n            }\n          }\n\n        })\n      }\n    })\n  }\n\n\n  const initVal = {\n    location: '',\n    address:{\n      street:'',\n      postcode:'',\n      city:'',\n      country:''\n    },\n    email: '',\n    phone: '',\n    costumers:[],\n    shifts:[],\n    stationKey:'',\n    stationKeyConfirm:''\n  }\n  return(\n    <Formik\n      initialValues = { initVal }\n      onSubmit= {(values) => {\n        console.log(values)\n        addStation(values)\n      }}\n      validate = {(values) => {\n        let errors = {}\n\n        if(!values.location || (values.location && values.location.length < 3)){\n          errors.location= 'Location is required and must be at least 3 charcter long'\n        }\n\n        if( !values.address.street || (values.address.street && values.address.street.length < 3) ){\n\n          errors.address = { ...errors.address, street: 'Street is required and must be at least 3 charcter long' }\n        }\n\n        if( !values.address.city ){\n          errors.address= { ...errors.address, city: 'City is required and must be at least 3 charcter long' }\n        }\n\n        if( !values.address.country ){\n          errors.address = { ...errors.address,country:'Country is required' }\n        }\n        if( !values.email  || validateEmail(values.email)){\n          errors.email = 'Email is required and must be valid'\n        }\n        if( !values.phone ){\n          errors.phone = 'Phone is required'\n        }\n        if( !values.stationKey || (values.stationKey && values.stationKey.length < 8)){\n          errors.stationKey = 'Station key is required and should be at least 8 charter long'\n        }\n        if( values.stationKeyConfirm !== values.stationKey){\n          errors.stationKeyConfirm = 'Station key confirm mismatch'\n        }\n\n        return errors\n\n      }}\n    >\n      {({ values,handleSubmit,setFieldValue,dirty }) =>\n        <Modal\n          closeIcon\n          closeOnEscape={false}\n          closeOnDimmerClick={false}\n          open = {props.open}\n          onClose= {() =>  props.setOpen(false)}\n          onOpen= {() => props.setOpen (true)}\n        >\n          <ModalHeader>New Station {props.name} </ModalHeader>\n          <ModalContent>\n\n            { loading &&\n            <Dimmer active>\n              <Loader />\n            </Dimmer>\n            }\n\n\n            <Form style={{ marginBottom:'5rem' }} autoComplete=\"off\">\n              <Grid padded >\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='location' label='Location' type='text' width='8' placeholder='Location identifier ex: Airport code'/>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop:3 }}>\n                  <DropDownField  name='address.country' labeled label='Country'\n                    placeholder='Select Country'\n                    search\n                    selection\n                    width='8'\n                    options= {countryList}\n                    onChange = {  (e,{ value }) => {\n                      setFieldValue('address.country',value)\n                    }}\n                  >\n\n                  </DropDownField>\n\n                </Grid.Row>\n                <Grid.Row><Header as ='h3'>Address</Header></Grid.Row>\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='address.street' label='Street' type='text' width='8'/>\n                </Grid.Row>\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='address.postcode' label='postcode' type='text' width='8'/>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop:0 }}>\n                  <InputField name='address.city' label='city' type='text' width='8'/>\n                </Grid.Row>\n\n                <Grid.Row><Header as ='h3'>Contact Information</Header></Grid.Row>\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='email' label='Email' type='email'  width='8'/>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop:0 }}>\n                  <InputField name='phone' label='Phone' type='tel'  width='8'/>\n                </Grid.Row>\n\n                <Grid.Row><Header as ='h3'>Working Shift</Header></Grid.Row>\n                <FieldArray  name={'shifts'}>\n                  {({ push,remove }) => (<>\n                    { values.shifts.length > 0 && values.shifts.map((shift,index) => <Grid.Row key ={index} style={{ padding:0 }}>\n                      <Form.Group widths='13'><InputField name={`shifts[${index}].name`} label='Name' /><InputField name={`shifts[${index}].startTime`} label='StartTime'/>\n                        <Button\n                          type='button'\n                          icon\n                          size ='mini'\n                          primary\n                          onClick={ (e) => remove(index)\n                          }>\n                          <Icon name=\"plus circle\"/> Add\n                        </Button> </Form.Group>\n                    </Grid.Row>\n                    )}\n                    <Button\n                      type='button'\n                      icon\n                      size ='mini'\n                      primary\n                      onClick={ (e) => push ({ name:'', startTime:'' })\n                      }>\n                      <Icon name=\"plus circle\"/> Add\n                    </Button>\n                  </>)}\n\n\n\n                </FieldArray>\n\n                <Grid.Row><Header as ='h3'>Costumers</Header></Grid.Row>\n                <DropDownField  name='costumers'\n                  placeholder='Select Costumers'\n                  multiple\n                  search\n                  selection\n                  width='8'\n                  loading= {costumerLoading}\n                  options= {costumerList}\n                  onChange = {  (e,{ value }) => {\n                    setFieldValue('costumers',value)\n                  }}\n                >\n\n                </DropDownField>\n                <Grid.Row><Header as ='h3'>Station Key</Header></Grid.Row>\n                <Grid.Row style={{ padding:0 }}> <InputField name='stationKey' type='password' width='8' placeholder='stationKey' /> </Grid.Row>\n                <Grid.Row style={{ padding:0 }}> <InputField name='stationKeyConfirm' type='password' width='8' placeholder='Confirm stationKey' /> </Grid.Row>\n\n\n              </Grid>\n            </Form>\n          </ModalContent>\n          <Modal.Actions>\n            <Button   negative onClick={() => props.setOpen (false)}>Cancel</Button>\n            {dirty &&\n            <Button  positive onClick= {() => handleSubmit()}>Save</Button>}\n          </Modal.Actions>\n        </Modal>\n      }\n    </Formik>\n\n  )\n}\n\nexport default NewStationModel","import React, { useState,useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { ALL_STATION } from '../../queries/stationQuery'\nimport { Segment, Loader, Table, TableHeaderCell, TableRow, TableCell, Button, Icon, Input, Flag } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport NewStationModel from './NewStationModal'\n\n\nconst AllStations = () => {\n  const { loading,error,data } = useQuery(ALL_STATION , { variables:{ detailed:true } })\n  const  [stationsData,setStationsData]  = useState([])\n  const [stationAddOpen,setStationAddOpen ]= useState(false)\n\n  useEffect  (() => {\n    if(data  && data.allStations ){\n      setStationsData(data.allStations)\n    }\n  }, [data])\n\n  if(loading){\n    return (\n      <Loader active>Fetching Staffs</Loader>\n    )\n  }\n\n  if(error){\n    console.log(error)\n    return <Segment >Something Went Wrong </Segment>\n  }\n\n\n\n\n  return (\n    <>\n      <Button primary icon onClick= {() => setStationAddOpen(true)}>Add New Station <Icon name = 'add'> </Icon></Button>\n      {\n        stationsData &&\n      <Input icon='search'  placeholder='Country or location ...'\n        onChange ={ (event,{ value }) => {\n          if(!value || value.trim() === ''){\n            setStationsData(data.allStations)\n          }else{\n            const filterData = stationsData.filter(station => station.location.toLowerCase().includes(value.toLowerCase()) ||  station.address.country.toLowerCase().includes(value.toLowerCase()))\n            setStationsData(filterData)\n          }\n        }}\n      />}\n      <Table textAlign='center'>\n        <Table.Header>\n          <TableRow>\n            <TableHeaderCell> Location </TableHeaderCell>\n            <TableHeaderCell> Staff Count (Last 24 Hrs) </TableHeaderCell>\n            <TableHeaderCell> Address </TableHeaderCell>\n            <TableHeaderCell> Phone No. </TableHeaderCell>\n            <TableHeaderCell> Email </TableHeaderCell>\n          </TableRow>\n        </Table.Header>\n        <Table.Body>\n          {stationsData && stationsData.map( station =>\n            <Table.Row key= {station.id}>\n              <TableCell><Link to={`/Manage/AllStations/${station.id}`}>{station.location}</Link></TableCell>\n              <TableCell>{station.activeStaffs}</TableCell>\n              <TableCell>{<> {station.address.street} <br/>   {station.address.postcode} {station.address.city} <br/>  {station.address.country}    <Flag name={station.address && station.address.country && station.address.country.toLowerCase()}></Flag> </>}</TableCell>\n              <TableCell>{station.phone && station.phone.reduce((p,c) => <>{c}  <br/> {p}</> , '') } </TableCell>\n              <TableCell>{station.email}</TableCell>\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n      {stationAddOpen &&\n        <NewStationModel open={stationAddOpen} setOpen= {setStationAddOpen}></NewStationModel>\n      }\n\n    </>\n\n  )\n}\n\nexport default AllStations","import React, { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Menu } from 'semantic-ui-react'\n\nconst StationMenu = ({ stationLocation ,activeItem, setActiveItem }) => {\n  const history = useHistory()\n\n\n  const handleMenuClick = (e, { name }) => {\n    setActiveItem(name)\n    if(activeItem !== name){\n      history.push(name)\n    }\n\n  }\n  return (\n    <Menu pointing secondary >\n      <Menu.Item header>{stationLocation}</Menu.Item>\n      <Menu.Item\n        position='right'\n        name='BasicInfo'\n        active = {activeItem === 'BasicInfo'}\n        onClick={handleMenuClick}\n      />\n\n      <Menu.Item\n        name='Procedures'\n        active = {activeItem === 'Procedures'}\n        onClick={handleMenuClick}\n      />\n\n      <Menu.Item\n        name='Costumers'\n        active = {activeItem === 'Costumers'}\n        onClick={handleMenuClick}\n      />\n\n      <Menu.Item\n        name='Settings'\n        active = {activeItem === 'Settings'}\n        onClick={handleMenuClick}\n      />\n    </Menu>\n\n  )}\n\nexport default StationMenu","import { useQuery } from '@apollo/client'\nimport React, { useState } from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport { Button, Card, Flag, Grid, Header, Icon, Loader, Menu, Segment, Table } from 'semantic-ui-react'\nimport { GET_STATION } from '../../queries/stationQuery'\nimport { formatDate } from '../../utils/DateHelper'\nimport StationMenu from './stationMenu'\n\nconst StationInfo = (props) => {\n  const [stationData, setStationData] = useState('')\n  const [activeItem,setActiveItem] = useState('BasicInfo')\n\n\n\n  let stationId = useParams().stationId\n  /** If stationId is passed as props then passed stationId should have precedence over params */\n  if(props.stationId){\n    stationId = props.stationId\n  }\n\n  const loggedInStaff = JSON.parse( sessionStorage.getItem('staffKey'))\n\n  const { loading } = useQuery(GET_STATION, {\n    variables: { id: stationId },\n    skip: !stationId,\n    onCompleted: (data) => setStationData(data.getStation)\n  } )\n\n  console.log(stationData)\n\n  if(!stationId || !stationData || loading ){\n    return(\n      <Segment basic>\n        <Loader active>Loading Station</Loader>\n      </Segment>\n    )\n\n  }\n\n  return (\n    <>\n      <StationMenu station= {stationData} activeItem ={activeItem} setActiveItem= {setActiveItem}></StationMenu>\n      {activeItem === 'BasicInfo' &&\n        <Grid padded>\n          <Grid.Row columns='4'>\n            <Grid.Column >\n              <Header as ='h4' >Address:\n                <Header.Subheader>{stationData.address.street }<br/>\n                  {stationData.address.postcode }{stationData.address.city}<br/>\n                  {stationData.address.country} <Flag name={stationData.address.country.toLowerCase()}></Flag></Header.Subheader>\n              </Header>\n            </Grid.Column>\n            <Grid.Column>\n              <Header as ='h4' >Contact:\n                <Header.Subheader><strong>Email: </strong> {stationData.email}<br/>\n                  <strong>Phone: </strong>\n                  {stationData.phone.reduce((p,c) => p + ' / ' + c)}</Header.Subheader>\n              </Header>\n            </Grid.Column>\n            <Grid.Column>\n              <Header as ='h4' >Shifts:\n                {stationData.shifts.map((shift,i) => <Header.Subheader key={i}> {shift.name} <strong> Starts at: </strong> {shift.startTime}<br/></Header.Subheader> )}\n              </Header>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <Header as ='h4'>Current Staffs:</Header>\n              <Table collapsing>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell > Name </Table.HeaderCell>\n                    <Table.HeaderCell> Last Active At:  </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {stationData.staffList.length > 0 && stationData.staffList.map((staff,i ) => <Table.Row key={i}>\n                    <Table.Cell>\n                      {\n                        loggedInStaff.permission.staff.view?\n                          <Link to={`/Manage/AllStaffs/${staff.id}/Profile`}>{staff.name}</Link>: staff.name\n                      }\n                    </Table.Cell>\n                    <Table.Cell>{formatDate(staff.lastActive.activeAt)}</Table.Cell>\n                  </Table.Row>\n                  )}\n                </Table.Body>\n              </Table>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      }\n\n      {activeItem === 'Procedures' &&\n      <Header as='h5'> This Station Procedure feature is not Implemented yet, will be implemanted soon ...\n        <Header.Subheader>\n          After this implemetation, one will be able to add/ view / search all the station related procedure such as 'Garbage Disposal , Hanger Booking , Supplies Delivery ...' on this section\n        </Header.Subheader>\n      </Header>}\n\n      {activeItem === 'Costumers' &&\n      <>\n        {stationData.costumers && stationData.costumers.map(costumer =>\n          <Card key={costumer.id} link raised as={Link} to='/Manage/AllStaffs'>\n            <Card.Content textAlign='center' header = {costumer.name} />\n            <Card.Content textAlign='center' >{costumer.contract? costumer.contract + ' Contract':''}</Card.Content>\n            <Card.Content textAlign='center' extra>\n              <Header as ='h5'> <Icon name='plane'/> Total Aircrafts: {costumer.aircrafts.length}</Header>\n            </Card.Content>\n          </Card>)}\n        <Button primary icon floated='left'><Icon name='add circle'/> Add More </Button>\n      </>\n      }\n\n      {activeItem === 'Settings' &&\n      <Header as='h5'> This Station Settings feature is not Implemented yet, will be implemanted soon ...\n        <Header.Subheader>\n          After this implemetation, one will be able to change station settings such as 'SignIn/Off Work Methods', 'Add Remove Shifts', 'Number of active reporting', 'Change Station Key'\n        </Header.Subheader>\n      </Header>}\n    </>\n  )\n\n\n}\nexport default StationInfo","import React from 'react'\nimport { Dropdown, Menu } from 'semantic-ui-react'\nimport { useHistory } from 'react-router-dom'\n\n\nconst AdminMenuBar = ({  activeItem, setActiveItem }) => {\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const history = useHistory()\n  const handleMenuClick = (e, { name }) => {\n    setActiveItem( name )\n\n    if( ['Profile','Timesheets','TimesheetsOverview'].includes(name) ){ /** If user views personal pages */\n      history.push(`/Manage/MyPage/${name}`)\n    }else{\n      history.push(`/Manage/${name}`)\n    }\n  }\n\n  const logout = () => {\n    sessionStorage.removeItem('staffKey')\n    history.push('/staffLogin')\n  }\n\n  const menuItems = []\n\n  /**If user has some admin rights then add those items to menu and own profile options view will be on dropdown Button */\n  if(staff.permission.station.edit.length > 0 || staff.permission.station.add){\n    menuItems.push ('AllStations')\n  }\n\n  if(staff.permission.staff.view){\n    menuItems.push ('AllStaffs')\n  }\n\n  if(staff.permission.timesheet.view.length > 0){\n    menuItems.push ('ManageTimesheets')\n    menuItems.push ('Costumers')\n  }\n\n  /*if(staff.permission.costumers && staff.permission.costumers.view ){\n    \n  }*/\n\n\n  const getMenuItems = () => {\n    return menuItems.map(item =>\n      <Menu.Item  key={ item} name = {item} active = {activeItem ===  item }\n        onClick = {handleMenuClick} />)\n  }\n\n\n  return (\n    <Menu inverted color=\"blue\" stackable >\n      {getMenuItems()}\n      <Menu.Menu position='right'>\n        <Dropdown item text = {`Welcome ${staff.name}` } >\n          <Dropdown.Menu>\n            {menuItems.length > 0 && <>\n              <Dropdown.Item disabled text='My Pages'  onClick = { handleMenuClick }/>\n              <Dropdown.Item name= 'Profile' text='Profile'  onClick = { handleMenuClick }/>\n              <Dropdown.Item name ='Timesheets' text='Timesheets'  onClick = { handleMenuClick }/>\n              <Dropdown.Item name = 'TimesheetsOverview' text='TimesheetsOverview'  onClick = { handleMenuClick }/>\n              <Dropdown.Divider/>\n            </>\n            }\n            <Dropdown.Item text='Logout' onClick={() => logout()}/>\n\n          </Dropdown.Menu>\n\n        </Dropdown>\n      </Menu.Menu>\n    </Menu>\n  )\n\n\n}\n\nexport default AdminMenuBar","import React, { useEffect, useState } from 'react'\nimport { useHistory, useLocation, useParams } from 'react-router-dom'\nimport StaffPage from '../StaffPage'\nimport AllStaffs from './AllStaffs'\nimport AllStations from './AllStations'\nimport StationInfo from '../StationInfo/Index'\nimport TimeSheetsOverview from '../TimeSheetsOverview'\nimport AdminMenuBar from './AdminMenuBar'\nimport ManageTimeSheets from './ManageTimeSheets'\n//import AllStaffs from '../../AdminPages/AllStaffs'\n//import AllStations from '../../AdminPages/AllStations'\n\n//import TimeSheetsOverview from '../../TimeSheetsOverview'\n\n\nconst AdminPages = () => {\n  const params = useParams()\n  const location = useLocation()\n\n  const basePage =  location.pathname.split('/')[2] //root page\n\n  const [activeItem, setActiveItem] = useState(basePage)\n\n  useEffect(() => {\n    setActiveItem(basePage)}\n  ,[basePage, location, params])\n\n\n  return (\n    <>\n      <AdminMenuBar activeItem={activeItem} setActiveItem= {setActiveItem}></AdminMenuBar>\n      {/**If submenu is timesheetsoverview and staffId is set Or current page is managetimesheets or  timesheetsoverview*/\n        activeItem && activeItem.toLowerCase() === 'managetimesheets' &&\n        <ManageTimeSheets />\n      }\n\n      { /**If current page is allStaffs and staffId value is not set */\n        activeItem.toLowerCase() === 'mypage' &&\n      <>\n        <StaffPage />\n      </>\n      }\n      { /**If current page is allStaffs and staffId value is not set */\n        activeItem.toLowerCase() === 'allstaffs' && !params.staffId &&\n      <>\n        <AllStaffs/>\n      </>\n      }\n      { /**If current page is allStaffs and staffId value is set */\n        activeItem.toLowerCase() === 'allstaffs' && params.staffId &&\n      <>\n        <StaffPage id={params.staffId}/>\n      </>\n      }\n      { /**If current page is allStations and stationId value is not set */\n        activeItem && activeItem.toLowerCase() === 'allstations' && !params.stationId &&\n      <>\n        <AllStations/>\n      </>\n      }\n      { /**If current page is allStations and stationId value is set */\n        activeItem && activeItem.toLowerCase() === 'allstations' && params.stationId &&\n      <>\n        <StationInfo/>\n      </>\n      }\n    </>\n  )\n}\n\nexport default AdminPages","import React from 'react'\nimport { BrowserRouter as  Router, Switch, Route, Redirect } from 'react-router-dom'\nimport StationLoginPage from './components/StationLoginPage'\nimport './App.css'\nimport StationReportPage from './components/StationReportPage'\nimport StaffLoginPage from './components/StaffLoginPage'\nimport StaffPage from './components/StaffPage'\nimport AdminPages from './components/AdminPages'\n\n\nconst  App = () =>   {\n  return (\n    <Router>\n      <Switch>\n        <Route path = {['/shiftReport/:station/:id','/shiftReport/:id']}>\n          <StationReportPage></StationReportPage>\n        </Route>\n\n        <Route path = \"/stationLogin\">\n          <StationLoginPage ></StationLoginPage>\n        </Route>\n\n        <Route path = \"/staffLogin\">\n          <StaffLoginPage />\n        </Route>\n\n        {/**Routing for nonAdmin staff Pages */}\n        <Route path ={[ '/staff/:staffId/:page/:period','/staff/:staffId/:page']}>\n          <StaffPage></StaffPage>\n        </Route>\n        <Redirect from=\"/staff/:staffId\" to=\"/staff/:staffId/Profile\"/>\n        <Route path = \"/staff\">\n          <StaffPage></StaffPage>\n        </Route>\n\n        {/**Routing for /Manage/MyPage */}\n        <Redirect from='/Manage/MyPage/:page/:id/:period' to=\"/Manage/MyPage/:page/:period\"/>\n\n        {/**Routing for /Manage/AllStaffs */}\n        <Route path = {['/Manage/AllStaffs/:staffId/:page/:period','/Manage/AllStaffs/:staffId/:page/', '/Manage/MyPage/:page/:period','/Manage/MyPage/:page/' ]}>\n          <AdminPages></AdminPages>\n        </Route>\n        <Redirect from=\"/Manage/AllStaffs/:staffId\" to=\"/Manage/AllStaffs/:staffId/Profile\"/>\n        <Route path = '/Manage/AllStaffs'>\n          <AdminPages></AdminPages>\n        </Route>\n\n        {/**Routing for /Manage/ManageTimesheets */}\n        <Route path = {['/Manage/ManageTimesheets/:staffId/:period','/Manage/ManageTimesheets/:staffId','/Manage/ManageTimesheets' ]}>\n          <AdminPages></AdminPages>\n        </Route>\n\n\n        {/** Routing for /Manage/AllStations */}\n        <Route path = {['/Manage/AllStations/:stationId/:page' ]}>\n          <AdminPages/>\n        </Route>\n        <Redirect from='/Manage/AllStations/:stationId' to='/Manage/AllStations/:stationId/BasicInfo'/>\n        <Route path = '/Manage/AllStations'>\n          <AdminPages/>\n        </Route>\n\n        {/**Routing for Manage Page */}\n        <Redirect from=\"/Manage\" to=\"/Manage/MyPage/Profile\"/>\n        <Route path = '/Manage'>\n          <AdminPages></AdminPages>\n        </Route>\n\n        <Route path = \"/Register/:registerCode\">\n          <StaffPage></StaffPage>\n        </Route>\n\n        <Route path = \"/\">\n          <StationLoginPage ></StationLoginPage>\n        </Route>\n      </Switch>\n    </Router>\n\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'semantic-ui-css/semantic.min.css'\nimport { Container } from 'semantic-ui-react'\n\nimport { ApolloClient, HttpLink , InMemoryCache, ApolloProvider } from '@apollo/client'\n\nimport { setContext } from 'apollo-link-context'\n\nconst authLink = setContext((_, { headers }) => {\n  /**\n   * If the user is on staffs page session must have staffKey set , then set authorisation header to staffKey\n   */\n  let key = JSON.parse(sessionStorage.getItem('staffKey'))\n\n  /**If the staff page is not active then authorisation header is set to stationKey */\n  if(!key){\n    /**If the login info was saved preiously key will be set else retrive key from session*/\n    key =  JSON.parse(localStorage.getItem('stationKey'))\n    if(!key) {\n      key = JSON.parse(sessionStorage.getItem('stationKey'))\n    }\n  }\n\n  const token = key? key.value:null\n\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst httpLink = new HttpLink({ uri: 'http://localhost:4000' })\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link:  authLink.concat(httpLink)\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Container><App /></Container>\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}