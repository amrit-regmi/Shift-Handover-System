{"version":3,"sources":["queries/stationQuery.js","mutations/stationMutation.js","components/Notifications/Notification.js","components/Notifications/index.js","contexts/NotificationContext.js","components/StationLoginPage.js","queries/shiftReportQuery.js","components/StationReportPage/MenuBar.js","components/ShiftReport/TaskInfo.js","components/ShiftReport/GenericTasksPanel.js","components/ShiftReport/AircraftTasksPanel.js","components/ShiftReport/StaffWorkTime.js","components/ShiftReport/index.js","components/StationReportPage/Context.js","components/StationReportPage/stationReducer.js","components/StationReportPage/NewReportForm/FormFields.js","utils/DateHelper.js","components/StationReportPage/NewReportForm/validator.js","components/StationReportPage/NewReportForm/ErrorMessage.js","mutations/timeSheetMutation.js","components/StationReportPage/NewReportForm/StaffEditModel.js","components/StationReportPage/NewReportForm/StaffForm.js","components/StationReportPage/NewReportForm/StaffForms.js","components/StationReportPage/NewReportForm/TaskForm.js","components/StationReportPage/NewReportForm/TaskForms.js","components/StationReportPage/NewReportForm/AircraftSelectionForm.js","components/StationReportPage/NewReportForm/StaffAddModel.js","mutations/submitShiftReport.js","components/StationReportPage/NewReportForm/index.js","components/ShiftReport/ReportViewModal.js","components/StationReportPage/AllReportsTable.js","mutations/costumerMutation.js","queries/costumerQuey.js","components/ConfirmModal.js","components/CostumerInfo/AddAircraftModal.js","components/CostumerInfo/AddContactModal.js","components/TimeSheetsReport/TimeSheetEditFields.js","components/CostumerInfo/AddStationModal.js","components/CostumerInfo/index.js","components/StationInfo/AssignCostumersModal.js","components/StationInfo/AddMailingListModal.js","components/StationInfo/AddShiftsModal.js","components/StationInfo/ResetStationKeyModal.js","components/StationInfo/Settings.js","components/StationInfo/stationMenu.js","components/StationInfo/Index.js","components/StationReportPage/index.js","mutations/staffMutation.js","components/StaffLoginPage.js","queries/timeSheetQuery.js","components/TimeSheetsReport/TimeSheetEditModel.js","components/TimeSheetsReport/TImeSheetRow.js","components/TimeSheetsReport/index.js","components/StaffPage/TimeSheet.js","queries/staffQuery.js","components/TimeSheetsOverview/TimeSheetsFilter.js","components/TimeSheetsOverview/index.js","components/AdminPages/ManageTimeSheets.js","components/StaffPage/PasswordResetPage.js","mutations/permissionMutation.js","components/StaffPage/PermissionManager.js","components/StaffPage/StaffEditModel.js","components/StaffPage/PasswordChangeModel.js","components/StaffPage/Profile.js","components/StaffPage/RegisterPage.js","components/StaffPage/StaffMenuBar.js","components/StaffPage/StaffSubMenu.js","components/StaffPage/index.js","components/AdminPages/NewStaffModal.js","components/AdminPages/AllStaffs.js","components/AdminPages/NewStationModal.js","components/AdminPages/AllStations.js","components/AdminPages/AdminMenuBar.js","components/AdminPages/NewCostumerModal.js","components/AdminPages/Costumers.js","components/AdminPages/index.js","router.js","App.js","index.js"],"names":["ALL_STATION","gql","GET_STATION","LOGIN_TO_STATION","ADD_STATION","ADD_TO_MAILINGLIST","REMOVE_FROM_MAILINGLIST","ADD_SHIFTS","REMOVE_SHIFTS","CHANGE_STATION_KEY","DELETE_STATION","ASSIGN_COSTUMERS","Notification","dispatch","notification","useEffect","timeout","setTimeout","type","payload","id","clearTimeout","Message","success","error","attached","onDismiss","content","Notifications","useContext","NotificationContext","notifications","Segment","basic","style","width","position","zIndex","padding","map","key","createContext","initialState","notificationReducer","state","action","console","log","length","filter","n","NotificationProvider","props","useReducer","Provider","value","children","StationLoginPage","history","useHistory","useState","radioButton","setRadioButton","stationKey","setStationKey","remember","setRemember","useQuery","notifyOnNetworkStatusChange","loading","data","useMutation","onError","message","loginStation","loginToStationResult","station","loginToStation","sessionStorage","setItem","JSON","stringify","localStorage","push","event","a","preventDefault","variables","password","storedStationKey","parse","getItem","toggleRemember","Grid","textAlign","height","verticalAlign","Column","maxWidth","Header","as","color","Image","src","Form","size","onSubmit","clearing","stacked","allStations","Field","float","clear","marginRight","Radio","label","location","checked","onChange","radioButtonChange","Input","name","target","fluid","icon","iconPosition","placeholder","Checkbox","onClick","Button","renderPasswordInput","Divider","horizontal","GET_SHIFT_REPORT","GET_REPORTLIST","GET_SHIFTREPORT_ID","MenuBar","activeItem","setActiveItem","confirmOpen","setConfirmOpen","navigatingTo","setNavigatingTo","CurrentDataLossWarning","Confirm","open","cancelButton","confirmButton","header","onCancel","onConfirm","handleMenuClick","e","Menu","inverted","stackable","Item","active","primary","removeItem","TaskInfo","task","handoverId","updateOnthisHandover","_","find","updates","includes","Label","status","Icon","compact","description","GenericTaskPanel","genericTasks","legth","block","taskCategory","SegmentGroup","AircraftTaskPanel","aircraftTasks","aircrafts","key_costumerName","tasks","key_aircraft","StaffWorkTime","timesheets","Table","celled","Row","HeaderCell","Body","timesheet","Cell","staff","startTime","substring","endTime","ShiftReport","reportData","tasksByCat","groupBy","mapValues","cat","k","chain","AIRCRAFT","taskcat","aircraft","costumer","registration","floated","shift","staffAndTime","tasksByType","key_taskType","Context","lastShiftReport","reducer","DateInputField","useFormikContext","setFieldValue","setFieldTouched","useField","field","meta","touched","popupPosition","dateTimeFormat","closable","onBlur","preserveViewMode","pointing","prompt","TimeInputField","InputField","inputlabel","AircraftCheckBox","display","toggle","marginLeft","toUpperCase","TextAreaField","TextArea","formatDate","dateToFormat","isNaN","findIndex","regex","match","splitT","split","date","time","dateSplit","timeSplit","Date","getDate","toString","padStart","getMonth","getFullYear","getHours","getMinutes","operateDate","duration","unit","operation","ndate","isNumber","splitDateTime","splitDate","newDate","toDate","stringDate","getWeekNumber","dt","tdt","valueOf","dayn","getDay","setDate","firstThursday","setMonth","Math","ceil","getDatefromWeek","w","y","simpleStartDate","UTC","dayOfWeek","IsoWeekStart","getMonthOptions","currentMonth","Array","v","i","text","monthInt","Proxy","get","prop","parseInt","getWeekOptions","today","dYear","lastYearWeekNum","lastRetriveable","options","week","option","validateStaffInputField","validateStartEndTime","startDate","now","validateTaskField","trim","validateEmail","email","validateName","ErrorMessage","form","getIn","errors","SIGN_OFF_SHIFT","UPDATE_TIMESHEET","APPROVE_TIMESHEET","DELETE_TIMESHEET","REQUEST_CLARIFICATION","StaffEditModel","setOpen","fieldName","removeClick","removeStaff","setRemoveStaff","getFieldMeta","signOff","shiftStartTime","shiftEndTime","ibreakt","notifyResult","setNotifyResult","username","setUsername","setPassword","setStartTime","setEndTime","breakt","setBreakt","signOffTimeSheet","submit","values","signOffData","break","additionalAction","Dimmer","Loader","Modal","closeIcon","closeOnEscape","closeOnDimmerClick","onClose","onOpen","Content","enableReinitialize","initialValues","fullname","resetEmail","validate","handleSubmit","Group","maxDate","minDate","labelPosition","min","columns","vertical","StaffForm","index","remove","signOffKey","readOnly","changing","circular","staffs","StaffForms","addStaffOpen","replace","TaskForm","onRemove","disabled","getFieldProps","noteFieldVisibile","setNoteFieldVisibile","taskAction","taskStatus","taskNotes","actionButtonClick","toggleNotes","notes","TaskStatusBar","marginBottom","rows","visibility","removeButtonClick","actionCloseCheckBoxClick","actionOpenCheckBoxClick","actionDeferCheckBoxClick","margin","Accordion","panels","title","positive","Or","negative","hidden","paddingBotton","TaskForms","tasksIdentifier","aircraftId","newTaskField","AircraftSelectionForm","costumers","setCheckedAircrafts","checkedAircrafts","StaffAddModel","registerUserOpen","setRegisterUserOpen","forgotPasswordOpen","setForgotPasswordOpen","addedStaff","emailError","usernameError","FormField","warning","visible","FormGroup","SUBMIT_REPORT","NewReportForm","context","openAddStaffModel","setOpenAddStaffModel","setCostumers","initialFields","setInitialFields","update","store","result","getShiftReport","submitShiftReport","writeQuery","query","flag","onCompleted","submitReport","getShiftName","sdt","shifts","reduce","p","c","splitSt","st","setHours","setMinutes","diff","list","taskList","costumerList","simplifiedTask","newNote","disbleCheck","matchesProperty","staffErrors","errList","isEmpty","mapKeys","validateStaffsField","taskErrors","typedTasks","pickBy","identity","validateTasks","submitData","formdata","updatedTasks","tasksByIdentifier","identifier","initialTask","difference","Object","keys","reducedTask","beforeSubmit","submitCount","OTHER","LOGISTICS","Subheader","tertiary","ReportViewModal","openReport","setOpenReport","useLazyQuery","getReport","onMount","AllReportsTable","transformData","stationId","getReportList","report","striped","structured","stations","entries","reports","collapsing","rowSpan","List","ADD_COSTUMER","ADD_AIRCRFAT","ADD_CONTACT","ADD_STATION_TO_COSTUMER","REMOVE_AIRCRFAT","REMOVE_CONTACT","REMOVE_COSTUMER_FROM_STATION","DELETE_COSTUMER","ALL_COSTUMERS","GET_COSTUMER","ConfirmModal","confirm","Actions","fn","AddAircraftModal","addAircrafts","modify","fields","existingAircraftRefs","readField","newAircraftRefs","forEach","some","ref","writeFragment","fragment","onerror","err","errAircraft","AddContactModal","addContact","keyContacts","existingContactsRefs","newContactRefs","contact","addContacts","phone","widths","link","marginTop","RemarkField","remarkTitle","remarkDate","remarkBy","remarkText","remarkEdit","val","fontStyle","textDecoration","DropDownField","labeled","input","Dropdown","borderTopLeftRadius","borderBottomLeftRadius","AddStationModal","stationOptions","setStationOptions","loadStations","stationLoading","stationData","existingStationIds","addStationsToCostumer","existingCostumerRefs","addStation","dirty","search","selection","multiple","onFocus","CostumerInfo","costumerData","costumerId","setData","addStationModalOpen","setAddStationModalOpen","addAircraftModalOpen","setAddAircraftModalOpen","addContactModalOpen","setAddContactModalOpen","params","useParams","skip","costumerLoading","costumerError","fetchedData","removeFromStation","evict","goBack","deleteCostumer","removeContact","removeAircraftMut","removeCostumerFromStation","costumersRef","existingStationRefs","stationsRef","then","res","setConfirm","confirmModalOpen","setConfirmModalOpen","getCostumer","padded","permission","admin","floating","backgroundColor","removeAircraft","edit","removeContactFromStation","Footer","address","city","country","Flag","toLowerCase","_id","AssignCostumersModal","setCostumerList","loadCostumers","allCostumers","currentCostumers","costumerOptions","assignCostumers","existingStationsRefs","response","addCostumers","AddMailingListModal","emails","setEmails","mailingList","existingAddresses","newEmails","errEmail","AddShiftsModal","addShifts","existingShiftsRefs","newShiftRefs","ResetStationKeyModal","changekey","ModalHeader","ModalContent","newKey","confirmKey","Settings","loggedInStaff","addShiftsModalOpen","setAddShiftsModalOpen","addMailingListModalOpen","setAddMailingListModalOpen","resetStationKeyModalOpen","setResetStationKeyModalOpen","setStationData","getStation","deleteStation","deleteFromMailingList","deleteShift","existingEmails","item","deleteFromMailingMutation","shiftName","StationMenu","setActiveCostumer","useLocation","page","aar","pathname","path","splice","navigatePath","secondary","StationInfo","activeCostumer","assignCostumerModalOpen","setAssignCostumerModalOpen","locationPaths","getBreadCrumbLink","arr","Breadcrumb","BreadcrumbSection","Link","to","BreadcrumbDivider","street","postcode","staffList","view","lastActive","activeAt","Card","raised","contract","extra","StationReportPage","notificationDispatch","queryParams","errorReport","loadingReport","dataReport","dataStation","LOGIN_STAFF","RESET_PASSWORD","RESET_REGISTER_CODE","RESET_PASSWORD_REQ","CHANGE_PASSWORD","STAFF_EDIT","STAFF_ADD","SET_STAFF_STATUS","DELETE_STAFF","COMPLETE_REGISTRATION","StaffLoginPage","login","staffLogin","handleLogin","storedStaffKey","GET_TIMESHEETS","GET_ALL_TIMESHEETS","TimeSheetEditModel","self","add","shiftReportLoading","shiftReportData","closeModel","updateTimeSheet","updateTimeSheetLoading","newRemarkField","setNewRemarkField","getShiftList","handleShiftChange","ISODate","toISOString","vars","getShiftReportByShift","handover","remarks","getTimeSheetByUser","existingTimeSheetRefs","newTimeSheet","addToTimeSheet","getAllTimeSheets","period","cloneDeep","totHours","toFixed","itemsPending","parseFloat","broadcast","modalHeader","init","staffId","by","getInitValues","insertAt","newRemarks","autoAddRemarks","placholder","getRecomendedShiftOption","remark","TimeSheetRow","timeSheet","shiftReport","totalHours","total","ot","overTime","setAdd","deleteOpen","setDeleteOpen","clarifyOpen","setClarifyOpen","clarifyText","setClarifyText","approveTimesheet","timesheetSignLoading","mutatedeleteTimesheet","deleteLoading","requestClarification","clarifyLoading","isEmptyRow","isWeekDay","href","sign","Popup","trigger","approved","approveTimeSheet","wide","clearify","askToclarify","on","deleteTimeSheet","DELETE","TimeSheetsReport","shiftDate","endDate","calenderArray","day","calenderObject","zipObject","netTotal","netOt","formatData","timeSheets","totalDaily","reqHours","stickyTh","top","colSpan","TimeSheet","setStaffName","selected","selectedYear","timesheetOnly","selectBy","setSelectBy","number","setNumber","year","setYear","filterDuration","getStaff","months","start","sdate","filterStartDate","end","ed","sd","filterEndDate","isAllApproved","GET_STAFF","GET_STAFF_REG","GET_ALL_STAFF_MINIMAL","GET_ALL_STAFF","VERIFY_USERNAME","TimeSheetsFilter","setFilter","setStaff","setPeriod","setStations","setGroupBy","from","setFrom","setTo","basePage","filterStatus","setFilterStatus","staffOptions","setStaffOptions","getAllStations","stOpt","getAllStaffs","staffLoading","staffData","staffOpt","allStaff","clearable","dateFormat","TimeSheetsOverview","periodTitle","month","TableHeader","TableRow","TableHeaderCell","TableBody","TableCell","ManageTimeSheets","setName","staffName","Section","PasswordResetPage","resetPassword","resetCode","confirmPassword","CHANGE_PERMISSION","PermissionManager","permissions","setOptions","superUserSet","setSuperUserSet","hasSuperPermission","updatePermission","pLoading","mapPermission","permssionType","hasPermission","mod","getStationOptions","soptions","allStationIds","formValues","prev","cur","scope","isEqual","pType","resetForm","className","newViewValues","Set","updateStaff","updateStaffLoading","initVal","contractType","contractHours","test","updatedValues","omitBy","PasswordChangeModel","changePassword","newPassword","Profile","handleCancel","handleConfirm","passwordChangeOpen","setPasswordChangeOpen","withPermission","staffCanEdit","rpLoading","rpError","resetRegisterCode","rcLoading","rcError","resetConfirm","registered","registerCode","centered","idCardCode","editModelOpen","setEditModelOpen","RegisterPage","completeRegistration","regstrationLoading","registrationError","registrationData","validateUsernameQuery","usernameLoading","usernameData","verified","usernameVerified","setUsernameVerified","verifyUsername","registerStaff","handleChange","handleBlur","undefined","currentTarget","StaffMenuBar","menuItems","StaffSubMenu","loggedInStaffPermissions","StaffPage","subMenuActiveItem","setSubMenuActiveItem","loggedInStaffName","setLoggedInStaffName","staffHasMangeRights","toLocaleLowerCase","NewStaffModel","addStaffMutation","existingStaffRefs","newStaff","addStaff","AllStaffs","staffsData","setStaffsData","staffAddOpen","setStaffAddOpen","loggedInstaff","deleteStaff","toggleStaffStatus","filterData","accountStatus","NewStationModel","addStationMutation","countryList","setCountryList","fetch","json","countries","countryArray","alpha2Code","fetchCountries","stationKeyConfirm","newStation","autoComplete","paddingTop","AllStations","detailed","stationsData","setStationsData","stationAddOpen","setStationAddOpen","activeStaffs","AdminMenuBar","NewCostumerModel","addCostumerMutation","addCostumer","readQuery","existingCostumersRefs","newCostumerRef","Costumers","costumerAddOpen","setCostumerAddOpen","AdminPages","AppRouter","App","authLink","setContext","headers","token","authorization","httpLink","HttpLink","uri","window","client","ApolloClient","cache","InMemoryCache","concat","ReactDOM","render","Container","document","getElementById"],"mappings":"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","file":"static/js/main.0ad3e99f.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\nexport const ALL_STATION = gql`\n query ($detailed: Boolean = false ){\n  allStations (detailed: $detailed){\n    id\n    location\n    shifts @skip(if: $detailed){\n      name\n      startTime\n    }\n    address @include(if: $detailed){\n      country\n      postcode\n      city\n      street\n    }\n    phone @include(if: $detailed)\n    email @include(if: $detailed)\n    activeStaffs @include(if: $detailed)\n    \n  }\n}`\n\nexport const GET_STATION = gql`\n  query fetchStation($id: String!){\n    getStation(id: $id) {\n      costumers {\n        contract\n        aircrafts {\n          id\n          registration\n        }\n        name\n        id\n      }\n      shifts {\n        id\n        name\n        startTime\n      }\n      location\n      id\n      address {\n        country\n        postcode\n        city\n        street\n      }\n      phone\n      email\n      staffList{\n        id\n        name\n        lastActive{\n          activeAt\n        }\n      }\n      procedures{\n        title\n        description\n      }\n      mailingList\n\n    }\n  }\n\n`","import { gql } from '@apollo/client'\nexport const LOGIN_TO_STATION = gql`\n  mutation stationLogin($id: String!, $password:String!){\n    loginToStation(id: $id, password: $password) \n  }\n`\n\nexport const ADD_STATION = gql`\n  mutation addStation ($location:String! , $address: AddressInput! , $phone: String! ,$email: String!, $shifts: [ShiftInfoInput], $costumers: [String], $stationKey:String! ){\n    addStation(\n      location:$location\n      address:$address\n      phone:$phone\n      email:$email\n      shifts:$shifts\n      costumers:$costumers\n      stationKey: $stationKey\n    ){\n      id\n    }\n  }`\n\nexport const ADD_TO_MAILINGLIST = gql` mutation addToMailingList($emails:[String!]! , $stationId: String!){\n    addToMailingList(\n      email: $emails\n      stationId: $stationId\n    ){\n      status\n      message\n    }\n  }\n\n  `\n\nexport const REMOVE_FROM_MAILINGLIST = gql`mutation removeFromMailingList($email:String! , $stationId: String!){\n    removeFromMailingList(\n      email: $email\n      stationId: $stationId\n    ){\n      status\n      message\n    }\n  }`\nexport const ADD_SHIFTS= gql`mutation addShifts($shifts:[ShiftInfoInput!]!, $stationId: String!){\n    addShifts(\n      shifts:$shifts\n      stationId: $stationId\n    ) {\n      id\n      name\n      startTime\n    }\n  }`\n\nexport const REMOVE_SHIFTS = gql` mutation removeShift( $id:String! ,$stationId: String!){\n    removeShift(\n      id:$id\n      stationId: $stationId\n    ){\n      status\n      message\n    }\n  }\n  `\n\nexport const CHANGE_STATION_KEY = gql`mutation changeStationKey(\n    $stationKey:String!\n    $stationId: String!\n  ){\n    changeStationKey(\n      stationKey: $stationKey\n      stationId: $stationId\n    ){\n     status\n      message\n    }\n  }\n\n  `\n\nexport const DELETE_STATION = gql`mutation deleteStation ( $stationId: String!){\n    deleteStation( stationId: $stationId){\n      status\n      message\n    }\n\n  }\n\n  `\n\nexport const ASSIGN_COSTUMERS = gql`mutation  assignCostumers( $stationId: String! $costumers:[String!]!){\n    assignCostumers(\n      stationId: $stationId,\n      costumers: $costumers\n    ){\n      id\n      costumers {\n        id\n        name\n        contract\n        aircrafts{\n        id\n      }\n    }\n    }\n  }\n\n \n`","import React, { useEffect } from 'react'\nimport { Message } from 'semantic-ui-react'\n\nconst Notification  = ({ dispatch , notification }) => {\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      dispatch({ type: 'REMOVE_NOTIFICATION' , payload: { id: notification.id } })\n    },5000)\n    return () => {\n      clearTimeout(timeout)}\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[])\n\n  return (\n    <Message\n      success = {notification.type === 'SUCCESS'}\n      error={notification.type === 'ERROR'}\n      attached\n      onDismiss = {() => dispatch({ type: 'REMOVE_NOTIFICATION' , payload: { id: notification.id } })}\n    >\n      {notification.content}\n    </Message>\n  )\n}\n\nexport default Notification","import React, { useContext } from 'react'\nimport { Segment } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport Notification from './Notification'\n\nconst Notifications = () => {\n  const [notifications,dispatch] = useContext(NotificationContext)\n  return (\n    <Segment basic  style={{\n      width: 'inherit',\n      position: 'fixed',\n      zIndex: 1000,\n      padding:0\n    }}>\n      {notifications.map(notification =>\n        <Notification key={notification.id} notification= {notification} dispatch= {dispatch} ></Notification>\n      )}\n    </Segment>\n\n  )\n}\n\nexport default Notifications","import React, { createContext, useReducer } from 'react'\nimport Notifications from '../components/Notifications'\n\nexport const NotificationContext = createContext()\n\nconst initialState = []\n\nexport const ADD_NOTIFICATION = 'ADD_NOTIFICATION'\nexport const REMOVE_NOTIFICATION = 'REMOVE_NOTIFICATION'\n\n\nexport const notificationReducer = (state ,action) => {\n  console.log('this is initialized')\n  console.log(action.type)\n  switch (action.type){\n  case ADD_NOTIFICATION:\n    return [\n      ...state, {\n        id: state.length +1,\n        content : action.payload.content,\n        type: action.payload.type\n      }\n    ]\n  case REMOVE_NOTIFICATION:\n\n    return state.filter (n => n.id !== action.payload.id)\n\n  default:\n    return state\n  }\n}\n\nexport const NotificationProvider = props => {\n  const notifications = useReducer (notificationReducer, initialState)\n  return (\n    <NotificationContext.Provider value = {notifications}>\n      <Notifications/>\n      {props.children}\n    </NotificationContext.Provider>\n  )\n}","import React, { useState,useEffect, useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Button, Form, Radio, Grid, Header, Image, Segment, Divider } from 'semantic-ui-react'\nimport { ALL_STATION } from '../queries/stationQuery'\nimport { LOGIN_TO_STATION } from '../mutations/stationMutation'\nimport { NotificationContext } from '../contexts/NotificationContext'\n\n\nconst StationLoginPage = () => {\n  const[,dispatch] = useContext(NotificationContext)\n  const history = useHistory()\n  const [radioButton, setRadioButton] = useState({})\n  const [stationKey,setStationKey]= useState('')\n  const [remember, setRemember] = useState(false)\n  const { loading, error, data } =  useQuery(ALL_STATION,{ notifyOnNetworkStatusChange: true })\n\n  /**\n   * loginStation mutation hook\n   */\n  const [loginStation,loginToStationResult] = useMutation(LOGIN_TO_STATION,{\n    onError: (error) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, Cannot Login'}<br/> {error.message}</> ,type: 'ERROR' } })\n\n    }\n  })\n\n  /**\n   * side effect when the loginStation mutation is executed and loginToStationResult is set\n   */\n  useEffect(() => {\n    if ( loginToStationResult.data ) {\n      const station = loginToStationResult.data.loginToStation\n      setStationKey(station)\n      sessionStorage.setItem('stationKey',JSON.stringify(station))\n      //If remember button is checked store key in local storage\n      if(remember){\n        localStorage.setItem('stationKey',JSON.stringify(station))\n      }\n      history.push(`/shiftReport/station/${radioButton.value}`)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loginToStationResult.data])\n\n  /**\n   * function for station loginStation action\n   * @param {event} event submit button event\n   */\n  const loginToStation = async (event) => {\n    event.preventDefault()\n    loginStation({ variables:{ id:radioButton.value, password: stationKey } })\n\n  }\n\n  /**\n   * If stationKey is found on localStorage/sessionStorage skip the loginStation and browse shift report\n   */\n  let storedStationKey = JSON.parse(sessionStorage.getItem('stationKey'))\n  if(!storedStationKey){\n    const key = localStorage.getItem('stationKey')\n    storedStationKey = JSON.parse(key)\n    /**\n     * store the key to session storage*\n     */\n    sessionStorage.setItem('stationKey',JSON.stringify(key))\n  }\n  if(storedStationKey){\n    history.push(`/shiftReport/station/${storedStationKey.id}`)\n  }\n\n  /**\n   * remeber checkbox toggle action\n   */\n  const toggleRemember = () => {\n    if (remember) {\n      setRemember(false)\n    }else {\n      setRemember(true)\n    }\n  }\n\n  /**\n   * Renders station password input filed\n   * @param {radioButton DOM} radioButton\n   * @returns {Component} password input field\n   */\n\n  const renderPasswordInput = (radioButton) => {\n    return (\n      <>\n        <Form.Input\n          name= 'stationKey'\n          value={stationKey}\n          onChange= {({ target }) => setStationKey(target.value)}\n\n          label= {`Enter password for ${radioButton.label}`}\n          fluid\n          icon='lock'\n          iconPosition='left'\n          placeholder='Password'\n          type='password'\n\n\n        />\n        <Form.Checkbox name=\"rememberKey\" label='Remember on this computer' checked={remember} onClick = {toggleRemember}/>\n        <Button fluid size='large' color=\"blue\">Retrieve Shift Report</ Button>\n      </>)\n\n  }\n  /**\n   * Radiobutton change action\n   * @param {event} event\n   * @param {DOM {value, label}} value,label\n   *\n   */\n  const radioButtonChange = (event,{ value,label }) => {\n    setRadioButton({ value,label })\n  }\n\n  /**If Login mutation error\n  if (error) return `Error! ${error}` */\n\n\n  return (\n\n    <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as='h2' color='blue' textAlign='center'>\n          <Image src='/LogoMin.png' /> Please select a station\n        </Header>\n        <Form size='large' style={{ textAlign:'left' } } onSubmit={loginToStation}>\n          <Segment clearing stacked>\n            {  loading &&\n             <Segment loading basic>\n             </Segment>\n            }\n\n            {!loading && data.allStations && data.allStations.map(station =>  <Form.Field style={{ float: 'left', clear:'none',  marginRight:'10px' }} key={station.id}>\n              <Radio  label={station.location} value={station.id} checked={ radioButton.value === station.id} onChange={(event,value) => radioButtonChange(event,value)}>\n              </Radio>\n            </Form.Field>)}\n\n            <div style={{ clear:'both' }}></div>\n\n            {radioButton.value && renderPasswordInput(radioButton)\n            }\n\n\n          </Segment>\n        </Form>\n        <Divider horizontal>Or</Divider>\n        <Segment clearing stacked>\n          <Button content='Log in to personal page' icon='user'  size='large' color=\"teal\" fluid onClick = {() => history.push('/staffLogin')} />\n        </Segment>\n\n      </Grid.Column>\n\n    </Grid>\n\n\n  )\n\n\n}\n\nexport default StationLoginPage","import { gql } from '@apollo/client'\n\nexport const GET_SHIFT_REPORT = gql `\nquery fetchReport($id:String, $station: String, $flag: String){\n    getShiftReport(id: $id, station: $station, flag: $flag) {\n      endTime\n      id\n      shift\n      staffAndTime {\n        id\n        staff {\n          name\n        }\n        endTime\n        startTime\n      }\n      startTime\n      station {\n        location\n        id\n      }\n      tasks {\n        id\n        aircraft {\n          registration\n          id\n          costumer {\n            name\n          }\n        }\n        taskCategory\n        description\n        status\n        updates {\n          action\n          handoverId {\n            id\n            shift\n          }\n          note\n        }\n        \n      }\n    } \n}\n\n`\n\nexport const GET_REPORTLIST = gql ` \n  query fetchReportList ( $stationId: String,  ){\n    getReportList (stationId: $stationId){\n      startTime,\n      endTime,\n      id,\n      shift\n      station{\n        location\n      }\n    }\n  }\n\n\n`\n\nexport const GET_SHIFTREPORT_ID = gql `\n  query fetchReportbyShift($station: String!, $shift: String!, $date: Date!){\n    getShiftReportByShift(station: $station, shift: $shift, date: $date) {\n      startTime,\n      endTime,\n      id,\n      shift,\n      station{\n        location\n      }\n    }\n  }\n`\n/** */","import React, { useState } from 'react'\nimport { Button, Confirm, Menu } from 'semantic-ui-react'\nimport { useHistory } from 'react-router-dom'\n\n\nconst MenuBar = ({ activeItem, setActiveItem }) => {\n  const history = useHistory()\n  const [confirmOpen,setConfirmOpen] = useState(false)\n\n  const [navigatingTo, setNavigatingTo] = useState('')\n\n  const CurrentDataLossWarning = () => {\n    return (\n      <Confirm\n        open = {confirmOpen}\n        cancelButton = 'I understand that all reporting will be lost, Continue'\n        confirmButton ='Cancel and Continue Reporting'\n        header='Are You sure?'\n        content= 'You are navigationg away from from the reporting page, doing so will result in losing all the inputs on the report page. Do you want to continue?'\n        onCancel = {() => {\n          setActiveItem(navigatingTo)\n          setConfirmOpen(false)\n        }}\n\n        onConfirm= {() => {\n          setConfirmOpen(false)\n        }}\n      >\n      </Confirm>\n\n    )\n\n  }\n  const handleMenuClick = (e, { name }) => {\n\n    if(activeItem === 'startNewReport'){\n      setNavigatingTo(name)\n      setConfirmOpen(true)\n      return\n    }\n\n    setActiveItem( name )\n    //history.push(activeItem)\n  }\n\n  const switchStation = () => {\n    localStorage.removeItem('stationKey')\n    sessionStorage.removeItem('stationKey')\n    history.push('/')\n  }\n\n  return (\n    <>\n      <Menu inverted color=\"blue\" stackable >\n        <Menu.Item header>  Shift Reporting System </Menu.Item>\n        <Menu.Item name= \"lastShiftReport\"\n          active = {activeItem === 'lastShiftReport'}\n          onClick = {handleMenuClick}>\n        </Menu.Item>\n\n        <Menu.Item name= \"browseAllReports\"\n          active = {activeItem === 'browseAllReports'}\n          onClick = {handleMenuClick}>\n        </Menu.Item>\n\n        <Menu.Item name= \"startNewReport\"\n          active = {activeItem === 'startNewReport'}\n          onClick = {handleMenuClick}>\n        </Menu.Item>\n\n        <Menu.Item name= \"stationInfo\"\n          active = {activeItem === 'stationInfo'}\n          onClick = {handleMenuClick}>\n        </Menu.Item>\n\n        { /* Will be implemented on future\n       <Menu.Item name= \"allOpenTasks\"\n          active = {activeItem === 'allOpenTasks'}\n          onClick = {handleMenuClick}>\n  </Menu.Item>*/}\n\n        <Menu.Menu position='right'>\n          <Button primary\n            name='Switch Station '\n            active={activeItem === 'logout'}\n            onClick={switchStation}\n          >Switch Station</Button>\n        </Menu.Menu>\n      </Menu>\n      <CurrentDataLossWarning/>\n    </>\n\n\n\n\n  )\n\n\n}\n\nexport default MenuBar","import React from 'react'\nimport { Segment,Label,Icon } from 'semantic-ui-react'\nimport _ from 'lodash'\n\nconst TaskInfo = ({ task , handoverId }) => {\n  const updateOnthisHandover = _.find(task.updates, ['handoverId',{ 'id':handoverId }] )\n  return (\n    <Segment >\n      {\n        !updateOnthisHandover.action.includes('TASK_CREATED') &&\n        <Label  size='mini' basic>Tasks from previous shifts</Label>\n      }\n      {/*\n        updateOnthisHandover.action.includes('TASK_CREATED') &&\n        <Label circular size='mini' color = 'teal' basic>New</Label>*/\n      }\n\n      {\n        (updateOnthisHandover.action ==='DEFERRED' ||  updateOnthisHandover.action ==='TASK_CREATED_DEFERRED')&&\n        <><Label size='mini' color='red' basic> Deferred </Label>\n          <Label color='red'size='mini' basic> Action Required </Label>\n        </>\n      }\n      {\n        /**If task is  not created on last report this task is older open task that was completed on last shift */\n        updateOnthisHandover.action ==='CLOSED' &&\n       <Label color='green' size='mini' basic> Completed </Label>\n      }\n      {\n        /**If open task and some action was performed on the last shift */\n        task.status ==='OPEN' && updateOnthisHandover &&\n        <>{\n          !updateOnthisHandover.action.includes('TASK_CREATED') &&\n          <Label size='mini' basic> {updateOnthisHandover.action} </Label>\n        }\n        <Label color='purple'size='mini' basic> Open </Label></>\n      }\n\n      { /** If task is not new then show toggle update history button */\n        !updateOnthisHandover.action.includes('TASK_CREATED') && task.updates.length > 1 &&\n      <Label as=\"a\" size='mini' onClick = {() => {\n        /**TO BE IMPLEMENTED  */\n      }}> <Icon name =\"history\"/> Action History   </Label>\n      }\n\n      <Segment style= {{ 'paddingTop': 0,'paddingLeft': 0 }}basic compact>{task.description}   </Segment>\n    </Segment>)\n}\n\nexport default TaskInfo","import React from 'react'\nimport { Segment, Header, SegmentGroup } from 'semantic-ui-react'\nimport TaskInfo from './TaskInfo'\nimport  _ from  'lodash'\n\nconst GenericTaskPanel = ({ genericTasks,handoverId }) => {\n  if(genericTasks.legth === 0){\n    return null\n  }\n  return (\n    <>\n      <Segment stacked>\n\n        <Header color = \"blue\" as=\"h4\" block> {genericTasks[0].taskCategory} </Header>\n\n        <SegmentGroup >\n          { _.map(genericTasks,task =>\n            <TaskInfo key={task.id} task ={task} handoverId = {handoverId}/>\n          )}\n\n        </SegmentGroup>\n      </Segment>\n\n\n    </>\n\n  )\n}\n\nexport default  GenericTaskPanel","import React from 'react'\nimport { Segment, Header, SegmentGroup ,Icon } from 'semantic-ui-react'\nimport TaskInfo from './TaskInfo'\nimport  _ from  'lodash'\n\nconst AircraftTaskPanel = ({ aircraftTasks ,handoverId }) => {\n  if(aircraftTasks.legth === 0){\n    return null\n  }\n  return (\n\n    <Segment stacked>\n      {_.map(aircraftTasks,(aircrafts,key_costumerName) =>\n        <SegmentGroup   key ={key_costumerName}>\n\n          <Header color = \"blue\" as=\"h4\" block  > <Icon name = 'plane'/> Work Performed for {key_costumerName}</Header>\n\n\n          { _.map(aircrafts,((tasks,key_aircraft) =>\n            <SegmentGroup key={key_aircraft}>\n              <Segment  >\n                {key_aircraft}\n              </Segment>\n              {_.map(tasks,task =>\n                <TaskInfo key={task.id} task ={task} handoverId={handoverId}/>\n              )}\n\n            </SegmentGroup>))\n          }\n\n        </SegmentGroup>\n\n\n\n      )\n      }</Segment>\n  )\n}\n\nexport default AircraftTaskPanel","import React from 'react'\nimport { Segment, Table } from 'semantic-ui-react'\n\nconst StaffWorkTime = ({ timesheets }) => {\n  return(\n    <Segment>\n      <Table celled >\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Staff</Table.HeaderCell>\n            <Table.HeaderCell>Start Time</Table.HeaderCell>\n            <Table.HeaderCell>End TIme</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {timesheets.map(timesheet =>\n            <Table.Row key={timesheet.id}>\n              <Table.Cell>{timesheet.staff.name}</Table.Cell>\n              <Table.Cell>{timesheet.startTime.substring(10)}</Table.Cell>\n              <Table.Cell>{timesheet.endTime.substring(10)}</Table.Cell>\n            </Table.Row>\n          )}\n        </Table.Body>\n\n      </Table>\n\n    </Segment>\n\n  )\n\n}\n\nexport default StaffWorkTime","import React from 'react'\nimport GenericTaskPanel from './GenericTasksPanel'\nimport AircraftTaskPanel from './AircraftTasksPanel'\nimport { SegmentGroup, Segment, Header } from 'semantic-ui-react'\nimport _ from 'lodash'\nimport StaffWorkTime from './StaffWorkTime'\n\n\nconst ShiftReport = ({ reportData }) => {\n\n  if(!reportData){\n    return<Segment>No reports found</Segment>\n  }\n  const tasksByCat = _.groupBy(reportData.tasks, task => task.taskCategory)\n  const tasks = _.mapValues(\n    tasksByCat,(cat,k) =>\n      k === 'AIRCRAFT'?\n        _.chain(tasksByCat.AIRCRAFT)\n          .groupBy(taskcat  =>  taskcat.aircraft.costumer.name)\n          .mapValues( costumer => {\n            return(_.groupBy(costumer, task => task.aircraft.registration))\n          })\n          .value()\n        :cat\n  )\n\n\n  return (\n    <SegmentGroup>\n      <Segment basic clearing>\n        <Header floated =\"left\"> Shift Report from {reportData.shift} shift <span><h5>({reportData.startTime.substring(10)} - {reportData.endTime.substring(10)})</h5></span></Header>\n        <Header floated =\"right\" as=\"h5\">  {reportData.startTime.substring(10,0)}<span><br/>{reportData.station.location}</span> </Header>\n      </Segment>\n\n      <StaffWorkTime timesheets = {reportData.staffAndTime} />\n\n      {_.map(tasks, (tasksByType,key_taskType) => {\n        if(key_taskType === 'AIRCRAFT') return (\n          <AircraftTaskPanel key={key_taskType} aircraftTasks={ tasksByType} handoverId= {reportData.id}/>\n\n        )\n\n        return (\n          <GenericTaskPanel key = {key_taskType} genericTasks= {tasksByType} handoverId= {reportData.id}/>\n        )\n      }\n      )}\n\n\n    </SegmentGroup>\n  )\n}\n\nexport default ShiftReport","import { createContext } from 'react'\n\nconst Context = createContext( {\n  lastShiftReport: [],\n  station: []\n})\n\nexport default Context","const reducer = (state,action) => {\n  switch(action.type) {\n  case 'ADD_LASTSHIFTREPORT':\n    return {\n      ...state, lastShiftReport: action.payload\n    }\n  case 'INIT_STATION':\n    return {\n      ...state, station: action.payload\n    }\n  default:\n    return state\n  }\n}\n\nexport default reducer","import React from 'react'\r\nimport { useField, useFormikContext } from 'formik'\r\nimport { DateTimeInput, TimeInput } from 'semantic-ui-calendar-react'\r\nimport { Form, Label, Segment, Checkbox, Input } from 'semantic-ui-react'\r\n\r\n\r\nexport const DateInputField = ({ label,...props }) => {\r\n  const { setFieldValue,setFieldTouched } = useFormikContext()\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <Form.Field width = '4' >\r\n      {label &&\r\n      <label>{label}</label>}\r\n\r\n      <DateTimeInput  error = {meta.touched && meta.error?true:false} popupPosition='right center'  {...field} {...props} dateTimeFormat= 'DD-MM-YYYY HH:mm' closable onBlur= {() => {\r\n        setFieldTouched(field.name,true)\r\n      }} onChange={(event,{ value }) => {\r\n        setFieldValue(field.name, value)\r\n      }}\r\n      preserveViewMode={false}/>\r\n\r\n      {meta.touched && meta.error ?\r\n        <Label pointing prompt>\r\n          {meta.error}\r\n        </Label>:''}\r\n    </Form.Field>\r\n  )\r\n\r\n}\r\n\r\nexport const TimeInputField = ({ label,...props }) => {\r\n  const { setFieldValue,setFieldTouched } = useFormikContext()\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <Form.Field width = '4' >\r\n      {label &&\r\n      <label>{label}</label>}\r\n\r\n      <TimeInput error = {meta.touched && meta.error?true:false} popupPosition='right center' {...field} {...props} closable onBlur= {() => {\r\n        setFieldTouched(field.name,true)\r\n      }} onChange={(event,{ value }) => {\r\n        setFieldValue(field.name, value)\r\n      }}\r\n      />\r\n\r\n      {meta.touched && meta.error ?\r\n        <Label pointing prompt>\r\n          {meta.error}\r\n        </Label>:''}\r\n    </Form.Field>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport const InputField = ({ width,...props }) => {\r\n  const [field,meta] = useField(props)\r\n  return (\r\n    <>\r\n      <Form.Field error= { meta.touched && meta.error ? true: false} width={width} >\r\n        <label>{props.inputlabel?props.inputlabel:'' }</label>\r\n        <Input   {...field} {...props} />\r\n        { props.type !== 'hidden' && meta.touched && meta.error &&\r\n        <Label pointing prompt>\r\n          {meta.error}\r\n        </Label>\r\n        }\r\n\r\n      </Form.Field>\r\n\r\n    </>\r\n  )\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport const AircraftCheckBox = ({ label,children,checked,...props }) => {\r\n  return(\r\n    <Segment\r\n      style= {{ display:checked?'block':'inline-block'  }}>\r\n      <Checkbox checked={checked} {...props} toggle/>\r\n      <label style={{ display: 'inline-block' , marginLeft: '5px', verticalAlign: 'super' }}> {label.toUpperCase()} </label>\r\n      {children}\r\n    </Segment>\r\n  )}\r\n\r\nexport const TextAreaField = ({ label,...props }) => {\r\n  const [field,meta] = useField(props)\r\n  return (\r\n    <Form.TextArea  error = { meta.touched && meta.error} {...field} {...props}/>\r\n  )}\r\n","import { isNumber } from 'lodash'\n\n/**\n *\n * @param {int OR String } dateToFormat  supported string formats :YYYY-MM-DDTHH:MM:SS.Z\n * @returns Date format DD-MM-YYYY HH:MM\n */\nexport const formatDate = (dateToFormat) => {\n  if(!dateToFormat){\n    return null\n  }\n  if(isNaN(dateToFormat)){\n    const regexFormats = [\n      /^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z)?$/,\n    ]\n    const dateFormat = regexFormats.findIndex((regex) => {\n      if (dateToFormat.match(regex)){\n        return true\n      }\n      return false\n    })\n\n    switch (dateFormat)\n    {\n    case 0:\n    { const splitT = dateToFormat.split('T')\n      const date= splitT[0]\n      const time= splitT[1]\n\n      const dateSplit = date.split('-')\n      const timeSplit = time.split('.')[0].split(':')\n\n      return dateSplit[2]+'-'+dateSplit[1]+'-'+dateSplit[0]+ ' '+ timeSplit[0] +':'+ timeSplit[1]\n    }\n\n    default:\n      return null\n    }\n  }\n\n  const date = new Date(dateToFormat)\n  return (`${(date.getDate()).toString().padStart(2,0)}-${(date.getMonth()+1).toString().padStart(2,0)}-${date.getFullYear()} ${(date.getHours()).toString().padStart(2,0)}:${(date.getMinutes()).toString().padStart(2,0)}`)\n\n}\n\n/**\n *\n * @param {int or date format} date javascript date int or DD-MM-YYYY\n * @param {Double} duration duration to operate\n * @param {String} unit 'd for days, h for hours , m for minutes'\n * @param {String} operation 'add or sub'\n * @returns {string} Date format DD-MM-YYYY HH:MM\n */\nexport const operateDate = (date, duration, unit , operation) => {\n  if(!date){\n    return null\n  }\n  let ndate\n  if(!isNumber(date)){\n    const splitDateTime = date.split(' ')\n    const splitDate = splitDateTime[0].split('-')\n    const newDate =`${splitDate[2]}-${splitDate[1]}-${splitDate[0]} ${splitDateTime[1]}`\n\n    ndate = Date.parse(newDate)\n\n  }\n  else{\n    ndate = new Date(date)\n  }\n\n  switch (unit){\n  case 'd':\n    if(operation === 'add') return  formatDate((ndate + (duration * 24 * 60 * 60 * 1000)))\n    if(operation === 'sub') return  formatDate((ndate - (duration * 24 * 60 * 60 * 1000)))\n    break\n  case 'h':\n    if(operation === 'add') return formatDate((ndate + (duration * 60 * 60 * 1000)))\n    if(operation === 'sub') return  formatDate((ndate - (duration * 60 * 60 * 1000)))\n    break\n  case 'm':\n    if(operation === 'add') return formatDate((ndate + (duration * 60 * 1000)))\n    if(operation === 'sub') return  formatDate(ndate - (duration * 60 * 1000))\n    break\n  default:\n    return formatDate(ndate)\n  }\n}\n\n/**\n *\n * @param {String} stringDate format DD-MM-YYYY HH:MM\n * @returns {Int} Javascript date int\n */\nexport const toDate = (stringDate) => {\n  let ndate\n  if(!isNumber(stringDate)){\n    const splitDateTime = stringDate.split(' ')\n    const splitDate = splitDateTime[0].split('-')\n    const newDate =`${splitDate[2]}-${splitDate[1]}-${splitDate[0]} ${splitDateTime[1] || '00' }:${splitDateTime[2] | '00'}`\n\n    ndate = Date.parse(newDate)\n  }\n  else{\n    ndate = new Date(stringDate)\n  }\n\n  return ndate\n\n}\n\nexport const getWeekNumber= (dt) => {\n  var tdt = new Date(dt.valueOf())\n  var dayn = (dt.getDay() + 6) % 7\n  tdt.setDate(tdt.getDate() - dayn + 3)\n  var firstThursday = tdt.valueOf()\n  tdt.setMonth(0, 1)\n  if (tdt.getDay() !== 4)\n  {\n    tdt.setMonth(0, 1 + ((4 - tdt.getDay()) + 7) % 7)\n  }\n  return 1 + Math.ceil((firstThursday - tdt) / 604800000)\n}\n\n/**\n* Returns the week start date(Monday) for given year and weeknumber\n* @param {Int} w between 1-52/53\n* @param {Int} y year\n* @returns {Date}\n*/\nexport const getDatefromWeek = (w,y) => {\n  const simpleStartDate = new Date(Date.UTC(y,0,1 + (w-1) *7))\n  const dayOfWeek = simpleStartDate.getDay()\n\n  let IsoWeekStart = simpleStartDate\n  if(dayOfWeek <=4) {\n    IsoWeekStart.setDate(simpleStartDate.getDate() - simpleStartDate.getDay()+1)\n  }else {\n    IsoWeekStart.setDate(simpleStartDate.getDate()+8 - simpleStartDate.getDay())\n  }\n  return IsoWeekStart\n}\n\nexport const getMonthInt= (name) => {\n  const months = ['january','february','march','april','may','june','july','august','september','october','november','december']\n  const ind = months.findIndex((month) => {\n    return month === name.toLowerCase()\n  })\n  return ind\n}\n\n/**\n  * Positive prop gets month from  beginning of year\n  * Negative index gets month from end  of year\n  * @param  {Int} monthInt Month Number\n  */\nexport const getMonthName = (monthInt) => {\n  const months = new Proxy(['January','February','March','April','May','June','July','August','September','October','November','December'], {\n    get(target, prop) {\n      if (!isNaN(prop)) {\n        prop = parseInt(prop, 10)\n        if (prop < 0) {\n          prop += target.length\n        }\n      }\n      return target[prop]\n    }\n  })\n  return months[monthInt]\n}\n\n/**\n * Retrive months form given month duration including current month\n *\n *  */\nexport const getMonthOptions = (duration) => {\n  /**Default Duration is 4 months */\n  if(!duration ){\n    duration = 4\n  }\n\n  const today = new Date()\n  const currentMonth = today.getMonth()\n\n  const options = [...new Array(duration)].map((v,i) => {\n    return (\n      { key:i ,\n        text: getMonthName(currentMonth - i), value: currentMonth -1 < 0 ? 11 + currentMonth -i  : currentMonth -i }\n    ) })\n  return options\n}\n\n/**Retrieve all weeks that falls within given month duration including current month*/\nexport const getWeekOptions = (duration) => {\n  /**Default Duration is 4 months */\n  if(!duration ){\n    duration = 4\n  }\n  const today = new Date()\n  const currentMonth = today.getMonth()\n  let dYear = today.getFullYear()\n  const lastYearWeekNum = getWeekNumber( new Date(dYear-1,11,28))\n  const lastRetriveable  = getWeekNumber(new Date(dYear, currentMonth - duration ,1))\n  let currentWeek = getWeekNumber(today)\n  let options = []\n\n  let week = currentWeek\n  while ( week !== lastRetriveable-1  ){\n    const option = { key: week, text: week, value: week }\n    options.push (option )\n    week = week -1\n    if(week === 0) {\n      week = lastYearWeekNum\n    }\n  }\n  return options\n\n}\n\n","import { formatDate, toDate } from '../../../utils/DateHelper'\r\nimport _ from 'lodash'\r\n\r\n\r\nexport const validateStaffsField= (value) => {\r\n  let error\r\n  /**\r\n   * If np staff is set\r\n   */\r\n  if(!value ||  !value.length ){\r\n    error = 'Report must have staff information, please add staff'\r\n    return error\r\n  }\r\n  /**\r\n   * If at least one staff is set\r\n   */\r\n  if (value && value.length){\r\n    error = _.mapValues(value, staff => {\r\n      let errList = validateStaffInputField(staff)\r\n      /**\r\n       * If the staff input fields have error other than signOffKey\r\n       */\r\n      if(!_.isEmpty(errList)){\r\n        errList = { ...errList,  'signOffKey':'Please fix staff inputs' }\r\n        return errList\r\n      }\r\n\r\n      /**\r\n       * If staff is not signed off\r\n       */\r\n      if (!staff.signOffKey ){\r\n        errList = { ...errList,  'signOffKey':'Each staff must sign off' }\r\n      }\r\n\r\n\r\n      return errList\r\n\r\n    }) }\r\n\r\n  /**\r\n     * Removing the empty key value pairs from error\r\n     */\r\n  _.mapKeys(error,(v,k) => {\r\n    if(_.isEmpty(v)) {\r\n      delete error[k]\r\n    }\r\n  })\r\n\r\n  return error\r\n\r\n\r\n}\r\n\r\nexport const validateStaffInputField = (staff) => {\r\n\r\n  let error\r\n  if(!staff) {\r\n    return undefined\r\n  }\r\n  /**\r\n   * If staff name is not set\r\n   */\r\n  if(!staff.name ){\r\n    error = { ...error, 'name':'Staff name is required' }\r\n  }\r\n  /**\r\n   * Validating starttime and endtime\r\n   * */\r\n  error = { ...error,...validateStartEndTime(staff.startTime,staff.endTime) }\r\n\r\n  return error\r\n}\r\n\r\n\r\nexport const validateStartEndTime = (startTime,endTime,startDate)  => {\r\n\r\n  let error\r\n  /**\r\n   * If start time is not set\r\n   */\r\n  if(!startTime){\r\n    error = { ...error, 'startTime':'Start time is required' }\r\n  }\r\n  /**\r\n   * If end time is not set\r\n   */\r\n  if(!endTime){\r\n    error = { ...error,  'endTime':'End time is required' }\r\n  }\r\n\r\n  /**\r\n   * Id starttime is not correct format DD-MM-YYY HH:MM\r\n   */\r\n  if(!startTime.match(/^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-\\d\\d\\d\\d (0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$/)){\r\n    error = { ...error,  'startTime':'Start time should be on format DD-MM-YYYY HH:MM' }\r\n  }\r\n\r\n  /**\r\n   * Id starttime is not correct format DD-MM-YYY HH:MM\r\n   */\r\n  if(!endTime.match(/^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-\\d\\d\\d\\d (0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$/)){\r\n    error = { ...error,  'endTime':'End time should be on format DD-MM-YYYY HH:MM' }\r\n  }\r\n\r\n  /**\r\n   * If starttime is earlier than 24H\r\n   */\r\n  if( !startDate && toDate(startTime) + (24 *3600 * 1000) <= Date.now()){\r\n    error = { ...error,  'startTime':'Start time should be within last 24 hours' }\r\n  }\r\n\r\n  if(startDate && new Date(startDate).getDate() !== new Date(toDate(startTime)).getDate()){\r\n    error = { ...error,  'startTime':`Start time should be on ${formatDate(new Date(startDate)).split(' ')[0]}` }\r\n  }\r\n\r\n\r\n  /**\r\n   * If starttime isgreater than end time\r\n   */\r\n  if( toDate(startTime) >= toDate(endTime)){\r\n    error = { ...error,  'startTime':'Start time cannot be later than endtime' }\r\n  }\r\n\r\n  /**\r\n   * If starttime is set to end time\r\n   */\r\n\r\n  if( toDate(startTime) > Date.now()){\r\n    error = { ...error,  'startTime':'Start time cannot be on future' }\r\n  }\r\n  /**\r\n   * If endtime is set in future\r\n   */\r\n\r\n  if( toDate(endTime) > Date.now()){\r\n    error = { ...error,  'endTime':'End time cannot be on future' }\r\n  }\r\n\r\n  return error\r\n\r\n}\r\n\r\nexport const validateTasks = (tasks) => {\r\n  if(!tasks) return null\r\n  const error = _.mapValues(tasks,typedTasks => {\r\n    const taskErrors = _.mapValues( typedTasks,task => {\r\n      /**\r\n       * Validating individual tasks\r\n       */\r\n      const taskError = validateTaskField(task)\r\n      return taskError\r\n    })\r\n\r\n    /**\r\n     * Removing empty nested objects\r\n     */\r\n    return(_.pickBy(taskErrors,_.identity))\r\n\r\n\r\n\r\n  })\r\n\r\n\r\n  /**\r\n   * Removing empty key value pair\r\n   */\r\n  _.mapKeys(error,(v,k) => {\r\n    if(_.isEmpty(v)) {\r\n      delete error[k]\r\n    }\r\n    //console.log(k)\r\n  })\r\n\r\n  return error\r\n}\r\n\r\n\r\n\r\n\r\nconst validateTaskField = (task) => {\r\n  let error = null\r\n  /**\r\n   * If task status is open\r\n   */\r\n  if(task.status === 'DEFERRED') {\r\n    /**\r\n     * If there is no action on DEFERRED task\r\n     */\r\n    if(!task.action || task.action === 'NOTES_ADDED'){\r\n      console.log(task)\r\n      error = { ...error, action:'Action was requested on this task. Please perform a action. ' }\r\n    }\r\n  }\r\n\r\n  if(!task.status && !task.action){\r\n    error = { ...error, action: 'Task must have one of the following status' }\r\n  }\r\n\r\n  /**\r\n   * If task description is empty or spaces\r\n   */\r\n  if((!task.description || task.description.trim() === '')){\r\n    error= { ...error,description:'Please add task description' }\r\n  }\r\n  return error\r\n\r\n\r\n}\r\n\r\nexport const validateEmail = (email) => {\r\n\r\n  if(!email) {\r\n    return 'Email is required'\r\n  }\r\n  if(!email.match(/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/)){\r\n    return 'Incorrect email format'\r\n  }\r\n\r\n}\r\n\r\n\r\nexport const validateName = (name) => {\r\n\r\n  if(!name || name.trim === '') return 'Full name is required'\r\n  if(name.length < 4){\r\n    return 'Name must be at least 4 character long'\r\n  }\r\n\r\n\r\n}","import React from 'react'\r\nimport { Field, getIn } from 'formik'\r\nimport {  Label } from 'semantic-ui-react'\r\n\r\nconst ErrorMessage = ({ name,pointing }) => (\r\n  <Field\r\n    name={name}>\r\n    {({ form }) => {\r\n\r\n      const error = getIn(form.errors, name)\r\n      const touch = getIn(form.touched, name)\r\n      return touch && error && typeof error === 'string' ?\r\n        <Label pointing={pointing} style={{ height:'fit-content' }}color='red'  basic>{error}</Label> : null\r\n    }}\r\n  </Field>\r\n)\r\n\r\nexport default ErrorMessage","import { gql } from '@apollo/client'\nexport const SIGN_OFF_SHIFT = gql`\n  mutation signOff($startTime: String!, $break:Int, $endTime:String!, $username: String, $password:String, $idCardCode: String, $additionalAction: String, $id:String, $email: String, $name: String ){\n    signOffTimeSheet(\n      startTime: $startTime, \n      endTime:$endTime, \n      break: $break,\n      username: $username, \n      password: $password , \n      additionalAction: $additionalAction,\n      email: $email,\n      name: $name,\n      idCardCode: $idCardCode\n      id: $id\n      ) {\n        name,\n        value,\n        break,\n        startTime,\n        endTime,\n        id\n      }\n  }`\nexport const UPDATE_TIMESHEET = gql`\n mutation updateTimeSheet($id: String, $startTime: String , $endTime: String, $station: String, $shift : String, $break: Int, $staff: String, $remarks: [RemarkInput], $handover: String){\n  addToTimeSheet(\n      id: $id\n      startTime: $startTime , \n      endTime: $endTime,\n      station: $station, \n      shift: $shift,  \n      staff: $staff\n      break: $break,\n      remarks:$remarks,\n      handover:$handover,\n  )\n    {\n      id\n      startTime\n      status\n      date\n      endTime\n      break\n      remarks{\n        by\n        date\n        edit\n        text\n        title\n      }\n      staff{\n        id\n        name\n        reqHours\n      }\n      shiftReport {\n        shift\n        id\n        station {\n          id\n          location\n        }\n      }\n\n      shift\n      station{\n        id\n        location\n      }\n\n  } \n  \n\n }\n`\nexport const APPROVE_TIMESHEET = gql`\n mutation approveTimeSheet($id: String!, $status: String!){\n   approveTimeSheet(\n     id: $id,\n     status: $status\n   ){\n     id \n     status \n     remarks{\n      by\n      date\n      edit\n      text\n      title\n    }\n   }\n }\n`\nexport const DELETE_TIMESHEET = gql`\n mutation deleteTimeSheet($id: String!){\n   deleteTimeSheet(\n     id: $id,    \n   ){\n     status\n     message\n   }\n }\n`\nexport const REQUEST_CLARIFICATION = gql`\n mutation requestClarification($id: String!, $clearify: String){\n  requestClarification(\n     id: $id,\n     clearify:$clearify,    \n   ){\n    id\n    remarks{\n      by\n      date\n      edit\n      text\n      title\n    }\n   }\n }\n`","import React, { useState, useEffect } from 'react'\nimport { Modal,Grid,Header,Form ,Divider,Segment ,Icon,Button,Message, FormGroup, FormField, Dimmer,Loader } from 'semantic-ui-react'\nimport { DateInputField, InputField } from './FormFields'\nimport { operateDate, formatDate } from '../../../utils/DateHelper'\nimport { DateTimeInput } from 'semantic-ui-calendar-react'\nimport { useFormikContext, Formik } from 'formik'\nimport { validateEmail, validateName, validateStartEndTime } from './validator'\nimport { SIGN_OFF_SHIFT } from '../../../mutations/timeSheetMutation'\nimport { useMutation } from '@apollo/client'\nimport _ from 'lodash'\n//import { remove } from '../../../../../backend/Src/models/Staff'\n\n\nconst  StaffEditModel = ({ setOpen,open, fieldName, removeClick ,removeStaff ,setRemoveStaff }) => {\n\n  const{ getFieldMeta,setFieldValue } = useFormikContext()\n\n  const [signOff,{ loading, error, data }] = useMutation(SIGN_OFF_SHIFT,{\n    onError: (error) => {\n      console.log(error)\n    }\n  })\n\n  const shiftStartTime = getFieldMeta(`${fieldName}.startTime`).value\n  const shiftEndTime = getFieldMeta(`${fieldName}.endTime`).value\n  const ibreakt = getFieldMeta(`${fieldName}.break`).value\n  const [notifyResult,setNotifyResult] = useState('')\n  const [username,setUsername] = useState('')\n  const [password,setPassword] = useState('')\n  const [startTime,setStartTime] = useState(shiftStartTime)\n  const [endTime,setEndTime] = useState(shiftEndTime)\n  const [breakt,setBreakt] = useState(ibreakt)\n\n  useEffect(() => {\n    setStartTime(shiftStartTime)\n    setEndTime(shiftEndTime)\n  },[shiftEndTime, shiftStartTime])\n\n\n  useEffect (() => {\n    /**If the staff sign off is not sucessfull */\n    if(error){\n      setNotifyResult({ type: 'error', message:`Sorry, ${error.message}` })\n    }\n    /**\n     * If the staff signoff is successFull\n     */\n    if(data && data.signOffTimeSheet != null ){\n\n      if(removeStaff) {\n        removeClick()\n        setRemoveStaff(false)\n        setOpen(false)\n\n      }else {\n        setFieldValue(`${fieldName}.startTime`,data.signOffTimeSheet.startTime)\n        setFieldValue(`${fieldName}.endTime`,data.signOffTimeSheet.endTime)\n        setFieldValue(`${fieldName}.signOffKey`,data.signOffTimeSheet.value)\n        setOpen(false)\n\n      }\n\n\n\n\n\n    }\n\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[error, data])\n\n  const submit = async (values) => {\n    let signOffData\n    signOffData = { startTime:values.startTime ,endTime: values.endTime ,break: values.breakt, username: username, password: password, additionalAction: removeStaff?'remove':'update',id:getFieldMeta(`${fieldName}`).value.id }\n\n    console.log(signOffData)\n    await signOff({ variables:signOffData })\n  }\n\n  const renderAlert = () => {\n    if(!notifyResult) return null\n    return(\n      <Message\n        success = {notifyResult.type === 'success'}\n        error = {notifyResult.type === 'error'}\n        onDismiss = {() => setNotifyResult('')\n        }\n      > {notifyResult.message}\n      </Message>)\n\n\n  }\n\n  if(loading){\n    return<Dimmer active inverted>\n      <Loader active inverted>Verifying</Loader>\n    </Dimmer>\n  }\n\n  return (\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {open}\n      onClose= {() => {\n\n        setNotifyResult(false)\n        setOpen(false)}}\n      onOpen= {() => setOpen (true)}\n    >\n      <Modal.Header>{getFieldMeta(`${fieldName}.name`).value} </Modal.Header>\n      <Modal.Content>\n        {notifyResult &&\n         renderAlert()\n        }\n        <Formik\n          enableReinitialize\n          initialValues = {{\n            startTime: startTime,\n            endTime: endTime,\n            breakt: breakt,\n            username:'',\n            password:'',\n            email:'',\n            fullname:'',\n            resetEmail:''\n          }}\n\n          validate = {values => {\n            let errors = {}\n            errors = { ...errors,...validateStartEndTime(values.startTime,values.endTime)  }\n            return errors\n          } }\n\n          onSubmit = {(values) =>\n          {\n            submit(values)}\n          }\n\n\n        >\n\n\n          {({ values,handleSubmit,errors,touched }) =>\n\n            <Form size='large' onSubmit = { handleSubmit} >\n              <Form.Group >\n\n                < DateInputField\n                  label= 'Start Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name ='startTime'\n                  maxDate = {operateDate(Date.now(),30,'m','sub')}\n                  minDate= {operateDate(Date.now(),20,'h','sub')}\n                  onChange = {(e,{ value }) => {\n                    setStartTime(value)}\n                  }\n                />\n\n\n                < DateInputField\n                  label = 'End Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name='endTime'\n                  maxDate = {formatDate(Date.now())}\n                  minDate= {operateDate(startTime,20,'m','add')}\n                  onChange = {(e,{ value }) => {\n                    setEndTime(value)}\n                  }/>\n\n                <InputField\n                  inputlabel= 'Break'\n                  label = 'Minutes '\n                  labelPosition='right corner'\n                  name= 'breakt'\n                  type='number'\n                  min='0'\n                  onChange = {(e,{ value }) => {\n                    setBreakt(value)}\n                  }>\n                </InputField>\n\n\n\n              </Form.Group>\n\n              <Header as='h3' color='red' textAlign='center'>\n                {removeStaff?'Enter credentials to confirm remove.' : 'Enter credential to save changes'}\n\n              </Header>\n\n\n              <>\n                <Segment >\n\n                  <Grid columns={2} stackable >\n                    <Divider vertical>Or</Divider>\n                    <Grid.Row verticalAlign='middle'>\n                      <Grid.Column>\n                        <Grid.Row style={{ textAlign:'center' }}>\n                          <Header as ='h5' icon>\n                            <Icon name='sign in alternate' />\n                    Use Credentials\n                          </Header>\n                        </Grid.Row>\n                        <Grid.Row>\n                          <Form.Group>\n                            <Form.Input label='Username' onChange= {(e,{ value }) => setUsername(value)}></Form.Input>\n                            <Form.Input label= 'Password' type='password' onChange= {(e,{ value }) => setPassword(value)}></Form.Input>\n                          </Form.Group>\n                          <Form.Field style={{ textAlign:'center' }}>\n                            <Button type='submit' primary > Sign </Button>\n                          </Form.Field>\n                        </Grid.Row>\n                      </Grid.Column>\n\n                      <Grid.Column textAlign='center'>\n                        <Grid.Row >\n                          <Header icon>\n                            <Icon name='barcode' size='massive' />\n                  Use IdCard\n                          </Header>\n                        </Grid.Row>\n                        <Grid.Row><Button primary>Scan</Button></Grid.Row>\n\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n\n                </Segment>\n\n              </>\n            </Form>}\n        </Formik>\n      </Modal.Content>\n\n    </Modal>\n\n\n  )\n}\n\nexport default StaffEditModel","import React, { useState } from 'react'\nimport { Label, Form, Button, Segment } from 'semantic-ui-react'\nimport { InputField, DateInputField } from './FormFields'\nimport { Field } from 'formik'\nimport { formatDate, operateDate } from '../../../utils/DateHelper'\nimport StaffEditModel from './StaffEditModel'\n\nconst StaffForm = ({ staff,fieldName,values,index,remove }) => {\n  const [open, setOpen] = useState(false)\n  const [removeStaff, setRemoveStaff] = useState(false)\n\n  if(!staff) return null\n  return(\n    <Segment >\n      {staff.signOffKey &&\n      <Label attached='top left' size='mini' basic color=\"grey\" >Signed Off </Label> }\n      <Form.Group  >\n        <InputField  width= {4} readOnly = {staff.signOffKey } name={`${fieldName}.name`}></InputField>\n        < DateInputField\n          readOnly = {(staff.signOffKey && !staff.changing) }\n          maxDate = {operateDate(Date.now(),30,'m','sub')}\n          minDate= {operateDate(Date.now(),20,'h','sub')}\n          name = {`${fieldName}.startTime`}/>\n\n        < DateInputField\n          readOnly= {(staff.signOffKey  && !staff.changing) }\n          maxDate = {formatDate(Date.now())}\n          minDate= {operateDate(values.startTime,20,'m','add')}\n          name = {`${fieldName}.endTime`}/>\n\n        <Field type='hidden' value=\"\" name={`${fieldName}.signOffKey`}></Field>\n        <Field type='hidden' value=\"\" name={`${fieldName}.break`}></Field>\n\n        <Button\n          style={{ height:'fit-content' }}\n          type='button'\n          circular\n          icon='cancel'\n          basic\n          onClick = {() => {\n            setRemoveStaff(true)\n            setOpen(true)\n          }}\n        />\n\n\n        <>\n          <Button\n            style={{ height:'fit-content' }}\n            type='button'\n            inverted\n            color='red'\n            size=\"small\"\n            onClick = {() => {\n              setOpen(true)\n            }\n            }> Change</Button>\n        </>\n\n      </Form.Group>\n\n      <StaffEditModel\n        setOpen={setOpen}\n        open={open}\n        startTime ={values.staffs[index].startTime}\n        endTime ={values.staffs[index].endTime}\n        breakt = {values.staffs[index].break}\n        fieldName = {fieldName}\n        removeStaff = {removeStaff}\n        setRemoveStaff= {setRemoveStaff}\n        removeClick = {() => remove(index)}\n      />\n\n    </Segment>\n  )}\n\nexport default StaffForm","import React, { Fragment } from 'react'\nimport { FieldArray } from 'formik'\nimport ErrorMessage from './ErrorMessage'\nimport { Segment, Button,Icon,Header } from 'semantic-ui-react'\nimport StaffForm from './StaffForm'\n\nconst StaffForms = ({ values ,addStaffOpen }) => {\n\n  return (\n    <>\n      <FieldArray name=\"staffs\">\n        {({ remove, push, replace }) => (\n          <Fragment >\n            <Header as=\"h3\">Staffs</Header>\n            <Segment.Group >\n              { values.staffs.length >0 && values.staffs.map((staff,index) =>\n                <StaffForm\n                  key={index}\n                  index ={index}\n                  staff={staff}\n                  fieldName={`staffs.${index}`}\n                  values= {values}\n                  remove= {remove}\n                ></StaffForm>\n              )\n              }\n            </Segment.Group>\n            <Button type='button' icon\n              primary onClick={ () =>\n                addStaffOpen(true)\n                /*push({ name:'',startTime:'',endTime:'' ,signOffKey:'' })*/}>< Icon name=\"plus circle\"/> Add </Button>  <ErrorMessage name='staffs' pointing='left'/>\n          </Fragment>\n        )}\n\n      </FieldArray>\n\n    </>\n\n  )\n}\n\nexport default StaffForms","import React, { useState } from 'react'\nimport { useFormikContext } from 'formik'\nimport { Label, Icon, Divider,Form,Button,Accordion } from 'semantic-ui-react'\nimport ErrorMessage from './ErrorMessage'\nimport { TextAreaField } from './FormFields'\n\n\nexport const TaskForm = ({ label,onRemove,disabled,children,name, ...props }) => {\n  const { setFieldValue,getFieldProps,setFieldTouched, getFieldMeta } = useFormikContext()\n\n  const removeButtonClick = ( e ) => {\n    e.preventDefault()\n    onRemove()\n  }\n\n  const [noteFieldVisibile, setNoteFieldVisibile] = useState(false)\n\n  const taskAction = getFieldProps(`${name}.action`).value\n  const taskStatus = getFieldProps(`${name}.status`).value\n  const taskNotes =  getFieldProps(`${name}.newNote`).value\n\n  const actionButtonClick = (e,value) => {\n    e.preventDefault()\n    setFieldValue(`${name}.action`,value)\n    if(noteFieldVisibile && !taskNotes){\n      toggleNotes()\n    }\n  }\n\n  const actionOpenCheckBoxClick = (e,checked) => {\n    setFieldTouched(`${name}.description`,true)\n    if(!getFieldMeta(`${name}.description`).error){\n\n      if(checked){\n\n        setFieldValue(`${name}.action`,'OPEN')\n\n      }else{\n        setFieldValue(`${name}.action`,'')\n      }\n    }\n    else{\n      setFieldTouched(`${name}.description`)\n    }\n  }\n\n  const actionCloseCheckBoxClick = (e,checked) => {\n    setFieldTouched(`${name}.description`,true)\n    if(!getFieldMeta(`${name}.description`).error){\n      if(checked){\n        setFieldValue(`${name}.action`,'CLOSED')\n      }else{\n        setFieldValue(`${name}.action`,'')\n      }\n    }\n    else{\n      setFieldTouched(`${name}.description`)\n    }\n\n  }\n\n  const actionDeferCheckBoxClick = (e,checked) => {\n    setFieldTouched(`${name}.description`,true)\n    if(!getFieldMeta(`${name}.description`).error){\n      if(checked){\n        setFieldValue(`${name}.action`,'DEFERRED')\n      }else{\n        setFieldValue(`${name}.action`,'OPEN')\n      }\n    }\n    else{\n      setFieldTouched(`${name}.description`)\n    }\n\n\n  }\n\n  const undoButtonClick = () => {\n    setFieldValue(`${name}.action`,'')\n    if(taskNotes) {\n      setNoteFieldVisibile(true)\n    }\n  }\n\n  const toggleNotes = () => {\n    if(noteFieldVisibile){\n      const notes= taskNotes.trim()\n      setNoteFieldVisibile(false)\n      setFieldValue(`${name}.newNote`,notes)\n    }else{\n      setNoteFieldVisibile(true)\n    }\n\n  }\n\n  const TaskStatusBar = () => {\n\n    if( taskAction && taskAction !== 'NOTES_ADDED'){\n      return (\n        <div style={{ padding:'0.3125em 1.5em' }}>\n          <Label  size='mini' basic >Task from previous shifts </Label>\n\n          {taskNotes && taskNotes.trim() && <Label size='mini' basic color=\"blue\" as='a' onClick = {() => toggleNotes() }>Notes Added </Label>}\n          <Label size='mini' basic color=\"green\" >{taskAction} </Label>\n\n          <Label as=\"a\" size='mini' basic color='yellow'\n            onClick = {(e) => undoButtonClick(e)}> <Icon name='undo'/> Undo Action </Label>\n\n        </div>)\n    }\n\n    return (\n      <div style={{ padding:'0.3125em 1.5em' }}>\n        <Label  size='mini' basic >Task from previous shifts </Label>\n\n        {taskNotes && taskNotes.trim() && <Label size='mini' basic color=\"blue\" >Notes Added </Label>}\n        <Label  size='mini' basic color=\"purple\" >Open </Label>\n\n        {disabled && taskStatus === 'DEFERRED' &&\n        <Label size='mini' basic color=\"red\" >Action Required </Label>}\n      </div>)\n\n\n  }\n\n\n\n\n  const rootPanels = [\n    { key: 'panel-1', title: 'Updates', content: 'These are updates' },\n  ]\n\n\n  return(\n    <>\n      <Divider></Divider>\n      {disabled &&\n       <TaskStatusBar></TaskStatusBar>\n      }\n\n      <Form.Group style={{ marginBottom:'0px' }}>\n\n        <label style={{ display: 'inline-block', padding: '0.9375em 0px 0px 0.3125em', width:'1.5625em' }}>{label+1}</label>\n\n        <TextAreaField  name= {`${name}.description`} readOnly={disabled} rows ='1' width='16'></TextAreaField>\n\n\n\n        <Button\n          type='button'\n          circular\n          icon='cancel'\n          style= {{ visibility: disabled?'hidden':'',height:'fit-content' }}\n          basic\n          onClick = {(e) => removeButtonClick(e)}/>\n\n\n\n      </Form.Group>\n\n      {!disabled &&\n      <div style={{ padding:'0.5em 1.5em' }}>\n        <ErrorMessage name = {`${name}.action`} pointing='below' ></ErrorMessage>\n        <Form.Group>\n          <Form.Checkbox\n            checked ={ taskAction === 'CLOSED' }\n            label=\"closed\" onChange = {(e,{ checked }) => actionCloseCheckBoxClick(e,checked)}/>\n          <Form.Checkbox\n            checked ={ taskAction === 'DEFERRED'  || taskAction === 'OPEN'}\n            label=\"Is Open Task\" onChange = {(e,{ checked }) => actionOpenCheckBoxClick(e,checked)}/>\n          <Form.Checkbox\n            label=\"Action Required\"\n            checked= {taskAction === 'DEFERRED' }\n            onChange = {(e,{ checked }) => actionDeferCheckBoxClick (e,checked) }/>\n        </Form.Group>\n\n      </div> }\n\n      {disabled &&  taskAction !== 'CLOSED' && taskAction !== 'DEFERRED' &&\n\n\n      <div style={{ margin:'0px 3.125em 0.625em 1.5em' }}>\n        <Accordion  panels={rootPanels} />\n        <ErrorMessage name = {`${name}.action`} pointing='below' ></ErrorMessage>\n        <div>\n          <Button size='mini'\n            type='button'\n            onClick = {(e) => toggleNotes(e)}> {noteFieldVisibile?'Hide Notes' : taskNotes?'Show Notes':'Add Notes'}</Button>\n          <Button.Group size='mini'>\n            <Button type='button'\n              size='mini' positive\n              value= 'CLOSED'\n              onClick = {(e,{ value }) => actionButtonClick(e,value)}>Close Task</Button>\n\n            <Button.Or size='mini' />\n            <Button  type='button'\n              size='mini' negative\n              value= 'DEFERRED'\n              onClick = {(e,{ value }) => actionButtonClick(e,value)}> Defer Task to next Shift</Button>\n          </Button.Group>\n        </div>\n      </div>\n\n\n      }\n      <TextAreaField rows='1'\n        readOnly = {taskAction && taskAction !== 'NOTES_ADDED' ? true:false}\n        hidden= {!noteFieldVisibile}\n        style= {{ paddingBotton:'0.3125em',margin:'0px 3.125em 0.625em 1.5em'  }}\n        name={`${name}.newNote`  }\n        width='14'\n        onChange= {(e,{ value }) => {\n          if(value.trim() !== ''){\n            setFieldValue(`${name}.newNote`,value)\n            if (!taskAction){\n              setFieldValue(`${name}.action`,'NOTES_ADDED')\n            }\n\n          }else{\n            setFieldValue(`${name}.newNote`,'')\n            if (taskAction  === 'NOTES_ADDED'){\n              setFieldValue(`${name}.action`,'')\n\n            }\n\n          }\n\n        }}/>\n\n\n    </>\n  )\n\n}\n\nexport default TaskForm","import React from 'react'\nimport { FieldArray } from 'formik'\nimport TaskForm from './TaskForm'\nimport { Button, Icon } from 'semantic-ui-react'\n\n\nconst TaskForms = ({ tasksIdentifier,tasks,taskCategory,onRemove,aircraftId }) => {\n\n  const newTaskField = () => {\n    const newTaskField = { description:'',status:'',action:'',taskCategory: tasksIdentifier }\n    if(taskCategory && taskCategory === 'AIRCRAFT'){\n      newTaskField.aircraft = aircraftId\n      newTaskField.taskCategory = taskCategory\n    }\n\n    return newTaskField\n\n  }\n\n  return  <FieldArray name={`tasks.${tasksIdentifier}`}>\n    {({ push,remove }) => (<>\n      {tasks && tasks.map((task,index) =>\n        <TaskForm key={index}\n          label= {index}\n          name={`tasks.${tasksIdentifier}.${index}`}\n          //The input Field is disabled if the task is open or deferred from previous shifts implied by task.id field\n          disabled = {task.id && (task.status === 'DEFERRED' || task.status==='OPEN')}\n          onRemove = {\n            () => {\n              if(onRemove) onRemove()\n              remove(index)\n            }\n          }\n        >\n        </TaskForm>\n      )}\n\n      {/**\n       * Add new row button\n       */}\n      <Button\n        type='button'\n        icon\n        style={{ marginLeft:'10px' }}\n        primary\n        onClick={ (e) => push (newTaskField())\n        }>\n        <Icon name=\"plus circle\"/> Add\n      </Button>\n    </>)}\n  </FieldArray>}\n\nexport default TaskForms","import React, { Fragment, useState } from 'react'\nimport { Header, Confirm } from 'semantic-ui-react'\nimport { AircraftCheckBox } from './FormFields'\nimport { useFormikContext } from 'formik'\nimport TaskForms from './TaskForms'\n\nconst AircraftSelectionForm = ({ costumers,setCheckedAircrafts,checkedAircrafts,values }) => {\n  const { setFieldValue } = useFormikContext()\n  const [confirmOpen,setConfirmOpen] = useState ({ open:false,aircraft:'',event:'' })\n\n  return (<>\n    {costumers && costumers.map(costumer =>\n      <Fragment key= {costumer.name }>\n        <Header as=\"h3\">Work Performed for {costumer.name}</Header>\n\n\n        {costumer.aircrafts.map(aircraft =>\n\n          <Fragment key={aircraft.id}>\n            <AircraftCheckBox\n              label = {aircraft.registration}\n\n              // If the aircaft registration is on the checked list the checkbox should be checked\n              checked = {checkedAircrafts[aircraft.registration]&& checkedAircrafts[aircraft.registration]['checked']}\n\n              //If the aircraft reistration is on the checked list and is disabled the checkbox is disabled\n              disabled = {checkedAircrafts[aircraft.registration]&& checkedAircrafts[aircraft.registration]['disbleCheck']}\n\n              onChange={\n                (e,{ checked }) =>  {\n                  e.preventDefault()\n                  //if the aircraft is checked by user it should initalize with a taskarea input\n                  if(checked && (!values.tasks[aircraft.registration] || values.tasks[aircraft.registration].length === 0) ){\n                    setCheckedAircrafts({ ...checkedAircrafts,[aircraft.registration]:{ 'checked':checked } })\n                    setFieldValue(`tasks.${aircraft.registration}`,[{ description:'',status:'' ,action:'',taskCategory:'AIRCRAFT' ,aircraft: aircraft.id }])\n                  }\n                  if(!checked) {\n                    if(values.tasks[aircraft.registration].length >0 ){\n                      setConfirmOpen({ open:true, aircraft:aircraft.registration })\n                    }\n                  }\n                }\n\n              }>\n\n\n              {/**\n              * If Unchecked diaplay all task will be erased warning\n              */}\n              <Confirm\n                open = {confirmOpen.open}\n                header = {`Uncheck Aircraft ${confirmOpen.aircraft}`}\n                content= {'Are you sure you want to uncheck this aircraft? Doing so will remove all the entered tasks for this Aircraft'}\n                onCancel = { () => {\n                  setConfirmOpen({ open:false })\n                }}\n                onConfirm = { () => {\n                  console.log('called me')\n                  setFieldValue(`tasks.${confirmOpen.aircraft}`,null)\n                  setCheckedAircrafts({ ...checkedAircrafts,[confirmOpen.aircraft]:{ 'checked':false } })\n                  setConfirmOpen({ open:false })\n                }}\n              />\n\n              {checkedAircrafts[aircraft.registration]&& checkedAircrafts[aircraft.registration]['checked'] &&\n              <TaskForms\n                tasksIdentifier={aircraft.registration}\n                tasks={values.tasks[aircraft.registration]}\n                taskCategory= 'AIRCRAFT'\n                aircraftId = {aircraft.id}\n                onRemove = {\n                  () => {\n                    /**\n                     * If the last remaining task is removed then the aircraft chekbox should uncheck\n                     */\n                    if(values.tasks[aircraft.registration].length===1){\n                      setCheckedAircrafts({ ...checkedAircrafts,[aircraft.registration]:{ 'checked':false } })\n                    }\n\n                  }}\n              ></TaskForms>\n              }\n            </AircraftCheckBox>\n\n          </Fragment>\n        )}\n\n\n      </Fragment>)}\n  </>\n\n  )\n}\n\nexport default AircraftSelectionForm","import React, { useState, useEffect } from 'react'\nimport { Modal,Grid,Header,Form ,Divider,Segment ,Icon,Button,Message, FormGroup, FormField, Dimmer,Loader } from 'semantic-ui-react'\nimport { DateInputField, InputField } from './FormFields'\nimport { operateDate, formatDate } from '../../../utils/DateHelper'\nimport { useFormikContext, Formik } from 'formik'\nimport { validateEmail, validateName, validateStartEndTime } from './validator'\nimport { SIGN_OFF_SHIFT } from '../../../mutations/timeSheetMutation'\nimport { useMutation } from '@apollo/client'\nimport _ from 'lodash'\n\n\nconst  StaffAddModel = ({ setOpen,open ,e }) => {\n\n  const{ getFieldMeta,setFieldValue } = useFormikContext()\n\n  const [signOff,{ loading, error, data }] = useMutation(SIGN_OFF_SHIFT,{\n    onError: (error) => {\n      console.log(error)\n    }\n  })\n\n  const shiftStartTime = getFieldMeta('startTime').value\n  const shiftEndTime = getFieldMeta('endTime').value\n  const [notifyResult,setNotifyResult] = useState('')\n  const [username,setUsername] = useState('')\n  const [password,setPassword] = useState('')\n  const [startTime,setStartTime] = useState(shiftStartTime)\n  const [endTime,setEndTime] = useState(shiftEndTime)\n  const [breakt,setBreakt] = useState('30')\n  const [registerUserOpen,setRegisterUserOpen]= useState(false)\n  const [forgotPasswordOpen,setForgotPasswordOpen] = useState(false)\n\n  useEffect(() => {\n    setStartTime(shiftStartTime)\n    setEndTime(shiftEndTime)\n  },[shiftEndTime, shiftStartTime])\n\n\n  useEffect (() => {\n    /**If the staff sign off is not sucessfull */\n    if(error){\n      if(registerUserOpen){\n        setNotifyResult({ type: 'error', message:`Failed to register user. ${error.message}` })\n      }if(forgotPasswordOpen){\n        setNotifyResult({ type: 'error', message:`Failed to reset password. ${error.message}` })\n      }\n      else{\n        setNotifyResult({ type: 'error', message:`Failed to add user. ${error.message}` })\n      }\n    }\n    /**\n     * If the staff signoff is successFull\n     */\n    if(data && data.signOffTimeSheet != null ){\n      /**\n       * Check if the staff is alrady added if so notify user to remove old entry\n       */\n      const staffs= getFieldMeta('staffs').value\n      if(_.find(staffs,{ id:data.signOffTimeSheet.id })){\n\n        setNotifyResult({ type: 'error', message: `${data.signOffTimeSheet.name} is already exist on report` } )\n\n      }else {\n        const addedStaff = [...staffs,{ name:data.signOffTimeSheet.name, startTime:data.signOffTimeSheet.startTime, endTime: data.signOffTimeSheet.endTime ,signOffKey:data.signOffTimeSheet.value ,id: data.signOffTimeSheet.id, break: data.signOffTimeSheet.break }]\n        setFieldValue('staffs', addedStaff)\n\n        if(registerUserOpen){\n\n          setNotifyResult({ type: 'success', message:`${data.signOffTimeSheet.name} is added to report.<br/> Further registration instruction sent to email. Please complete registration within 48 hours` })\n          setRegisterUserOpen(false)\n\n        }if(forgotPasswordOpen){\n          setNotifyResult({ type: 'success', message:`${data.signOffTimeSheet.name} is added to report <br/> Password reset link sent to email.`  })\n          setForgotPasswordOpen(false)\n        }\n        else{\n          setNotifyResult({ type: 'success', message: `${data.signOffTimeSheet.name} is added to report` } )\n        }\n      }\n\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[error, data])\n\n\n\n\n\n  const submit = async (values) => {\n\n    let signOffData\n\n    if(registerUserOpen){\n      signOffData = {  startTime:values.startTime ,endTime:values.endTime , break:parseInt(breakt), email: values.email, name: values.fullname ,additionalAction:'register' }\n    }\n    else if(forgotPasswordOpen){\n      signOffData = { startTime:values.startTime ,endTime:values.endTime ,break:parseInt(breakt), email:values.resetEmail,additionalAction:'reset' }\n    }else {\n      signOffData = { startTime:values.startTime ,endTime: values.endTime ,break:parseInt(breakt), username: username, password: password }\n    }\n    console.log(signOffData)\n    await signOff({ variables:signOffData })\n  }\n\n  const renderAlert = () => {\n    if(!notifyResult) return null\n    return(\n      <Message\n        success = {notifyResult.type === 'success'}\n        error = {notifyResult.type === 'error'}\n        onDismiss = {() => setNotifyResult('')\n        }\n      > {notifyResult.message}\n      </Message>)\n\n\n  }\n  const renderNewUserInput = (values) => {\n\n    return(\n\n      <Segment basic>\n        <Message positive>\n          <Message.Header>Register info</Message.Header>\n\n            Please enter following information to add yourself to shift . Registraion instruction will be forwarded to you on the provided email.\n            It is important that you register as soon as possible.\n        </Message>\n\n        <Message warning visible>\n          <Message.Header>Attention!!</Message.Header>\n        Your info will be added to report automatically after this step, make sure you enter your name and work time correctly\n        </Message>\n        <Form.Group>\n          <InputField width= '12' name ='fullname' label='Full Name' />\n          <InputField width= '12' name = 'email' label = 'Email Address'/>\n        </Form.Group>\n        <FormGroup>\n          <Button  positive >Register</Button>\n          <Button type='button' negative onClick ={() => setRegisterUserOpen(false)}>Cancel</Button>\n        </FormGroup>\n\n\n      </Segment>\n    )\n  }\n\n  const renderForgotPassword = (values) => {\n    return(\n      <Segment basic>\n        <Message warning visible>\n          <Message.Header>Reset Password</Message.Header>\n            Please enter your email address used while creating account.\n        </Message>\n\n        <Message warning visible>\n          <Message.Header>Attention!!</Message.Header>\n        Your info will be added to report automatically after this step, make sure you <strong>Enter your work time correctly</strong>\n        </Message>\n\n        <InputField width= '12' name = 'resetEmail'label = 'Email Address'/>\n        <FormGroup>\n          <Button  primary >Reset</Button>\n          <Button  negative onClick ={() => setForgotPasswordOpen(false)}>Cancel</Button>\n        </FormGroup>\n      </Segment>\n    )\n  }\n\n\n  if(loading){\n    return<Dimmer active inverted>\n      <Loader active inverted>Veryfing User</Loader>\n    </Dimmer>\n  }\n\n  return (\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {open}\n      onClose= {() => {\n        setForgotPasswordOpen(false)\n        setRegisterUserOpen(false)\n        setNotifyResult(false)\n        setOpen(false)}}\n      onOpen= {() => setOpen (true)}\n    >\n      <Modal.Header>Add User to Shift </Modal.Header>\n      <Modal.Content>\n\n        {notifyResult &&\n         renderAlert()\n        }\n\n        <Formik\n          enableReinitialize\n          initialValues = {{\n            startTime: startTime,\n            endTime: endTime,\n            breakt:breakt,\n            username:'',\n            password:'',\n            email:'',\n            fullname:'',\n            resetEmail:''\n          }}\n\n          validate = {values => {\n            let errors = {}\n            errors = { ...errors,...validateStartEndTime(values.startTime,values.endTime) }\n\n            if(forgotPasswordOpen){\n              let emailError = validateEmail(values.resetEmail)\n              if(emailError) errors.resetEmail = emailError\n            }\n            if(registerUserOpen){\n              let emailError = validateEmail(values.email)\n              if(emailError) errors.email = emailError\n\n              let usernameError = validateName(values.fullname)\n              if(usernameError) errors.fullname = usernameError\n\n            }\n            console.log(errors)\n            return errors\n          } }\n\n          onSubmit = {(values) =>\n          {\n            console.log(values ,'submitted')\n            submit(values)}\n          }\n\n\n        >\n\n\n          {({ values,handleSubmit,errors,touched }) =>\n\n            <Form size='large' onSubmit = { handleSubmit} >\n              <Form.Group >\n\n                < DateInputField\n                  label= 'Start Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name ='startTime'\n                  maxDate = {operateDate(Date.now(),30,'m','sub')}\n                  minDate= {operateDate(Date.now(),20,'h','sub')}\n                  onChange = {(e,{ value }) => {\n                    setStartTime(value)}\n                  }\n                />\n\n\n                < DateInputField\n                  label = 'End Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name='endTime'\n                  maxDate = {formatDate(Date.now())}\n                  minDate= {operateDate(startTime,20,'m','add')}\n                  onChange = {(e,{ value }) => {\n                    setEndTime(value)}\n                  }/>\n\n                <InputField\n                  inputlabel= 'Break'\n                  label = 'Minutes '\n                  labelPosition='right corner'\n                  name= 'breakt'\n                  type='number'\n                  min='0'\n                  onChange = {(e,{ value }) => {\n                    setBreakt(value)}\n                  }>\n                </InputField>\n\n\n\n              </Form.Group>\n\n              <Header as='h5' color='blue' textAlign='center'>\n\n              </Header>\n\n              {!registerUserOpen && !forgotPasswordOpen &&\n\n\n            <>\n              <Segment >\n\n                <Grid columns={2} stackable >\n                  <Divider vertical>Or</Divider>\n                  <Grid.Row verticalAlign='middle'>\n                    <Grid.Column>\n                      <Grid.Row style={{ textAlign:'center' }}>\n                        <Header as ='h5' icon>\n                          <Icon name='sign in alternate' />\n                    Use Credentials\n                        </Header>\n                      </Grid.Row>\n                      <Grid.Row>\n                        <Form.Group>\n                          <Form.Input label='Username' onChange= {(e,{ value }) => setUsername(value)}></Form.Input>\n                          <Form.Input label= 'Password' type='password' onChange= {(e,{ value }) => setPassword(value)}></Form.Input>\n                        </Form.Group>\n                        <Form.Field style={{ textAlign:'center' }}>\n                          <Button type='submit' primary > Sign </Button>\n                        </Form.Field>\n                        <Form.Field style={{ textAlign:'center' }}>\n                          <Button size='tiny' onClick={() => setForgotPasswordOpen(true)}>Forgot Password</Button>\n                        </Form.Field>\n                      </Grid.Row>\n                    </Grid.Column>\n\n                    <Grid.Column textAlign='center'>\n                      <Grid.Row >\n                        <Header icon>\n                          <Icon name='barcode' size='massive' />\n                  Use IdCard\n                        </Header>\n                      </Grid.Row>\n                      <Grid.Row><Button primary>Scan</Button></Grid.Row>\n\n                    </Grid.Column>\n                  </Grid.Row>\n                </Grid>\n\n              </Segment>\n              <FormField style={{ textAlign:'center' }}>\n                <label> If you do not have a account yet, contact your supervisor or click below.</label>\n                <Button type='button' onClick={() => setRegisterUserOpen(true)}> New User </Button>\n              </FormField>\n            </>\n              }\n\n\n              {registerUserOpen && renderNewUserInput( values)}\n              {forgotPasswordOpen && renderForgotPassword(values)}\n            </Form>}\n        </Formik>\n      </Modal.Content>\n\n    </Modal>\n\n\n  )\n}\n\nexport default StaffAddModel","import { gql } from '@apollo/client'\nexport const SUBMIT_REPORT = gql`\n  mutation submitReport($station: String!, $shift:String! , $startTime: String! ,$endTime: String!, $tasks: [ShiftReportTask]! , $staffs: [ShiftReportStaffs!]! ) { \n  submitShiftReport(\n    station:$station\n    shift:$shift\n    startTime: $startTime\n    endTime: $endTime\n    tasks:$tasks\n    staffs: $staffs\n  ){\n    endTime\n    id\n    shift\n    staffAndTime {\n      id\n      staff {\n        name\n      }\n      endTime\n      startTime\n    }\n    startTime\n    station {\n      location\n      id\n    }\n    tasks {\n      aircraft {\n        registration\n        id\n        costumer {\n          name\n        }\n      }\n      taskCategory\n      description\n      id\n      status\n      updates {\n        action\n        handoverId {\n          id\n          shift\n        }\n        note\n      }\n      \n    }\n  } \n}\n`","import React, { useState, useContext, useEffect } from 'react'\r\nimport { Formik } from 'formik'\r\nimport Context from '../Context'\r\nimport { Form, Header, Button, Dimmer, Segment, Loader, Message } from 'semantic-ui-react'\r\nimport { DateInputField } from './FormFields'\r\nimport { validateStaffsField, validateStartEndTime, validateTasks } from './validator'\r\nimport { formatDate, operateDate, toDate } from '../../../utils/DateHelper'\r\nimport _ from 'lodash'\r\nimport StaffForms from './StaffForms'\r\nimport AircraftSelectionForm from './AircraftSelectionForm'\r\nimport TaskForms from './TaskForms'\r\nimport StaffAddModel from './StaffAddModel'\r\nimport { useMutation } from '@apollo/client'\r\nimport { SUBMIT_REPORT } from '../../../mutations/submitShiftReport'\r\nimport { GET_SHIFT_REPORT } from '../../../queries/shiftReportQuery'\r\nimport { NotificationContext } from '../../../contexts/NotificationContext'\r\n\r\nconst NewReportForm = ({ setActiveItem }) => {\r\n  const context = useContext(Context)\r\n  const[,dispatch] = useContext(NotificationContext)\r\n  const station = context.state.station\r\n  const reportData = context.state.lastShiftReport\r\n\r\n  const [openAddStaffModel,setOpenAddStaffModel] = useState (false)\r\n\r\n  // costumers assigned to this station\r\n  const [costumers,setCostumers] = useState(station.costumers)\r\n\r\n  const [checkedAircrafts, setCheckedAircrafts] = useState({})\r\n  const init = {\r\n    startTime:'', //default shift starttime\r\n    endTime:'',\r\n    staffs:[],\r\n    tasks:{}\r\n  }\r\n  const [initialFields,setInitialFields] = useState(init)\r\n\r\n  const [submitReport,{ loading }] = useMutation(SUBMIT_REPORT,{\r\n    update(store,result) {\r\n\r\n      const data = { getShiftReport: result.data.submitShiftReport }\r\n      store.writeQuery(\r\n        { query: GET_SHIFT_REPORT ,\r\n          variables:{\r\n            station: station.id,\r\n            flag:'MOST_RECENTLY_COMPLETED'\r\n          },\r\n          data\r\n        }\r\n      )\r\n\r\n      console.log(result,data)\r\n    },\r\n\r\n    onCompleted: () => {\r\n      setActiveItem('lastShiftReport')\r\n    },\r\n\r\n    onError: (error) => {\r\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: error.message ,type: 'ERROR' } })\r\n    }\r\n  })\r\n  const getShiftName = (startTime) => {\r\n    const sdt = new Date(toDate(startTime))\r\n    const shiftName = station.shifts.reduce((p,c) => {\r\n      /**Setting the shiftTime to given startTime for comparision  */\r\n      const splitSt = c.startTime.split(':')\r\n      const st = new Date(sdt)\r\n      st.setHours(splitSt[0])\r\n      st.setMinutes(splitSt[1])\r\n      /** Diffence between given startTIme and shift startttime */\r\n      const diff = (sdt-st)/(60*60*1000)\r\n      /**return the lowest positive diffence if exist or highest negative differnce*/\r\n      if((diff > p.diff && p.diff < 0) ){\r\n        return { name: c.name ,diff: diff }\r\n      }\r\n      if(diff > 0 && diff< p.diff){\r\n        return { name: c.name ,diff: diff }\r\n      }\r\n      return p\r\n    },{ name:'',diff:-24 })\r\n    return shiftName.name\r\n  }\r\n\r\n  useEffect (() => {\r\n    //initial aircraft list from last shift report\r\n    let list = {}\r\n    //initial task list from last shift report\r\n    let taskList = {}\r\n    let costumerList = []\r\n\r\n    // eslint-disable-next-line array-callback-return\r\n\r\n    reportData && reportData.tasks && reportData.tasks.map(task =>  {\r\n      if( (task.status==='DEFERRED' || task.status==='OPEN') ){\r\n        // Initial field for deferred or open tasks\r\n        const simplifiedTask = { id:task.id, description:task.description, status:task.status ,updates: task.updates ,action:'', newNote:'',taskCategory:task.taskCategory }\r\n\r\n        //From the last shift report if the task is aircraft tasks aircraft has open tasks it is checked by default and cannot be disabled\r\n        if(task.aircraft) {\r\n          list[task.aircraft.registration] = { checked:true,disbleCheck:true }\r\n        }\r\n\r\n        //arranging tasks based on aircraft registration\r\n        if(task.aircraft && taskList[task.aircraft.registration]){\r\n          taskList[task.aircraft.registration].push( { ...simplifiedTask })\r\n\r\n        }else if (task.aircraft){\r\n          taskList[task.aircraft.registration] = [ { ...simplifiedTask }]\r\n\r\n        }else{\r\n          if(taskList[task.taskCategory]){\r\n            taskList[task.taskCategory].push(simplifiedTask)\r\n          }else{\r\n            taskList[task.taskCategory] = [simplifiedTask]\r\n          }\r\n\r\n\r\n        }\r\n\r\n        //if there is a task from a costumer who is not assigned to this station we add that arcraft & costumer to list\r\n        if(task.aircraft){\r\n          if(! _.find( station.costumers,_.matchesProperty('name',task.aircraft.costumer.name))){\r\n\r\n            if( ! _.find( costumerList,_.matchesProperty('name',task.aircraft.costumer.name))){\r\n              costumerList.push({ name:task.aircraft.costumer.name,aircrafts:[{ registration:task.aircraft.registration,id: task.aircraft.id }] })\r\n            }else{\r\n              costumerList.aircrafts.push({ registration:task.aircraft.registration , id: task.aircraft.id })\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    )\r\n\r\n    setCostumers([...costumers,...costumerList])\r\n\r\n    //Set initail form values based on shiftreport\r\n    setInitialFields({ ...initialFields,tasks:taskList })\r\n    setCheckedAircrafts(list)\r\n\r\n  }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  ,[])\r\n\r\n  /**Format submit data  before submit*/\r\n  const beforeSubmit = (formdata) => {\r\n    let submitData = { station: station.id , staffs: formdata.staffs, startTime:formdata.startTime, endTime: formdata.endTime, tasks:{} }\r\n\r\n    /**Reduce the tasks to be only array of tasks */\r\n    const updatedTasks =  _.reduce(formdata.tasks, (tasks,tasksByIdentifier,identifier) => {\r\n      let taskList = _.map(tasksByIdentifier, (task,index) => {\r\n        let initialTask\r\n        /**Compare the task with the initial tasks, reduce to only include the changes */\r\n        if(initialFields.tasks[identifier] && initialFields.tasks[identifier][index]){\r\n          initialTask = initialFields.tasks[identifier] && initialFields.tasks[identifier][index]\r\n          const difference = Object.keys(initialTask).filter(k => initialTask[k] !== task[k])\r\n\r\n          /**If no changes return null */\r\n          if(!difference) return null\r\n          const reducedTask = difference.reduce((p,c) => p[c] = { ...p,[c]:task[c] },{})\r\n          task = { id: task.id, ...reducedTask }\r\n        }\r\n\r\n        return task\r\n      })\r\n\r\n      /**remove null tasks */\r\n      taskList = taskList.filter(task => task !== null)\r\n\r\n      return [...tasks,...taskList]\r\n    },[])\r\n\r\n\r\n    /**Only include staff signoff Key and name */\r\n    const staffs = formdata.staffs.map((staff) => {return { signOffKey: staff.signOffKey, name:staff.name }})\r\n\r\n    submitData = { ...submitData,tasks: updatedTasks, staffs: staffs ,shift: getShiftName(formdata.startTime) }\r\n\r\n    return submitData\r\n\r\n  }\r\n\r\n  if(loading) {\r\n    return(\r\n      <Segment style={{ height:'10rem' }} basic size='huge'>\r\n        <Dimmer active inverted>\r\n          <Loader inverted>Submitting Data</Loader>\r\n        </Dimmer>\r\n      </Segment>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues = {initialFields}\r\n        validate = { values => {\r\n          let errors = {}\r\n          errors = { ...errors,...validateStartEndTime(values.startTime,values.endTime) }\r\n          const staffErrors = validateStaffsField(values.staffs)\r\n          const taskErrors = validateTasks(values.tasks)\r\n\r\n          if(!_.isEmpty(taskErrors) ) errors.tasks = taskErrors\r\n          if(!_.isEmpty(staffErrors) ) errors.staffs = staffErrors\r\n\r\n          return errors\r\n\r\n        }}\r\n        onSubmit={(values) => {\r\n          const submitData = beforeSubmit(values)\r\n          submitReport({ variables: submitData })\r\n\r\n        }}\r\n      >\r\n\r\n        {({ values,handleSubmit,errors,touched,submitCount }) =>\r\n          <>\r\n            <Form onSubmit = {handleSubmit}>\r\n              {/*Shift start end times*/}\r\n              <Form.Group >\r\n                <DateInputField\r\n                  label = \"Shift Start Time\"\r\n                  name='startTime'\r\n                  maxDate = {operateDate(Date.now(),30,'m','sub')}\r\n                  minDate= {operateDate(Date.now(),20,'h','sub')}/>\r\n\r\n                <DateInputField\r\n                  label = \"Shift End Time\"\r\n                  name='endTime'\r\n                  maxDate = {formatDate(Date.now())}\r\n                  minDate= {operateDate(values.startTime,20,'m','add')}/>\r\n              </Form.Group>\r\n\r\n              {/*Dynamic Input fields for staff Information*/}\r\n              <StaffForms values={values} touched={touched} errors={errors} addStaffOpen =  {setOpenAddStaffModel}/>\r\n\r\n              {/*Dynamic Input fields for Aircraft Tasks*/}\r\n              <AircraftSelectionForm costumers ={costumers} checkedAircrafts={checkedAircrafts} setCheckedAircrafts= {setCheckedAircrafts} values={values} />\r\n\r\n              {/*Dynamic Input fields for Other Tasks*/}\r\n              <Header as=\"h3\">Other Tasks</Header>\r\n              <TaskForms tasksIdentifier = 'OTHER' tasks = {values.tasks.OTHER}> </TaskForms>\r\n\r\n              {/*Dynamic Input fields for Other Tasks*/}\r\n              <Header as=\"h3\">Logistics Task</Header>\r\n              <TaskForms tasksIdentifier = 'LOGISTICS' tasks = {values.tasks.LOGISTICS}> </TaskForms>\r\n\r\n              <Message\r\n                error\r\n                content={\r\n                  <Header as='h5'>There are some errors on the report <Header.Subheader>Please fix the errors before trying again</Header.Subheader></Header>\r\n                }\r\n                visible ={(!_.isEmpty(errors) && submitCount > 0 ) === true}\r\n              />\r\n\r\n              <Message\r\n                success\r\n                content={\r\n                  <Header as='h5'>Great! Everything seems to be fixed <Header.Subheader>Please, proceed to submit whenever ready</Header.Subheader></Header>\r\n                }\r\n                visible ={(_.isEmpty(errors) && submitCount > 0 ) === true}\r\n              />\r\n\r\n              <Segment disabled = {!_.isEmpty(errors) && submitCount > 0} color='blue' inverted tertiary clearing>\r\n                <Button floated='right' type=\"submit\" primary> Submit Report </Button> </Segment>\r\n            </Form>\r\n            <StaffAddModel setOpen= {setOpenAddStaffModel} open= {openAddStaffModel} shiftStartTime = {values.startTime} shiftEndTime={values.endTime}></StaffAddModel></>}\r\n\r\n\r\n      </Formik>\r\n\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default NewReportForm","import { useLazyQuery } from '@apollo/client'\nimport React ,{  } from 'react'\nimport { Loader, Header, Modal } from 'semantic-ui-react'\nimport { GET_SHIFT_REPORT } from '../../queries/shiftReportQuery'\n\nimport _ from 'lodash'\n\nimport ShiftReport from '.'\n\n\nconst ReportViewModal = ({ openReport,setOpenReport }) => {\n  const [getReport,{ error,loading,data }] = useLazyQuery(GET_SHIFT_REPORT)\n\n  const onMount = () => {\n    if(openReport.id) {\n      getReport({ variables:{ id: openReport.id } })\n    } else{\n      setOpenReport({ ...openReport,id:'', open: false })\n    }\n\n\n  }\n\n  return (\n    <Modal\n      onClose={() => setOpenReport({ id:'',open:false })}\n      onMount={() => onMount()}\n      open= {openReport.open}\n    >\n      { error &&\n      <>\n        <Modal.Content> <Header as ='h5'>Oouch...Something Went Wrong, Please try again</Header> </Modal.Content>\n      </>\n      }\n      { loading &&\n      <Loader active>Retriving Report</Loader>\n\n      }\n\n      {data && data.getShiftReport &&\n      <>\n        <Modal.Header>Shift Report: {data.getShiftReport.startTime.split(' ')[0]} {data.getShiftReport.station.location} {data.getShiftReport.shift} shift</Modal.Header>\n        <Modal.Content>\n          <ShiftReport reportData = {data.getShiftReport}> </ShiftReport>\n        </Modal.Content></>\n      }\n    </Modal>\n  )\n\n}\n\nexport default ReportViewModal","import { useQuery } from '@apollo/client'\nimport React ,{ Fragment, useContext, useState } from 'react'\nimport { Table,Loader, Header, List } from 'semantic-ui-react'\nimport { GET_REPORTLIST } from '../../queries/shiftReportQuery'\nimport Context from './Context'\nimport _ from 'lodash'\n\nimport ReportViewModal from '../ShiftReport/ReportViewModal'\n\n\nconst AllReportsTable = () => {\n  const context = useContext(Context)\n  const station = context.state.station\n\n  const { error,loading,data } = useQuery(GET_REPORTLIST, { variables:{ stationId: station.id } })\n  const [openReport,setOpenReport]= useState({ id:'', open: false })\n\n  let transformData\n  if(data) {\n    transformData = data.getReportList\n    transformData = _.groupBy(transformData, report => report.startTime.split(' ')[0] )\n    transformData = _.mapValues(transformData, date => _.groupBy(date,report => report.station.location))\n\n  }\n\n  if (loading) {\n    return (\n      <Loader active>Initiatilizing reporting</Loader>\n    )\n  }\n\n  if (error) {\n    console.log(error)\n    return (\n      <Header as ='h5'>Something Went Wrong, Please try again</Header>\n    )\n  }\n\n  return (\n    <>\n      <Table  compact celled striped structured>\n        <Table.Header>\n          <Table.Row><Table.HeaderCell> Date </Table.HeaderCell><Table.HeaderCell textAlign='center'> Station </Table.HeaderCell><Table.HeaderCell> Shift </Table.HeaderCell></Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {transformData && _.map(transformData,(stations,date) =>\n            <Fragment key = {date}>\n              {Object.entries(stations).map(([station,reports],index) =>\n                <Table.Row  key = {station}>\n                  {index === 0 && <Table.Cell collapsing rowSpan={Object.keys(transformData[date]).length}>{date}</Table.Cell>}\n                  <Table.Cell textAlign='center' >{station}</Table.Cell>\n                  <Table.Cell>\n                    <List horizontal>\n                      {_.map(reports, report =>\n                        <List.Item as = 'a' key={report.id}\n                          onClick = {() => {\n                            setOpenReport({ id: report.id,open:true })\n                          }}>{report.shift}\n                        </List.Item>)}\n                    </List>\n                  </Table.Cell>\n                </Table.Row>\n              )\n              }</Fragment>\n          )\n          }\n        </Table.Body>\n      </Table>\n      <ReportViewModal setOpenReport= {setOpenReport} openReport={openReport}></ReportViewModal>\n    </>\n  )\n}\n\nexport default AllReportsTable","import { gql } from '@apollo/client'\n\nexport const ADD_COSTUMER = gql`\nmutation addnewCostumer( $name: String! $stations: [String], $keyContacts: [ContactInput], $contract: String! ,$aircrafts: [String]){\n  addCostumer(\n    name: $name\n    stations: $stations\n    keyContacts: $keyContacts\n    aircrafts: $aircrafts\n    contract: $contract){\n      name\n      id\n      contract\n      aircrafts{\n        id\n        registration\n      }\n      stations{\n        id\n      }\n    }\n}`\n\nexport const ADD_AIRCRFAT = gql`\nmutation addAircrafttoCostumer( $registration: [String!]! $costumer: String!){\n  addAircrafts(\n    registration: $registration\n    costumer: $costumer\n    ){\n      id\n      registration\n    }\n}`\n\nexport const ADD_CONTACT = gql`\nmutation addContactCostumer( $keyContacts: [ContactInput!]! , $costumer: String!){\n  addContact(\n    keyContacts: $keyContacts\n    costumer: $costumer\n    ){      \n        id\n        description\n        email\n        phone   \n    }\n}`\n\nexport const ADD_STATION_TO_COSTUMER = gql`\nmutation addStationCostumer( $stations: [String!]! , $costumer: String){\n  addStationsToCostumer(\n    stations: $stations\n    costumer: $costumer\n    ){\n      id\n      stations{\n        id\n        location\n      }\n    }\n}`\n\nexport const REMOVE_AIRCRFAT = gql`\nmutation removeAircraft( $id: String!){\n  removeAircraft(\n    id: $id\n    ){\n      status\n      message\n    }\n}`\n\nexport const REMOVE_CONTACT = gql`\nmutation removeContactCostumer( $id: String! , $costumer: String){\n  removeContact(\n    id: $id\n    costumer: $costumer\n    ){\n      status\n      message\n    }\n}`\n\nexport const REMOVE_COSTUMER_FROM_STATION = gql`\nmutation removeStationCostumer( $station: String! , $costumer: String){\n  removeCostumerStation(\n    station: $station\n    costumer: $costumer\n    ){\n      status\n      message\n    }\n}`\n\nexport const DELETE_COSTUMER = gql`\nmutation deleteCostumer( $costumer: String){\n  deleteCostumer(\n    costumer: $costumer\n    ){\n      status\n      message\n    }\n}`","import { gql } from '@apollo/client'\nexport const ALL_COSTUMERS = gql`\nquery fetchAllCostumers ($detailed: Boolean = false) {\n    allCostumers {\n      name\n      id\n      stations  @include(if: $detailed) {\n        id\n        location\n      }\n      contract @include(if: $detailed)\n      aircrafts @include(if: $detailed) {\n        id\n        registration\n      }\n    }\n  }\n`\n\nexport const GET_COSTUMER = gql ` \nquery getCostumerId ($id:String){\n  getCostumer(\n    id:$id\n  ){\n    name\n    id \n    stations{\n      id\n      location\n      address{\n        street\n        postcode\n        city\n        country\n      }\n    }\n    aircrafts{\n      id\n      registration\n    }\n    contract\n    keyContacts{\n      id\n      phone\n      description\n      email\n    }\n\n\n  }\n}\n\n`","import React from 'react'\nimport { Button, Modal } from 'semantic-ui-react'\n\nconst ConfirmModal = ({ confirm , setOpen , open }) => {\n  return(\n    <Modal\n      open= {open}\n      closeOnEscape= {false}\n      closeOnDimmerClick={false}\n    >\n      <Modal.Header >Confirm</Modal.Header>\n      <Modal.Content>{confirm.title}</Modal.Content>\n      <Modal.Actions>\n        <Button positive onClick= {() => {\n          confirm.fn()\n          setOpen(false)\n        }\n        }>Confirm </Button>\n        <Button negative  onClick= {() => setOpen(false)}>Cancel </Button>\n      </Modal.Actions>\n    </Modal>\n  )\n\n}\n\nexport default ConfirmModal","import { gql, useMutation } from '@apollo/client'\nimport React, { useContext } from 'react'\nimport { ADD_AIRCRFAT } from '../../mutations/costumerMutation'\nimport { forEach } from 'lodash'\nimport { Button, Form, Modal } from 'semantic-ui-react'\nimport { Formik } from 'formik'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { NotificationContext } from '../../contexts/NotificationContext'\n\nconst AddAircraftModal = ({ open ,setOpen ,costumer }) => {\n  const [,dispatch] = useContext(NotificationContext)\n  const [addAircrafts] = useMutation (ADD_AIRCRFAT,{\n    update:(store,{ data: { addAircrafts } }) => {\n\n      store.modify({\n        id: `Costumer:${costumer.id}`,\n        fields:{\n          aircrafts(existingAircraftRefs, { readField }) {\n\n            let newAircraftRefs =[]\n\n            forEach(addAircrafts,( aircrafts,i) => {\n              if(existingAircraftRefs.some(ref => readField('id',ref) !== aircrafts.id)){\n                newAircraftRefs.push(store.writeFragment({\n                  data: addAircrafts[i],\n                  fragment: gql`\n                fragment NewAircraft on Aircraft {\n                  id\n                  registration\n                }\n              `\n                }))\n              }\n            })\n            return [...existingAircraftRefs, ...newAircraftRefs]\n          }\n        }\n      })\n    },\n    onCompleted: ({ addAircrafts }) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, aircrafts ${addAircrafts.reduce((p,c) => p+c.registration+ ', ','')}  added` ,type: 'SUCCESS' } })\n      setOpen(false)\n    },\n\n    onerror: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to add aircrafts'}<br/> {err.message}</> ,type: 'ERROR' } })\n      setOpen(false)\n    }\n  })\n\n  return(\n\n    <Formik\n      initialValues= {{\n        aircrafts: []\n      }}\n\n      validate = { (values) => {\n\n        const errors = {}\n        if( values.aircrafts.length ){\n          const errAircraft =[]\n          forEach(values.aircrafts.split(','), aircraft => {\n            if(aircraft.trim().length < 3) errAircraft.push(aircraft.toUpperCase())\n          })\n          if (errAircraft.length ){\n            errors.aircrafts = `${errAircraft.toString()} invalid Aircraft Registration, should at least 3 characters`\n          }\n        }else{\n          errors.aircrafts = 'Enter at least one Aircraft'\n        }\n\n        return errors\n      }\n      }\n      onSubmit= {(values) => {\n        const aircrafts = values.aircrafts.toUpperCase().split(',')\n        addAircrafts({ variables:{  registration: aircrafts, costumer: costumer.id } })\n      }}>\n\n      {({ handleSubmit }) =>\n\n        <Modal\n          open= {open}\n          closeOnEscape= {false}\n          closeOnDimmerClick={false}\n        >\n          <Modal.Header>Select Stations to Add</Modal.Header>\n          <Modal.Content>\n            <Form>\n              <InputField name='aircrafts' label='Aircrafts' type='text' width='8' placeholder='Aircrfat Registrations separeted by comma \",\"'/>\n            </Form>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button type='submit' positive onClick= { (e) => {\n              e.preventDefault()\n              handleSubmit()\n            }\n            }> Add </Button>\n            <Button type='button' negative onClick = {() => setOpen(false)}> Cancel </Button>\n          </Modal.Actions>\n        </Modal>}\n\n    </Formik>\n\n\n\n\n  )\n\n\n}\n\nexport default AddAircraftModal","import { gql, useMutation } from '@apollo/client'\nimport React, { Fragment, useContext } from 'react'\nimport { ADD_CONTACT } from '../../mutations/costumerMutation'\nimport { forEach } from 'lodash'\nimport { Button, Form, Icon, Modal } from 'semantic-ui-react'\nimport { FieldArray, Formik } from 'formik'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { validateEmail } from '../StationReportPage/NewReportForm/validator'\nimport { NotificationContext } from '../../contexts/NotificationContext'\n\nconst AddContactModal = ({ open ,setOpen ,costumer }) => {\n  const[,dispatch] = useContext(NotificationContext)\n  const [addContacts] = useMutation (ADD_CONTACT,{\n    update:(store,{ data: { addContact } }) => {\n\n      store.modify({\n        id: `Costumer:${costumer.id}`,\n        fields:{\n          keyContacts(existingContactsRefs, { readField }) {\n\n            let newContactRefs =[]\n\n            forEach(addContact,( contact) => {\n              if(existingContactsRefs.some(ref => readField('id',ref) !== contact.id)){\n                newContactRefs.push(store.writeFragment({\n                  data:contact,\n                  fragment: gql`\n                fragment NewContact on Contact {\n                  id\n                  email\n                  phone\n                  description\n                }\n              `\n                }))\n              }\n            })\n            return [...existingContactsRefs, ...newContactRefs]\n          }\n        }\n      })\n    },\n    onCompleted: ({ addContact }) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, contacts added' ,type: 'SUCCESS' } })\n      setOpen(false)\n    },\n\n    onerror: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to add contacts'}<br/> {err.message}</> ,type: 'ERROR' } })\n      setOpen(false)\n    }\n\n  })\n\n  return(\n\n    <Formik\n      initialValues= {{\n        keyContacts: [{ description:'',phone:'' ,email:'' }]\n      }}\n\n      validate = { (values) => {\n\n        const errors = {}\n        if(values.keyContacts.length){\n          forEach(values.keyContacts, (contact,index) => {\n            if(!contact.description){\n              if (!errors.keyContacts) errors.keyContacts=[]\n              if (!errors.keyContacts[index] ) errors.keyContacts[index] = {}\n              errors.keyContacts[index].description = 'Please provide contact description'\n            }\n\n            if(!contact.phone && !contact.email){\n              if (!errors.keyContacts) errors.keyContacts=[]\n              if (!errors.keyContacts[index] ) errors.keyContacts[index] = {}\n\n              errors.keyContacts[index].phone = 'At least a phone or a email is required'\n              errors.keyContacts[index].email = 'At least a phone or a email is required'\n            }\n\n            if(contact.email){\n              if(validateEmail(contact.email)){\n                if (!errors.keyContacts) errors.keyContacts=[]\n                if (!errors.keyContacts[index] ) errors.keyContacts[index] = {}\n                errors.keyContacts[index].email = 'Invalid Email'\n              }\n            }\n\n          }\n          )\n        }\n\n        return errors\n      }\n      }\n      onSubmit= {(values) => {\n\n        addContacts({ variables:{ ...values, costumer: costumer.id } })\n      }}>\n\n      {({ handleSubmit ,values }) =>\n\n        <Modal\n          open= {open}\n          closeOnEscape= {false}\n          closeOnDimmerClick={false}\n        >\n          <Modal.Header>Select Stations to Add</Modal.Header>\n          <Modal.Content>\n            <Form>\n              <FieldArray  name={'keyContacts'}>\n                {({ push,remove }) => (<>\n                  { values.keyContacts.length > 0 && values.keyContacts.map((contact,index) => <Fragment key ={index}>\n                    <Form.Group style={{ margin:0 }} widths='13' ><InputField name={`keyContacts[${index}].description`} label='Description' /><InputField name={`keyContacts[${index}].phone`} label='Phone' /><InputField name={`keyContacts[${index}].email`} label='Email' />\n                      {index !== 0 &&\n                     <Icon\n                       link\n                       name =\"cancel\"\n                       color='red'\n                       onClick={ () => remove(index)\n                       }/>}\n                    </Form.Group>\n                  </Fragment>\n                  )}\n                  <Button\n                    style= {{ marginTop:'1rem' }}\n                    type='button'\n                    circular\n                    icon\n                    size ='mini'\n                    primary\n                    onClick={ () => push ({ description:'',phone:'' ,email:'' })\n                    }>\n                    <Icon name=\"plus\"/>\n                  </Button>\n                </>)}\n              </FieldArray>\n            </Form>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button type='submit' positive onClick= { (e) => {\n              e.preventDefault()\n              handleSubmit()\n            }\n            }> Add </Button>\n            <Button type='button' negative onClick = {() => setOpen(false)}> Cancel </Button>\n          </Modal.Actions>\n        </Modal>}\n\n    </Formik>\n\n\n\n\n  )\n\n\n}\n\nexport default AddContactModal","import React from 'react'\nimport { Form, Input, Dropdown, Segment, Header, List, Label } from 'semantic-ui-react'\nimport { TextAreaField } from '../StationReportPage/NewReportForm/FormFields'\nimport { useField, useFormikContext } from 'formik'\nimport _ from 'lodash'\n\nexport const InputField = ({ ...props }) => {\n  const [field, meta] = useField(props)\n  return (\n    <Form.Field>\n      <label>{props.inputlabel }</label>\n      <Input  {...field} {...props}  error= {meta.touched && meta.error} />\n    </Form.Field>\n  )\n\n}\n\n\nexport const RemarkField = ({ name }) => {\n  const { getFieldProps } = useFormikContext()\n  const remarkTitle = getFieldProps(`${name}.title`).value\n  const remarkDate = getFieldProps(`${name}.date`).value\n  const remarkBy = getFieldProps(`${name}.by`).value\n  const remarkText = getFieldProps(`${name}.text`).value\n  const remarkEdit = getFieldProps(`${name}.edit`).value\n\n  if (!remarkTitle || remarkTitle === 'Add Clearification')\n  {\n    return (\n      <Segment basic>\n        {remarkTitle &&\n        <Header as ='h5'>\n          {remarkTitle === 'Add Clearification'&& 'Clearification Added' }\n          <Header.Subheader>by {remarkBy} on {remarkDate}</Header.Subheader>\n        </Header>\n        }\n        <TextAreaField name={`${name}.text`}></TextAreaField>\n      </Segment>\n    )\n  }\n\n  return (\n    <Segment>\n      <Header as ='h5'>\n        {remarkTitle}\n        <Header.Subheader>by {remarkBy} on {remarkDate}</Header.Subheader>\n      </Header>\n      {remarkTitle && <p>{remarkText}</p>}\n      {remarkEdit && <List>\n        {_.map(remarkEdit,(val,k) =>\n          <List.Item key={k}>\n            {k[0].toUpperCase() + k.substring(1).replace(/([a-z])([A-Z])/g, '$1 $2')}:\n            <span style={{ color:'red',fontStyle: 'italic', textDecoration: 'line-through' }}> {val.split('to')[0]} </span>\n            to\n            <span style={{ color:'green' }}> {val.split('to')[1]} </span>\n          </List.Item> )}\n\n      </List> }\n\n    </Segment>\n  )\n\n}\n\nexport const DropDownField = ({ label,...props }) => {\n  const{ setFieldValue }= useFormikContext()\n  const [field,meta] = useField(props)\n  return (\n    <Form.Field error= { meta.touched && meta.error?true:false}>\n      {!props.labeled && <label>{label }</label>}\n      <Input\n        label= {props.labeled? label :false}\n        input = {<Dropdown {...field} {...props}\n          style= {\n            props.labeled? { margin: 0,\n              borderTopLeftRadius: 0,\n              borderBottomLeftRadius: 0 }:{}\n          }\n          onChange = {props.onChange? props.onChange: (e,{ value }) => {\n            setFieldValue(props.name,value)\n          }}\n        ></Dropdown>}></Input>\n      {meta.touched && meta.error &&\n      <Label pointing prompt>\n        {meta.error}\n      </Label>}\n    </Form.Field>\n  )\n\n}","import { useLazyQuery, useMutation } from '@apollo/client'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { ADD_STATION_TO_COSTUMER } from '../../mutations/costumerMutation'\nimport { forEach } from 'lodash'\nimport { Button, Form, Modal } from 'semantic-ui-react'\nimport { Formik } from 'formik'\nimport { ALL_STATION } from '../../queries/stationQuery'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nimport { NotificationContext } from '../../contexts/NotificationContext'\n\nconst AddStationModal = ({ open ,setOpen ,costumer }) => {\n  const [,dispatch] = useContext(NotificationContext)\n  const[stationOptions,setStationOptions] = useState([])\n  const [loadStations, { loading:stationLoading, data: stationData }] = useLazyQuery(ALL_STATION)\n\n  useEffect(() => {\n    if(stationData && stationData.allStations){\n\n      const existingStationIds = costumer.stations.map(station => station.id)\n      let options = []\n      /**Set station options, do not display if the station already exists for costumer */\n      stationData.allStations.reduce((p,c,i) => {\n        if(c.id && !existingStationIds.includes(c.id)){\n          options.push( { key:i, value: c.id, text:c.location })\n        }\n        return options\n      },[])\n\n\n      setStationOptions(options)\n    }\n\n  },[costumer.stations, stationData])\n\n  const [addStation] = useMutation (ADD_STATION_TO_COSTUMER,{\n    update: (store,{ data:{ addStationsToCostumer } }) => {\n      /**Add costumer information to each station on cache */\n      forEach(addStationsToCostumer.stations, station => {\n        store.modify({\n          id: `Station:${station.id}`,\n          fields:{\n            costumers(existingCostumerRefs, { readField }) {\n              if(existingCostumerRefs.some(ref => readField('id',ref) === addStationsToCostumer.id)){\n                return existingCostumerRefs\n              }\n              return [...existingCostumerRefs, { '__ref':`Costumer:${addStationsToCostumer.id}` }]\n            }\n          }\n        })\n      })\n    },\n    onCompleted: ({ addStationsToCostumer }) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, stations added' ,type: 'SUCCESS' } })\n      setOpen(false)\n    },\n\n    onerror: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to add stations'}<br/> {err.message}</> ,type: 'ERROR' } })\n      setOpen(false)\n    }\n  })\n\n  return(\n\n    <Formik\n      initialValues= {{\n        stations: []\n      }}\n\n      validate = { (values) => {\n        const errors = {}\n        if(!values.stations.length){\n          errors.stations = 'Please select at least one station'\n        }\n\n        return errors\n      }\n      }\n      onSubmit= {(values) => {\n        addStation({ variables:{ ...values, costumer: costumer.id } })\n      }}>\n\n      {({ handleSubmit,setFieldValue,dirty }) =>\n\n        <Modal\n          open= {open}\n          closeOnEscape= {false}\n          closeOnDimmerClick={false}\n        >\n          <Modal.Header>Select Stations to Add</Modal.Header>\n          <Modal.Content>\n            <Form>\n              <DropDownField name='stations' labeled label='Station'\n                placeholder='Select Stations'\n                search\n                loading={stationLoading}\n                selection\n                multiple\n                width='8'\n                options= {stationOptions}\n                onFocus = {() => loadStations()}\n                onChange = {  (e,{ value }) => {\n                  setFieldValue('stations',value)\n                }}\n              >\n              </DropDownField>\n            </Form>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button type='submit' positive onClick= { (e) => {\n              e.preventDefault()\n              handleSubmit()\n            }\n            }> Add </Button>\n            <Button type='button' negative onClick = {() => setOpen(false)}> Cancel </Button>\n          </Modal.Actions>\n\n\n\n\n        </Modal>}\n\n    </Formik>\n\n\n\n\n  )\n\n\n}\n\nexport default AddStationModal","import { useMutation, useQuery } from '@apollo/client'\n\nimport React, { useContext, useEffect, useState } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { Button, Flag, Grid, Header, Icon, Label, Loader, Segment, Table } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport {  DELETE_COSTUMER, REMOVE_AIRCRFAT, REMOVE_CONTACT, REMOVE_COSTUMER_FROM_STATION } from '../../mutations/costumerMutation'\nimport { GET_COSTUMER } from '../../queries/costumerQuey'\nimport ConfirmModal from '../ConfirmModal'\nimport AddAircraftModal from './AddAircraftModal'\nimport AddContactModal from './AddContactModal'\nimport AddStationModal from './AddStationModal'\n\nconst CostumerInfo = ({ costumerData ,costumerId }) => {\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const [,dispatch]= useContext(NotificationContext)\n  const [data,setData] = useState('')\n  const [addStationModalOpen,setAddStationModalOpen] = useState(false)\n  const [addAircraftModalOpen,setAddAircraftModalOpen] = useState(false)\n  const [addContactModalOpen,setAddContactModalOpen] = useState(false)\n\n  const params = useParams()\n  const history = useHistory()\n  const { loading: costumerLoading ,error: costumerError, data: fetchedData } = useQuery(GET_COSTUMER,{ variables:{ id: params.costumerId ||costumerId }, skip: costumerData })\n\n  const [removeFromStation] = useMutation(REMOVE_COSTUMER_FROM_STATION )\n  const [deleteCostumer] = useMutation(DELETE_COSTUMER, {\n    update: (store) => {\n      store.evict({ //Remove costumer from all datas\n        id: `Costumer:${data.id}`\n      })\n    },\n    onCompleted: () => {\n      history.goBack()\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, costumer ${data.name} deleted` ,type: 'SUCCESS' } })\n\n    },\n\n    onerror: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, failed to delete  costumer ${data.name}`}<br/> {err.message}</> ,type: 'ERROR' } })\n\n    }\n  })\n  const [removeContact] = useMutation( REMOVE_CONTACT )\n  const [removeAircraftMut] = useMutation( REMOVE_AIRCRFAT )\n\n\n  const removeContactFromStation = ({ id, description }) => {\n    removeContact({\n      variables:{ id,costumer: data.id },\n      update: (store) => {\n        console.log(id)\n        store.evict({\n          id: `Contact:${id}`\n        })\n      }\n    }).then(\n      res =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, Contact ${description} removed` ,type: 'SUCCESS' } }),\n      err =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, Cannot remove Contact ${description}`}<br/> {err.message}</> ,type: 'ERROR' } }),\n    )\n  }\n\n  const removeAircraft = ({ id, registration }) => {\n    removeAircraftMut({\n      variables:{ id },\n      update: (store) => {\n        store.evict({\n          id: `Aircraft:${id}`\n        })\n      }\n    }).then(\n      res =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, Aircraft ${registration} removed` ,type: 'SUCCESS' } }),\n      err =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, Cannot remove Aircrfat ${registration}`}<br/> {err.message}</> ,type: 'ERROR' } }),\n    )\n  }\n\n  const removeCostumerFromStation = ({ variables ,location  }) => {\n    removeFromStation({\n      variables: variables,\n      update: (store) => {\n        store.modify({\n          id: `Station:${variables.station}`,\n          fields: { // Remove costumer from station\n            costumers(existingCostumerRefs, { readField }) {\n              return existingCostumerRefs.filter(\n                costumersRef =>  data.id !== readField('id', costumersRef)\n              )\n            }\n          },\n        },\n        )\n\n        store.modify(\n          {\n            id: `Costumer:${data.id}`,\n            fields: { // Remove station from costumer\n              stations(existingStationRefs, { readField }) {\n\n                return existingStationRefs.filter(\n                  stationsRef => {\n                    console.log(variables.station, readField('id', stationsRef), variables.stationId !== readField('id', stationsRef))\n                    return variables.station !== readField('id', stationsRef)}\n                )\n              }\n            },\n\n          }\n        )\n      } }).then(\n      res =>   {\n        dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, Station ${location? location:''} deassigned for costumer ${data.name}` ,type: 'SUCCESS' } })\n        history.goBack()\n      },\n      err =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, Cannot deassign costumer ${data.name} ${location?'and '+location : ''}`}<br/> {err.message}</> ,type: 'ERROR' } }),\n    )\n  }\n\n\n\n\n\n  const [confirm,setConfirm] = useState({ title:'',fn: () => {} })\n  const [confirmModalOpen, setConfirmModalOpen] = useState(false)\n\n  useEffect(() => {\n    if(costumerData){\n      setData(costumerData)\n    }\n    if(fetchedData){\n      setData(fetchedData.getCostumer)\n    }\n\n  },[costumerData, fetchedData, setData])\n\n  if(!data){\n    return null\n  }\n\n  if(costumerLoading){\n    return <Segment basic ><Loader active> Adding New Costumer</Loader></Segment>\n  }\n\n  if(costumerError){\n    return <Header as='h4'>Something went wrong</Header>\n  }\n\n  return (\n    <>\n      <Header as='h3'>{data.name}</Header>\n      <Grid padded>\n        <Grid.Row columns='3'>\n          <Grid.Column>\n            <Header as= 'h5'> Aircrafts </Header>\n            <Segment>\n\n              {data.aircrafts && data.aircrafts.map((aircraft,index) =>\n                <Segment key={index} compact style={{ display:'inline-flex', margin:'0.1rem' , width:'4.3rem' }}>\n                  {  staff && staff.permission.admin  &&\n                  <Label floating  size='tiny' style={{ backgroundColor:'transparent' }}>\n                    <Icon link  name='cancel' onClick = {() => {\n                      setConfirm({ title: `Are you sure you want to  deassign Aircraft ${aircraft.registration} from this Costumer ?`, fn: () => {\n                        removeAircraft({ id:aircraft.id, registration: aircraft.registration })\n                      } })\n                      setConfirmModalOpen(true)\n\n                    }}></Icon>\n                  </Label>}\n                  {aircraft.registration}\n                </Segment>)}\n\n              {\n                staff && staff.permission.admin  &&\n                <Button style={{ marginTop:'1rem', display:'block' }}circular icon primary size='small' onClick= {() => setAddAircraftModalOpen(true)}><Icon name='add'/></Button>\n              }\n            </Segment>\n\n\n          </Grid.Column>\n\n          <Grid.Column>\n            <Header as= 'h5'> Key Contacts </Header>\n            <Table>\n              <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell> Description </Table.HeaderCell>\n                  <Table.HeaderCell> Phone </Table.HeaderCell>\n                  <Table.HeaderCell> Email </Table.HeaderCell>\n                  <Table.HeaderCell> </Table.HeaderCell>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {\n                  data.keyContacts && data.keyContacts.length > 0 && data.keyContacts.map((contact,index) =>\n                    <Table.Row key={index}>\n                      <Table.Cell>\n                        {contact.description}\n                      </Table.Cell>\n                      <Table.Cell>\n                        {contact.phone}\n                      </Table.Cell>\n                      <Table.Cell>\n                        {contact.email}\n                      </Table.Cell>\n                      { staff && (staff.permission.admin || staff.permission.station.edit.includes (params.stationId)) &&\n                          <Table.Cell>\n                            <Icon link name='cancel' onClick ={() => {\n                              setConfirm({ title: `Are you sure you want to  remove contact ${contact.description} from this Costumer ?`, fn: () => {\n                                removeContactFromStation({ id: contact.id ,description: contact.description })\n                              } })\n                              setConfirmModalOpen(true)\n\n                            }}></Icon>\n                          </Table.Cell>\n                      }\n                    </Table.Row>)\n                }\n              </Table.Body>\n              { staff && (staff.permission.admin || staff.permission.station.edit.includes (params.stationId)) &&\n              <Table.Footer>\n                <Table.Row>\n                  <Table.Cell>\n                    <Button circular icon primary size='small'  onClick= {() => setAddContactModalOpen(true)} ><Icon name='add'/></Button>\n                  </Table.Cell>\n                </Table.Row>\n              </Table.Footer>\n              }\n            </Table>\n\n\n          </Grid.Column>\n\n\n          <Grid.Column >\n            <Header as= 'h5'> Stations </Header>\n            <Table padded>\n              <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell> Station </Table.HeaderCell>\n                  <Table.HeaderCell></Table.HeaderCell>\n                  <Table.HeaderCell></Table.HeaderCell>\n                </Table.Row>\n              </Table.Header>\n              <Table.Body>\n                {\n                  data.stations && data.stations.length > 0 && data.stations.map((station,index) =>\n                    <Table.Row key={index}>\n                      <Table.Cell>\n                        {station.location}\n                      </Table.Cell>\n                      <Table.Cell>\n                        {`${station.address.city} , ${station.address.country}`} <Flag name={station.address.country && station.address.country.toLowerCase()}></Flag>\n                      </Table.Cell>\n                      {staff && (staff.permission.admin || staff.permission.station.edit.includes (params.stationId)) &&\n                        <Table.Cell>\n                          { params.stationId !== station.id &&\n                          <Icon link   name='cancel' onClick={() => {\n                            setConfirm({ title: `Are you sure you want to  remove station ${station.location} from this Costumer ?`, fn: () => {\n                              removeCostumerFromStation({ variables:{ station: station.id, costumer: data.id }, location: station.location })\n                            } })\n                            setConfirmModalOpen(true)\n                          }}/>}\n                        </Table.Cell>}\n                    </Table.Row>)\n                }\n              </Table.Body>\n              { (staff && (staff.permission.admin || staff.permission.station.edit.includes (params.stationId))) &&\n             <Table.Footer>\n               <Table.Row>\n                 <Table.Cell>\n                   <Button circular icon primary size='small' onClick= {() => setAddStationModalOpen(true)}><Icon name='add'/></Button>\n                 </Table.Cell>\n               </Table.Row>\n             </Table.Footer>}\n            </Table>\n\n          </Grid.Column>\n\n        </Grid.Row>\n\n        <Grid.Row>\n          {params.stationId && (staff && (staff.permission.admin || staff.permission.station.edit.map(station => station._id).includes (params.stationId))) &&\n          <Button negative\n            onClick={() => {\n              setConfirm({ title: `Are you sure you want to  remove costumer ${data.name} from this station ?`, fn: () => {\n                removeCostumerFromStation({ variables:{ station: params.stationId, costumer: data.id } })\n              } })\n              setConfirmModalOpen(true)\n            }}> Remove from Station </Button>\n          }\n\n          {!params.stationId && staff && staff.permission.admin &&\n          <Button icon negative\n            onClick={() => {\n              setConfirm({ title: `Are you sure you want to  delete costumer ${data.name} ?` , fn: () => {\n                deleteCostumer({ variables:{ costumer: data.id } })\n\n              } })\n              setConfirmModalOpen(true)\n            }}> <Icon name='trash'/> Delete Costumer </Button>}\n        </Grid.Row>\n      </Grid>\n\n\n      {confirmModalOpen &&\n        <ConfirmModal open= {confirmModalOpen} confirm= {confirm} setOpen= {setConfirmModalOpen} ></ConfirmModal>\n      }\n\n\n      {\n        addStationModalOpen &&\n      <AddStationModal open={addStationModalOpen} setOpen = {setAddStationModalOpen} costumer= {data}></AddStationModal>\n      }\n\n      {\n        addAircraftModalOpen &&\n      <AddAircraftModal open={addAircraftModalOpen} setOpen = {setAddAircraftModalOpen} costumer= {data}></AddAircraftModal>\n      }\n\n      {\n        addContactModalOpen &&\n        <AddContactModal open={ addContactModalOpen} setOpen = {setAddContactModalOpen} costumer= {data}></AddContactModal>\n      }\n\n    </>\n\n\n\n  )\n\n}\n\nexport default CostumerInfo\n\n","import { useLazyQuery, useMutation } from '@apollo/client'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { forEach } from 'lodash'\nimport { Button, Form, Modal } from 'semantic-ui-react'\nimport { Formik } from 'formik'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { ALL_COSTUMERS } from '../../queries/costumerQuey'\nimport { ASSIGN_COSTUMERS } from '../../mutations/stationMutation'\n\nconst AssignCostumersModal = ({ open ,setOpen ,station }) => {\n  const [,dispatch] = useContext(NotificationContext)\n  const [costumerList,setCostumerList] = useState([])\n\n  const[loadCostumers, { loading: costumerLoading ,data:costumerData }] = useLazyQuery(ALL_COSTUMERS)\n\n  useEffect(() => {\n    if(costumerData && costumerData.allCostumers){\n\n      const currentCostumers = station.costumers.map(costumer => costumer.id)\n\n      const costumerOptions =costumerData.allCostumers.map((costumer,index) => {\n        return { key:index, value: costumer.id, text: costumer.name }\n      } )\n      setCostumerList(costumerOptions.filter( option => !currentCostumers.includes( option.value)))\n    }\n\n\n  },[costumerData, station.costumers])\n\n  const [addCostumers] = useMutation (ASSIGN_COSTUMERS,{\n    update: (store,{ data:{ assignCostumers } }) => {\n      /**Add station information to each selected costumer on cache */\n      forEach(assignCostumers.costumers, costumer => {\n        store.modify({\n          id: `Costumer:${costumer.id}`,\n          fields:{\n            stations(existingStationsRefs, { readField }) {\n              if(existingStationsRefs.some(ref => readField('id',ref) === station.id)){\n                return existingStationsRefs\n              }\n              return [...existingStationsRefs, { '__ref':`Sation:${station.id}` }]\n            }\n          }\n        })\n      },\n      )\n    },\n    onCompleted: ( response) => {\n      console.log(response)\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, costumers assigned to station' ,type: 'SUCCESS' } })\n      setOpen(false)\n    },\n\n    onerror: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to assign costumers'}<br/> {err.message}</> ,type: 'ERROR' } })\n      setOpen(false)\n    }\n  })\n\n  return(\n\n    <Formik\n      initialValues= {{\n        costumers: []\n      }}\n\n      validate = { (values) => {\n        const errors = {}\n        if(!values.costumers.length){\n          errors.costumers = 'Please select at least one costumer'\n        }\n\n        return errors\n      }\n      }\n      onSubmit= {(values) => {\n        addCostumers({ variables:{ ...values, stationId: station.id } })\n      }}>\n\n      {({ handleSubmit,setFieldValue }) =>\n\n        <Modal\n          open= {open}\n          closeOnEscape= {false}\n          closeOnDimmerClick={false}\n        >\n          <Modal.Header>Select costumers to Assign</Modal.Header>\n          <Modal.Content>\n            <Form>\n              <DropDownField name='costumers' labeled label='Costumers'\n                placeholder='Select Costumers'\n                search\n                loading={costumerLoading}\n                selection\n                multiple\n                width='8'\n                options= {costumerList}\n                onFocus = {() => loadCostumers()}\n                onChange = {  (e,{ value }) => {\n                  setFieldValue('costumers',value)\n                }}\n              >\n              </DropDownField>\n            </Form>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button type='submit' positive onClick= { (e) => {\n              e.preventDefault()\n              handleSubmit()\n            }\n            }> Add </Button>\n            <Button type='button' negative onClick = {() => setOpen(false)}> Cancel </Button>\n          </Modal.Actions>\n        </Modal>}\n\n    </Formik>\n\n\n\n\n  )\n\n\n}\n\nexport default AssignCostumersModal","import { useMutation } from '@apollo/client'\nimport React, { useContext, useState } from 'react'\n\nimport { forEach } from 'lodash'\nimport { Button, Form, Modal } from 'semantic-ui-react'\nimport { Formik } from 'formik'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { ADD_TO_MAILINGLIST } from '../../mutations/stationMutation'\nimport { validateEmail } from '../StationReportPage/NewReportForm/validator'\n\nconst AddMailingListModal = ({ open ,setOpen ,station }) => {\n  const [,dispatch] = useContext(NotificationContext)\n  const [emails,setEmails] = useState([])\n  const [addAircrafts] = useMutation (ADD_TO_MAILINGLIST,{\n    update:(store) => {\n      store.modify({\n        id: `Station:${station.id}`,\n        fields:{\n          mailingList(existingAddresses) {\n\n\n            let newEmails =[]\n\n            forEach(emails, email => {\n              if(!existingAddresses.some(ref => {return ref === email})){\n                newEmails.push(email)\n              }\n            })\n            return [...existingAddresses, ...newEmails]\n          }\n        }\n      })\n    },\n    onCompleted: ({ addAircrafts }) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, emails ${emails.toString()}  added` ,type: 'SUCCESS' } })\n      setOpen(false)\n    },\n\n    onerror: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to add emails'}<br/> {err.message}</> ,type: 'ERROR' } })\n      setOpen(false)\n    }\n  })\n\n  return(\n\n    <Formik\n      initialValues= {{\n        emails: ''\n      }}\n\n      validate = { (values) => {\n\n        const errors = {}\n        if(values.emails.length ){\n          const errEmail =[]\n          forEach(values.emails.split(','), email => {\n            if(validateEmail(email.trim())) errEmail.push(email)\n          })\n\n          if (errEmail.length ){\n            errors.emails = `${errEmail.toString()} Invalid emails`\n          }\n        }else{\n          errors.emails = 'Enter at least one Email'\n        }\n        console.log(errors)\n        return errors\n      }\n      }\n      onSubmit= {(values) => {\n        setEmails(values.emails.split(','))\n        addAircrafts({ variables:{  emails: values.emails.split(','), stationId: station.id } })\n      }}>\n\n      {({ handleSubmit }) =>\n\n        <Modal\n          open= {open}\n          closeOnEscape= {false}\n          closeOnDimmerClick={false}\n        >\n          <Modal.Header>Select Stations to Add</Modal.Header>\n          <Modal.Content>\n            <Form>\n              <InputField name='emails' label='Emails' type='text' width='8' placeholder='Emails separeted by comma \",\"'/>\n            </Form>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button type='submit' positive onClick= { (e) => {\n              e.preventDefault()\n              handleSubmit()\n            }\n            }> Add </Button>\n            <Button type='button' negative onClick = {() => setOpen(false)}> Cancel </Button>\n          </Modal.Actions>\n        </Modal>}\n\n    </Formik>\n\n\n\n\n  )\n\n\n}\n\nexport default AddMailingListModal","import { gql, useMutation } from '@apollo/client'\nimport React, { Fragment, useContext } from 'react'\nimport { forEach } from 'lodash'\nimport { Button, Form, Icon, Modal } from 'semantic-ui-react'\nimport { FieldArray, Formik } from 'formik'\nimport { InputField, TimeInputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { ADD_SHIFTS } from '../../mutations/stationMutation'\n\nconst AddShiftsModal = ({ open ,setOpen ,station }) => {\n  const[,dispatch] = useContext(NotificationContext)\n  const [addShifts] = useMutation (ADD_SHIFTS,{\n    update:(store,{ data: { addShifts } }) => {\n      store.modify({\n        id: `Station:${station.id}`,\n        fields:{\n          shifts(existingShiftsRefs, { readField }) {\n            let newShiftRefs =[]\n\n            forEach(addShifts,(shift) => {\n              if(!existingShiftsRefs.some(ref => readField('id',ref) === shift.id)){\n                newShiftRefs.push(store.writeFragment({\n                  data:shift,\n                  fragment: gql`\n                fragment NewShift on ShiftInfo {\n                  id\n                  name\n                  startTime\n                }\n              `\n                }))\n              }\n            })\n            return [...existingShiftsRefs, ...newShiftRefs]\n          }\n        }\n      })\n    },\n    onCompleted: () => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, shifts added' ,type: 'SUCCESS' } })\n      setOpen(false)\n    },\n\n    onerror: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to add shifts'}<br/> {err.message}</> ,type: 'ERROR' } })\n      setOpen(false)\n    }\n\n  })\n\n  return(\n\n    <Formik\n      initialValues= {{\n        shifts: [{ name:'',startTime:'' }]\n      }}\n\n      validate = { (values) => {\n\n        const errors = {}\n        if(values.shifts.length){\n          forEach(values.shifts, (shift,index) => {\n            if(!shift.name){\n              if (!errors.shifts) errors.shifts=[]\n              if (!errors.shifts[index] ) errors.shifts[index] = {}\n              errors.shifts[index].name = 'Please provide shift name'\n            }\n\n            if(!shift.startTime){\n              if (!errors.shifts) errors.shifts=[]\n              if (!errors.shifts[index] ) errors.shifts[index] = {}\n\n              errors.shifts[index].startTime = 'Shift start time is required'\n            }\n\n            if(shift.startTime){\n              if(!shift.startTime.match(/^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/)){\n                if (!errors.shifts) errors.shifts=[]\n                if (!errors.shifts[index] ) errors.shifts[index] = {}\n\n                errors.shifts[index].startTime = 'Shift start should be on format HH:mm'\n              }\n            }\n\n          }\n          )\n        }\n\n        return errors\n      }\n      }\n      onSubmit= {(values) => {\n\n        addShifts({ variables:{ ...values, stationId: station.id } })\n      }}>\n\n      {({ handleSubmit ,values }) =>\n\n        <Modal\n          open= {open}\n          closeOnEscape= {false}\n          closeOnDimmerClick={false}\n        >\n          <Modal.Header>Select Stations to Add</Modal.Header>\n          <Modal.Content>\n            <Form>\n              <FieldArray  name={'shifts'}>\n                {({ push,remove }) => (<>\n                  { values.shifts.length > 0 && values.shifts.map((shift,index) =>\n                    <Fragment key ={index}>\n                      <Form.Group style={{ margin:0 }} widths='13' >\n                        <InputField name={`shifts[${index}].name`} placeholder='Shift Name' />\n                        <TimeInputField name={`shifts[${index}].startTime`} label placeholder='Start Time'></TimeInputField>\n\n                        {index !== 0 &&\n                     <Icon\n                       link\n                       name =\"cancel\"\n                       color='red'\n                       onClick={ () => remove(index)\n                       }/>}\n                      </Form.Group>\n                    </Fragment>\n                  )}\n                  <Button\n                    style= {{ marginTop:'1rem' }}\n                    type='button'\n                    circular\n                    icon\n                    size ='mini'\n                    primary\n                    onClick={ () => push ({ name:'',startTime:'' })\n                    }>\n                    <Icon name=\"plus\"/>\n                  </Button>\n                </>)}\n              </FieldArray>\n            </Form>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button type='submit' positive onClick= { (e) => {\n              e.preventDefault()\n              handleSubmit()\n            }\n            }> Add </Button>\n            <Button type='button' negative onClick = {() => setOpen(false)}> Cancel </Button>\n          </Modal.Actions>\n        </Modal>}\n\n    </Formik>\n\n\n\n\n  )\n\n\n}\n\nexport default AddShiftsModal","import { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useContext } from 'react'\nimport { Button, Dimmer, Form, Grid, Loader, Modal,ModalContent, ModalHeader } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { CHANGE_STATION_KEY } from '../../mutations/stationMutation'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nconst ResetStationKeyModal = (props) => {\n\n  const [,dispatch] = useContext(NotificationContext)\n  const [changekey,{ loading }] = useMutation(CHANGE_STATION_KEY,{\n    onCompleted: () => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, key reset ' ,type: 'SUCCESS' } })\n      props.setOpen(false)\n    },\n\n    onError: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to change key'}<br/> {err.message}</> ,type: 'ERROR' } })\n      props.setOpen(false)\n    }\n  })\n\n\n  const initVal = {\n    newKey:'',\n    confirmKey:''\n  }\n\n  return(\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {props.open}\n      onClose= {() =>  props.setOpen(false)}\n      onOpen= {() => props.setOpen (true)}\n    >\n      <ModalHeader>StationKey Reset</ModalHeader>\n      <ModalContent>\n\n        {loading &&\n            <Dimmer active>\n              Updating key\n              <Loader />\n            </Dimmer>\n        }\n\n        <Formik\n          initialValues = { initVal }\n          validate= {(values) =>\n          {\n            const errors = {}\n\n\n            if(!values.newKey ){\n              errors.newKey = 'New key cannot be empty'\n            }\n\n            if(values.newKey !== values.confirmKey){\n              errors.confirmKey = 'New key and confirm key must match'\n            }\n\n            return errors\n          }\n\n          }\n          onSubmit= {(values) => {\n\n            console.log('Calles')\n            changekey({ variables:{ stationId:props.station.id, stationKey: values.newKey } })\n\n          }}\n        >\n          {({ handleSubmit,dirty ,errors }) => <Form style={{ marginBottom:'5rem' }} onSubmit= {handleSubmit}>\n            <Grid>\n              <Grid.Row>\n                <InputField name='newKey' label='New key' type='password'/>\n              </Grid.Row>\n              <Grid.Row>\n                <InputField  name='confirmKey' label='Confirm key' type='password'/>\n              </Grid.Row>\n            </Grid>\n            {dirty && _.isEmpty(errors) &&\n            <Button type='submit' style={{ marginTop: '1rem' }} positive>Change key</Button>}\n\n          </Form>\n          }\n        </Formik></ModalContent>\n    </Modal>\n\n  )\n}\n\nexport default ResetStationKeyModal","import { useMutation, useQuery } from '@apollo/client'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { Button, Form, Grid, Header, Icon, Segment, Table } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { DELETE_STATION, REMOVE_FROM_MAILINGLIST, REMOVE_SHIFTS } from '../../mutations/stationMutation'\nimport { GET_STATION } from '../../queries/stationQuery'\nimport ConfirmModal from '../ConfirmModal'\nimport AddMailingListModal from './AddMailingListModal'\nimport AddShiftsModal from './AddShiftsModal'\nimport ResetStationKeyModal from './ResetStationKeyModal'\n\nconst Settings = (props) => {\n  const loggedInStaff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const [,dispatch] = useContext(NotificationContext)\n  const[confirmModalOpen, setConfirmModalOpen] = useState(false)\n  const[addShiftsModalOpen,setAddShiftsModalOpen] = useState(false)\n  const[addMailingListModalOpen,setAddMailingListModalOpen] = useState(false)\n  const[resetStationKeyModalOpen,setResetStationKeyModalOpen] = useState(false)\n\n  const [confirm,setConfirm] = useState({ title:'',fn:() => {} })\n  const [stationData,setStationData ] = useState(props.data)\n  const history = useHistory()\n  let stationId = useParams().stationId\n\n  const { data } = useQuery(GET_STATION,{\n    variables:{ id:stationId },\n    onerror: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, could not retrive Station'}<br/> {err.message}</> ,type: 'ERROR' } })\n    } })\n\n  useEffect(() => {\n    if(data && data.getStation){\n      setStationData(data.getStation)\n    }\n  }, [data])\n\n  /**Delate Station Mutation */\n  const [deleteStation] = useMutation(DELETE_STATION,{\n    variables:{ stationId: stationId },\n    update: (store) => {\n      store.evict({\n        id: `Station:${stationId}`\n      })\n    },\n    onCompleted: ({ addContact }) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Station Deleted' ,type: 'SUCCESS' } })\n      history.push('/Manage/AllStations')\n    },\n    onerror: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to delete Station'}<br/> {err.message}</> ,type: 'ERROR' } })\n    }\n  })\n\n  /**Delete from mailinglist mutaiton */\n\n  const [deleteFromMailingList] = useMutation(REMOVE_FROM_MAILINGLIST)\n  const deleteFromMailingMutation = (email) => {\n    deleteFromMailingList({\n      variables:{ email: email, stationId: stationId },\n      update:(store) => {\n        store.modify({\n          id: `Station:${stationId}`,\n          fields:{\n            mailingList(existingEmails){\n              return [...existingEmails.filter(item => item !== email )]\n            }\n          }\n        })\n      }\n\n    }).then(\n      res => dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, ${email} removed from mailing list `  ,type: 'SUCCESS' } }),\n      err => dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Error, coluld not remove email' ,type: 'ERROR' } })\n\n    )\n  }\n\n  /**Delete shift mutaiton */\n\n  const [deleteShift] = useMutation(REMOVE_SHIFTS)\n  const removeShift = (id,shiftName) => {\n    deleteShift({\n      variables:{ id: id, stationId: stationId },\n      update:(store) => {\n        store.evict({\n          id: `ShiftInfo:${id}`\n        })\n      }\n    }).then(\n      res => dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, ${shiftName} shift removed from station `  ,type: 'SUCCESS' } }),\n      err => dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Error, coluld not remove shift' ,type: 'ERROR' } })\n\n    )\n  }\n\n  return (\n    <>\n      <Grid padded>\n        <Grid.Row>\n          <Segment basic attached>\n            <Header as ='h5'>Mailing List\n              <Header.Subheader>Below emails will receive the shift reports on submit.</Header.Subheader></Header>\n            <Table attached  compact collapsing padded>\n              <Table.Body>\n                {stationData && stationData.mailingList.map((email,i) =>\n                  <Table.Row key={i}>\n                    <Table.Cell>{email}</Table.Cell>\n                    <Table.Cell><Icon link name='trash'\n                      onClick={\n                        () => {\n                          setConfirmModalOpen(true)\n                          setConfirm({ title:' Are you sure you want to delete this email' , fn :() => deleteFromMailingMutation(email) }) }}\n                    ></Icon></Table.Cell>\n                  </Table.Row>\n                )}\n              </Table.Body>\n            </Table>\n            <Form.Button style={{ marginTop:'0.5rem' }}primary size='tiny' onClick={() => setAddMailingListModalOpen(true)}> Add More </Form.Button>\n          </Segment>\n          <Segment basic attached>\n            <Header as ='h5'>Shifts\n              <Header.Subheader>Below are the working shifts for this station. </Header.Subheader></Header>\n            <Table attached  compact collapsing padded>\n              <Table.Body>\n                {stationData && stationData.shifts.map((shift,i) =>\n                  <Table.Row key={i}>\n                    <Table.Cell>{shift.name } <strong>starts at</strong> {shift.startTime}</Table.Cell>\n                    <Table.Cell><Icon link name='trash'\n                      onClick={\n                        () => {\n                          setConfirmModalOpen(true)\n                          setConfirm({ title:' Are you sure you want to remove this shift' , fn :() => removeShift(shift.id, shift.name) }) }}></Icon></Table.Cell>\n                  </Table.Row>\n                )}\n              </Table.Body>\n            </Table>\n            <Form.Button style={{ marginTop:'0.5rem' }}primary size='tiny' onClick= {() => setAddShiftsModalOpen(true)}> Add More </Form.Button>\n          </Segment>\n          <Segment attached>\n            <Header as ='h5'>Staff signing mehtods\n              <Header.Subheader>Staff can sign and report working hours using following Methods </Header.Subheader></Header>\n            <p>This feature is not Implmented yet. By default, user should sign with his credentials.</p>\n          </Segment>\n          <Segment attached>\n            <Button\n              primary\n              onClick={\n                () => {\n                  setResetStationKeyModalOpen(true)}}> Reset station key </Button>\n          </Segment>\n\n        </Grid.Row>\n\n      </Grid>\n      {\n        loggedInStaff.permission.admin && <Button\n          negative\n          onClick={\n            () => {\n              setConfirmModalOpen(true)\n              setConfirm({ title:' Are you sure you want to delete this station' , fn :() => deleteStation() }) }}> DELETE STATION </Button>}\n      {confirmModalOpen &&\n        <ConfirmModal open= {confirmModalOpen} confirm= {confirm} setOpen= {setConfirmModalOpen} ></ConfirmModal>\n      }\n\n      {addShiftsModalOpen &&\n        <AddShiftsModal station= {stationData} open= {addShiftsModalOpen} setOpen= {setAddShiftsModalOpen}></AddShiftsModal>\n      }\n\n      {addMailingListModalOpen &&\n        <AddMailingListModal station= {stationData} open= {addMailingListModalOpen} setOpen= {setAddMailingListModalOpen}></AddMailingListModal>\n      }\n\n      {resetStationKeyModalOpen &&\n        <ResetStationKeyModal station= {stationData} open= {resetStationKeyModalOpen} setOpen= {setResetStationKeyModalOpen}></ResetStationKeyModal>\n      }\n    </>\n  )\n\n\n}\nexport default Settings","import React, { useState } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { Menu } from 'semantic-ui-react'\n\nconst StationMenu = ({ station ,activeItem, setActiveItem ,setActiveCostumer }) => {\n  const history = useHistory()\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const location = useLocation()\n\n  const navigatePath = (page) => {\n    const aar = location.pathname.split('/').filter(path => path !== '')\n\n    const navPath = aar.reduce((p,c,i) => {\n      if(c === activeItem || aar.length- 1 === i){ //If the current item on iteration is current page exit reduce\n        aar.splice(1)\n        return p\n      }\n      return p+'/'+c\n    },'')\n\n    return navPath+'/'+page\n  }\n\n  const handleMenuClick = (e, { name }) => {\n    setActiveItem(name)\n    /**Reset the costumer page back to list mode */\n    setActiveCostumer('')\n    /**If the stationInfo is being viewed from shiftRporting page then url navigation is disabled so we don't push aciveitem*/\n    if(activeItem !== name && staff){\n      history.push(navigatePath(name))\n    }\n\n  }\n  return (\n    <Menu pointing secondary >\n      <Menu.Item header>{station.location}</Menu.Item>\n      <Menu.Item\n        position='right'\n        name='BasicInfo'\n        active = {activeItem === 'BasicInfo'}\n        onClick={handleMenuClick}\n      />\n\n      <Menu.Item\n        name='Procedures'\n        active = {activeItem === 'Procedures'}\n        onClick={handleMenuClick}\n      />\n\n      <Menu.Item\n        name='Costumers'\n        active = {activeItem === 'Costumers'}\n        onClick={handleMenuClick}\n      />\n\n      {staff && (staff.permission.admin || staff.permission.station.edit.map(station => station._id).includes(station.id) ) &&\n      <Menu.Item\n        name='Settings'\n        active = {activeItem === 'Settings'}\n        onClick={handleMenuClick}\n      />}\n    </Menu>\n\n  )}\n\nexport default StationMenu","import { useQuery } from '@apollo/client'\nimport React, { Fragment, useEffect, useState } from 'react'\nimport { Link, useHistory, useLocation, useParams } from 'react-router-dom'\nimport { Breadcrumb, BreadcrumbDivider, BreadcrumbSection, Button, Card, Flag, Grid, Header, Icon, Loader, Segment, Table } from 'semantic-ui-react'\nimport { GET_STATION } from '../../queries/stationQuery'\nimport { formatDate } from '../../utils/DateHelper'\nimport CostumerInfo from '../CostumerInfo'\nimport AssignCostumersModal from './AssignCostumersModal'\nimport Settings from './Settings'\nimport StationMenu from './stationMenu'\n\nconst StationInfo = (props) => {\n  const [stationData, setStationData] = useState('')\n  const [activeItem,setActiveItem] = useState('BasicInfo')\n  const [activeCostumer,setActiveCostumer] = useState('')\n  const [assignCostumerModalOpen, setAssignCostumerModalOpen] = useState(false)\n  const history = useHistory()\n  const location = useLocation()\n  const locationPaths = location.pathname && location.pathname.split('/').filter(path => path)\n\n  const params = useParams()\n\n  useEffect(() => {\n    if(params.page){\n      setActiveItem(params.page)\n    }\n  },[params])\n\n  let stationId = useParams().stationId\n\n  /** If stationId is passed as props then passed stationId should have precedence over params */\n  if(props.stationId){\n    stationId = props.stationId\n  }\n\n  const loggedInStaff = JSON.parse( sessionStorage.getItem('staffKey'))\n\n  const { loading,data } = useQuery(GET_STATION, {\n    variables: { id: stationId },\n    skip: !stationId,\n  })\n\n  useEffect (() => {\n    if(data) {\n      setStationData(data.getStation)\n    }\n  },[data])\n\n  /**Gets bredcrumb item link\n   * @param {Int} index - indexNumber of current item on fullpath\n   */\n  const getBreadCrumbLink = (index) => {\n    const arr = [...locationPaths]\n    const link = arr.reduce((p,c,i) => {\n      if(i > index){ // stop at current page\n        arr.splice(1)\n        return p\n      }\n      return p+'/'+c\n    },'')\n\n    return link\n\n  }\n\n  if(!stationId || !stationData || loading ){\n    return(\n      <Segment basic>\n        <Loader active>Loading Station</Loader>\n      </Segment>\n    )\n\n  }\n\n  return (\n    <>\n      { loggedInStaff &&\n        <Breadcrumb>\n          {locationPaths.map((path,index) => {\n            if(index === 0) { //Skip for base page\n              return ''\n            }\n            return (\n              <Fragment key={index}>\n                <BreadcrumbSection\n                  active= {index === locationPaths.length-1  }\n                  as={index < locationPaths.length-1?Link:''} //as Link previous Page\n                  to ={ getBreadCrumbLink(index)}\n                >\n                  {index===2 && stationData.location}\n                  {index===4 && locationPaths[index-1].toLowerCase() === 'costumers' && //If the path is costumerId then display costumer name else it must be procedure, display procdure id\n                 stationData.costumers.filter(costumer => costumer.id === path)[0] && stationData.costumers.filter(costumer => costumer.id === path)[0].name\n                  }\n                  {\n                    index !== 2 && index !== 4 &&\n                  path\n                  }\n\n                </BreadcrumbSection>\n                { index < locationPaths.length-1 &&\n              <BreadcrumbDivider></BreadcrumbDivider>}\n              </Fragment>\n            )\n          })}\n        </Breadcrumb>\n      }\n\n      <StationMenu station= {stationData} activeItem ={activeItem} setActiveItem= {setActiveItem} setActiveCostumer ={setActiveCostumer}> </StationMenu>\n      {activeItem === 'BasicInfo' &&\n        <Grid padded>\n          <Grid.Row columns='4'>\n            <Grid.Column >\n              <Header as ='h4' >Address:\n                <Header.Subheader>{stationData.address.street }<br/>\n                  {stationData.address.postcode }{stationData.address.city}<br/>\n                  {stationData.address.country} <Flag name={stationData.address.country.toLowerCase()}></Flag></Header.Subheader>\n              </Header>\n            </Grid.Column>\n            <Grid.Column>\n              <Header as ='h4' >Contact:\n                <Header.Subheader><strong>Email: </strong> {stationData.email}<br/>\n                  <strong>Phone: </strong>\n                  {stationData.phone.reduce((p,c) => p + ' / ' + c)}</Header.Subheader>\n              </Header>\n            </Grid.Column>\n            <Grid.Column>\n              <Header as ='h4' >Shifts:\n                {stationData.shifts.map((shift,i) => <Header.Subheader key={i}> {shift.name} <strong> Starts at: </strong> {shift.startTime}<br/></Header.Subheader> )}\n              </Header>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <Header as ='h4'>Current Staffs:</Header>\n              <Table collapsing>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell > Name </Table.HeaderCell>\n                    <Table.HeaderCell> Last Active At:  </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {stationData.staffList.length > 0 && stationData.staffList.map((staff,i ) => <Table.Row key={i}>\n                    <Table.Cell>\n                      {\n                        loggedInStaff && loggedInStaff.permission.staff.view?\n                          <Link to={`/Manage/AllStaffs/${staff.id}/Profile`}>{staff.name}</Link>: staff.name\n                      }\n                    </Table.Cell>\n                    <Table.Cell>{formatDate(staff.lastActive.activeAt)}</Table.Cell>\n                  </Table.Row>\n                  )}\n                </Table.Body>\n              </Table>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      }\n\n      {activeItem === 'Procedures' &&\n      <Header as='h5'> This Station Procedure feature is not Implemented yet, will be implemanted soon ...\n        <Header.Subheader>\n          After this implemetation, one will be able to add/ view / search all the station related procedure such as 'Garbage Disposal , Hanger Booking , Supplies Delivery ...' on this section\n        </Header.Subheader>\n      </Header>}\n\n      {activeItem === 'Costumers' && ! (params.costumerId || activeCostumer) &&\n      <>\n        <Card.Group>\n          {stationData.costumers && stationData.costumers.map(costumer =>\n            <Card key={costumer.id} link raised\n              onClick = {() => {\n                if(loggedInStaff){\n                  history.push(`${location.pathname}/${costumer.id}`)\n                }else{\n                  setActiveCostumer(costumer.id)\n                }\n\n              }}>\n              <Card.Content textAlign='center' header = {costumer.name} />\n              <Card.Content textAlign='center' >{costumer.contract? costumer.contract + ' Contract':''}</Card.Content>\n              <Card.Content textAlign='center' extra>\n                <Header as ='h5'> <Icon name='plane'/> Total Aircrafts: {costumer.aircrafts.length}</Header>\n              </Card.Content>\n            </Card>)}\n        </Card.Group>\n        {loggedInStaff && (loggedInStaff.permission.admin || loggedInStaff.permission.station.edit.map(station => station._id).includes(stationId)) &&\n        <Segment basic compact>\n          <Button primary icon onClick = {() => setAssignCostumerModalOpen(true)}>\n            <Icon name='add circle' /> Add More\n          </Button>\n          {assignCostumerModalOpen &&\n          <AssignCostumersModal open={assignCostumerModalOpen} setOpen={setAssignCostumerModalOpen} station={stationData}></AssignCostumersModal>\n          }\n\n\n        </Segment>}\n      </>\n\n      }\n\n      {activeItem === 'Costumers' && (params.costumerId || activeCostumer) &&\n       <CostumerInfo costumerId = {activeCostumer}></CostumerInfo>\n      }\n\n      {activeItem === 'Settings' &&\n      <Settings data={stationData}></Settings>\n      /**<Header as='h5'> This Station Settings feature is not Implemented yet, will be implemanted soon ...\n        <Header.Subheader>\n          After this implemetation, one will be able to change station settings such as 'SignIn/Off Work Methods', 'Add Remove Shifts', 'Number of active reporting', 'Change Station Key'\n        </Header.Subheader>\n      </Header>*/}\n    </>\n  )\n\n\n}\nexport default StationInfo","import React,{ useState, useContext, useReducer, useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { GET_SHIFT_REPORT } from '../../queries/shiftReportQuery'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { Loader,Image,Segment, Header } from 'semantic-ui-react'\nimport MenuBar from './MenuBar'\nimport ShiftReport from '../ShiftReport'\nimport Context from './Context'\nimport reducer from './stationReducer'\nimport { GET_STATION } from '../../queries/stationQuery'\nimport NewReportForm from './NewReportForm'\nimport AllReportsTable from './AllReportsTable'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport StationInfo from '../StationInfo/Index'\n\n\nconst StationReportPage = () => {\n  const history = useHistory()\n\n  const initialState = useContext(Context)\n  const [state,dispatch] = useReducer(reducer, initialState)\n\n  const [,notificationDispatch] = useContext(NotificationContext)\n\n  if(!JSON.parse( sessionStorage.getItem('stationKey'))){\n    history.push('/')\n  }\n\n  const params = useParams()\n  const id =params.id\n  const station = params.station\n\n  const [activeItem, setActiveItem] = useState('lastShiftReport')\n\n  let queryParams\n\n  if (station && id ){\n    queryParams = {\n      station: id,\n      flag:'MOST_RECENTLY_COMPLETED'\n    }\n  }\n\n  const useMultipleQuery = () => {\n    const res1 = useQuery(GET_SHIFT_REPORT,{\n      variables:queryParams,\n      onError: () => notificationDispatch({ type:'ADD_NOTIFICATION',  payload:{ content: errorReport.message ,type: 'ERROR' } }) })\n    const res2 = useQuery(GET_STATION,{ variables:{ id: id } })\n    return [res1, res2]\n  }\n\n  const [\n    { loading:loadingReport, error:errorReport, data: dataReport },\n    {  data: dataStation }\n  ] = useMultipleQuery()\n\n  useEffect(() => {\n    if(dataStation) dispatch({ type:'INIT_STATION',payload:dataStation.getStation })\n  },[dataStation])\n\n  useEffect(() => {\n    if(dataReport) dispatch({ type:'ADD_LASTSHIFTREPORT',payload:dataReport.getShiftReport })\n  },[dataReport])\n\n  //const { loading:loadingReport, error:errorReport, data: dataReport } = useQuery(GET_SHIFT_REPORT,{ variables:queryParams })\n\n\n\n  if (loadingReport) {\n    return (\n      <Loader active>Fetching Data</Loader>\n    )\n  }\n\n  return (\n    <>\n      <Context.Provider value={{ state, dispatch }}>\n        <Segment  basic>\n          <Header textAlign =\"right\" color =\"blue\" floated=\"right\">Shift Reporting System <br/><span><h5> Station: {dataStation && dataStation.getStation.location} </h5></span></Header>\n          <Image src='\\LogoBig.png' size=\"medium\" />\n        </Segment>\n\n        <MenuBar activeItem= {activeItem} setActiveItem={setActiveItem}/>\n\n        { activeItem === 'lastShiftReport' &&\n          <ShiftReport reportData= {dataReport && dataReport.getShiftReport}  />\n        }\n        { activeItem === 'browseAllReports' &&\n          <AllReportsTable  />\n        }\n\n        {activeItem === 'startNewReport'&&\n          //<NewReportShiftSelectModel  stationId={id} ></NewReportShiftSelectModel>\n          <NewReportForm  setActiveItem={setActiveItem}></NewReportForm>\n        }\n\n        {activeItem === 'stationInfo'&&\n          //<NewReportShiftSelectModel  stationId={id} ></NewReportShiftSelectModel>\n          <StationInfo stationId={id}></StationInfo>\n        }\n      </Context.Provider>\n    </>\n  )\n}\n\nexport default StationReportPage\n\n","import { gql } from '@apollo/client'\nexport const LOGIN_STAFF = gql`\n  mutation staffLogin($username: String!, $password:String!){\n    staffLogin(username: $username, password: $password) \n  }\n`\n\nexport const RESET_PASSWORD = gql`\nmutation resetPassword ($resetCode: String!, $password: String!){\n  resetPassword(\n    password: $password,\n    resetCode: $resetCode\n  ){\n    status\n    message\n  }\n}`\n\nexport const RESET_REGISTER_CODE = gql`\nmutation resetRegisterCode ($id: String!){\n  resetRegisterCode(\n    id: $id,\n  ){\n    status\n    message\n  }\n}`\n\nexport const RESET_PASSWORD_REQ = gql`\nmutation resetPasswordReq ($id: String!){\n  resetPasswordReq(\n    id: $id,\n  ){\n    status\n    message\n  }\n}`\n\nexport const CHANGE_PASSWORD = gql`\nmutation changePassword ( $id: String!, $password: String!, $newPassword: String! ){\n  changePassword ( \n    id: $id,\n    password: $password,\n    newPassword: $newPassword\n    ){\n      status\n      message\n    }\n}`\n\nexport const STAFF_EDIT = gql`\nmutation staffEdit($id:String! $email:String, $phone: String , $contractType: String , $reqHours: Float , $position :String){\n  staffEdit(\n    id: $id,\n    email:$email,\n    phone:$phone,\n    contractType: $contractType,\n    reqHours: $reqHours,\n    position: $position\n  ){\n    id\n    email\n    phone\n    contractType\n    reqHours\n    position\n  }\n}`\n\nexport const STAFF_ADD = gql`\n  mutation addStaff( $name: String!, $email: String!, $contractType: String! , $ contractHours: Int!, $position: String, $idCardCode: String){\n    addStaff(\n      name: $name,\n      email:$email,\n      contractType: $contractType,\n      contractHours: $contractHours,\n      position: $position\n      idCardCode: $idCardCode\n    ){\n      id,\n      name,\n      email,\n      phone\n    }\n  }\n`\n\nexport const SET_STAFF_STATUS= gql`\n  mutation toggleleStaffStatus( $id: String!, $disabled: Boolean! ){\n    setStaffStatus(\n      id: $id,\n      disabled: $disabled\n      )\n      {\n      status\n      message\n    }\n  }\n`\n\nexport const DELETE_STAFF= gql`\n  mutation deleteStaff( $id: String!){\n    staffDelete(\n      id: $id,\n    ){\n      status\n      message\n    }\n  }\n`\n\nexport const COMPLETE_REGISTRATION = gql`\n  mutation registerStaff( $registerCode:String!, $username: String!, $password: String!){\n    registerStaff(\n      registerCode: $registerCode\n      username: $username,\n      password:$password,\n    ){\n      status,\n      message\n    }\n  }`\n","import React, { useState,useEffect, useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useMutation } from '@apollo/client'\nimport { Button, Form, Grid, Header, Image, Segment, Divider } from 'semantic-ui-react'\nimport { LOGIN_STAFF } from '../mutations/staffMutation'\nimport { NotificationContext } from '../contexts/NotificationContext'\n\n\nconst StaffLoginPage = () => {\n  const [,dispatch] = useContext(NotificationContext)\n  const history = useHistory()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  /**\n   * staff Login mutation hook\n   */\n  const [login,{ data }] = useMutation(LOGIN_STAFF,{\n    onError: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, Cannot Login'}<br/> {err.message}</> ,type: 'ERROR' } })\n    }\n  })\n\n  /**\n   * side effect when the staff login mutation is executed and loginToStationResult is set\n   */\n  useEffect(() => {\n    if ( data ) {\n      const staff = data.staffLogin\n      sessionStorage.setItem('staffKey',JSON.stringify(staff))\n      history.push(`/staff/${staff.id}`)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data])\n\n  /**\n   * function for station loginStation action\n   * @param {event} event submit button event\n   */\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    login({ variables:{ username:username, password: password } })\n\n  }\n\n  /**\n   * If stationKey is found on localStorage/sessionStorage skip the loginStation and browse shift report\n   */\n  let storedStaffKey = JSON.parse(sessionStorage.getItem('staffKey'))\n  if(storedStaffKey){\n    history.push(`/staff/${storedStaffKey.id}`)\n  }\n\n  return (\n\n    <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as='h2' color='blue' textAlign='center'>\n          <Image src='/LogoMin.png' />  Log-in to your account\n        </Header>\n        <Form size='large' style={{ textAlign:'left' } } onSubmit={handleLogin}>\n          <Segment stacked>\n            <Form.Input fluid icon='user' iconPosition='left' placeholder='username' onChange = {(e,{ value }) => setUsername(value) }/>\n            <Form.Input\n              fluid\n              icon='lock'\n              iconPosition='left'\n              placeholder='Password'\n              type='password'\n              onChange = {(e,{ value }) => setPassword(value) }\n            />\n            <Button type = 'submit' color='blue' fluid size='large' >\n            Login\n            </Button>\n\n          </Segment>\n        </Form>\n        <Divider horizontal>Or</Divider>\n        <Segment  stacked>\n          <Button type = 'button' content='Log in to station'size='large' color=\"teal\" fluid\n            onClick = {() => history.push('/stationLogin')}/>\n        </Segment>\n\n      </Grid.Column>\n\n    </Grid>\n\n\n  )\n\n\n}\n\nexport default StaffLoginPage","import { gql } from '@apollo/client'\r\nexport const GET_TIMESHEETS =\r\ngql `query getTimesheetByUser($staff: String!, $filterDuration: String! ,$number: Int!, $year: Int!){\r\n  getTimeSheetByUser(\r\n    staff: $staff,\r\n     filterDuration: $filterDuration, \r\n     number: $number, \r\n     year: $year\r\n    ) {\r\n      id\r\n      startTime\r\n      status\r\n      date\r\n      endTime\r\n      break\r\n      remarks{\r\n        by\r\n        date\r\n        edit\r\n        text\r\n        title\r\n      }\r\n      staff{\r\n        name\r\n        reqHours\r\n        contractType\r\n      }\r\n      shiftReport {\r\n        shift\r\n        id\r\n        station {\r\n          id\r\n          location\r\n        }\r\n      }\r\n\r\n      shift\r\n      station{\r\n        id\r\n        location\r\n      }\r\n\r\n  },\r\n\r\n  getStaff(\r\n    id: $staff\r\n    ){    \r\n  name}\r\n\r\n}`\r\n\r\nexport const GET_ALL_TIMESHEETS = gql`\r\nquery getAllTimeSheets(\r\n  $staffId: String, $staff: [String] ,$period: String, $from: String , $to: String, $number: Int, $groupBy: String , $year: Int, $stations: [String], $filterStatus: String\r\n){\r\n  getAllTimeSheets(\r\n    staff:$staff,\r\n    period:$period,\r\n    from: $from,\r\n    to:$to ,\r\n    number:$number ,\r\n    groupBy:$groupBy,\r\n    year:$year ,\r\n    stations:$stations\r\n    filterStatus: $filterStatus\r\n    )\r\n  getStaff(\r\n      id: $staffId\r\n      ){    \r\n    name}\r\n   \r\n}`","import React, { useContext, useEffect, useState } from 'react'\nimport { Modal,Form, Button, Message, Segment, Header, Icon, Dimmer, Loader } from 'semantic-ui-react'\nimport { DateInputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { operateDate, formatDate, toDate } from '../../utils/DateHelper'\nimport { FieldArray, Formik } from 'formik'\nimport { validateStartEndTime } from '../StationReportPage/NewReportForm/validator'\nimport _ from 'lodash'\nimport { ALL_STATION } from '../../queries/stationQuery'\nimport { GET_SHIFTREPORT_ID } from '../../queries/shiftReportQuery'\nimport { UPDATE_TIMESHEET } from '../../mutations/timeSheetMutation'\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client'\nimport { DropDownField, InputField, RemarkField } from './TimeSheetEditFields'\nimport { useParams } from 'react-router-dom'\nimport { NotificationContext } from '../../contexts/NotificationContext'\n\nconst  TimeSheetEditModel = (props) => {\n  const[,dispatch] = useContext(NotificationContext)\n  const params= useParams()\n  const self=  JSON.parse( sessionStorage.getItem('staffKey'))\n  const { loading,data } = useQuery(ALL_STATION,{ skip: props.add === false  })\n\n\n  const [getShiftReport,{ loading:shiftReportLoading, data:shiftReportData }] = useLazyQuery(GET_SHIFTREPORT_ID)\n  const [updateTimeSheet,{ loading: updateTimeSheetLoading }] = useMutation(UPDATE_TIMESHEET,{\n    onError: (error) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, Failed to ${props.add?'Add':'Update' } timesheet record `}<br/>{error.message}</> ,type: 'ERROR' } })\n      closeModel()\n    }\n  })\n\n  const [stationOptions, setStationOptions] = useState([])\n  const [newRemarkField,setNewRemarkField] = useState(false)\n\n  useEffect(() => {\n    if(data){\n      const stations = data.allStations\n      const stationOptions = stations.map((station,index) => {\n        return { key:index, value: station.id, text: station.location }\n      })\n      setStationOptions(stationOptions)\n    }\n  },[data])\n\n\n  const getShiftList= (stationId) => {\n    if(data){\n      const station = data.allStations.filter(station => station.id === stationId)\n\n      if(station && station[0].shifts) {\n\n        const shiftList = station[0].shifts.map((shift,index) => {\n\n          return{ key:index, value: shift.name, text: shift.name }\n        })\n\n        return shiftList\n\n      }\n    }\n  }\n\n  /**returns approprite shift selection value to appropite shift based on starttime for choosen station  */\n  const getRecomendedShiftOption = (startTime,stationId) => {\n    if(data){\n      const station = data.allStations.filter(station => station.id === stationId)\n      if(station && station[0].shifts) {\n        const sdt = new Date(toDate(startTime))\n        const shiftName = station[0].shifts.reduce((p,c) => {\n          /**Setting the shiftTime to given startTime for comparision  */\n          const splitSt = c.startTime.split(':')\n          const st = new Date(sdt)\n          st.setHours(splitSt[0])\n          st.setMinutes(splitSt[1])\n          /** Diffence between given startTIme and shift startttime */\n          const diff = (sdt-st)/(60*60*1000)\n\n          /**return the lowest positive diffence if exist or highest negative differnce*/\n          if((diff > p.diff && p.diff < 0) ){\n            return { name: c.name ,diff: diff }\n          }\n          if(diff > 0 && diff< p.diff){\n            return { name: c.name ,diff: diff }\n          }\n          return p\n        },{ name:'',diff:-24 })\n        return shiftName.name\n\n      }\n    }\n\n\n  }\n\n  const handleShiftChange = (startTime,shift,station) => {\n    const st = new Date(toDate(startTime))\n    const ISODate = new Date ( Date.UTC(st.getFullYear() , st.getMonth() , st.getDate())).toISOString()\n    const vars = { date:ISODate ,shift: shift, station:station }\n    getShiftReport({ variables: vars })\n  }\n\n  const submit = async (values) => {\n    const vars = { ...values,break: parseInt(values.break) }\n    if(shiftReportData && shiftReportData.getShiftReportByShift &&  shiftReportData.getShiftReportByShift.id){\n      vars.handover = shiftReportData.getShiftReportByShift.id\n    }\n\n    if(!props.add){\n      vars.id = props.id\n    }\n\n    /**If new remarks is added only update added remarks */\n    if(values.remarks.length >= props.remarks.length){\n      vars.remarks.splice(0,props.remarks.length)\n    }\n    updateTimeSheet(\n      {\n        variables: vars,\n        update:(store,response) => {\n        /** Need to update cache only if add , graphql auto updates timesheet on update */\n          if(props.add){\n            store.modify ({\n              fields:{\n                getTimeSheetByUser(existingTimeSheetRefs , { readField }){\n                  const newTimeSheet = response.data.addToTimeSheet\n\n                  if(existingTimeSheetRefs.some(ref => readField('id',ref) === newTimeSheet.id)){\n                    return existingTimeSheetRefs\n                  }\n\n                  return [...existingTimeSheetRefs,newTimeSheet]\n\n                },\n\n                getAllTimeSheets(existingTimeSheetRefs){\n                  const period = params.period\n                  if(!period){\n                    return existingTimeSheetRefs\n                  }\n                  const newTimeSheet = response.data.addToTimeSheet\n                  const modify = _.cloneDeep(existingTimeSheetRefs)\n\n                  const totHours = (((toDate(newTimeSheet.endTime) - toDate(newTimeSheet.startTime) )/ (60*1000*60)) - (newTimeSheet.break || 0)/60).toFixed(1)\n                  if(!modify[period]){\n                    modify[period] = {}\n                  }\n\n                  if(!modify[period][newTimeSheet.staff.name]){\n                    modify[period][newTimeSheet.staff.name]= {}\n                    modify[period][newTimeSheet.staff.name].station = { [newTimeSheet.station.location]:1 }\n                    modify[period][newTimeSheet.staff.name].itemsPending = 1\n                    modify[period][newTimeSheet.staff.name].totHours = totHours\n\n                    return modify\n                  }\n\n                  const stations = modify[period][newTimeSheet.staff.name].station\n                  modify[period][newTimeSheet.staff.name] = {\n                    ...modify[period][newTimeSheet.staff.name],\n                    itemsPending:modify[period][newTimeSheet.staff.name].itemsPending+1,\n                    totHours: (parseFloat(modify[period][newTimeSheet.staff.name].totHours) + parseFloat(totHours)).toFixed(1),\n                    station:  { ...stations,[newTimeSheet.station.location]: stations[newTimeSheet.station.location]+1 }\n                  }\n\n                  return modify\n\n                }\n              },\n              broadcast: false\n            })\n          }\n          dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Success, ${props.add?'Added':'Updated' } timesheet record for ${vars.startTime.split(' ')[0]}`}</> ,type: 'SUCCESS' } })\n          closeModel()\n        }\n      })\n  }\n\n  const closeModel = () => {\n    props.setOpen(false)\n    setNewRemarkField(false)\n\n  }\n\n  const getInitValues = () => {\n    const init = {\n      startTime: props.startTime ,\n      endTime: props.endTime ,\n      break: props.break || 30,\n      remarks: props.remarks || [],\n\n    }\n\n    if(props.add){\n      init.staff = props.staffId\n      init.startTime = formatDate((new Date(props.date).setHours(0)))\n      init.endTime= (new Date(props.date).setHours(8)) > Date.now() ? formatDate(toDate(Date.now())) : formatDate((new Date(props.date).setHours(8)))\n      init.station = ''\n      init.shift = ''\n      init.remarks = [{ title:'Manually Entered to TimeSheet' , date: formatDate(Date.now()), by: self.name }]\n\n    }\n    /**/\n    return init\n  }\n\n  /**Function to auto generate remarks field based on user actions */\n  const autoAddRemarks = (values) => {\n    /**If the user is not making a new entry */\n    if (!props.add) {\n      const insertAt = props.remarks.length === 0 ? 0 : props.remarks.length\n      let newRemarks = [...values.remarks]\n      /**If start time and end time is modified from the original  */\n      if((values.startTime !== props.startTime || values.endTime !== props.endTime)){\n        /**Adding Filed Edited remarks to the last index of original remarks field, user entered remark should appear after this if there is any */\n        if(!newRemarks[insertAt] || (newRemarks[insertAt] && newRemarks[insertAt].title!== 'Edited')){\n          newRemarks.splice(insertAt,0,{ title:'Edited',date: formatDate(Date.now()),by:self.name, edit:{} })\n        }\n\n        if(values.startTime !== props.startTime){\n          newRemarks[insertAt].edit.startTime = `${props.startTime} to  ${values.startTime}`\n        }\n        if(values.endTime !== props.endTime){\n          newRemarks[insertAt].edit.endTime= `${props.endTime} to  ${values.endTime}`\n        }\n        values.remarks= newRemarks\n      }\n      /**If startTime is not modified or restored to original Value */\n      if(values.startTime === props.startTime){\n\n        if(newRemarks[insertAt] && values.remarks[insertAt].edit){\n          delete newRemarks[insertAt].edit.startTime\n        }\n      }\n      /**If startTime is not modified or restored to original Value */\n      if(values.endTime === props.endTime){\n        if(newRemarks[insertAt] && values.remarks[insertAt].edit){\n          delete newRemarks[insertAt].edit.endTime\n        }\n      }\n      /*If everything was restored to original value then remove the edited remarks */\n      if(newRemarks[insertAt] && newRemarks[insertAt].edit && _.isEmpty(newRemarks[insertAt].edit)){\n        newRemarks.splice(insertAt,1)\n      }\n      values.remarks= newRemarks\n    }\n  }\n\n  const modalHeader = props.add? `Adding Work Time Record to Date ${formatDate (Date.parse(props.date)).split(' ')[0]}`: `Editing Work Time Record to Date ${formatDate (Date.parse(props.date)).split(' ')[0]}`\n  return (\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {props.open}\n      onClose= {() => closeModel()}\n      onOpen= {() => props.setOpen (true)}\n    >\n      <Modal.Header>{modalHeader} </Modal.Header>\n      <Modal.Content>\n\n\n\n        {updateTimeSheetLoading &&\n            <Dimmer active>\n              <Loader />\n            </Dimmer>\n        }\n        <Formik\n\n          initialValues = {getInitValues()}\n          validate = {values => {\n\n            let errors = {}\n            errors = { ...errors,...validateStartEndTime(values.startTime,values.endTime,props.date) }\n            if(_.isEmpty(errors)){\n              autoAddRemarks(values)\n            }\n\n            return errors\n\n\n          } }\n\n          onSubmit = {(values) =>\n          {\n            /**If last added remark is empty remark then remove from values\n             * Retrived Remarks from database will have a title, new remark will always be at the end of array and may not have either title or text\n             */\n            if(values.remarks.length &&  !values.remarks[values.remarks.length-1].title  &&  !values.remarks[values.remarks.length-1].text ){\n\n              const newRemarks = [...values.remarks]\n              newRemarks.splice(values.remarks.length-1,1)\n              values.remarks = newRemarks\n            }\n            /**If last added remark has text but no title then set title */\n            if(values.remarks.length &&  ! values.remarks[values.remarks.length-1].title &&  values.remarks[values.remarks.length-1].text){\n              values.remarks[values.remarks.length-1].title = 'Remark Added'\n            }\n\n            submit(values)}\n          }\n\n\n        >\n\n\n          {({ values,handleSubmit,setFieldValue }) =>\n\n            <Form size='large' style={{ marginBottom:'5rem' }} onSubmit = { handleSubmit} >\n\n              <Form.Group >\n\n                < DateInputField\n                  label= 'Start Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name ='startTime'\n                  maxDate = {operateDate(Date.now(),30,'m','sub')}\n                  minDate= {formatDate (Date.parse(props.date))}\n\n                />\n\n\n                < DateInputField\n                  label = 'End Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name='endTime'\n                  maxDate = {\n                    Date.now() < toDate(values.endTime)? formatDate(Date.now()) : operateDate(values.startTime,20,'h','add')\n                  }\n                  minDate= {operateDate(values.startTime,20,'m','add')}\n\n                />\n\n                <InputField\n                  inputlabel= 'Break'\n                  label = 'Minutes '\n                  labelPosition='right corner'\n                  name= 'break'\n                  type='number'\n                  min='0'>\n                </InputField>\n\n              </Form.Group>\n\n\n              {\n                /** If the user is inserting new timesheet  */\n                props.add &&\n                <Form.Group>\n\n                  <DropDownField\n                    label =' Select Station'\n                    loading= {loading}\n                    name = 'station'\n                    placholder= 'Select Station'\n                    search\n                    selection\n                    options= {stationOptions}\n                    onChange = {  (e,{ value }) => {\n                      setFieldValue('station',value)\n                      const shift = getRecomendedShiftOption(values.startTime,value)\n                      setFieldValue('shift',shift)\n                      handleShiftChange(values.startTime,shift,value)\n\n                    }}\n                  ></DropDownField>\n\n                  <DropDownField\n                    label =' Select Shift'\n\n                    disabled = {!values.station}\n                    name = 'shift'\n                    placholder= 'Select Shift'\n                    search\n                    selection\n                    options= {values.station? getShiftList(values.station):[]}\n                    onChange = {(e,{ value } ) => {\n                      setFieldValue('shift',value)\n                      handleShiftChange(values.startTime,value,values.station)\n                    }}\n                  ></DropDownField>\n\n\n                </Form.Group>\n              }\n\n              { /**While Loading Data */\n                shiftReportLoading &&\n                  <Segment secondary loading>\n                    Verifying {values.shift} Shift\n                  </Segment>\n              }\n\n              { /**If the shift is set and shift report exist for the corresponding shift */\n                values.shift && shiftReportData && shiftReportData.getShiftReportByShift &&\n                  <Segment clearing secondary>\n                    <Header as='h3'><Icon name='check circle' color='green'></Icon> Verified</Header>\n                    <Header floated='left' as='h5'>{shiftReportData.getShiftReportByShift.station.location} {values.shift} Shift {shiftReportData.getShiftReportByShift.startTime.split(' ')[0]}\n                      <Header.Subheader><strong> Shift Start : </strong> {shiftReportData.getShiftReportByShift.startTime}<strong> Shift End : </strong> {shiftReportData.getShiftReportByShift.endTime} </Header.Subheader>\n                    </Header>\n                    <Button type='button'floated='right' onClick={() => props.openReport({ id: shiftReportData.getShiftReportByShift.id, open:true })} > View Shift Report</Button>\n\n                  </Segment>\n              }\n\n              {\n                /**If the shift is set and the shift report doesnot exist for corresponding shift */\n                values.shift && shiftReportData && !shiftReportData.getShiftReportByShift &&\n                <Message warning visible\n                  header='Selected shift is not reported'\n                  content='Adding to record to unreported shift will not be reflected on any shift reports thus cannot be verified. This may result on work time not being approved'\n                />\n              }\n\n              <label ><strong>Remarks</strong></label>\n              <FieldArray name='remarks'>\n                {({ push,remove }) => <>\n\n                  {values.remarks && values.remarks.length > 0 && values.remarks.map((remark,index) =>\n                    <RemarkField key= {index} name={`remarks.${index}`} value={remark}></RemarkField>\n                  )}\n\n                  { /**If TImesheet is approved, it cannot be modified */\n                    props.status !== 'APPROVED' &&\n                    <Form.Button type='button'\n                      onClick= {(e) => {\n                        e.preventDefault()\n                        if(newRemarkField){\n                          remove(values.remarks.length-1)\n                          setNewRemarkField(false)\n                        } else{\n                          if(values.remarks.length > 0 && values.remarks[values.remarks.length-1].title === 'Clearification Requested'){\n                            push({ title:'Add Clearification',date: formatDate(Date.now()),by:self.name,text:'' })\n                          } else {\n                            push({ title:'',date: formatDate(Date.now()),by:self.name,text:'' })\n                          }\n                          setNewRemarkField(true)\n                        }\n                      }}>\n                      {!newRemarkField && values.remarks.length > 0 && values.remarks[values.remarks.length-1].title === 'Clearification Requested' ?\n                        'Add Clearification' :\n                        newRemarkField?'Remove Remark':\n                          'Add Remark'}\n                    </Form.Button>}\n                </>\n                }\n              </FieldArray>\n              { props.status !== 'APPROVED' &&\n              <Button type='submit' floated='right' positive>Save</Button>\n              }\n              <Button type='button' floated='right' negative onClick={() => closeModel()}>Cancel</Button>\n            </Form>}\n        </Formik>\n\n\n\n      </Modal.Content>\n\n    </Modal>\n\n\n  )\n}\n\nexport default TimeSheetEditModel","import {  gql, useMutation } from '@apollo/client'\nimport React, { useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { Table,Button, Popup, Header, Message,  Segment,Form } from 'semantic-ui-react'\nimport { APPROVE_TIMESHEET, DELETE_TIMESHEET, REQUEST_CLARIFICATION } from '../../mutations/timeSheetMutation'\nimport TimeSheetEditModel from './TimeSheetEditModel'\nimport _ from 'lodash'\n\nconst TimeSheetRow = ({ timeSheet, rowSpan ,openReport ,index ,date ,staffId }) => {\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\n\n  const params= useParams()\n\n  const permission = staff.permission && staff.permission.timesheet\n\n  const startTime = timeSheet.startTime\n  const endTime = timeSheet.endTime\n  const station = timeSheet.shiftReport && timeSheet.shiftReport.station.location\n  const shift = (timeSheet.shiftReport && timeSheet.shiftReport.shift) || timeSheet.shift\n  const  breakt = timeSheet.break\n  const totalHours = timeSheet.total\n  const ot = timeSheet.overTime\n  const remarks = timeSheet.remarks || []\n  const [open,setOpen] = useState(false)\n  const [add,setAdd] = useState(false)\n  const [deleteOpen,setDeleteOpen]=  useState(false)\n  const [clarifyOpen,setClarifyOpen]=  useState(false)\n\n  const [clarifyText,setClarifyText] = useState('')\n\n  const [approveTimesheet,{ loading:timesheetSignLoading }] = useMutation(APPROVE_TIMESHEET)\n  const [mutatedeleteTimesheet,{ loading:deleteLoading }] = useMutation(DELETE_TIMESHEET)\n  const [requestClarification,{ loading:clarifyLoading }] = useMutation(REQUEST_CLARIFICATION)\n\n  const deleteTimeSheet = () => {\n    mutatedeleteTimesheet(\n      { variables:{ id: timeSheet.id },\n        update: (store,response) => {\n          if(response.data.deleteTimeSheet && response.data.deleteTimeSheet.status === 'SUCCESS') {\n            store.modify({\n              fields:{\n                getTimeSheetByUser({ DELETE }){\n                  return DELETE\n                },\n\n                getAllTimeSheets(existingTimeSheetRefs, { readField }){\n                  const period = params.period\n                  if(!period){\n                    return existingTimeSheetRefs\n                  }\n\n                  const modify = _.cloneDeep(existingTimeSheetRefs)\n\n\n                  const totHours = modify[period][timeSheet.staff.name].totHours-totalHours\n                  if (totHours === 0){\n                    delete (modify[period])\n                    return modify\n                  }\n\n                  const stations = modify[period][timeSheet.staff.name].station\n                  modify[period][timeSheet.staff.name] = {\n                    ...modify[period][timeSheet.staff.name],\n                    itemsPending:modify[period][timeSheet.staff.name].itemsPending-1,\n                    totHours: totHours,\n                    station:  { ...stations,[timeSheet.station.location]: stations[timeSheet.station.location]-1 }\n\n                  }\n\n                  return modify\n                }\n              },\n\n              broadcast: false\n\n            })\n\n          }\n\n        }\n      })\n\n  }\n\n  const askToclarify = () => {\n    const vars = {\n      id: timeSheet.id,\n      clearify: clarifyText\n    }\n\n    requestClarification({ variables: vars }\n\n\n    )\n\n  }\n\n  const updateTimeSheetApproval = () => {\n    approveTimesheet({\n      variables:{ id:timeSheet.id , status:timeSheet.status==='APPROVED'?'':'APPROVED' },\n      update: (store,response) => {\n        store.modify({\n          fields: {\n            getAllTimeSheets(existingTimeSheetRefs, {  readField }){\n              const period = params.period\n              if(!period){\n                return existingTimeSheetRefs\n              }\n\n              const approved = response.data.approveTimeSheet.status\n              const modify = _.cloneDeep(existingTimeSheetRefs)\n\n              console.log('before',modify[period][timeSheet.staff.name].itemsPending)\n\n              modify[period][timeSheet.staff.name].itemsPending = approved==='APPROVED'? modify[period][timeSheet.staff.name].itemsPending-1: (modify[period][timeSheet.staff.name].itemsPending)+1\n\n\n              return modify\n\n            }\n          }\n        })\n\n\n      }\n    })\n\n  }\n\n  const isWeekDay = ()  => {\n    const today = new Date(date).getDay()\n    if( today === 0 || today ===6){\n      return false\n    }\n    return true\n  }\n  /**If the id is a valid id string, empty rows with no data will not have valid ids. */\n  const isEmptyRow = timeSheet.id.toString().match(/^[0-9a-fA-F]{24}$/) ? false: true\n\n  return (\n    <Table.Row  key = {timeSheet.id} negative= {!isWeekDay()}>\n      {index === 0 && <Table.Cell collapsing rowSpan={rowSpan}>{ date.split('T')[0]}</Table.Cell>}\n      <Table.Cell> {station} </Table.Cell>\n      <Table.Cell onClick= {(e) => {\n        e.preventDefault()\n        openReport({ id: timeSheet.shiftReport && timeSheet.shiftReport.id, open:true })\n      }}>\n        {  // eslint-disable-next-line jsx-a11y/anchor-is-valid\n          timeSheet.shiftReport && timeSheet.shiftReport.id ? <a href =\"\"> {shift} </a> : shift?`${shift} `:''\n        }  </Table.Cell>\n      <Table.Cell >{ startTime && startTime.split(' ')[1]}</Table.Cell>\n      <Table.Cell> {endTime &&endTime.split(' ')[1]} </Table.Cell>\n      <Table.Cell> {breakt} </Table.Cell>\n      <Table.Cell> {totalHours?totalHours:''} </Table.Cell>\n      {index === 0 &&  <Table.Cell  rowSpan={rowSpan} > {ot?ot:''} </Table.Cell>}\n      <Table.Cell> {timeSheet.status === 'PENDING_APPROVAL'? 'No' : timeSheet.status === 'APPROVED'? 'Yes' : timeSheet.status  } </Table.Cell>\n      <Table.Cell>\n        {remarks && remarks.length>0 &&\n        <>{`${remarks[remarks.length-1].title} ${remarks[remarks.length-1].date.split(' ')[0]}` }  <br/>  {remarks[remarks.length-1].text}`  <br/>\n          {// eslint-disable-next-line jsx-a11y/anchor-is-valid\n            <a href='#'\n              onClick = {(e ) => {\n                e.preventDefault()\n                setOpen(true)\n              }\n\n              }>See all</a>}\n\n        </>\n        }</Table.Cell>\n      <Table.Cell  >\n\n        <Segment loading={timesheetSignLoading || deleteLoading || clarifyLoading} disabled={timesheetSignLoading || deleteLoading || clarifyLoading} size='tiny' basic  style={{ width:'max-content', display:'inline-block' }} >\n\n\n          {\n            /**\n               * Add Button,\n               * visible only if data staff is loggedin Staff or  logged in staff has permission and no record exists for  that day\n               */\n            isEmptyRow  && permission && (  permission.sign.length >0 || staff.id === staffId ) &&\n              <Button icon='add' size='mini' circular onClick = {() => {\n                setAdd(true)\n                setOpen(true)\n\n              }}/>\n\n          }\n          {\n          /**\n           * If the record exist for that day\n           */\n            !isEmptyRow &&\n            <>\n              {\n                /**\n                 * Edit Button,\n                 * visible only\n                 *    if data staff is loggedin Staff\n                 *    or\n                 *    logged in staff has permission to sign timesheet for that station\n                 *    and\n                 *    record exists for that day\n                 *    and\n                 *    record is not already approved\n                 *\n                 */\n                timeSheet.status !== 'APPROVED' && ((permission.sign.filter(station => timeSheet.station && station._id === timeSheet.station.id ).length !== 0 )) &&\n                  <Popup\n                    trigger=  {<Button icon='edit' size='mini' circular onClick = {() => {\n                      setAdd(false)\n                      setOpen(true)\n                    }}/>}\n                    content='Edit Timesheet'\n                    position='bottom center'\n                  />}\n\n\n              { /**\n                   * Approve Button,\n                   * visible only\n                   *    if data staff is not loggedin Staff\n                   *    or\n                   *    logged in staff has permission to sign timesheet for that station\n                   *    and\n                   *    record is not already approved\n                   */\n                permission.sign.filter(station => timeSheet.station && station._id === timeSheet.station.id ).length !== 0  &&  staff.id !== staffId &&\n                  <>\n                    <Popup\n                      trigger=  { <Button  color ={timeSheet.status === 'APPROVED'?'green':'grey'} icon='check' size='mini' circular onClick = {() => {\n                        updateTimeSheetApproval()\n                      }}/>}\n                      content={timeSheet.status === 'APPROVED'? 'Undo Approve': 'Approve'}\n                      position='bottom center'\n                    />\n\n                    {\n                      /**\n                      * Request Clarification button,\n                      * visible only\n                      *    record is not already approved\n                      */\n\n                      timeSheet.status !== 'APPROVED' &&\n                      <Popup size='huge' wide='very' style={{ width:'100%' }}\n                        trigger=  { <Button color='blue' icon='talk' size='mini' circular />}\n                        onOpen= {() => setClarifyOpen(true)}\n                        onClose= {() => setClarifyOpen(false)}\n                        open = {clarifyOpen}\n                        content={\n                          <Form onSubmit = {() => {\n                            askToclarify()\n                            setClarifyOpen(false)\n                          }}>\n                            <Header as ='h5'>Request Clearification </Header>\n                            <Form.TextArea\n                              value= {clarifyText}\n                              onChange= {\n                                (e,{ value }) => setClarifyText(value)\n                              }>\n\n                            </Form.TextArea>\n                            <Form.Button floated='right' type= 'submit' primary> Send</Form.Button>\n                          </Form>\n                        }\n                        on='click'\n                        position='bottom right'\n                      />\n                    }\n                  </>\n              }\n\n              {\n                /**\n                * Delete Button,\n                * visible only\n                *    if data staff is  loggedin Staff\n                *    or\n                *    logged in staff has permission to edit timesheet for that station\n                *    and\n                *    record is not already approved\n                */\n\n                timeSheet.status !== 'APPROVED' &&((permission.sign.filter(station => timeSheet.station && station._id === timeSheet.station.id ).length !== 0)   || staff.id === staffId  ) &&\n                <Popup as={Message} warning\n                  trigger=  { <Button  color = 'red' icon='trash' size='mini' circular />}\n                  content={\n                    <>\n\n                      <Message.Header>Are you sure, you want to remove this record?</Message.Header>\n                      <p> Action is non reversible and will remove all the instances of this record from the system.</p>\n\n                      <Button fluid color='red' icon='trash' content='Confirm' onClick = {() => {\n                        deleteTimeSheet(timeSheet.id)\n                        setDeleteOpen(false)\n\n                      }} /></>}\n                  on='click'\n                  onOpen= {() => setDeleteOpen(true)}\n                  onClose= {() => setDeleteOpen(false)}\n                  open={deleteOpen}\n                  position='bottom center'\n                />}\n            </>}\n        </Segment>\n\n\n\n      </Table.Cell>\n      <TimeSheetEditModel\n        staffId = {staffId}\n        id= {timeSheet.id}\n        openReport={openReport}\n        date = {date}\n        open={open}\n        status ={timeSheet.status}\n        setOpen= {setOpen}\n        startTime= {startTime}\n        endTime= {endTime}\n        break= {breakt}\n        add= {add}\n        remarks= {remarks} >\n      </TimeSheetEditModel>\n    </Table.Row>)\n\n}\n\nexport default TimeSheetRow","import React,{ Fragment, useState } from 'react'\nimport { Button, Header, Table } from 'semantic-ui-react'\nimport { toDate } from '../../utils/DateHelper'\nimport _ from 'lodash'\nimport ReportViewModal from '../ShiftReport/ReportViewModal'\nimport TimeSheetRow from './TImeSheetRow'\n\n\nconst TimeSheetsReport = ({ startDate,endDate,data, staffId, title })  => {\n  const [openReport,setOpenReport]= useState({ id:'', open: false })\n\n  /** sets the calender from start date and end dates so the empty dates will also be displayed on report*/\n  const calenderArray =[...new Array( Math.ceil((endDate - startDate)/(24*60*60*1000)) +1 )].map((n,index) => {\n    const day = index\n    const date = new Date ( Date.UTC(startDate.getFullYear() , startDate.getMonth() , startDate.getDate()+day)).toISOString()\n    return date\n  } )\n\n  /**Converting calender array to object */\n  const calenderObject = _.zipObject(calenderArray,calenderArray.map((val,index) => [{ id:index }]))\n  let netTotal =0\n  let netOt = 0\n\n  let shiftDate\n  if(data) {\n\n    /**There is chance that the staff might be on 2 shifts on the day so grouping by date */\n    shiftDate = _.groupBy(data.getTimeSheetByUser, 'date')\n\n    const formatData = shiftDate && _.mapValues(shiftDate,(timeSheets,date) => {\n      let totalDaily = 0\n      let ot = 0\n      timeSheets = timeSheets.map((timesheet,index) => {\n        const breakt = (timesheet.break*60*1000)\n        const total =  ((toDate(timesheet.endTime) - toDate(timesheet.startTime) - breakt)/ (60*1000*60)).toFixed(1)\n\n        timesheet = { ...timesheet,total:parseFloat(total) }\n\n        totalDaily = totalDaily + parseFloat(total)\n\n        /**Overtime rules can be imlemented here\n         * For now for simplicity for Employee sundays is 100% saturday is 50%  and 8 hrs(specified by contractType) + is overtime, for contractor 10hrs + is overtime\n         */\n\n        /**If staff is a employee\n        const today = new Date(toDate(timesheet.startTime)).getDay()\n        if( timesheet.staff.contractType === 'Employee') {\n          /**If sunday */\n        /*if(today === 0 ){\n            ot = (totalDaily+parseFloat(total) - timesheet.staff.reqHours).toFixed(1)\n          }\n          /**If saturday */\n        /* else if(today === 6 ){\n            ot = (totalDaily + 0.5 * parseFloat(total) - timesheet.staff.reqHours).toFixed(1)\n          }\n          else{\n            ot = (totalDaily - timesheet.staff.reqHours).toFixed(1)\n          }\n        }\n        else{\n          ot =  (totalDaily - timesheet.staff.reqHours).toFixed(1)\n        }*/\n        ot =  (totalDaily - timesheet.staff.reqHours).toFixed(1)\n        return timesheet\n      })\n      timeSheets[0] = { ...timeSheets[0],overTime:ot }\n      netOt = netOt + parseFloat(ot)\n      netTotal = netTotal + totalDaily\n      return timeSheets\n    } )\n\n    shiftDate = ( { ...calenderObject,...formatData })\n\n  }\n\n  const stickyTh = {\n    position: 'sticky',\n    top : '0',\n    zIndex: 1\n\n\n  }\n\n  return (\n    <>\n      {title &&\n     <Header as = 'h5' floated='right'>{title}</Header>\n      }\n      <Table celled striped structured textAlign='center'>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell style= {stickyTh}> Date </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Station </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Shift </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Start Time </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> End Time </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Break (Mins) </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Total (Hrs) </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> OverTime </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Approved </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Remarks </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Actions</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {shiftDate && _.map(shiftDate,(timeSheets,date) =>\n            <Fragment key = {date}>\n              {timeSheets.map( (timeSheet,index) =>\n                <TimeSheetRow  staffId= {staffId} date = {date} index = {index} key = {timeSheet.id} openReport= {setOpenReport} timeSheet={timeSheet} rowSpan={timeSheets.length} />\n              )\n              }</Fragment>\n          )\n          }\n\n        </Table.Body>\n        <Table.Footer>\n          <Table.Row >\n            <Table.HeaderCell  colSpan='6'>Total</Table.HeaderCell>\n            <Table.HeaderCell> {netTotal.toFixed(1)} </Table.HeaderCell>\n            <Table.HeaderCell> {netOt.toFixed(1)} </Table.HeaderCell>\n            <Table.HeaderCell colSpan='3' />\n          </Table.Row>\n        </Table.Footer>\n      </Table>\n\n      <ReportViewModal setOpenReport= {setOpenReport} openReport={openReport}></ReportViewModal>\n    </>)\n}\n\nexport default TimeSheetsReport","import { useQuery } from '@apollo/client'\r\nimport React ,{ useEffect, useState } from 'react'\r\nimport { Loader, Header, Segment,Dropdown, Button ,Form, Popup } from 'semantic-ui-react'\r\n\r\nimport { GET_TIMESHEETS } from '../../queries/timeSheetQuery'\r\nimport { getWeekNumber, getDatefromWeek  } from '../../utils/DateHelper'\r\nimport TimeSheetsReport from '../TimeSheetsReport'\r\n\r\nconst TimeSheet = ({ staffId,setStaffName, period ,selected ,selectedYear ,timesheetOnly }) => {\r\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\r\n  const [selectBy,setSelectBy] = useState (period || 'week')\r\n  const today = new Date()\r\n  const [number,setNumber] = useState (selected || getWeekNumber(today))\r\n  const [year,setYear] = useState(selectedYear || today.getFullYear())\r\n  const queryParams = { staff: staffId || staff.id , filterDuration: selectBy  , number:number, year: year }\r\n\r\n  const { error,loading,data } = useQuery(GET_TIMESHEETS, { variables:queryParams })\r\n\r\n  useEffect(() => {\r\n    if (data && data.getStaff )\r\n      setStaffName(data.getStaff.name)\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  },[data])\r\n\r\n  /** Get Month name from index\r\n  * Negative index gets month from end of array\r\n  */\r\n  const months = new Proxy(['January','February','March','April','May','June','July','August','September','October','November','December'], {\r\n    get(target, prop) {\r\n      if (!isNaN(prop)) {\r\n        prop = parseInt(prop, 10)\r\n        if (prop < 0) {\r\n          prop += target.length\r\n        }\r\n      }\r\n      return target[prop]\r\n    }\r\n  })\r\n\r\n\r\n  /**Get startDate of timeSheet Report */\r\n  const filterStartDate  =  () => {\r\n    let sdate\r\n    if(selectBy==='month'){\r\n      sdate = new Date(year,number,1)\r\n    } else {\r\n      sdate  = getDatefromWeek(number,year)\r\n    }\r\n    sdate = new Date(Date.UTC( sdate.getFullYear(), sdate.getMonth(), sdate.getDate()))\r\n    return (sdate)\r\n  }\r\n\r\n  /**Get startDate of timeSheet Report */\r\n  const filterEndDate  =  () => {\r\n    let ed\r\n    if(selectBy==='month'){\r\n      ed = new Date(year,number+1,0)\r\n    } else {\r\n      const sd  = getDatefromWeek(number,year)\r\n      ed = new Date(Date.UTC( sd.getFullYear(), sd.getMonth(), sd.getDate()+6))\r\n    }\r\n    if(ed >= today ){\r\n      ed = new Date(Date.UTC(today.getFullYear(),today.getMonth(),today.getDate()))\r\n    }\r\n    return (ed )\r\n  }\r\n\r\n  const start = filterStartDate()\r\n  const end = filterEndDate()\r\n\r\n  if (loading) {\r\n    return (\r\n      <Loader active>Fetching timesheets</Loader>\r\n    )\r\n  }\r\n\r\n  if (error) {\r\n    console.log(error)\r\n    return (\r\n      <Header as ='h5'>Something Went Wrong, Please try again</Header>\r\n    )\r\n  }\r\n\r\n  const isAllApproved = () => {\r\n    let approved = false\r\n    if(data && data.getTimeSheetByUser && data.getTimeSheetByUser.length > 0){\r\n      approved = !data.getTimeSheetByUser.some(timeSheet => timeSheet.status !== 'APPROVED')\r\n    }\r\n\r\n    return approved\r\n  }\r\n\r\n\r\n  /**Retrive last four month including current month */\r\n  const getMonthOptions = () => {\r\n    let options = []\r\n\r\n    const currentMonth = today.getMonth()\r\n    options = [\r\n      { key:1 ,text: months[currentMonth] , value: currentMonth },\r\n      { key:2 ,text: months[currentMonth -1 ] , value: currentMonth -1 < 0 ? months.length + currentMonth -1  : currentMonth -1 },\r\n      { key:3 ,text: months[currentMonth -2] , value: currentMonth -2 < 0 ? months.length + currentMonth -2: currentMonth -2 },\r\n      { key:4 ,text: months[currentMonth -3] , value: currentMonth -3 < 0 ? months.length + currentMonth -3: currentMonth -3 },\r\n    ]\r\n    return options\r\n  }\r\n\r\n  /**Retrieve all weeks that falls within last four month including current month*/\r\n  const getWeekOptions = () => {\r\n    const currentMonth = today.getMonth()\r\n    let dYear = today.getFullYear()\r\n    const lastYearWeekNum = getWeekNumber( new Date(dYear-1,11,28))\r\n    const lastRetriveable  = getWeekNumber(new Date(dYear, currentMonth -3 ,1))\r\n    let currentWeek = getWeekNumber(today)\r\n    let options = []\r\n\r\n    let week = currentWeek\r\n    while ( week !== lastRetriveable-1  ){\r\n      const option = { key: week, text: week, value: week }\r\n      options.push (option )\r\n      week = week -1\r\n      if(week === 0) {\r\n        week = lastYearWeekNum\r\n      }\r\n    }\r\n    return options\r\n\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Segment basic style= {{ marginBottom:'20em' }} >\r\n        <Form>\r\n          {!timesheetOnly &&\r\n            <><label> Select by: </label>\r\n              <Form.Group>\r\n                <Form.Field>\r\n                  <Dropdown\r\n                    selection\r\n                    options = {[ { key:1 ,text: 'Month' , value: 'month' }, { key:2 ,text: 'Week' , value: 'week' }]}\r\n                    onChange = {(e,{ value }) => {\r\n                      setSelectBy(value)\r\n                      if(value==='month') {\r\n                        setNumber (today.getMonth())\r\n                      }else {\r\n                        setNumber (getWeekNumber(today))\r\n                      }\r\n\r\n                    }\r\n                    }\r\n                    value = {selectBy}/>\r\n                </Form.Field>\r\n                <Form.Field>\r\n                  <Dropdown\r\n                    compact = { selectBy === 'month'? false:true }\r\n                    selection\r\n                    options = { selectBy === 'month'?getMonthOptions():getWeekOptions()}\r\n                    onChange ={(e,{ value }) => {\r\n                      setNumber(value)\r\n                      if( selectBy === 'week' && value > getWeekNumber(today)) {\r\n                        setYear(today.getFullYear -1)\r\n                      }\r\n                      if(selectBy === 'month' && value > today.getMonth()) {\r\n                        setYear(today.getFullYear -1)\r\n                      }\r\n\r\n                    }}\r\n                    value = {number}/>\r\n                </Form.Field>\r\n              </Form.Group>\r\n            </> }\r\n          <TimeSheetsReport staffId={staffId} startDate={start} endDate= {end} data={data} title = {`Timesheet ${selectBy === 'month'? months[number]:  `Week ${number},` } ${year} `}></TimeSheetsReport>\r\n\r\n\r\n          { staffId === staff.id &&\r\n            <Segment  basic clearing>\r\n              <Popup\r\n                trigger = {<span  floated='right' ><Button  floated='right' disabled ={!isAllApproved()} type='button' color='blue'> Submit to Payroll</Button></span>}\r\n                disabled= {isAllApproved()}\r\n                content= ' All records should be approved for submission'\r\n              />\r\n            </Segment>\r\n          }\r\n\r\n\r\n\r\n        </Form>\r\n      </Segment>\r\n\r\n\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TimeSheet","import { gql } from '@apollo/client'\nexport const GET_STAFF = gql`\nquery fetchStaff($id:String, $registerCode:String, $withPermission: Boolean!){\n    getStaff(\n      id: $id\n      registerCode: $registerCode\n      ){ \n    id     \n    name\n    idCardCode\n    currentStation{\n      location\n    }\n    email\n    position\n    contractType\n    lastActive{\n      station{\n        location\n      }\n      activeAt\n    }\n    username\n    resetCode\n    phone\n    reqHours\n    registerCode\n    permission  @include(if: $withPermission ) {\n      id\n      station\n      timesheet\n      staff\n      admin\n    }\n    }\n  }\n`\nexport const GET_STAFF_REG = gql`\nquery fetchStaff($registerCode:String,){\n    getStaff(\n      registerCode: $registerCode\n      ){ \n    name\n    }\n  }\n`\n\nexport const GET_ALL_STAFF_MINIMAL = gql`\n  query allStaffMinimal ($minimal: Boolean = true) { \n    allStaff (minimal :$minimal){\n    id\n    name   \n  }}\n`\n\nexport const GET_ALL_STAFF = gql`\n  query{ allStaff {\n    id\n    name\n    email\n    phone\n    disabled\n    lastActive{\n      station{\n        location\n      }\n      activeAt\n    }\n  }}\n`\n\n\nexport const VERIFY_USERNAME = gql`\n  query verifyUsername( $username: String!){\n    verifyUsername(   \n      username: $username,\n    ){\n      status,\n      message\n    }\n  }`","import { useLazyQuery } from '@apollo/client'\nimport React, { useEffect, useState } from 'react'\nimport { useLocation, useParams } from 'react-router-dom'\nimport { DateInput } from 'semantic-ui-calendar-react'\nimport { Form, FormGroup, Segment,Label } from 'semantic-ui-react'\n//import { GET_ALL_STAFF_MINIMAL } from '../../../queries/staffQuery'\nimport { formatDate, getMonthOptions, getWeekOptions,getWeekNumber } from '../../utils/DateHelper'\nimport { GET_ALL_STAFF_MINIMAL } from '../../queries/staffQuery'\nimport { ALL_STATION } from '../../queries/stationQuery'\n\nconst TimeSheetsFilter = ({ setFilter }) => {\n  const loggedInStaff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const params = useParams()\n  const today = new Date()\n  const [staff,setStaff] = useState([])\n  const [period,setPeriod] = useState('date')\n  const [stations,setStations] = useState( [])\n  const [groupBy,setGroupBy] = useState('week')\n  const [from,setFrom] = useState(formatDate(new Date(today.getFullYear(), today.getMonth() -3, 1 )).split(' ')[0])\n  const [to,setTo] = useState(formatDate(today).split(' ')[0])\n  const [number,setNumber] = useState(getWeekNumber(today))\n  const [year,setYear] = useState(today.getFullYear())\n\n  const location = useLocation ()\n  const basePage =  location.pathname.split('/')[2]\n\n\n  const [filterStatus,setFilterStatus] = useState('')\n\n  const [staffOptions,setStaffOptions] = useState([])\n\n  const [stationOptions,setStationOptions] = useState(loggedInStaff.permission.timesheet.view.map((station,index ) => {\n    return { key: index, value:station._id, text: station.location }})\n  ) //Setting the permitted station list\n\n  /**If staff has admin rights then all station should be displayed in options */\n  const [getAllStations,{ loading: stationLoading, data: stationData  }] = useLazyQuery(ALL_STATION )\n  useEffect(() => {\n    if(stationData && stationData.allStations){\n      const stOpt=  stationData.allStations.map((station,i) => {\n        return { key: i, value:station.id, text: station.location }\n      })\n      setStationOptions(stOpt)\n    }\n\n\n  }, [stationData])\n\n  const [getAllStaffs,{ loading: staffLoading, data: staffData }] = useLazyQuery(GET_ALL_STAFF_MINIMAL)\n\n  useEffect(() => {\n    if(staffData){\n      const staffOpt = staffData.allStaff.map((staff,index) => {\n        return { key:index, value:staff.id, text: staff.name }\n      } )\n      setStaffOptions(staffOpt)\n    }\n\n\n  }, [staffData])\n\n  useEffect(() => {\n    setFilter({ staff, period ,stations ,groupBy ,from ,to , number, year, filterStatus })\n  },[staff, period, stations, groupBy, from, to, number, year, filterStatus, setFilter])\n\n  useEffect(() => {\n    if(params.staffId ){\n      setStaff([params.staffId])\n    }else{\n      setStaff([])\n    }\n    if(basePage.toLowerCase() === 'mypage'){\n      setStaff([loggedInStaff.id])\n    }\n  },[basePage, loggedInStaff.id, params])\n\n\n  return (\n\n    <>\n\n      <Segment size='tiny' clearing>\n        <Label size='mini' attached='top left'>Filters</Label>\n        <Form size='mini'>\n          <FormGroup widths='equal' >\n            {\n              !params.staffId && basePage.toLowerCase() !== 'mypage' &&\n              <Form.Dropdown\n                label='Staff'\n                value= {staff}\n                loading={staffLoading}\n                options={staffOptions}\n                selection multiple clearable\n                placeholder='All'\n                onFocus= {() => getAllStaffs()}\n                onChange= {(e,{ value }) => setStaff(value)}></Form.Dropdown>\n            }\n            <Form.Dropdown label='Period'\n              value= {period}\n              options= {[{ key:1, value:'date', text:'Date' },{ key:2, value:'week', text:'Week' },{ key:3, value:'month', text:'Month' }, ]}\n              placeholder='All' selection clearable compact\n              onChange ={(e,{ value }) => {\n                if(value ==='week'){\n                  setNumber(getWeekNumber(today))\n                }\n                if(value === 'month'){\n                  setNumber(today.getMonth())\n                }\n                setPeriod(value)\n              } }></Form.Dropdown>\n\n\n            {period === 'date' && <>\n              <DateInput value={from}  label='From'\n                dateFormat='DD-MM-YYYY'\n                onChange = {(e,{ value }) => {\n                  setFrom(value)\n                }}></DateInput>\n              <DateInput value={to} label='To' dateFormat='DD-MM-YYYY'\n                onChange = {(e,{ value }) => {\n                  setTo(value)\n                }}></DateInput>\n            </>}\n\n            {\n              (period === 'week' || period === 'month') && <>\n                <Form.Dropdown\n                  value={number}\n                  label={`Select ${period}`}\n                  options={period==='week'?getWeekOptions():getMonthOptions()}\n                  selection compact\n                  onChange ={(e,{ value }) => {\n                    setNumber(value)\n                    if( period === 'week' && value > getWeekNumber(today)) {\n                      setYear(today.getFullYear -1)\n                    }\n                    if(period === 'month' && value > today.getMonth()) {\n                      setYear(today.getFullYear -1)\n                    }\n\n                  }}></Form.Dropdown>\n              </>\n            }\n            <Form.Dropdown label= 'Group By'\n              value= {groupBy}\n              options= {[{ key:1,value:'week',text:'Week' }, { key:2,value:'month',text:'Month' },]}\n              onChange = {(e,{ value }) => setGroupBy(value)}\n              selection\n              compact>\n\n            </Form.Dropdown >\n            <Form.Dropdown\n              label= 'Station'\n              loading= {stationLoading}\n              options={stationOptions}\n              value= {stations}\n              selection multiple clearable\n              placeholder='All'\n              onFocus= {() => {\n                if(loggedInStaff.permission.admin) {\n                  getAllStations()\n                }\n              }\n              }\n              onChange = {(e,{ value }) => setStations(value)}></Form.Dropdown>\n\n            <Form.Dropdown label= 'Status'\n              value= {filterStatus}\n              options= {[{ key:1,value:'approved',text:'Approved' }, { key:2,value:'pending',text:'Pending' },]}\n              onChange = {(e,{ value }) => setFilterStatus(value)}\n              placeholder='All'\n              clearable\n              selection\n              compact>\n\n            </Form.Dropdown >\n\n          </FormGroup>\n        </Form>\n      </Segment>\n    </>)\n\n\n\n\n\n}\nexport default TimeSheetsFilter","import { useQuery } from '@apollo/client'\nimport React, { useEffect, useState } from 'react'\nimport { Link, useLocation, useParams } from 'react-router-dom'\nimport  _  from 'lodash'\nimport { Table, TableHeader, TableRow, TableHeaderCell, TableBody, TableCell, Loader } from 'semantic-ui-react'\nimport { formatDate, getWeekNumber,getMonthInt } from '../../utils/DateHelper'\nimport TimeSheet from '../StaffPage/TimeSheet'\nimport { GET_ALL_TIMESHEETS } from '../../queries/timeSheetQuery'\nimport TimeSheetsFilter from './TimeSheetsFilter'\n\nconst TimeSheetsOverview = ({ setStaffName  }) => {\n  const today = new Date()\n  const params = useParams()\n  const location = useLocation()\n  const basePage =  location.pathname.split('/')[2]\n\n  const [filter,setFilter] = useState({\n    staff:[],\n    period:'date',\n    from:formatDate(new Date(today.getFullYear(), today.getMonth() -3, 1 )).split(' ')[0],\n    to:formatDate(today).split(' ')[0],\n    number:getWeekNumber(today),\n    groupBy:'week',\n    year:today.getFullYear(),\n    stations:[],\n    filterStatus: '' })\n\n  const variables  = { ...filter\n  }\n\n  if(filter.staff.length === 1){\n    variables.staffId = filter.staff[0]\n  }\n\n  const { loading,data } = useQuery(GET_ALL_TIMESHEETS,{ variables: variables,skip: params.period })\n\n  useEffect (() => {\n    if(data && data.getStaff){\n      setStaffName(data.getStaff.name)\n    }\n  },[data, setStaffName])\n\n\n  if(params.period) {\n    const periodTitle = params.period.split(' ')\n    let period\n    let selected\n    let selectedYear\n    if(periodTitle[0] === 'Week'){\n      period='week'\n      selected = periodTitle[1]\n      selectedYear = periodTitle[2]\n    }\n    else{\n      period='month'\n      selected = getMonthInt(periodTitle[0])\n      selectedYear = periodTitle[1]\n    }\n\n    return <TimeSheet period= {period} selected={parseInt(selected)} selectedYear={parseInt(selectedYear) } staffId={params.staffId } setStaffName={setStaffName} timesheetOnly />\n  }\n\n  return (\n\n    <>\n      <TimeSheetsFilter setFilter= {setFilter}></TimeSheetsFilter>\n\n      <Loader active={loading}> Loading TimeSheet Overview</Loader>\n\n      <Table >\n        <TableHeader>\n          <TableRow>\n            {!params.staffId && basePage.toLowerCase() !== 'mypage' &&\n            <TableHeaderCell>Staff Name</TableHeaderCell>\n            }\n            <TableHeaderCell>Period</TableHeaderCell>\n            <TableHeaderCell> Stations</TableHeaderCell>\n            <TableHeaderCell> Total Hours</TableHeaderCell>\n            <TableHeaderCell> Status</TableHeaderCell>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {data && data.getAllTimeSheets && _.map(data.getAllTimeSheets, (staffs,period) =>\n            _.map(staffs,(staff,name) =>\n              <TableRow key={name} positive= {staff.itemsPending?false:true} negative= {staff.itemsPending?true:false}>\n                {!params.staffId   && basePage.toLowerCase() !== 'mypage' &&\n                <TableCell><Link to={`/Manage/ManageTimesheets/${staff.id}`} onClick={() => {\n\n                }}> {name}</Link></TableCell> }\n                <TableCell>{period}</TableCell>\n                <TableCell>{\n                  _.reduce(staff.station,(p,c,key) => {\n                    if(c !== 0){\n                      return ( (p?p+'/':'')+key)\n                    }\n                    return p\n\n                  },'')}\n                </TableCell>\n                <TableCell>{staff.totHours}</TableCell>\n                <TableCell><Link to={`${location.pathname}/${params.staffId?'':`${staff.id}/`}${period}`}\n                  onClick={() => {\n\n                  }}>{staff.itemsPending ?  `${staff.itemsPending}  Items Pending`: 'All Approved' } </Link></TableCell>\n              </TableRow>)\n\n          )\n          }\n\n        </TableBody>\n      </Table>\n\n\n\n\n    </>)\n\n\n\n\n\n}\nexport default TimeSheetsOverview","import React, { useState } from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport { Breadcrumb } from 'semantic-ui-react'\nimport TimeSheetsOverview from '../TimeSheetsOverview'\n\nconst ManageTimeSheets = ({ setName , }) => {\n  const params = useParams()\n  const [staffName, setStaffName ] = useState('')\n\n  return <>\n    { /** If current page is not timesheetsoverview then show breadcrumbs*/\n      !(params.page && params.page.toLowerCase() === 'timesheetsoverview') &&\n      <>\n        <Breadcrumb>\n          { /**If currentpage is overview page of a staff or period is set on params */\n            (params.staffId) &&\n            <>\n              <Breadcrumb.Section link as = {Link} to = {'/Manage/ManageTimesheets'}> Manage Timesheets </Breadcrumb.Section>\n              <Breadcrumb.Divider/>\n              <Breadcrumb.Section active = {params.period? false: true}  as={params.period?  Link: ''} to={`/Manage/ManageTimesheets/${params.staffId}`}> {staffName } </Breadcrumb.Section>\n            </>\n          }\n          {params.period && <>\n            <Breadcrumb.Divider icon='right chevron'/>\n            <Breadcrumb.Section active>{params.period.replace('_',' ')}</Breadcrumb.Section>\n          </>}\n        </Breadcrumb>\n      </>\n    }\n\n    <TimeSheetsOverview setStaffName= { setName || setStaffName } ></TimeSheetsOverview>\n  </>\n\n}\nexport default ManageTimeSheets","import { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useContext } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { Button, Form, Header, Segment } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { RESET_PASSWORD } from '../../mutations/staffMutation'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nconst PasswordResetPage = () => {\n  const[,dispatch] = useContext(NotificationContext)\n  const params= useParams()\n  const history = useHistory()\n\n  sessionStorage.removeItem('staffKey') //Logout any logged in staff\n\n  const [resetPassword,{ loading,error }] = useMutation(RESET_PASSWORD,{\n    onCompleted: () => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content:'Success, password reset. you can now login',type: 'SUCCESS' } })\n      history.push('/staffLogin')\n    },\n\n    onError: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, password reset failed '}<br/> {err.message}</> ,type: 'ERROR' } })\n    }\n  })\n\n  if(!params.resetCode){\n    return <Header>Reset code mising or invalid</Header>\n  }\n\n  const initVal = {\n    password:'',\n    confirmPassword:''\n  }\n\n\n\n  return(\n    <Segment basic loading ={loading}>\n      <Formik\n        initialValues = { initVal }\n        validate= {(values) =>\n        {\n          const errors = {}\n          if(!values.password || values.password.trim() === '') {\n            errors.password = 'Password is required'\n          }\n\n          if(values.password !== values.confirmPassword){\n            errors.confirmPassword = 'New password and confirm password must match'\n          }\n\n          return errors\n        }\n\n        }\n        onSubmit= {(values) => {\n\n          resetPassword({ variables:{ resetCode: params.resetCode, password: values.password } })\n\n\n        }}\n      >\n        {({ handleSubmit,dirty ,errors }) => <Form style={{ marginBottom:'5rem' }} onSubmit= {handleSubmit}>\n          <Segment>\n            <InputField name='password' label='New Password' type='password' width='8'/>\n\n            <InputField name='confirmPassword' label='Confirm Password' type='password' width='8'/>\n\n            <Button disabled = {!( dirty && _.isEmpty(errors)) } type='submit' style={{ marginTop: '1rem' }} positive>Reset</Button>\n\n          </Segment>\n\n\n        </Form>\n        }\n      </Formik>\n    </Segment>\n\n  )\n}\nexport default PasswordResetPage","import { gql } from '@apollo/client'\n\nexport const CHANGE_PERMISSION = gql`\nmutation changePermission( $id: String! $staff: JsonObject, $station: JsonObject, $timesheet: JsonObject ,$admin: Boolean){\n  changePermission(\n    id: $id\n    staff: $staff\n    station: $station\n    timesheet: $timesheet\n    admin: $admin\n    ){\n      id\n      staff\n      station\n      timesheet\n      admin\n    }\n}`","import { useMutation, useQuery } from '@apollo/client'\nimport React, { Fragment, useContext, useEffect, useState } from 'react'\nimport { Button, Checkbox, Form, Header,Table, TableBody } from 'semantic-ui-react'\nimport _ from 'lodash'\nimport { ALL_STATION } from '../../queries/stationQuery'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nimport { FieldArray, Formik } from 'formik'\nimport { CHANGE_PERMISSION } from '../../mutations/permissionMutation'\nimport { NotificationContext } from '../../contexts/NotificationContext'\n\n\nconst PermissionManager = ({ permissions }) => {\n  const [,dispatch] = useContext(NotificationContext)\n  const [options,setOptions] = useState([]) // List permitted stations\n  const staff =  JSON.parse(sessionStorage.getItem('staffKey'))\n  const [superUserSet,setSuperUserSet] = useState((permissions && permissions.admin )|| false) //If the staff is assigned admin permission\n\n  const hasSuperPermission = staff.permission.admin\n\n  // console.log(hasSuperPermission,staff ,superUserSet)\n  const [updatePermission,{ loading: pLoading }] = useMutation(CHANGE_PERMISSION,{\n    onCompleted: () => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, permission changed' ,type: 'SUCCESS' } })\n    },\n\n    onError: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to change permission'}<br/> {err.message}</> ,type: 'ERROR' } })\n    }\n  })\n\n  const mapPermission = (permssionType) => permssionType && permssionType.map(v => {\n    if(!v) return null\n    return v._id\n  })\n\n  /**Generates station option based on user permission\n   * User can only assign permsission if the user have rights for the station\n   */\n\n  const hasPermission = (permissions) => {\n    if(hasSuperPermission){\n      return true\n    }\n    if((typeof permissions === 'object' )) {\n      if(!_.isEmpty(permissions)){\n        return true\n      }\n    }  else if(permissions){\n      return true\n    }\n    return false\n  }\n\n  const permission = _.mapValues(permissions,(v,k) => {\n    if(typeof v === 'object'){\n      const mod = { ...v }\n      if(k==='station'){\n        mod.edit = mapPermission (mod.edit )\n\n      }\n\n      if(k==='timesheet'){\n        mod.view = mapPermission (mod.view )\n        mod.sign = mapPermission (mod.sign)\n\n      }\n      return mod\n\n    }\n    else return v\n\n  })\n\n  const { loading,data } = useQuery(ALL_STATION,{ skip: !hasSuperPermission })\n  useEffect(() => {\n    if(data){\n      const stations = data.allStations\n      const stationOptions = stations.map((station,index) => {\n        return { key:index, value: station.id, text: station.location }\n      })\n      setOptions(stationOptions)\n    }\n  },[data])\n\n\n\n  const getStationOptions = (fieldName) => {\n    if (hasSuperPermission) {\n      return options\n    }\n    /**Set return station options based on users current permitted station  */\n    let soptions = []\n    switch (fieldName){\n    case 'station.edit':\n      if(staff.permission.station.edit.length ) {\n        soptions= staff.permission.station.edit.map((v,i) => {\n          return { key:i, value: v._id, text: v.location }\n        })\n\n      }\n      return soptions\n\n    case 'timesheet.view':\n      if(staff.permission.timesheet.view.length ) {\n        soptions = staff.permission.timesheet.view.map((v,i) => {\n          return { key:i, value: v._id, text: v.location }\n        })\n\n      }\n      return  soptions\n    case 'timesheet.sign':\n      if(staff.permission.timesheet.sign.length ) {\n        soptions =  staff.permission.timesheet.sign.map((v,i) => {\n          return { key:i, value: v._id, text: v.location }\n        })\n      }\n      return soptions\n\n    default:\n      return soptions\n\n    }\n\n  }\n\n  const allStationIds =  options.map(station => station.value)\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues = {{ ...permission }}\n      onSubmit= { (values ) => {\n        const formValues = { ...values }\n\n        if(!formValues.admin) {\n          _.reduce(values,(prev,cur,scope) =>\n          {\n            if(permission[scope] && _.isEqual(permission[scope] , formValues[scope] )){\n              delete formValues[scope]\n\n            }\n            if(permission[scope] && !_.isEqual( permission[scope] ,formValues[scope] )){\n              _.reduce(formValues[scope],(prev,cur,pType) => {\n                if( _.isEqual(permissions[scope][pType],formValues[scope][pType] )){\n                  delete formValues[scope][pType]\n                }\n              },{})\n\n            }\n          },{})\n          updatePermission({ variables: { ...formValues,id: permissions.id } })\n        }\n        else{\n\n          updatePermission({ variables: { admin:true,id: permissions.id } })\n        }\n\n\n      }\n\n      }\n\n    >\n      {({ setFieldValue,values,handleSubmit,dirty,resetForm }) => <>\n        <Header as ='h3'>Permission</Header>\n        <Checkbox\n          label = 'Administrator (All Permissions for all stations)'\n          disabled = { !hasSuperPermission}\n          toggle\n          name= 'admin'\n          checked = {values.admin}\n          onChange= {(e,{ checked }) => {\n            setFieldValue('admin',checked)\n            setSuperUserSet(checked)\n\n            /**If superUser is set then set all permission fileds  */\n            if(checked) {\n              setFieldValue('station.edit',allStationIds)\n              setFieldValue('station.add',true)\n              setFieldValue('timesheet.view',allStationIds)\n              setFieldValue('timesheet.sign',allStationIds)\n              setFieldValue('staff.edit',true)\n              setFieldValue('staff.add',true)\n              setFieldValue('staff.view',true)\n\n            }\n          }}/>\n\n\n        <Form as='table' loading={loading || pLoading} className='ui celled padded table' onSubmit={handleSubmit}>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>\n          Scope\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n          Edit\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n          Add\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n          View\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n          Sign\n              </Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <TableBody>\n\n            {_.map(permissions,(val,key) => <Fragment key={key}>\n              {key !== '__typename' && key !== 'id' &&  key !== 'admin' &&\n              <FieldArray>\n                {() => <Table.Row key={key}>\n                  <Table.Cell>\n                    {key.toUpperCase()}\n                  </Table.Cell>\n                  {/**EDIT COLUMN */}\n                  <Table.Cell >\n                    {(key=== 'station') &&\n                    <DropDownField\n                      multiple\n                      selection\n                      options= {getStationOptions(`${key}.edit`)}\n                      placeholder = 'Add Stations'\n                      disabled = {loading || !hasPermission(staff.permission[key].edit) || superUserSet}\n                      loading= {loading}\n                      name={`${key}.edit`}\n                    />}\n\n                    {key === 'staff'?\n                      <Checkbox\n                        disabled = {  !hasPermission(staff.permission[key].edit) || superUserSet}\n                        toggle name={`${key}.edit` }\n                        checked = {values[`${key}`].edit }\n                        onChange= {(e,{ checked }) => {\n                          setFieldValue(`${key}.edit`,checked)\n\n                          /** If edit is enabled then user must have view permission */\n                          if(checked) {\n                            setFieldValue(`${key}.view`,checked)\n                          }\n\n                        }}/> : ''\n                    }\n                  </Table.Cell >\n\n                  {/**ADD COLUMN */}\n                  {<Table.Cell >\n                    {key!== 'timesheet' &&\n                    <Checkbox\n                      toggle\n                      disabled = {  !hasPermission(staff.permission[key].add) || superUserSet}\n                      name={`${key}.add`}\n                      checked = {values[`${key}`].add }\n                      onChange= {(e,{ checked }) => {\n                        console.log(`${key}.add`,checked)\n                        setFieldValue(`${key}.add`,checked)\n                        if(key === 'staff' && checked){\n                          /**If staff has add permission then must have view permission by default */\n                          setFieldValue(`${key}.view`,true)\n                        }\n                      }}/>}\n\n                  </Table.Cell>}\n\n                  {/**VIEW COLUMN */}\n                  <Table.Cell  >\n                    {key === 'staff' &&\n                     <Checkbox\n                       disabled = {  !hasPermission(staff.permission[key].view) || superUserSet }\n                       toggle\n                       name={`${key}.view` }\n                       checked = {values[`${key}`].view }\n                       onChange= {(e,{ checked }) => {\n                       /** If edit is enabled then user must have view permission */\n                         if(values.staff.edit || values.staff.add ){\n                           setFieldValue(`${key}.view`,true)\n                         }else{\n                           setFieldValue(`${key}.view`,checked)\n                         }\n                       }}/>\n                    }\n\n                    {key === 'timesheet' &&\n                     <DropDownField\n                       multiple\n                       selection\n                       options={getStationOptions(`${key}.view`)}\n                       placeholder = 'Add Stations'\n                       disabled = {loading  ||  !hasPermission(staff.permission[key].view) || superUserSet}\n                       loading= {loading}\n                       name={`${key}.view`}\n                       onChange = {(e,{ value }) => {\n                         /**If user has permission to sign the station timesheet then user must have permission to view the timesheet for that station as well */\n                         const newViewValues  = [...new Set([...values.timesheet.sign, ...value])]\n                         setFieldValue(`${key}.view`,newViewValues)\n                       }}\n                     />\n                    }\n\n                  </Table.Cell>\n\n                  {/**SIGN COLUMN */}\n                  <Table.Cell disabled = {key !== 'timesheet'}>\n                    {key === 'timesheet' &&\n                    <DropDownField\n                      multiple\n                      selection\n                      name={`${key}.sign`}\n                      options={getStationOptions(`${key}.sign`)}\n                      placeholder = 'Add Stations'\n                      disabled = {loading ||  !hasPermission(staff.permission[key].sign) || superUserSet}\n                      onChange = {(e,{ value }) => {\n                        setFieldValue(`${key}.sign`,value)\n                        /**If user has permission to sign the station timesheet then user must have permission to view the timesheet for that station as well */\n                        const newViewValues  = [...new Set([...values.timesheet.view, ...value])]\n                        setFieldValue(`${key}.view`,newViewValues)\n                      }}\n                      loading= {loading}\n\n                    />\n                    }\n                  </Table.Cell>\n                </Table.Row>}\n\n              </FieldArray>\n              }</Fragment>\n            )\n            }\n\n          </TableBody>\n        </Form>\n        {dirty &&\n        <>\n          <Button onClick = {() => handleSubmit()}> Save Changes</Button>\n          <Button  onClick = {() => resetForm()}> Discard Changes</Button>\n        </>\n        }</>\n      }\n    </Formik>\n\n  )\n\n}\n\nexport default PermissionManager","import { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useContext, useEffect } from 'react'\nimport { Button, Dimmer, Form, Grid, Loader, Modal,ModalContent, ModalHeader } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { STAFF_EDIT } from '../../mutations/staffMutation'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { validateEmail } from '../StationReportPage/NewReportForm/validator'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nconst StaffEditModel = (props) => {\n  const [,dispatch] = useContext(NotificationContext)\n\n  const [updateStaff,{ loading: updateStaffLoading }] = useMutation(STAFF_EDIT,{\n    onCompleted: () => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, staff information saved' ,type: 'SUCCESS' } })\n      props.setOpen(false)\n    },\n\n    onError: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to save edited information'}<br/> {err.message}</> ,type: 'ERROR' } })\n      props.setOpen(false)\n    }\n  })\n\n\n  const initVal = { email: props.email,\n    phone: props.phone || '',\n    contractType: props.contractType,\n    contractHours: props.reqHours,\n    position: props.position || '',\n  }\n  return(\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {props.open}\n      onClose= {() =>  props.setOpen(false)}\n      onOpen= {() => props.setOpen (true)}\n    >\n      <ModalHeader>Editing Staff {props.name} </ModalHeader>\n      <ModalContent>\n\n        {updateStaffLoading &&\n            <Dimmer active>\n              <Loader />\n            </Dimmer>\n        }\n\n        <Formik\n          initialValues = { initVal }\n          validate= {(values) =>\n          {\n            const errors = {}\n            if(/[a-z]/i.test(values.phone)){\n              errors.phone='Phone number cannot contain alphabets '\n            }\n            if(values.phone && values.phone.length < 8){\n              errors.phone='Phone number should be at least 8 charter long '\n            }\n            if(validateEmail(values.email)){\n              errors.email ='Invalid Email'\n            }\n            if(isNaN(values.contractHours)){\n              errors.contractHours ='Contract Hours must be number'\n            }\n            return errors\n          }}\n\n          onSubmit= {(values) => {\n            const updatedValues = _.omitBy(values, (v,k) => initVal[k] === v )\n\n            updateStaff({ variables:{ ...updatedValues,id:props.id } })\n          }}\n        >\n          {({ values,handleSubmit,setFieldValue,dirty,errors }) => <Form style={{ marginBottom:'5rem' }} onSubmit= {handleSubmit}>\n            <Grid>\n              <Grid.Row>\n                <InputField name='email' label='Email' type='email'/>\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='phone' label='Phone' type='tel'/>\n\n              </Grid.Row>\n              <Grid.Row>\n                <DropDownField  name='contractType' labeled label='Contract'\n                  selection\n                  options= {[{\n                    key:1, value:'Contractor', text: 'Contractor' },\n                  { key:2, value:'Employee', text: 'Employee' }]}></DropDownField>\n\n\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='contractHours' label='Required Hours per day'/>\n\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='position' label='Position'/>\n              </Grid.Row>\n            </Grid>\n            {dirty &&\n            <Button type='submit' floated='right' positive>Save</Button>}\n\n          </Form>\n          }\n        </Formik></ModalContent>\n    </Modal>\n\n  )\n}\n\nexport default StaffEditModel","import { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useContext } from 'react'\nimport { Button, Dimmer, Form, Grid, Loader, Modal,ModalContent, ModalHeader } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { CHANGE_PASSWORD } from '../../mutations/staffMutation'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nconst PasswordChangeModel = (props) => {\n\n  const [,dispatch] = useContext(NotificationContext)\n  const [changePassword,{ loading,error }] = useMutation(CHANGE_PASSWORD,{\n    onCompleted: () => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, password cahanged' ,type: 'SUCCESS' } })\n      props.setOpen(false)\n    },\n\n    onError: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to change password'}<br/> {err.message}</> ,type: 'ERROR' } })\n      props.setOpen(false)\n    }\n  })\n\n\n  const initVal = {\n    password:'',\n    newPassword:'',\n    confirmPassword:''\n  }\n\n  return(\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {props.open}\n      onClose= {() =>  props.setOpen(false)}\n      onOpen= {() => props.setOpen (true)}\n    >\n      <ModalHeader>Password Change</ModalHeader>\n      <ModalContent>\n\n        {loading &&\n            <Dimmer active>\n              Updating Password\n              <Loader />\n            </Dimmer>\n        }\n\n        <Formik\n          initialValues = { initVal }\n          validate= {(values) =>\n          {\n            const errors = {}\n            if(!values.password){\n              errors.password = 'Old Password is required'\n            }\n\n            if(values.newPassword === values.password){\n              errors.newPassword = 'New password cannot be same as old password'\n            }\n\n            if(!values.newPassword ){\n              errors.newPassword = 'New password cannot be empty'\n            }\n\n            if(values.newPassword !== values.confirmPassword){\n              errors.confirmPassword = 'New password and confirm password must match'\n            }\n            console.log(errors)\n            return errors\n          }\n\n          }\n          onSubmit= {(values) => {\n            changePassword({ variables:{ id:props.id,password: values.password, newPassword: values.newPassword } })\n\n          }}\n        >\n          {({ handleSubmit,dirty ,errors }) => <Form style={{ marginBottom:'5rem' }} onSubmit= {handleSubmit}>\n            <Grid>\n              <Grid.Row>\n                <InputField name='password' label='Old Password' type='password'/>\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='newPassword' label='New Password' type='password'/>\n\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='confirmPassword' label='Confirm Password' type='password'/>\n              </Grid.Row>\n            </Grid>\n            {dirty && _.isEmpty(errors) &&\n            <Button type='submit' style={{ marginTop: '1rem' }} positive>Change Password</Button>}\n\n          </Form>\n          }\n        </Formik></ModalContent>\n    </Modal>\n\n  )\n}\n\nexport default PasswordChangeModel","import { useMutation, useQuery } from '@apollo/client'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { Button, Confirm, Grid,Header,Icon,Loader, Table, TableBody } from 'semantic-ui-react'\nimport { GET_STAFF } from '../../queries/staffQuery'\nimport PermissionManager from './PermissionManager'\nimport StaffEditModel from './StaffEditModel'\nimport {  RESET_PASSWORD_REQ, RESET_REGISTER_CODE } from '../../mutations/staffMutation'\nimport PasswordChangeModel from './PasswordChangeModel'\nimport { useParams } from 'react-router-dom'\nimport { formatDate } from '../../utils/DateHelper'\nimport { NotificationContext } from '../../contexts/NotificationContext'\n\n\nconst Profile = (props) => {\n  const[,dispatch]= useContext(NotificationContext)\n  const params = useParams()\n\n  const [confirm,setConfirm] = useState({ open:false, handleCancel:() => {}, handleConfirm:() => {} })\n\n  const [passwordChangeOpen,setPasswordChangeOpen] = useState(false)\n  const staff =  JSON.parse(sessionStorage.getItem('staffKey'))\n\n  /**Staff can edit if staff has edit or admin  permission and not own profile */\n  let staffId = staff.id\n\n  if(props.id){\n    staffId= props.id\n  } else if(params.staffId) {\n    staffId= params.staffId\n  }else {\n    staffId= staff.id\n  }\n\n\n  const { loading,error,data } = useQuery(GET_STAFF,{ variables:{ id:staffId ,withPermission: props.staffCanEdit || false  } })\n\n\n\n  const [resetPassword,{ loading: rpLoading,error:rpError }] = useMutation(RESET_PASSWORD_REQ,{\n    onCompleted: () => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, password reset code sent to users email' ,type: 'SUCCESS' } })\n    },\n\n    onError: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to reset'}<br/> {err.message}</> ,type: 'ERROR' } })\n    }\n  })\n  const [resetRegisterCode,{ loading: rcLoading,error:rcError }] = useMutation(RESET_REGISTER_CODE,{\n    onCompleted: () => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, new register code sent to users email' ,type: 'SUCCESS' } })\n    },\n\n    onError: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to send new register code'}<br/> {err.message}</> ,type: 'ERROR' } })\n    }\n  })\n\n\n  const resetConfirm = () => {\n    setConfirm(({ open:false, handleCancel:() => {}, handleConfirm:() => {}  }))\n  }\n\n  useEffect(() => {\n    if(data && props.setStaffName)\n      props.setStaffName(data.getStaff.name)\n\n  },[data, props])\n\n  if ( rpError || rcError) {\n    console.log( rpError, rcError)\n  }\n\n\n  if (loading) {\n    return (\n      <Loader active>Fetching User Profile</Loader>\n    )\n  }\n\n  if (error) {\n    console.log(error)\n    return (\n      <Header as ='h5'>Something Went Wrong, Please try again</Header>\n    )\n  }\n\n  /**If the user has completed registration\n   * Registered user should have regiserCode empty\n  */\n\n  const registered =  data && data.getStaff.registerCode ? false: true\n\n  return (<>\n\n    <Grid columns='3' style={{ marginTop:'1rem' }}>\n      <Grid.Row centered  textAlign='center'>\n        <Grid.Column>\n          <Header as ='h4'>Basic Info</Header>\n          <Table compact>\n            <TableBody>\n              <Table.Row>\n                <Table.Cell width='8'> <strong> Id Card Saved </strong> </Table.Cell>\n                <Table.Cell width='7'>{data.getStaff.idCardCode ?\n                  <Icon name='checkmark' color='green'></Icon> : <Icon name='cancel' color='red'></Icon> }</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell width='8'> <strong> Registration Complete</strong> </Table.Cell>\n                <Table.Cell width='7'>{registered ?\n                  <Icon name='checkmark' color='green'></Icon> : <Icon name='cancel' color='red'></Icon> }</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Email </strong> </Table.Cell>\n                <Table.Cell > {data.getStaff.email}</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Phone </strong> </Table.Cell>\n                <Table.Cell > {data.getStaff.phone}</Table.Cell>\n              </Table.Row>\n              { registered &&\n              <Table.Row>\n                <Table.Cell> <strong> Username </strong> </Table.Cell>\n                <Table.Cell> {data.getStaff.username}</Table.Cell>\n              </Table.Row>}\n            </TableBody>\n            <Table.Footer>\n              {(props.staffCanEdit || staff.id === data.getStaff.id) &&\n              <Table.Row>\n                <Table.HeaderCell >\n                  <Button\n                    primary\n                    size='small'\n                  >\n                 Scan Id Card\n                  </Button>\n                </Table.HeaderCell>\n                <Table.HeaderCell >\n                  <Button\n                    loading = {rpLoading || rcLoading}\n                    disabled =  {rpLoading || rcLoading}\n                    primary\n                    size='small'\n                    onClick = { (e,{ children }) => {\n\n                      switch( children ){\n                      case 'Change Password':\n                        setPasswordChangeOpen(true)\n                        break\n                      case 'Reset Password':\n                        setConfirm({\n                          open:true,\n                          handleConfirm: () => {\n                            resetPassword({ variables:{ id:data.getStaff.id } })\n                            resetConfirm()\n                          },\n                          handleCancel:() => {\n                            resetConfirm()\n                          },\n                          content: 'Confirm Reset Password',\n                          header:'Confirm'\n                        })\n                        break\n                      case 'Resend Register Link':\n                        setConfirm({\n                          open:true,\n                          handleConfirm: () => {\n                            resetRegisterCode({ variables:{ id:data.getStaff.id } })\n                            resetConfirm()\n                          },\n                          handleCancel:() => {\n                            resetConfirm()\n                          },\n                          content: 'Confirm Reset Registration Link',\n                          header:'Confirm'\n                        })\n                        break\n                      default:\n                        break\n                      }\n                    }\n\n                    }\n                  >\n                    {registered\n                      ?staff.id === data.getStaff.id\n                        ? 'Change Password'\n                        : props.staffCanEdit?  'Reset Password':''\n                      :'Resend Register Link'}\n                  </Button>\n                </Table.HeaderCell>\n              </Table.Row>}\n            </Table.Footer>\n\n          </Table>\n        </Grid.Column>\n        <Grid.Column>\n          <Header as ='h4'>Contract</Header>\n          <Table compact>\n            <TableBody>\n              <Table.Row>\n                <Table.Cell> <strong> Type </strong> </Table.Cell>\n                <Table.Cell>{data && data.getStaff.contractType }</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Required Hrs/Day </strong> </Table.Cell>\n                <Table.Cell > {data && data.getStaff.reqHours}</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Position </strong> </Table.Cell>\n                <Table.Cell> {data && data.getStaff.position}</Table.Cell>\n              </Table.Row>\n            </TableBody>\n\n\n          </Table>\n        </Grid.Column>\n        <Grid.Column>\n          <Header as ='h4'>Last Active</Header>\n          <Table compact>\n            <TableBody>\n              <Table.Row>\n                <Table.Cell> <strong> Station </strong> </Table.Cell>\n                <Table.Cell>{ data && data.getStaff.lastActive &&  data.getStaff.lastActive.station && data.getStaff.lastActive.station.location }</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Active at </strong> </Table.Cell>\n                <Table.Cell > {data && data.getStaff.lastActive && formatDate(data.getStaff.lastActive.activeAt) }</Table.Cell>\n              </Table.Row>\n            </TableBody>\n\n          </Table>\n        </Grid.Column>\n\n      </Grid.Row>\n      {props.staffCanEdit &&\n      <Grid.Row > <Grid.Column><PermissionManager permissions= {data.getStaff.permission}></PermissionManager> </Grid.Column>  </Grid.Row>}\n\n      <StaffEditModel\n        open={props.editModelOpen}\n        setOpen= {props.setEditModelOpen}\n        email = {data.getStaff.email}\n        phone =  {data.getStaff.phone}\n        contractType ={data.getStaff.contractType}\n        reqHours =  {data.getStaff.reqHours}\n        position = {data.getStaff.position}\n        id= {data.getStaff.id}\n      ></StaffEditModel>\n\n      <PasswordChangeModel\n        open = {passwordChangeOpen}\n        setOpen = {setPasswordChangeOpen}\n        id= {data.getStaff.id }\n      ></PasswordChangeModel>\n\n\n      <Confirm\n        open={confirm.open}\n        content = {confirm.content}\n        header = {confirm.header}\n        onCancel={confirm.handleCancel}\n        onConfirm={confirm.handleConfirm}\n      />\n\n    </Grid>\n  </>\n\n\n\n\n  )\n}\n\n\n\n\n\nexport default Profile","import { useLazyQuery, useMutation, useQuery } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useEffect, useState } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { Button, Form, Header, Icon, Input, Label,  Message, Segment } from 'semantic-ui-react'\nimport { COMPLETE_REGISTRATION } from '../../mutations/staffMutation'\nimport { GET_STAFF_REG,VERIFY_USERNAME } from '../../queries/staffQuery'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nconst RegisterPage = ({ setName }) => {\n\n  const params= useParams()\n  const history = useHistory()\n\n  const { loading,error,data } = useQuery(GET_STAFF_REG, { variables: { registerCode: params.registerCode }, skip: !params.registerCode  })\n  const [completeRegistration,{ loading:regstrationLoading,error:registrationError,data:registrationData }] = useMutation(COMPLETE_REGISTRATION)\n  const [validateUsernameQuery,{ loading:usernameLoading,data:usernameData }] = useLazyQuery(VERIFY_USERNAME)\n  const [usernameVerified,setUsernameVerified] = useState({ verified:false })\n\n\n  useEffect(() => {\n    if(usernameData){\n\n      setUsernameVerified({ verified:true,status:usernameData.verifyUsername.status })\n      //setFieldError('username','This is a error')\n    }\n\n  }, [usernameData])\n\n  if(!params.registerCode){\n    return <Header>Registration code mising or invalid</Header>\n  }\n\n  if(error || registrationError){\n    console.log(error)\n\n  }\n\n  if(registrationData && registrationData.registerStaff.status === 'SUCCESS'){\n    history.push('/staff')\n    return null\n  }\n\n  if(data && data.getStaff){\n    setName(data.getStaff.name)\n  }\n\n\n  const initVal = {\n    password:'',\n    username:'',\n    confirmPassword:''\n  }\n\n  const validateUsername =(value) => {\n    validateUsernameQuery({ variables:{ username:value } })\n\n  }\n\n\n  return(\n    <Segment basic loading ={loading || regstrationLoading}>\n      <Message success={data && data.getStaff} error={error?true:false}>\n        <Message.Header>\n          {data && data.getStaff && 'Please complete registration by setting  your username and password'}\n          {error && error.message}\n          {(data && !data.getStaff) && 'Registration code Invalid'}\n        </Message.Header>\n      </Message>\n\n      { data && data.getStaff &&\n      <Formik\n        initialValues = { initVal }\n        validate= {(values) =>\n        {\n          const errors = {}\n\n          if(!values.username || values.username.trim() === ''){\n            errors.username = 'Username is required'\n          }\n\n          if(values.username && values.username.length < 4){\n            errors.username = 'Username should be at least 4 character long'\n          }\n          if(!values.password || values.password.trim() === '') {\n            errors.password = 'Password is required'\n          }\n\n          if(values.password !== values.confirmPassword){\n            errors.confirmPassword = 'New password and confirm password must match'\n          }\n\n          return errors\n        }\n\n        }\n        onSubmit= {(values) => {\n\n          completeRegistration({ variables:{ registerCode: params.registerCode, password: values.password ,username: values.username } })\n\n\n        }}\n      >\n        {({ values,handleChange, handleSubmit,dirty ,errors, handleBlur, touched }) => <Form style={{ marginBottom:'5rem' }} onSubmit= {handleSubmit}>\n\n          <Form.Field width='8'>\n            <Input\n              loading={usernameLoading}\n              icon= {<Icon name= {errors.username === undefined && usernameVerified.verified?(usernameVerified.status==='SUCCESS'?'check circle':'cancel'):''} color={usernameVerified.verified?usernameVerified.status==='SUCCESS'?'green':'red':'red'} />}\n              onBlur= {handleBlur}\n              name='username' label='Username' width='8' onChange = {e => {\n              // call the built-in onchange\n                handleChange(e)\n                let username = e.currentTarget.value\n                validateUsername(username)\n              }}/>\n\n            { ((errors.username && touched.username) ||  (errors.username === undefined && usernameVerified.verified && usernameVerified.status!=='SUCCESS')) &&\n           <Label pointing prompt>\n             { errors.username || 'Selected username already taken, please select new username' }\n           </Label>}\n          </Form.Field>\n\n\n\n\n          <InputField name='password' label='Password' type='password' width='8'/>\n\n          <InputField name='confirmPassword' label='Confirm Password' type='password' width='8'/>\n\n\n          <Button disabled = {!( dirty && _.isEmpty(errors) && usernameVerified.verified && usernameVerified.status ==='SUCCESS') }type='submit' style={{ marginTop: '1rem' }} positive>Register</Button>\n\n        </Form>\n        }\n      </Formik>}\n    </Segment>\n\n  )\n}\nexport default RegisterPage","import React from 'react'\r\nimport { Dropdown, Menu } from 'semantic-ui-react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\n\r\n\r\nconst StaffMenuBar = ({ staffName, activeItem, setActiveItem }) => {\r\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\r\n  const history = useHistory()\r\n\r\n  const location = useLocation()\r\n\r\n  if(location.pathname.split('/')[1].toLowerCase() === 'register'){\r\n    return (\r\n\r\n      <Menu inverted color=\"blue\" stackable >\r\n        <Menu.Item position='right'>\r\n          Welcome {staffName}\r\n        </Menu.Item>\r\n      </Menu>\r\n    )\r\n\r\n  }\r\n\r\n\r\n  const handleMenuClick = (e, { name }) => {\r\n    setActiveItem( name )\r\n    if( ['Profile','Timesheets','TimesheetsOverview'].includes(name) ){\r\n      history.push(`/staff/${staff.id}/${name}`)\r\n    }else{\r\n      history.push(`/${name}`)\r\n    }\r\n  }\r\n\r\n  const logout = () => {\r\n    sessionStorage.removeItem('staffKey')\r\n    history.push('/staffLogin')\r\n  }\r\n\r\n  const menuItems = []\r\n\r\n\r\n  const cornerButton = () => {\r\n    return (\r\n      <Dropdown item text = {`Welcome ${staff.name}` } >\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item text='Logout' onClick={() => logout()}/>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    )\r\n  }\r\n\r\n  /** Add Items to Menu*/\r\n  if (menuItems.length === 0) {\r\n    menuItems.push('Timesheets')\r\n    menuItems.push('TimesheetsOverview')\r\n    menuItems.push('Profile')\r\n  }\r\n\r\n\r\n  const getMenuItems = () => {\r\n    return menuItems.map(item =>\r\n      <Menu.Item  key={ item} name = {item} active = {activeItem ===  item }\r\n        onClick = {handleMenuClick} />)\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <Menu inverted color=\"blue\" stackable >\r\n\r\n      {getMenuItems()}\r\n      <Menu.Menu position='right'>\r\n        {cornerButton()}\r\n      </Menu.Menu>\r\n    </Menu>\r\n\r\n\r\n\r\n\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default StaffMenuBar","import React, { useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Menu } from 'semantic-ui-react'\n\nconst StaffSubMenu = ({  activeItem, setActiveItem ,staffName, staffId ,staffCanEdit ,setEditModelOpen }) => {\n  const loggedInStaffPermissions = JSON.parse( sessionStorage.getItem('staffKey')).permission\n  const history = useHistory()\n  useEffect(() => {\n    setActiveItem('')\n    return () => setActiveItem('')\n  },[setActiveItem])\n  return (\n    <Menu pointing secondary >\n      <Menu.Item header>{staffName}</Menu.Item>\n      <Menu.Item\n        position='right'\n        name='Profile'\n        active = {activeItem === 'Profile'}\n        onClick={() => {\n          setActiveItem('Profile')\n          history.push(`/Manage/AllStaffs/${staffId}/Profile`)\n        }}\n      />\n\n      {(loggedInStaffPermissions.admin || loggedInStaffPermissions.timesheet.view.length || loggedInStaffPermissions.timesheet.sign.length) === true  &&\n        <>\n          <Menu.Item\n            name='Timesheets'\n            active = {activeItem === 'Timesheets'}\n            onClick={() => {\n              setActiveItem('Timesheets')\n              history.push(`/Manage/AllStaffs/${staffId}/Timesheets`)\n            }}\n          />\n\n\n          <Menu.Item\n            name='TimesheetsOverview'\n            active = {activeItem === 'TimesheetsOverview'}\n            onClick={() => {\n              setActiveItem('TimesheetsOverview')\n              history.push(`/Manage/AllStaffs/${staffId}/TimesheetsOverview`)\n\n\n            }}\n          />\n        </>}\n      {staffCanEdit &&<Menu.Item\n        position='right'\n        name='EditProfile'\n        icon = 'edit'\n        onClick={(e) => {\n          e.preventDefault()\n          history.push('Profile')\n          setActiveItem('Profile')\n          setEditModelOpen(true)\n        }}\n      />}\n\n    </Menu>\n\n  )}\n\nexport default StaffSubMenu","import React,{ useEffect, useState } from 'react'\nimport { Link, useHistory, useLocation, useParams } from 'react-router-dom'\nimport { Breadcrumb, BreadcrumbDivider, BreadcrumbSection } from 'semantic-ui-react'\nimport ManageTimeSheets from '../AdminPages/ManageTimeSheets'\nimport PasswordResetPage from './PasswordResetPage'\nimport Profile from './Profile'\nimport RegisterPage from './RegisterPage'\nimport StaffMenuBar from './StaffMenuBar'\nimport StaffSubMenu from './StaffSubMenu'\nimport TimeSheet from './TimeSheet'\n/**\n * Staff page component\n * Can receive staffName as props  if props not set then retrives staffId from url nad fetches name\n * @param props {staffName,id}\n */\nconst StaffPage = ({ name ,id }) => {\n\n  const params = useParams()\n\n  let staffId = params && params.staffId\n  let page = params && params.page\n  const location = useLocation()\n  const history = useHistory()\n  const [staffName, setStaffName] = useState(name)\n\n  const [editModelOpen,setEditModelOpen] = useState(false)\n  const [activeItem, setActiveItem] = useState(page )\n  const [subMenuActiveItem, setSubMenuActiveItem] = useState(page || 'Profile')\n\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\n\n  const [loggedInStaffName, setLoggedInStaffName] = useState(staff && staff.name)\n\n  const locationPaths = location.pathname.split('/')\n\n  useEffect(() => {\n    setActiveItem(page)\n    setSubMenuActiveItem(page)\n  },[page])\n\n  /**If the user is trying to register via registration link  */\n  if(locationPaths[1].toLowerCase() === 'register'){\n    page = 'register'\n    return<>\n      <StaffMenuBar staffName = {loggedInStaffName} activeItem= {activeItem} setActiveItem={setActiveItem}></StaffMenuBar>\n      <RegisterPage setName={setLoggedInStaffName}></RegisterPage></>\n  }\n\n  if(locationPaths[1].toLowerCase() === 'reset-password'){\n    page = 'reset-password'\n    return<>\n      <PasswordResetPage></PasswordResetPage></>\n  }\n\n\n  /**If user is not logged in and is not requesting to register or reset password  */\n  if(!staff && !( page === 'register' || page === 'reset-password')){\n    history.push('/staffLogin')\n    return null\n  }\n\n\n  const staffCanEdit  = (staff.id !== staffId && staffId !== undefined)  && ((staff.permission && staff.permission.staff.edit) ||  staff.permission.admin || false)\n  const staffHasMangeRights =  staff.permission && (\n    staff.permission.admin ||\n    staff.permission.station.edit.length > 0 ||\n      staff.permission.station.add ||\n      staff.permission.staff.view ||\n      staff.permission.staff.add ||\n      staff.permission.staff.edit ||\n      staff.permission.timesheet.view.length > 0\n  )\n\n  /**If id is passed as props then use that as staffId*/\n  if(id){\n    staffId= id\n  }\n  /**If the url have staff Id */\n  else if(params.staffId) {\n    staffId= params.staffId\n  }\n  /**staff is loggedIn user */\n  else {\n    staffId= staff.id\n  }\n\n  const basePage =  locationPaths[1] //root page\n  if(staff.id !== staffId && basePage.toLocaleLowerCase() === 'staff' ){ //if user is not same as logged in user then redirect to manage page\n    history.push(`/Manage/AllStaffs/${staffId}/${activeItem}`)\n  }\n\n  if(staffHasMangeRights && basePage.toLowerCase() !== 'manage' ){ // if user has manage rights then redirect to manage page\n    history.push('/Manage/MyPage/Profile')\n  }\n\n  /**\n   * Set bredcrumbs for diffent view based on root page\n   */\n\n  const getBreadCrumb = () => {\n\n    return(\n      <>\n        <Breadcrumb>\n          { staff.id === staffId &&\n            <>\n              <BreadcrumbSection> My Page </BreadcrumbSection>\n              <BreadcrumbDivider/>\n            </>\n          }\n          {\n            staff.id !== staffId &&\n            <>\n              <BreadcrumbSection link as = {Link} to = {`/${basePage}/${locationPaths[2]}`}> {locationPaths[2]} </BreadcrumbSection>\n              <BreadcrumbDivider/>\n              <BreadcrumbSection link as={Link} to={`/${basePage}/${locationPaths[2]}/${locationPaths[3]}/Profile`}> {staffName || staffId} </BreadcrumbSection>\n              <BreadcrumbDivider/>\n\n            </>\n          }\n          {\n            page && page.toLowerCase()=== 'timesheetsoverview'  && params.period ?\n              <>\n                <BreadcrumbSection link as={Link}\n                  to={\n                    locationPaths.reduce ((p,c,i) => {\n                      if(i === locationPaths.length -1 || c === ''){\n                        return p\n                      }\n                      return p+'/'+c\n                    })}\n                  active> {subMenuActiveItem} </BreadcrumbSection>\n                <BreadcrumbDivider icon='right chevron'/>\n                <BreadcrumbSection active>{params.period.replace('_',' ')}</BreadcrumbSection>\n              </>:\n              <BreadcrumbSection active> {subMenuActiveItem} </BreadcrumbSection>\n          }\n\n        </Breadcrumb>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {!staffHasMangeRights  && <StaffMenuBar staffName = {loggedInStaffName} activeItem= {activeItem} setActiveItem={setActiveItem}></StaffMenuBar> }\n      {getBreadCrumb()}\n\n      {staffId !== staff.id  && //If admin user is browsing staff\n      <StaffSubMenu\n        activeItem= {subMenuActiveItem}\n        setActiveItem = {setSubMenuActiveItem}\n        staffName= {staffName} staffId={staffId}\n        staffCanEdit={staffCanEdit}\n        setEditModelOpen = {setEditModelOpen}/>\n      }\n\n      { /**If submenu is timesheets  Or current page is timesheet */\n        ((subMenuActiveItem &&subMenuActiveItem.toLocaleLowerCase() === 'timesheets' )|| (activeItem && activeItem.toLowerCase() === 'timesheets')) && <>\n          <TimeSheet staffId ={staffId} setStaffName={setStaffName} />\n        </>\n      }\n      {/**If submenu is profile Or current page is profile */\n        ((subMenuActiveItem && subMenuActiveItem.toLocaleLowerCase() === 'profile' ) || ( activeItem && activeItem.toLowerCase() === 'profile') )&&\n        <>\n          <Profile id={staffId} staffCanEdit={staffCanEdit} setEditModelOpen={setEditModelOpen} editModelOpen={editModelOpen} setStaffName={setStaffName}/>\n        </>\n      }\n      {/**If submenu is timesheetsoverview  current page is managetimesheets or  timesheetsoverview*/\n        ((subMenuActiveItem && subMenuActiveItem.toLocaleLowerCase() === 'timesheetsoverview' ) || (activeItem && ( activeItem.toLowerCase() === 'timesheetsoverview'))) &&\n        <>\n          <ManageTimeSheets setName={setStaffName}></ManageTimeSheets>\n        </>\n      }\n    </>\n  )\n}\n\nexport default StaffPage","import { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useContext, useEffect } from 'react'\nimport { Button, Dimmer, Form, Grid, Icon, List, Loader, Modal,ModalContent, ModalHeader, Segment } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { STAFF_ADD } from '../../mutations/staffMutation'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { validateEmail, validateName } from '../StationReportPage/NewReportForm/validator'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nconst NewStaffModel = (props) => {\n  const [,dispatch]= useContext(NotificationContext)\n\n  const [addStaffMutation,{ loading,error }] = useMutation(STAFF_ADD)\n\n  const addStaff = (values) => {\n    addStaffMutation({\n      variables: values,\n      update: (store,response) => {\n        store.modify({\n          fields:{\n            allStaff(existingStaffRefs , { readField }){\n              const newStaff = response.data.addStaff\n              if(existingStaffRefs.some(ref => readField('id',ref) === newStaff.id)){\n                return existingStaffRefs\n              }\n              return [...existingStaffRefs,newStaff]\n\n            }\n          }\n\n        })\n      }\n    }).then(\n      res =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, new staff ${values.name} created` ,type: 'SUCCESS' } }),\n      err =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, Cannot create new staff  staff ${values.name}`}<br/> {err.message}</> ,type: 'ERROR' } }),\n      props.setOpen(false)\n    )\n\n  }\n  const initVal = {\n    name: '',\n    email: '',\n    phone: '',\n    contractType: '',\n    contractHours: '',\n    position: '',\n  }\n  return(\n    <Formik\n      initialValues = { initVal }\n      onSubmit= {(values) => {\n        addStaff(values)\n      }}\n      validate = {(values) => {\n        let errors = {}\n\n        errors.name = validateName(values.name)\n        errors.email = validateEmail(values.email)\n\n        if(_.isEmpty(errors.name)) delete errors.name\n        if(_.isEmpty(errors.email)) delete errors.email\n\n        if(!values.contractType ){\n          errors.contractType = 'Please select contract type'\n        }\n\n        if(!values.contractHours || !parseFloat(values.contractHours) ){\n          errors.contractHours = 'Invalid contract hours'\n        }\n\n        return errors\n\n      }}\n    >\n      {({ values,handleSubmit,setFieldValue,dirty }) =>\n        <Modal\n          closeIcon\n          closeOnEscape={false}\n          closeOnDimmerClick={false}\n          open = {props.open}\n          onClose= {() =>  props.setOpen(false)}\n          onOpen= {() => props.setOpen (true)}\n        >\n          <ModalHeader>New Staff {props.name} </ModalHeader>\n          <ModalContent>\n\n            { loading &&\n            <Dimmer active>\n              <Loader />\n            </Dimmer>\n            }\n\n\n            <Form style={{ marginBottom:'5rem' }}>\n              <Grid>\n                <Grid.Row>\n                  <InputField name='name' label='Name' type='text' width='8'/>\n                </Grid.Row>\n                <Grid.Row>\n                  <InputField name='email' label='Email' type='email'  width='8'/>\n                </Grid.Row>\n                <Grid.Row>\n                  <InputField name='phone' label='Phone' type='tel'  width='8'/>\n\n                </Grid.Row>\n                <Grid.Row>\n                  <DropDownField  name='contractType' labeled label='Contract'\n                    selection\n                    width='8'\n                    options= {[{\n                      key:1, value:'Contractor', text: 'Contractor' },\n                    { key:2, value:'Employee', text: 'Employee' }]}\n                    onChange = {  (e,{ value }) => {\n                      setFieldValue('contractType',value)\n                    }}\n                  >\n\n                  </DropDownField>\n\n\n                </Grid.Row>\n                <Grid.Row>\n                  <InputField name='contractHours' label='Required Hours per day' type='number'  width='8'/>\n\n                </Grid.Row>\n                <Grid.Row>\n                  <InputField name='position' label='Position' width='8'/>\n                </Grid.Row>\n                <Grid.Row>\n                  <Form.Button icon type='button'  labelPosition='right' primary><Icon size='big' name='barcode'/>Link Id card</Form.Button>\n                </Grid.Row>\n              </Grid>\n            </Form>\n          </ModalContent>\n          <Modal.Actions>\n            <Button   negative onClick={() => props.setOpen (false)}>Cancel</Button>\n            {dirty &&\n            <Button  positive onClick= {() => handleSubmit()}>Save</Button>}\n          </Modal.Actions>\n        </Modal>\n      }\n    </Formik>\n\n  )\n}\n\nexport default NewStaffModel","import React, { useState,useEffect, useContext } from 'react'\nimport { useMutation, useQuery } from '@apollo/client'\nimport { GET_ALL_STAFF } from '../../queries/staffQuery'\nimport { Segment, Loader, Table, TableHeaderCell, TableRow, TableCell, Button, Icon, Input, Form, Checkbox } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport NewStaffModel from './NewStaffModal'\nimport { formatDate } from '../../utils/DateHelper'\nimport { DELETE_STAFF, SET_STAFF_STATUS } from '../../mutations/staffMutation'\nimport ConfirmModal from '../ConfirmModal'\nimport { NotificationContext } from '../../contexts/NotificationContext'\n\n\nconst AllStaffs = () => {\n  const[,dispatch] = useContext(NotificationContext)\n  const { loading,error,data } = useQuery(GET_ALL_STAFF)\n  const  [staffsData,setStaffsData]  = useState([])\n  const [staffAddOpen,setStaffAddOpen ]= useState(false)\n  const [confirmModalOpen, setConfirmModalOpen] = useState(false)\n  const [confirm,setConfirm] = useState({ title:'', fn:() => {} })\n\n  const loggedInstaff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const [deleteStaff] = useMutation(DELETE_STAFF)\n  const [toggleStaffStatus, { loading: toggleing }] = useMutation ( SET_STAFF_STATUS)\n\n\n  const staffDelete = (id,name) => {\n    deleteStaff({\n      variables: { id: id } ,\n      update: (store) => {\n        store.evict({\n          id: `Staff:${id}`\n        })\n      }\n    }).then(\n      res =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, staff ${name} deleted` ,type: 'SUCCESS' } }),\n      err =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, Cannot delete staff ${name}`}<br/> {err.message}</> ,type: 'ERROR' } })\n    )\n  }\n\n  const staffToggle = (id, name, toggle) => {\n    toggleStaffStatus({\n      variables: { id:id , disabled: !toggle },\n      update: (store) => {\n        store.modify({\n          id: `Staff:${id}`,\n          fields:{\n            disabled(){\n              return !toggle\n            }\n          }\n        })\n      }\n    }).then(\n      res =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, staff ${name} set ${toggle?'active':'disabled'}` ,type: 'SUCCESS' } }),\n      err =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, Cannot toggle status for  staff ${name}`}<br/> {err.message}</> ,type: 'ERROR' } })\n    )\n  }\n\n\n  useEffect  (() => {\n    if(data  && data.allStaff ){\n      setStaffsData(data.allStaff)\n    }\n  }, [data])\n\n  if(loading){\n    return (\n      <Loader active>Fetching Staffs</Loader>\n    )\n  }\n\n  if(error){\n    return <Segment >Something Went Wrong </Segment>\n  }\n\n\n\n\n  return (\n    <>\n      {(loggedInstaff.permission.staff.add || loggedInstaff.permission.admin ) ===true &&\n      <Button primary icon onClick= {() => setStaffAddOpen(true)}>Add New Staff <Icon name = 'add'> </Icon></Button>}\n      {\n        staffsData &&\n      <Input icon='search' placeholder='Search...'\n        onChange ={ (event,{ value }) => {\n          if(!value || value.trim() === ''){\n            setStaffsData(data.allStaff)\n          }else{\n            const filterData = staffsData.filter(staff => staff.name.includes(value) )\n            setStaffsData(filterData)\n          }\n\n\n        }}\n      />}\n      <Table>\n        <Table.Header>\n          <TableRow>\n            <TableHeaderCell> Name </TableHeaderCell>\n            <TableHeaderCell> Email </TableHeaderCell>\n            <TableHeaderCell> Phone </TableHeaderCell>\n            <TableHeaderCell> Last Active </TableHeaderCell>\n            <TableHeaderCell> Recent Station </TableHeaderCell>\n            <TableHeaderCell> Account Status </TableHeaderCell>\n            <TableHeaderCell> </TableHeaderCell>\n          </TableRow>\n        </Table.Header>\n        <Table.Body>\n          {staffsData && staffsData.map( staff =>\n            <Table.Row key= {staff.id}>\n              <TableCell><Link to={`/Manage/AllStaffs/${staff.id}/Profile`}>{staff.name}</Link></TableCell>\n              <TableCell>{staff.email}</TableCell>\n              <TableCell>{staff.phone}</TableCell>\n              <TableCell>{staff.lastActive && formatDate(staff.lastActive.activeAt) }</TableCell>\n              <TableCell>{staff.lastActive && staff.lastActive.station && staff.lastActive.station.location}</TableCell>\n              <TableCell>{staff.accountStatus}<Form.Field>\n\n                <Checkbox checked={!staff.disabled } toggle label={staff.disabled ?'Disabled': 'Active'} disabled = {staff.id === loggedInstaff.id || !(loggedInstaff.permission.staff.edit || loggedInstaff.permission.admin)}\n                  onChange ={(e,{ checked }) => {\n                    staffToggle( staff.id,staff.name,checked)\n                  }}/>\n              </Form.Field></TableCell>\n              <TableCell>\n                {staff.id !== loggedInstaff.id && (loggedInstaff.permission.staff.edit || loggedInstaff.permission.admin)  &&\n                <Button circular size ='mini' icon ='trash' negative disabled = {staff.id === loggedInstaff.id}\n                  onClick={() => {\n                    setConfirmModalOpen(true)\n                    setConfirm({ title:'Are you sure, you want to delete '+ staff.name +'?', fn: () => staffDelete(staff.id,staff.name) })\n                  }}\n                ></Button>}\n              </TableCell>\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n      <NewStaffModel open={staffAddOpen} setOpen= {setStaffAddOpen}></NewStaffModel>\n      {confirmModalOpen &&\n        <ConfirmModal open= {confirmModalOpen} confirm= {confirm} setOpen= {setConfirmModalOpen} ></ConfirmModal>\n      }\n    </>\n\n  )\n}\n\nexport default AllStaffs","import { useMutation, useQuery } from '@apollo/client'\nimport { FieldArray, Formik } from 'formik'\nimport _, { forEach } from 'lodash'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { Button, Dimmer, Form, Grid, Header, Icon, List, Loader, Modal,ModalContent, ModalHeader, Segment } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { ADD_STATION } from '../../mutations/stationMutation'\nimport { ALL_COSTUMERS } from '../../queries/costumerQuey'\nimport { ALL_STATION } from '../../queries/stationQuery'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { validateEmail, validateName } from '../StationReportPage/NewReportForm/validator'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nconst NewStationModel = (props) => {\n\n  const [,dispatch] = useContext(NotificationContext)\n  const [addStationMutation,{ loading,error }] = useMutation(ADD_STATION)\n  const [countryList,setCountryList]=  useState([])\n  const [costumerList,setCostumerList] = useState([])\n\n  const { loading: costumerLoading } = useQuery(ALL_COSTUMERS, { onCompleted : (data) => {\n    if(data.allCostumers){\n      const costumerOptions =data.allCostumers.map((costumer,index) => {\n        return { key:index, value: costumer.id, text: costumer.name }\n      } )\n      setCostumerList(costumerOptions)\n    }\n  } })\n\n  useEffect(() => {\n    const fetchCountries = async () => {\n      const response = await fetch('https://restcountries.eu/rest/v2/?fields=name;alpha2Code;')\n      const countries = await response.json()\n      const countryArray = countries.map((country,index) => {\n        const exclude = ['aq','bq','cw','gg','im','je','xk','bl','mf','sx','ss']\n        if(exclude.includes(country.alpha2Code.toLowerCase())){ //exclusdw coutry codes have no flags defined on semntic ui so return without flag\n          return { key:index, value: country.name, text:  country.name  }\n        }\n        return { key:index, value: country.name, text:  country.name ,flag: country.alpha2Code.toLowerCase() }\n      })\n      setCountryList(countryArray)\n    }\n\n    fetchCountries()\n  },[])\n\n  const addStation = (values) => {\n    addStationMutation({\n      variables: values,\n      update: (store,{ data:{ addStation } }) => {\n        store.modify({\n          fields:{\n            allStations(existingStationRefs , { readField }){\n              const newStation = addStation\n              if(existingStationRefs.some(ref => readField('id',ref) === newStation.id)){\n                return existingStationRefs\n              }\n              const update = { ...values,id: newStation.id }\n              return [...existingStationRefs,update]\n\n            }\n          }\n\n        })\n        /**Add station information to each added costumer on cache */\n        forEach(values.costumers, costumer => {\n          store.modify({\n            id: `Costumer:${costumer}`,\n            fields:{\n              stations(existingStationRefs, { readField }) {\n                if(existingStationRefs.some(ref => readField('id',ref) === addStation.id)){\n                  return existingStationRefs\n                }\n                return [...existingStationRefs, { '__ref':`Station:${addStation.id}` }]\n              }\n            }\n          })\n        })\n\n\n      }\n    }).then(\n      res =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, ${values.location} added to station list` ,type: 'SUCCESS' } }),\n      err =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, ${values.location} cannot be added to station list`}<br/> {err.message}</> ,type: 'ERROR' } }),\n      props.setOpen(false),\n    )\n  }\n\n\n  const initVal = {\n    location: '',\n    address:{\n      street:'',\n      postcode:'',\n      city:'',\n      country:''\n    },\n    email: '',\n    phone: '',\n    costumers:[],\n    shifts:[],\n    stationKey:'',\n    stationKeyConfirm:''\n  }\n  return(\n    <Formik\n      initialValues = { initVal }\n      onSubmit= {(values) => {\n        console.log(values)\n        addStation(values)\n      }}\n      validate = {(values) => {\n        let errors = {}\n\n        if(!values.location || (values.location && values.location.length < 3)){\n          errors.location= 'Location is required and must be at least 3 charcter long'\n        }\n\n        if( !values.address.street || (values.address.street && values.address.street.length < 3) ){\n\n          errors.address = { ...errors.address, street: 'Street is required and must be at least 3 charcter long' }\n        }\n\n        if( !values.address.city ){\n          errors.address= { ...errors.address, city: 'City is required and must be at least 3 charcter long' }\n        }\n\n        if( !values.address.country ){\n          errors.address = { ...errors.address,country:'Country is required' }\n        }\n        if( !values.email  || validateEmail(values.email)){\n          errors.email = 'Email is required and must be valid'\n        }\n        if( !values.phone ){\n          errors.phone = 'Phone is required'\n        }\n        if( !values.stationKey || (values.stationKey && values.stationKey.length < 8)){\n          errors.stationKey = 'Station key is required and should be at least 8 charter long'\n        }\n        if( values.stationKeyConfirm !== values.stationKey){\n          errors.stationKeyConfirm = 'Station key confirm mismatch'\n        }\n\n        return errors\n\n      }}\n    >\n      {({ values,handleSubmit,setFieldValue,dirty }) =>\n        <Modal\n          closeIcon\n          closeOnEscape={false}\n          closeOnDimmerClick={false}\n          open = {props.open}\n          onClose= {() =>  props.setOpen(false)}\n          onOpen= {() => props.setOpen (true)}\n        >\n          <ModalHeader>New Station {props.name} </ModalHeader>\n          <ModalContent>\n\n            { loading &&\n            <Dimmer active>\n              <Loader />\n            </Dimmer>\n            }\n\n\n            <Form style={{ marginBottom:'5rem' }} autoComplete=\"off\">\n              <Grid padded >\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='location' label='Location' type='text' width='8' placeholder='Location identifier ex: Airport code'/>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop:3 }}>\n                  <DropDownField  name='address.country' labeled label='Country'\n                    placeholder='Select Country'\n                    search\n                    selection\n                    width='8'\n                    options= {countryList}\n                    onChange = {  (e,{ value }) => {\n                      setFieldValue('address.country',value)\n                    }}\n                  >\n\n                  </DropDownField>\n\n                </Grid.Row>\n                <Grid.Row><Header as ='h3'>Address</Header></Grid.Row>\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='address.street' label='Street' type='text' width='8'/>\n                </Grid.Row>\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='address.postcode' label='postcode' type='text' width='8'/>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop:0 }}>\n                  <InputField name='address.city' label='city' type='text' width='8'/>\n                </Grid.Row>\n\n                <Grid.Row><Header as ='h3'>Contact Information</Header></Grid.Row>\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='email' label='Email' type='email'  width='8'/>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop:0 }}>\n                  <InputField name='phone' label='Phone' type='tel'  width='8'/>\n                </Grid.Row>\n\n                <Grid.Row><Header as ='h3'>Working Shift</Header></Grid.Row>\n                <FieldArray  name={'shifts'}>\n                  {({ push,remove }) => (<>\n                    { values.shifts.length > 0 && values.shifts.map((shift,index) => <Grid.Row key ={index} style={{ padding:0 }}>\n                      <Form.Group widths='13'><InputField name={`shifts[${index}].name`} label='Name' /><InputField name={`shifts[${index}].startTime`} label='StartTime'/>\n                        <Button\n                          type='button'\n                          icon\n                          size ='mini'\n                          primary\n                          onClick={ (e) => remove(index)\n                          }>\n                          <Icon name=\"plus circle\"/> Add\n                        </Button> </Form.Group>\n                    </Grid.Row>\n                    )}\n                    <Button\n                      type='button'\n                      icon\n                      size ='mini'\n                      primary\n                      onClick={ (e) => push ({ name:'', startTime:'' })\n                      }>\n                      <Icon name=\"plus circle\"/> Add\n                    </Button>\n                  </>)}\n\n\n\n                </FieldArray>\n\n                <Grid.Row><Header as ='h3'>Costumers</Header></Grid.Row>\n                <DropDownField  name='costumers'\n                  placeholder='Select Costumers'\n                  multiple\n                  search\n                  selection\n                  width='8'\n                  loading= {costumerLoading}\n                  options= {costumerList}\n                  onChange = {  (e,{ value }) => {\n                    setFieldValue('costumers',value)\n                  }}\n                >\n\n                </DropDownField>\n                <Grid.Row><Header as ='h3'>Station Key</Header></Grid.Row>\n                <Grid.Row style={{ padding:0 }}> <InputField name='stationKey' type='password' width='8' placeholder='stationKey' /> </Grid.Row>\n                <Grid.Row style={{ padding:0 }}> <InputField name='stationKeyConfirm' type='password' width='8' placeholder='Confirm stationKey' /> </Grid.Row>\n\n\n              </Grid>\n            </Form>\n          </ModalContent>\n          <Modal.Actions>\n            <Button   negative onClick={() => props.setOpen (false)}>Cancel</Button>\n            {dirty &&\n            <Button  positive onClick= {() => handleSubmit()}>Save</Button>}\n          </Modal.Actions>\n        </Modal>\n      }\n    </Formik>\n\n  )\n}\n\nexport default NewStationModel","import React, { useState,useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { ALL_STATION } from '../../queries/stationQuery'\nimport { Segment, Loader, Table, TableHeaderCell, TableRow, TableCell, Button, Icon, Input, Flag } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport NewStationModel from './NewStationModal'\n\n\nconst AllStations = () => {\n  const { loading,error,data } = useQuery(ALL_STATION , { variables:{ detailed:true } })\n  const  [stationsData,setStationsData]  = useState([])\n  const [stationAddOpen,setStationAddOpen ]= useState(false)\n\n  useEffect  (() => {\n    if(data  && data.allStations ){\n      setStationsData(data.allStations)\n    }\n  }, [data])\n\n  if(loading){\n    return (\n      <Loader active>Fetching Staffs</Loader>\n    )\n  }\n\n  if(error){\n    console.log(error)\n    return <Segment >Something Went Wrong </Segment>\n  }\n\n\n\n\n  return (\n    <>\n      <Button primary icon onClick= {() => setStationAddOpen(true)}>Add New Station <Icon name = 'add'> </Icon></Button>\n      {\n        stationsData &&\n      <Input icon='search'  placeholder='Country or location ...'\n        onChange ={ (event,{ value }) => {\n          if(!value || value.trim() === ''){\n            setStationsData(data.allStations)\n          }else{\n            const filterData = stationsData.filter(station => station.location.toLowerCase().includes(value.toLowerCase()) ||  station.address.country.toLowerCase().includes(value.toLowerCase()))\n            setStationsData(filterData)\n          }\n        }}\n      />}\n      <Table textAlign='center'>\n        <Table.Header>\n          <TableRow>\n            <TableHeaderCell> Location </TableHeaderCell>\n            <TableHeaderCell> Staff Count (Last 24 Hrs) </TableHeaderCell>\n            <TableHeaderCell> Address </TableHeaderCell>\n            <TableHeaderCell> Phone No. </TableHeaderCell>\n            <TableHeaderCell> Email </TableHeaderCell>\n          </TableRow>\n        </Table.Header>\n        <Table.Body>\n          {stationsData && stationsData.map( station =>\n            <Table.Row key= {station.id}>\n              <TableCell><Link to={`/Manage/AllStations/${station.id}`}>{station.location}</Link></TableCell>\n              <TableCell>{station.activeStaffs}</TableCell>\n              <TableCell>{<> {station.address.street} <br/>   {station.address.postcode} {station.address.city} <br/>  {station.address.country}    <Flag name={station.address && station.address.country && station.address.country.toLowerCase()}></Flag> </>}</TableCell>\n              <TableCell>{station.phone && station.phone.reduce((p,c) => <>{c}  <br/> {p}</> , '') } </TableCell>\n              <TableCell>{station.email}</TableCell>\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n      {stationAddOpen &&\n        <NewStationModel open={stationAddOpen} setOpen= {setStationAddOpen}></NewStationModel>\n      }\n\n    </>\n\n  )\n}\n\nexport default AllStations","import React from 'react'\nimport { Dropdown, Menu } from 'semantic-ui-react'\nimport { useHistory } from 'react-router-dom'\n\n\nconst AdminMenuBar = ({  activeItem, setActiveItem }) => {\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const history = useHistory()\n  const handleMenuClick = (e, { name }) => {\n    setActiveItem( name )\n\n    if( ['Profile','Timesheets','TimesheetsOverview'].includes(name) ){ /** If user views personal pages */\n      history.push(`/Manage/MyPage/${name}`)\n    }else{\n      history.push(`/Manage/${name}`)\n    }\n  }\n\n  const logout = () => {\n    sessionStorage.removeItem('staffKey')\n    history.push('/staffLogin')\n  }\n\n  const menuItems = []\n\n  /**If user has some admin rights then add those items to menu and own profile options view will be on dropdown Button */\n  if(staff.permission.admin || staff.permission.station.edit.length > 0 || staff.permission.station.add){\n    menuItems.push ('AllStations')\n  }\n\n  if(staff.permission.admin || staff.permission.staff.view || staff.permission.staff.add  || staff.permission.staff.view || staff.permission.staff.edit){\n    menuItems.push ('AllStaffs')\n  }\n\n  if(staff.permission.admin || staff.permission.timesheet.view.length > 0){\n    menuItems.push ('ManageTimesheets')\n  }\n\n  if(staff.permission.admin){\n    menuItems.push ('Costumers')\n  }\n\n  const getMenuItems = () => {\n    return menuItems.map(item =>\n      <Menu.Item  key={ item} name = {item} active = {activeItem ===  item }\n        onClick = {handleMenuClick} />)\n  }\n\n\n  return (\n    <Menu inverted color=\"blue\" stackable >\n      {getMenuItems()}\n      <Menu.Menu position='right'>\n        <Dropdown item text = {`Welcome ${staff.name}` } >\n          <Dropdown.Menu>\n            {menuItems.length > 0 && <>\n              <Dropdown.Item disabled text='My Pages'  onClick = { handleMenuClick }/>\n              <Dropdown.Item name= 'Profile' text='Profile'  onClick = { handleMenuClick }/>\n              <Dropdown.Item name ='Timesheets' text='Timesheets'  onClick = { handleMenuClick }/>\n              <Dropdown.Item name = 'TimesheetsOverview' text='TimesheetsOverview'  onClick = { handleMenuClick }/>\n              <Dropdown.Divider/>\n            </>\n            }\n            <Dropdown.Item text='Logout' onClick={() => logout()}/>\n\n          </Dropdown.Menu>\n\n        </Dropdown>\n      </Menu.Menu>\n    </Menu>\n  )\n\n\n}\n\nexport default AdminMenuBar","import { useMutation, useLazyQuery, gql } from '@apollo/client'\nimport { FieldArray, Formik } from 'formik'\nimport { cloneDeep, forEach } from 'lodash'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { Button, Dimmer, Form, Grid, Header, Icon, Loader, Modal,ModalContent, ModalHeader } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { ADD_COSTUMER } from '../../mutations/costumerMutation'\nimport { ALL_STATION, GET_STATION } from '../../queries/stationQuery'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { validateEmail } from '../StationReportPage/NewReportForm/validator'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nconst NewCostumerModel = (props) => {\n  const [,dispatch] = useContext(NotificationContext)\n  const [stationOptions,setStationOptions]=  useState([])\n  const[addCostumerMutation, { loading,error }] = useMutation(ADD_COSTUMER)\n\n  const [loadStations, { loading:stationLoading, data: stationData }] = useLazyQuery(ALL_STATION)\n\n  useEffect(() => {\n    if(stationData && stationData.allStations){\n      const stations =stationData.allStations.map((station,index) => {\n        return { key:index, value: station.id, text:station.location }\n      } )\n      setStationOptions(stations)\n    }\n\n  },[stationData])\n\n\n  const addCostumer = (values) => {\n    addCostumerMutation({\n      variables: values,\n      update: (store,{ data: { addCostumer } }) => {\n\n        forEach( addCostumer.stations, station => {\n          try { /** Append costumer to corresponding stations in cache */\n            const { getStation: data } = cloneDeep(store.readQuery({\n              query: GET_STATION,\n              variables: { id: station.id } }))\n\n            store.writeQuery({\n              query: GET_STATION,\n              variables: { id: station.id } ,\n              data: {\n                ...data,costumers :[...data.costumers, addCostumer]\n              }\n            })\n          }\n          catch (e) {\n            /**No query found */\n          }\n\n        })\n\n        /**Append to costumers List */\n        store.modify({\n          fields:{\n            allCostumers(existingCostumersRefs = [] , { readField }){\n              const newCostumerRef  = store.writeFragment({\n                data: addCostumer,\n                fragment : gql `\n                  fragment NewCostumer on Costumer {\n                    name\n                    id\n                    contract\n                    aircrafts{\n                      id\n                      registration\n                    }\n                    stations{\n                      id\n                    }\n\n                  }   \n                `\n              })\n\n              if(existingCostumersRefs.some(ref => readField('id',ref) === addCostumer.id)){\n                return existingCostumersRefs\n              }\n              return [...existingCostumersRefs,newCostumerRef]\n            }\n          }\n        })\n\n      }\n    }).then(\n      res =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, costumer ${values.name} added` ,type: 'SUCCESS' } }),\n      err =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, Cannot add costumer ${values.name}`}<br/> {err.message}</> ,type: 'ERROR' } }),\n      props.setOpen(false)\n    )\n  }\n\n\n  if(error){\n    console.log(error)\n  }\n\n\n  const initVal = {\n    name: '',\n    contract:'',\n    keyContacts: [],\n    stations:[],\n    aircrafts:'',\n\n  }\n  return(\n    <Formik\n      initialValues = { initVal }\n      onSubmit= {(values) => {\n\n        const submittedValues = { ...values , aircrafts: values.aircrafts ? values.aircrafts.toUpperCase().split(','):[] }\n        addCostumer(submittedValues)\n      }}\n      validate = {(values) => {\n        let errors = {}\n\n        if(!values.name || (values.name && values.name.length < 3)){\n          errors.name= 'Costumer Name is required and must be at least 3 charcter long'\n        }\n\n        if( !values.contract ){\n          errors.contract = 'Please specify contract type ex: Ad-HOC, LongTerm , Seasonal etc.'\n        }\n\n        if( values.aircrafts ){\n          const errAircraft =[]\n          forEach(values.aircrafts.split(','), aircraft => {\n            if(aircraft.trim().length < 3) errAircraft.push(aircraft.toUpperCase())\n          })\n          if (errAircraft.length ){\n            errors.aircrafts = `${errAircraft.toString()} invalid Aircraft Registration, should at least 3 characters`\n          }\n        }\n\n        if(values.keyContacts.length){\n          forEach(values.keyContacts, (contact,index) => {\n            if(!contact.description){\n              if (!errors.keyContacts) errors.keyContacts=[]\n              if (!errors.keyContacts[index] ) errors.keyContacts[index] = {}\n              errors.keyContacts[index].description = 'Please provide contact description'\n            }\n\n            if(!contact.phone && !contact.email){\n              if (!errors.keyContacts) errors.keyContacts=[]\n              if (!errors.keyContacts[index] ) errors.keyContacts[index] = {}\n\n              errors.keyContacts[index].phone = 'At least a phone or a email is required'\n              errors.keyContacts[index].email = 'At least a phone or a email is required'\n            }\n\n            if(contact.email){\n              if(validateEmail(contact.email)){\n                if (!errors.keyContacts) errors.keyContacts=[]\n                if (!errors.keyContacts[index] ) errors.keyContacts[index] = {}\n                errors.keyContacts[index].email = 'Invalid Email'\n              }\n            }\n\n          }\n          )\n        }\n\n        return errors\n\n      }}\n    >\n      {({ values,handleSubmit,setFieldValue,dirty }) =>\n        <Modal\n          closeIcon\n          closeOnEscape={false}\n          closeOnDimmerClick={false}\n          open = {props.open}\n          onClose= {() =>  props.setOpen(false)}\n          onOpen= {() => props.setOpen (true)}\n        >\n          <ModalHeader>New Costumer </ModalHeader>\n          <ModalContent>\n\n            { loading &&\n            <Dimmer active>\n              <Loader />\n            </Dimmer>\n            }\n\n\n            <Form style={{ marginBottom:'5rem' }} autoComplete=\"off\"\n              onSubmit={(e) => {\n                e.preventDefault()\n                handleSubmit()\n              }\n              }>\n              <Grid padded >\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='name' label='Name' type='text' width='8' placeholder='Costumer Name'/>\n                </Grid.Row>\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='contract' label='Contract' type='text' width='8' placeholder='Ex: Ad-Hoc, Short-term , Long-term, Seasonal'/>\n                </Grid.Row>\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='aircrafts' label='Aircrafts' type='text' width='8' placeholder='Aircrfat Registrations separeted by comma \",\"'/>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop:3 }}>\n                  <DropDownField  name='stations' labeled label='Station'\n                    placeholder='Select Stations'\n                    search\n                    loading={stationLoading}\n                    selection\n                    multiple\n                    width='8'\n                    options= {stationOptions}\n                    onFocus = {() => loadStations()}\n                    onChange = {  (e,{ value }) => {\n                      setFieldValue('stations',value)\n                    }}\n                  >\n                  </DropDownField>\n                </Grid.Row>\n\n\n                <Grid.Row><Header as ='h3'>Key Contacts</Header></Grid.Row>\n                <FieldArray  name={'keyContacts'}>\n                  {({ push,remove }) => (<>\n                    { values.keyContacts.length > 0 && values.keyContacts.map((contact,index) => <Grid.Row key ={index} style={{ padding:0 }}>\n                      <Form.Group style={{ margin:0 }} widths='13'><InputField name={`keyContacts[${index}].description`} label='Description' /><InputField name={`keyContacts[${index}].phone`} label='Phone' /><InputField name={`keyContacts[${index}].email`} label='Email' />\n                        <Icon\n                          link\n                          name =\"cancel\"\n                          color='red'\n                          onClick={ () => remove(index)\n                          }/>\n                      </Form.Group>\n                    </Grid.Row>\n                    )}\n                    <Button\n                      style= {{ marginTop:'1rem' }}\n                      type='button'\n                      icon\n                      size ='mini'\n                      primary\n                      onClick={ () => push ({ description:'',phone:'' ,email:'' })\n                      }>\n                      <Icon name=\"plus circle\"/> Add\n                    </Button>\n                  </>)}\n                </FieldArray>\n              </Grid>\n            </Form>\n          </ModalContent>\n          <Modal.Actions>\n            <Button   negative onClick={() => props.setOpen (false)}>Cancel</Button>\n            {dirty &&\n            <Button  positive onClick= {(e) => {\n              e.preventDefault()\n              handleSubmit()\n            }}>Save</Button>}\n          </Modal.Actions>\n        </Modal>\n      }\n    </Formik>\n\n  )\n}\n\nexport default NewCostumerModel","import { useQuery } from '@apollo/client'\nimport React, { useState } from 'react'\nimport { Link, useLocation } from 'react-router-dom'\nimport { Button, Card, Header, Icon, Loader, Segment } from 'semantic-ui-react'\nimport { ALL_COSTUMERS } from '../../queries/costumerQuey'\nimport NewCostumerModel from './NewCostumerModal'\n\n\nconst Costumers = () => {\n\n  const [costumerAddOpen,setCostumerAddOpen] = useState(false)\n  const { loading,error,data } = useQuery(ALL_COSTUMERS,{ variables: { detailed: true } })\n\n  const location = useLocation()\n\n  if(!data && !loading){\n    return null\n  }\n\n  if(loading){\n    return <Segment basic ><Loader active> Loading Costumer Data</Loader></Segment>\n  }\n\n  if(error){\n    console.log(error)\n    return <Header as='h4'>Something went wrong</Header>\n  }\n\n  return (\n    <>\n      <Button primary icon style={{ marginBottom: '1rem' }} onClick= {() => setCostumerAddOpen(true)}><Icon name='add circle' />Add New Costumer</Button>\n      {\n        data && data.allCostumers.length> 0 &&\n    <Card.Group>\n      {\n        data.allCostumers.map(costumer =>\n          <Card key={costumer.id} link raised as={Link} to={`${location.pathname}/${costumer.id}`}>\n            <Card.Content textAlign='center' header = {costumer.name} />\n            <Card.Content textAlign='center' >{costumer.contract? costumer.contract + ' Contract':''}</Card.Content>\n            <Card.Content textAlign='center' extra>\n              <Header as ='h5'> <Icon name='plane'/> Total Aircrafts: {costumer.aircrafts && costumer.aircrafts.length}</Header>\n            </Card.Content>\n          </Card>\n        )}\n    </Card.Group>\n      }\n\n      {\n        !data.allCostumers &&\n    <Header as='h4'>No Costumer Data</Header>\n      }\n\n      {costumerAddOpen &&\n        <NewCostumerModel open={costumerAddOpen} setOpen= {setCostumerAddOpen}></NewCostumerModel>\n      }\n    </>\n  )\n\n\n\n}\n\nexport default Costumers","import React, { useEffect, useState } from 'react'\nimport { useLocation, useParams } from 'react-router-dom'\nimport StaffPage from '../StaffPage'\nimport AllStaffs from './AllStaffs'\nimport AllStations from './AllStations'\nimport StationInfo from '../StationInfo/Index'\nimport AdminMenuBar from './AdminMenuBar'\nimport ManageTimeSheets from './ManageTimeSheets'\nimport Costumers from './Costumers'\nimport CostumerInfo from '../CostumerInfo'\n//import AllStaffs from '../../AdminPages/AllStaffs'\n//import AllStations from '../../AdminPages/AllStations'\n\n//import TimeSheetsOverview from '../../TimeSheetsOverview'\n\n\nconst AdminPages = () => {\n  const params = useParams()\n  const location = useLocation()\n\n  const basePage =  location.pathname.split('/')[2] //root page\n\n  const [activeItem, setActiveItem] = useState(basePage)\n\n  useEffect(() => {\n    setActiveItem(basePage)}\n  ,[basePage, location, params])\n\n\n  return (\n    <>\n      <AdminMenuBar activeItem={activeItem} setActiveItem= {setActiveItem}></AdminMenuBar>\n      {/**If submenu is timesheetsoverview and staffId is set Or current page is managetimesheets or  timesheetsoverview*/\n        activeItem && activeItem.toLowerCase() === 'managetimesheets' &&\n        <ManageTimeSheets />\n      }\n\n      { /**If current page is allStaffs and staffId value is not set */\n        activeItem.toLowerCase() === 'mypage' &&\n      <>\n        <StaffPage />\n      </>\n      }\n      { /**If current page is allStaffs and staffId value is not set */\n        activeItem.toLowerCase() === 'allstaffs' && !params.staffId &&\n      <>\n        <AllStaffs/>\n      </>\n      }\n      { /**If current page is allStaffs and staffId value is set */\n        activeItem.toLowerCase() === 'allstaffs' && params.staffId &&\n      <>\n        <StaffPage id={params.staffId}/>\n      </>\n      }\n      { /**If current page is allStations and stationId value is not set */\n        activeItem && activeItem.toLowerCase() === 'allstations' && !params.stationId &&\n      <>\n        <AllStations/>\n      </>\n      }\n      { /**If current page is allStations and stationId value is set */\n        activeItem && activeItem.toLowerCase() === 'allstations' && params.stationId &&\n      <>\n        <StationInfo/>\n      </>\n      }\n      { /**If current page is allStations and stationId value is not set */\n        activeItem && activeItem.toLowerCase() === 'costumers' && !params.costumerId &&\n      <>\n        <Costumers/>\n      </>\n      }\n      { /**If current page is allStations and stationId value is set */\n        activeItem && activeItem.toLowerCase() === 'costumers' && params.costumerId &&\n      <>\n        <CostumerInfo/>\n      </>\n      }\n    </>\n  )\n}\n\nexport default AdminPages","import React from 'react'\nimport { BrowserRouter as  Router, Switch, Route, Redirect } from 'react-router-dom'\nimport StationLoginPage from './components/StationLoginPage'\nimport './App.css'\nimport StationReportPage from './components/StationReportPage'\nimport StaffLoginPage from './components/StaffLoginPage'\nimport StaffPage from './components/StaffPage'\nimport AdminPages from './components/AdminPages'\n\n\nconst  AppRouter = () =>   {\n  return (\n    <Router>\n      <Switch>\n        <Route path = {['/shiftReport/:station/:id','/shiftReport/:id']}>\n          <StationReportPage></StationReportPage>\n        </Route>\n\n        <Route path = \"/stationLogin\">\n          <StationLoginPage ></StationLoginPage>\n        </Route>\n\n        <Route path = \"/staffLogin\">\n          <StaffLoginPage />\n        </Route>\n\n        {/**Routing for nonAdmin staff Pages */}\n        <Route path ={[ '/staff/:staffId/:page/:period','/staff/:staffId/:page']}>\n          <StaffPage></StaffPage>\n        </Route>\n        <Redirect from=\"/staff/:staffId\" to=\"/staff/:staffId/Profile\"/>\n        <Route path = \"/staff\">\n          <StaffPage></StaffPage>\n        </Route>\n\n        {/**Routing for /Manage/MyPage */}\n        <Redirect from='/Manage/MyPage/:page/:id/:period' to=\"/Manage/MyPage/:page/:period\"/>\n\n        {/**Routing for /Manage/AllStaffs */}\n        <Route path = {['/Manage/AllStaffs/:staffId/:page/:period','/Manage/AllStaffs/:staffId/:page/', '/Manage/MyPage/:page/:period','/Manage/MyPage/:page/' ]}>\n          <AdminPages></AdminPages>\n        </Route>\n        <Redirect from=\"/Manage/AllStaffs/:staffId\" to=\"/Manage/AllStaffs/:staffId/Profile\"/>\n        <Route path = '/Manage/AllStaffs'>\n          <AdminPages></AdminPages>\n        </Route>\n\n        {/**Routing for /Manage/ManageTimesheets */}\n        <Route path = {['/Manage/ManageTimesheets/:staffId/:period','/Manage/ManageTimesheets/:staffId','/Manage/ManageTimesheets' ]}>\n          <AdminPages></AdminPages>\n        </Route>\n\n\n        {/** Routing for /Manage/AllStations */}\n        <Route path = {['/Manage/AllStations/:stationId/:page/:costumerId','/Manage/AllStations/:stationId/:page' ]}>\n          <AdminPages/>\n        </Route>\n        <Redirect from='/Manage/AllStations/:stationId' to='/Manage/AllStations/:stationId/BasicInfo'/>\n        <Route path = '/Manage/AllStations'>\n          <AdminPages/>\n        </Route>\n\n        {/**Routing for /Manage/Costumers */}\n        <Route path = {['/Manage/Costumers/:costumerId', '/Manage/Costumers']}>\n          <AdminPages/>\n        </Route>\n\n        {/**Routing for Manage Page */}\n        <Redirect from=\"/Manage\" to=\"/Manage/MyPage/Profile\"/>\n        <Route path = '/Manage'>\n          <AdminPages></AdminPages>\n        </Route>\n\n        <Route path = \"/Register/:registerCode\">\n          <StaffPage></StaffPage>\n        </Route>\n\n        <Route path = \"/Reset-Password/:resetCode\">\n          <StaffPage></StaffPage>\n        </Route>\n\n        <Route path = \"/\">\n          <StationLoginPage ></StationLoginPage>\n        </Route>\n      </Switch>\n    </Router>\n\n\n  )\n}\n\nexport default AppRouter\n","import React from 'react'\nimport { BrowserRouter as  Router, Switch, Route, Redirect } from 'react-router-dom'\nimport StationLoginPage from './components/StationLoginPage'\nimport './App.css'\nimport StationReportPage from './components/StationReportPage'\nimport StaffLoginPage from './components/StaffLoginPage'\nimport StaffPage from './components/StaffPage'\nimport AdminPages from './components/AdminPages'\nimport AppRouter from './router'\nimport Notifications from './components/Notifications'\nimport { NotificationProvider } from './contexts/NotificationContext'\nimport { Segment } from 'semantic-ui-react'\n\n\nconst  App = () =>   {\n  return (\n    <NotificationProvider>\n      <AppRouter></AppRouter>\n    </NotificationProvider>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'semantic-ui-css/semantic.min.css'\nimport { Container } from 'semantic-ui-react'\n\nimport { ApolloClient, HttpLink , InMemoryCache, ApolloProvider } from '@apollo/client'\n\nimport { setContext } from 'apollo-link-context'\n\nconst authLink = setContext((_, { headers }) => {\n  /**\n   * If the user is on staffs page session must have staffKey set , then set authorisation header to staffKey\n   */\n  let key = JSON.parse(sessionStorage.getItem('staffKey'))\n\n  /**If the staff page is not active then authorisation header is set to stationKey */\n  if(!key){\n    /**If the login info was saved preiously key will be set else retrive key from session*/\n    key =  JSON.parse(localStorage.getItem('stationKey'))\n    if(!key) {\n      key = JSON.parse(sessionStorage.getItem('stationKey'))\n    }\n  }\n\n  const token = key? key.value:null\n\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst httpLink = new HttpLink({ uri: window.location.href })\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link:  authLink.concat(httpLink)\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Container><App /></Container>\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}