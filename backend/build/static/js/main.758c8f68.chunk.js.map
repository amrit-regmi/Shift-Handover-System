{"version":3,"sources":["queries/stationQuery.js","mutations/stationMutation.js","components/StationLoginPage.js","queries/shiftReportQuery.js","components/StationReportPage/MenuBar.js","components/ShiftReport/TaskInfo.js","components/ShiftReport/GenericTasksPanel.js","components/ShiftReport/AircraftTasksPanel.js","components/ShiftReport/StaffWorkTime.js","components/ShiftReport/index.js","components/StationReportPage/Context.js","components/StationReportPage/stationReducer.js","components/StationReportPage/NewReportForm/FormFields.js","utils/DateHelper.js","components/StationReportPage/NewReportForm/validator.js","components/StationReportPage/NewReportForm/ErrorMessage.js","mutations/timeSheetMutation.js","components/StationReportPage/NewReportForm/StaffEditModel.js","components/StationReportPage/NewReportForm/StaffForm.js","components/StationReportPage/NewReportForm/StaffForms.js","components/StationReportPage/NewReportForm/TaskForm.js","components/StationReportPage/NewReportForm/TaskForms.js","components/StationReportPage/NewReportForm/AircraftSelectionForm.js","components/StationReportPage/NewReportForm/StaffAddModel.js","mutations/submitShiftReport.js","components/StationReportPage/NewReportForm/index.js","components/ShiftReport/ReportViewModal.js","components/StationReportPage/AllReportsTable.js","components/StationReportPage/index.js","mutations/staffMutation.js","components/StaffLoginPage.js","queries/staffQuery.js","components/TimeSheetsReport/TimeSheetEditFields.js","components/StaffPage/AdminPages/NewStaffModal.js","components/StaffPage/AdminPages/AllStaffs.js","components/StaffPage/AdminPages/AllStations.js","queries/timeSheetQuery.js","components/TimeSheetsReport/TimeSheetEditModel.js","components/TimeSheetsReport/TImeSheetRow.js","components/TimeSheetsReport/index.js","components/StaffPage/TimeSheet.js","components/StaffPage/AdminPages/ManageTimeSheets.js","mutations/permissionMutation.js","components/StaffPage/PermissionManager.js","components/StaffPage/StaffEditModel.js","components/StaffPage/PasswordChangeModel.js","components/StaffPage/Profile.js","components/StaffPage/RegisterPage.js","components/StaffPage/StaffMenuBar.js","components/StaffPage/index.js","App.js","index.js"],"names":["ALL_STATION","gql","GET_STATION","LOGIN_TO_STATION","StationLoginPage","history","useHistory","useState","radioButton","setRadioButton","stationKey","setStationKey","remember","setRemember","useQuery","notifyOnNetworkStatusChange","loading","error","data","useMutation","onError","console","log","loginStation","loginToStationResult","useEffect","station","loginToStation","sessionStorage","setItem","JSON","stringify","localStorage","push","value","event","a","preventDefault","variables","id","password","storedStationKey","parse","getItem","key","toggleRemember","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","Header","as","color","Image","src","Form","size","onSubmit","Segment","clearing","stacked","basic","allStations","map","Field","float","clear","marginRight","Radio","label","location","checked","onChange","radioButtonChange","Input","name","target","fluid","icon","iconPosition","placeholder","type","Checkbox","onClick","Button","renderPasswordInput","Divider","horizontal","content","GET_SHIFT_REPORT","GET_REPORTLIST","GET_SHIFTREPORT_ID","MenuBar","activeItem","setActiveItem","handleMenuClick","e","Menu","inverted","stackable","Item","header","active","position","primary","removeItem","TaskInfo","task","handoverId","updateOnthisHandover","_","find","updates","action","Label","circular","status","length","Icon","compact","description","GenericTaskPanel","genericTasks","legth","block","taskCategory","SegmentGroup","AircraftTaskPanel","aircraftTasks","aircrafts","key_costumerName","tasks","key_aircraft","StaffWorkTime","timesheets","Table","celled","Row","HeaderCell","Body","timesheet","Cell","staff","startTime","substring","endTime","ShiftReport","reportData","tasksByCat","groupBy","mapValues","cat","k","chain","AIRCRAFT","taskcat","aircraft","costumer","registration","floated","shift","staffAndTime","tasksByType","key_taskType","Context","createContext","lastShiftReport","reducer","state","payload","DateInputField","props","useFormikContext","setFieldValue","setFieldTouched","useField","field","meta","width","touched","popupPosition","dateTimeFormat","closable","onBlur","preserveViewMode","pointing","prompt","InputField","inputlabel","AircraftCheckBox","children","display","toggle","marginLeft","toUpperCase","TextAreaField","TextArea","formatDate","dateToFormat","date","Date","getDate","toString","padStart","getMonth","getFullYear","getHours","getMinutes","operateDate","duration","unit","operation","ndate","isNumber","splitDateTime","split","splitDate","newDate","toDate","stringDate","getWeekNumber","dt","tdt","valueOf","dayn","getDay","setDate","firstThursday","setMonth","Math","ceil","getDatefromWeek","w","y","simpleStartDate","UTC","dayOfWeek","IsoWeekStart","getMonthName","monthInt","Proxy","get","prop","isNaN","parseInt","getMonthOptions","currentMonth","Array","v","i","text","getWeekOptions","today","dYear","lastYearWeekNum","lastRetriveable","options","week","option","validateStaffInputField","validateStartEndTime","startDate","match","now","validateTaskField","trim","validateEmail","email","validateName","ErrorMessage","form","getIn","errors","SIGN_OFF_SHIFT","UPDATE_TIMESHEET","APPROVE_TIMESHEET","DELETE_TIMESHEET","REQUEST_CLARIFICATION","StaffEditModel","setOpen","open","fieldName","removeClick","removeStaff","setRemoveStaff","getFieldMeta","signOff","shiftStartTime","shiftEndTime","ibreakt","notifyResult","setNotifyResult","username","setUsername","setPassword","setStartTime","setEndTime","breakt","setBreakt","message","signOffTimeSheet","submit","values","signOffData","break","additionalAction","Dimmer","Loader","Modal","closeIcon","closeOnEscape","closeOnDimmerClick","onClose","onOpen","Content","Message","success","onDismiss","enableReinitialize","initialValues","fullname","resetEmail","validate","handleSubmit","Group","maxDate","minDate","labelPosition","min","columns","vertical","StaffForm","index","remove","signOffKey","attached","readOnly","changing","staffs","StaffForms","addStaffOpen","replace","TaskForm","onRemove","disabled","getFieldProps","noteFieldVisibile","setNoteFieldVisibile","taskAction","taskStatus","taskNotes","actionButtonClick","toggleNotes","notes","TaskStatusBar","padding","marginBottom","rows","visibility","removeButtonClick","actionCloseCheckBoxClick","actionOpenCheckBoxClick","actionDeferCheckBoxClick","margin","Accordion","panels","title","positive","Or","negative","hidden","paddingBotton","TaskForms","tasksIdentifier","aircraftId","newTaskField","AircraftSelectionForm","costumers","setCheckedAircrafts","checkedAircrafts","confirmOpen","setConfirmOpen","Confirm","onCancel","onConfirm","StaffAddModel","registerUserOpen","setRegisterUserOpen","forgotPasswordOpen","setForgotPasswordOpen","addedStaff","emailError","usernameError","FormField","warning","visible","FormGroup","SUBMIT_REPORT","NewReport","context","useContext","openAddStaffModel","setOpenAddStaffModel","setCostumers","initialFields","setInitialFields","submitReport","list","taskList","costumerList","simplifiedTask","newNote","disbleCheck","matchesProperty","submitShiftReport","staffErrors","errList","isEmpty","mapKeys","validateStaffsField","taskErrors","typedTasks","pickBy","identity","validateTasks","submitData","formdata","reduce","tasksByIdentifier","identifier","initialTask","difference","Object","keys","filter","reducedTask","p","c","beforeSubmit","dirty","OTHER","LOGISTICS","ReportViewModal","openReport","setOpenReport","useLazyQuery","getReport","onMount","getShiftReport","AllReportsTable","transformData","stationId","getReportList","report","striped","structured","stations","entries","reports","collapsing","rowSpan","List","StationReportPage","initialState","useReducer","dispatch","queryParams","params","useParams","flag","loadingReport","errorReport","dataReport","dataStation","getStation","Provider","NewReportForm","LOGIN_STAFF","RESET_REGISTER_CODE","RESET_PASSWORD_REQ","CHANGE_PASSWORD","STAFF_EDIT","STAFF_ADD","COMPLETE_REGISTRATION","StaffLoginPage","login","staffLogin","handleLogin","storedStaffKey","GET_STAFF","GET_STAFF_REG","GET_ALL_STAFF_MINIMAL","GET_ALL_STAFF","VERIFY_USERNAME","RemarkField","remarkTitle","remarkDate","remarkBy","remarkText","remarkEdit","Subheader","val","fontStyle","textDecoration","DropDownField","labeled","input","Dropdown","borderTopLeftRadius","borderBottomLeftRadius","NewStaffModel","addStaffMutation","phone","contractType","contractHours","update","store","response","modify","fields","allStaff","existingStaffRefs","readField","newStaff","addStaff","some","ref","parseFloat","ModalHeader","ModalContent","selection","Actions","AllStaffs","staffsData","setStaffsData","staffAddOpen","setStaffAddOpen","filterData","includes","TableRow","TableHeaderCell","TableCell","to","lastActive","AllStations","GET_TIMESHEETS","GET_ALL_TIMESHEETS","TimeSheetEditModel","self","skip","add","shiftReportLoading","shiftReportData","updateTimeSheet","updateTimeSheetLoading","stationOptions","setStationOptions","newRemarkField","setNewRemarkField","getShiftList","shifts","handleShiftChange","st","ISODate","toISOString","vars","getShiftReportByShift","handover","remarks","splice","getTimeSheetByUser","existingTimeSheetRefs","newTimeSheet","addToTimeSheet","getAllTimeSheets","period","cloneDeep","totHours","toFixed","itemsPending","broadcast","closeModel","modalHeader","init","staffId","setHours","by","getInitValues","insertAt","newRemarks","edit","autoAddRemarks","placholder","search","sdt","splitSt","setMinutes","diff","getRecomendedShiftOption","secondary","remark","TimeSheetRow","timeSheet","useApolloClient","permission","shiftReport","totalHours","total","ot","overTime","setAdd","deleteOpen","setDeleteOpen","clarifyOpen","setClarifyOpen","clarifyText","setClarifyText","approveTimesheet","timesheetSignLoading","mutatedeleteTimesheet","deleteLoading","requestClarification","clarifyLoading","isEmptyRow","isWeekDay","href","_id","Popup","trigger","sign","approved","approveTimeSheet","wide","clearify","writeFragment","fragment","test","readFragment","askToclarify","on","deleteTimeSheet","DELETE","TimeSheetsReport","shiftDate","endDate","setAllApproved","calenderArray","n","day","calenderObject","zipObject","netTotal","netOt","formatData","timeSheets","totalDaily","reqHours","stickyTh","top","zIndex","Footer","colSpan","TimeSheet","setStaffName","selected","selectedYear","timesheetOnly","selectBy","setSelectBy","number","setNumber","year","setYear","filterDuration","getStaff","months","start","sdate","filterStartDate","end","ed","sd","filterEndDate","isAllApproved","ManageTimeSheets","loggedInStaff","useLocation","setStaff","setPeriod","setStations","setGroupBy","from","setFrom","setTo","filterStatus","setFilterStatus","staffOptions","setStaffOptions","getAllStaffs","staffLoading","staffData","staffOpt","periodTitle","findIndex","month","toLowerCase","view","widths","multiple","clearable","onFocus","dateFormat","TableHeader","TableBody","pathname","CHANGE_PERMISSION","PermissionManager","permissions","admin","superUserSet","setSuperUserSet","hasSuperPermission","updatePermission","pLoading","mapPermission","permssionType","hasPermission","mod","setOptions","getStationOptions","soptions","allStationIds","formValues","prev","cur","scope","isEqual","pType","resetForm","className","updateStaff","updateStaffLoading","initVal","updatedValues","omitBy","PasswordChangeModel","changePassword","newPassword","confirmPassword","marginTop","Profile","handleCancel","handleConfirm","confirm","setConfirm","passwordChangeOpen","setPasswordChangeOpen","withPermission","staffCanEdit","resetPassword","rpLoading","rpError","resetRegisterCode","rcLoading","rcError","resetConfirm","registered","registerCode","centered","idCardCode","currentStation","editModelOpen","setEditModelOpen","RegisterPage","setName","completeRegistration","regstrationLoading","registrationError","registrationData","validateUsernameQuery","usernameLoading","usernameData","verified","usernameVerified","setUsernameVerified","verifyUsername","registerStaff","handleChange","handleBlur","undefined","currentTarget","StaffMenuBar","staffName","menuItems","item","StaffPage","page","loggedInStaffName","setLoggedInStaffName","locationPaths","basePage","toLocaleLowerCase","Breadcrumb","BreadcrumbSection","BreadcrumbDivider","link","Link","App","path","authLink","setContext","headers","token","authorization","httpLink","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","concat","ReactDOM","render","Container","document","getElementById"],"mappings":"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","file":"static/js/main.758c8f68.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\nexport const ALL_STATION = gql`\n query {\n  allStations {\n    location\n    shifts {\n      name\n      startTime\n    }\n    id\n  }\n}`\n\nexport const GET_STATION = gql`\n  query fetchStation($id: String!){\n    getStation(id: $id) {\n      costumers {\n        aircrafts {\n          id\n          registration\n        }\n        name\n        id\n      }\n      shifts {\n        name\n        startTime\n      }\n      location\n      id\n    }\n  }\n\n`\n\nexport const ALL_STATION_LIST = gql`\n query {\n  allStations {\n    id\n    location{\n      airportCode\n    }\n    phone\n    email\n    address\n  }\n}`","import { gql } from '@apollo/client'\nexport const LOGIN_TO_STATION = gql`\n  mutation stationLogin($id: String!, $password:String!){\n    loginToStation(id: $id, password: $password) \n  }\n\n`","import React, { useState,useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Button, Form, Radio, Grid, Header, Image, Segment, Divider } from 'semantic-ui-react'\nimport { ALL_STATION } from '../queries/stationQuery'\nimport { LOGIN_TO_STATION } from '../mutations/stationMutation'\n\n\nconst StationLoginPage = () => {\n  const history = useHistory()\n  const [radioButton, setRadioButton] = useState({})\n  const [stationKey,setStationKey]= useState('')\n  const [remember, setRemember] = useState(false)\n  const { loading, error, data } =  useQuery(ALL_STATION,{ notifyOnNetworkStatusChange: true })\n\n  /**\n   * loginStation mutation hook\n   */\n  const [loginStation,loginToStationResult] = useMutation(LOGIN_TO_STATION,{\n    onError: (error) => {\n      console.log(error)\n    }\n  })\n\n  /**\n   * side effect when the loginStation mutation is executed and loginToStationResult is set\n   */\n  useEffect(() => {\n    if ( loginToStationResult.data ) {\n      const station = loginToStationResult.data.loginToStation\n      setStationKey(station)\n      sessionStorage.setItem('stationKey',JSON.stringify(station))\n      //If remember button is checked store key in local storage\n      if(remember){\n        localStorage.setItem('stationKey',JSON.stringify(station))\n      }\n      history.push(`/shiftReport/station/${radioButton.value}`)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loginToStationResult.data])\n\n  /**\n   * function for station loginStation action\n   * @param {event} event submit button event\n   */\n  const loginToStation = async (event) => {\n    event.preventDefault()\n    loginStation({ variables:{ id:radioButton.value, password: stationKey } })\n\n  }\n\n  /**\n   * If stationKey is found on localStorage/sessionStorage skip the loginStation and browse shift report\n   */\n  let storedStationKey = JSON.parse(sessionStorage.getItem('stationKey'))\n  if(!storedStationKey){\n    const key = localStorage.getItem('stationKey')\n    storedStationKey = JSON.parse(key)\n    /**\n     * store the key to session storage*\n     */\n    sessionStorage.setItem('stationKey',JSON.stringify(key))\n  }\n  if(storedStationKey){\n    history.push(`/shiftReport/station/${storedStationKey.id}`)\n  }\n\n  /**\n   * remeber checkbox toggle action\n   */\n  const toggleRemember = () => {\n    if (remember) {\n      setRemember(false)\n    }else {\n      setRemember(true)\n    }\n  }\n\n  /**\n   * Renders station password input filed\n   * @param {radioButton DOM} radioButton\n   * @returns {Component} password input field\n   */\n\n  const renderPasswordInput = (radioButton) => {\n    return (\n      <>\n        <Form.Input\n          name= 'stationKey'\n          value={stationKey}\n          onChange= {({ target }) => setStationKey(target.value)}\n\n          label= {`Enter password for ${radioButton.label}`}\n          fluid\n          icon='lock'\n          iconPosition='left'\n          placeholder='Password'\n          type='password'\n\n\n        />\n        <Form.Checkbox name=\"rememberKey\" label='Remember on this computer' checked={remember} onClick = {toggleRemember}/>\n        <Button fluid size='large' color=\"blue\">Retrieve Shift Report</ Button>\n      </>)\n\n  }\n  /**\n   * Radiobutton change action\n   * @param {event} event\n   * @param {DOM {value, label}} value,label\n   *\n   */\n  const radioButtonChange = (event,{ value,label }) => {\n    setRadioButton({ value,label })\n  }\n\n  /**If Login mutation error */\n  if (error) return `Error! ${error}`\n\n\n  return (\n\n    <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as='h2' color='blue' textAlign='center'>\n          <Image src='/LogoMin.png' /> Please select a station\n        </Header>\n        <Form size='large' style={{ textAlign:'left' } } onSubmit={loginToStation}>\n          <Segment clearing stacked>\n            {  loading &&\n             <Segment loading basic>\n             </Segment>\n            }\n\n            {!loading && data.allStations && data.allStations.map(station =>  <Form.Field style={{ float: 'left', clear:'none',  marginRight:'10px' }} key={station.id}>\n              <Radio  label={station.location} value={station.id} checked={ radioButton.value === station.id} onChange={(event,value) => radioButtonChange(event,value)}>\n              </Radio>\n            </Form.Field>)}\n\n            <div style={{ clear:'both' }}></div>\n\n            {radioButton.value && renderPasswordInput(radioButton)\n            }\n\n\n          </Segment>\n        </Form>\n        <Divider horizontal>Or</Divider>\n        <Segment clearing stacked>\n          <Button content='Log in to personal page' icon='user'  size='large' color=\"teal\" fluid onClick = {() => history.push('/staffLogin')} />\n        </Segment>\n\n      </Grid.Column>\n\n    </Grid>\n\n\n  )\n\n\n}\n\nexport default StationLoginPage","import { gql } from '@apollo/client'\n\nexport const GET_SHIFT_REPORT = gql `\nquery fetchReport($id:String, $station: String, $flag: String){\n    getShiftReport(id: $id, station: $station, flag: $flag) {\n      endTime\n      id\n      shift\n      staffAndTime {\n        id\n        staff {\n          name\n        }\n        endTime\n        startTime\n      }\n      startTime\n      station {\n        location\n        id\n      }\n      tasks {\n        aircraft {\n          registration\n          id\n          costumer {\n            name\n          }\n        }\n        taskCategory\n        description\n        id\n        status\n        updates {\n          action\n          handoverId {\n            id\n            shift\n          }\n          note\n        }\n        \n      }\n    } \n}\n\n`\n\nexport const GET_REPORTLIST = gql ` \n  query fetchReportList ( $stationId: String,  ){\n    getReportList (stationId: $stationId){\n      startTime,\n      endTime,\n      id,\n      shift\n      station{\n        location\n      }\n    }\n  }\n\n\n`\n\nexport const GET_SHIFTREPORT_ID = gql `\n  query fetchReportbyShift($station: String!, $shift: String!, $date: Date!){\n    getShiftReportByShift(station: $station, shift: $shift, date: $date) {\n      startTime,\n      endTime,\n      id,\n      shift,\n      station{\n        location\n      }\n    }\n  }\n`\n/** */","import React from 'react'\nimport { Button, Menu } from 'semantic-ui-react'\nimport { useHistory } from 'react-router-dom'\n\n\nconst MenuBar = ({ activeItem, setActiveItem }) => {\n  const history = useHistory()\n  const handleMenuClick = (e, { name }) => setActiveItem( name )\n  const switchStation = () => {\n    localStorage.removeItem('stationKey')\n    sessionStorage.removeItem('stationKey')\n    history.push('/')\n  }\n\n  return (\n    <Menu inverted color=\"blue\" stackable >\n      <Menu.Item header>  Shift Reporting System </Menu.Item>\n      <Menu.Item name= \"lastShiftReport\"\n        active = {activeItem === 'lastShiftReport'}\n        onClick = {handleMenuClick}>\n      </Menu.Item>\n\n      <Menu.Item name= \"browseAllReports\"\n        active = {activeItem === 'browseAllReports'}\n        onClick = {handleMenuClick}>\n      </Menu.Item>\n\n      <Menu.Item name= \"startNewReport\"\n        active = {activeItem === 'startNewReport'}\n        onClick = {handleMenuClick}>\n      </Menu.Item>\n\n      <Menu.Item name= \"allOpenTasks\"\n        active = {activeItem === 'allOpenTasks'}\n        onClick = {handleMenuClick}>\n      </Menu.Item>\n\n      <Menu.Menu position='right'>\n        <Button primary\n          name='Switch Station '\n          active={activeItem === 'logout'}\n          onClick={switchStation}\n        >Switch Station</Button>\n      </Menu.Menu>\n    </Menu>\n\n\n\n\n  )\n\n\n}\n\nexport default MenuBar","import React from 'react'\nimport { Segment,Label,Icon } from 'semantic-ui-react'\nimport _ from 'lodash'\n\nconst TaskInfo = ({ task , handoverId }) => {\n  const updateOnthisHandover = _.find(task.updates, ['handoverId',{ 'id':handoverId }] )\n  return (\n    <Segment >\n      {\n        updateOnthisHandover.action !== 'TASK_CREATED' &&\n        <Label  size='mini' basic>Tasks from previous shifts</Label>\n      }\n      {\n        updateOnthisHandover.action === 'TASK_CREATED' &&\n        <Label circular size='mini' color = 'teal' basic>New</Label>\n      }\n\n      {\n        task.status ==='DEFERRED' &&\n        <><Label size='mini' color='red' basic> Deferred </Label><Label color='red'size='mini' basic> Action Required </Label></>\n      }\n      {\n        /**If task is  not created on last report this task is older open task that was completed on last shift */\n        updateOnthisHandover.action !== 'TASK_CREATED' && task.status ==='CLOSED' &&\n       <Label color='green' size='mini' basic> Completed </Label>\n      }\n      {\n        /**If open task and some action was performed on the last shift */\n        task.status ==='OPEN' && updateOnthisHandover &&\n        <>{\n          updateOnthisHandover.action !== 'TASK_CREATED' &&\n          <Label size='mini' basic> {updateOnthisHandover.action} </Label>\n        }\n        <Label color='purple'size='mini' basic> Open </Label></>\n      }\n\n      { /** If task is not new then show toggle update history button */\n        task.updates.length > 1 &&\n      <Label as=\"a\" size='mini' onClick = {() => {\n        /**TO BE IMPLEMENTED  */\n      }}> <Icon name =\"history\"/> Action History   </Label>\n      }\n\n      <Segment style= {{ 'paddingTop': 0,'paddingLeft': 0 }}basic compact>{task.description}   </Segment>\n    </Segment>)\n}\n\nexport default TaskInfo","import React from 'react'\nimport { Segment, Header, SegmentGroup } from 'semantic-ui-react'\nimport TaskInfo from './TaskInfo'\nimport  _ from  'lodash'\n\nconst GenericTaskPanel = ({ genericTasks,handoverId }) => {\n  if(genericTasks.legth === 0){\n    return null\n  }\n  return (\n    <>\n      <Segment stacked>\n\n        <Header color = \"blue\" as=\"h4\" block> {genericTasks[0].taskCategory} </Header>\n\n        <SegmentGroup >\n          { _.map(genericTasks,task =>\n            <TaskInfo key={task.id} task ={task} handoverId = {handoverId}/>\n          )}\n\n        </SegmentGroup>\n      </Segment>\n\n\n    </>\n\n  )\n}\n\nexport default  GenericTaskPanel","import React from 'react'\nimport { Segment, Header, SegmentGroup ,Icon } from 'semantic-ui-react'\nimport TaskInfo from './TaskInfo'\nimport  _ from  'lodash'\n\nconst AircraftTaskPanel = ({ aircraftTasks ,handoverId }) => {\n  if(aircraftTasks.legth === 0){\n    return null\n  }\n  return (\n\n    <Segment stacked>\n      {_.map(aircraftTasks,(aircrafts,key_costumerName) =>\n        <SegmentGroup   key ={key_costumerName}>\n\n          <Header color = \"blue\" as=\"h4\" block  > <Icon name = 'plane'/> Work Performed for {key_costumerName}</Header>\n\n\n          { _.map(aircrafts,((tasks,key_aircraft) =>\n            <SegmentGroup key={key_aircraft}>\n              <Segment  >\n                {key_aircraft}\n              </Segment>\n              {_.map(tasks,task =>\n                <TaskInfo key={task.id} task ={task} handoverId={handoverId}/>\n              )}\n\n            </SegmentGroup>))\n          }\n\n        </SegmentGroup>\n\n\n\n      )\n      }</Segment>\n  )\n}\n\nexport default AircraftTaskPanel","import React from 'react'\nimport { Segment, Table } from 'semantic-ui-react'\n\nconst StaffWorkTime = ({ timesheets }) => {\n  return(\n    <Segment>\n      <Table celled >\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Staff</Table.HeaderCell>\n            <Table.HeaderCell>Start Time</Table.HeaderCell>\n            <Table.HeaderCell>End TIme</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {timesheets.map(timesheet =>\n            <Table.Row key={timesheet.id}>\n              <Table.Cell>{timesheet.staff.name}</Table.Cell>\n              <Table.Cell>{timesheet.startTime.substring(10)}</Table.Cell>\n              <Table.Cell>{timesheet.endTime.substring(10)}</Table.Cell>\n            </Table.Row>\n          )}\n        </Table.Body>\n\n      </Table>\n\n    </Segment>\n\n  )\n\n}\n\nexport default StaffWorkTime","import React from 'react'\nimport GenericTaskPanel from './GenericTasksPanel'\nimport AircraftTaskPanel from './AircraftTasksPanel'\nimport { SegmentGroup, Segment, Header } from 'semantic-ui-react'\nimport _ from 'lodash'\nimport StaffWorkTime from './StaffWorkTime'\n\n\nconst ShiftReport = ({ reportData }) => {\n\n  if(!reportData){\n    return<Segment>No reports found</Segment>\n  }\n  const tasksByCat = _.groupBy(reportData.tasks, task => task.taskCategory)\n  const tasks = _.mapValues(\n    tasksByCat,(cat,k) =>\n      k === 'AIRCRAFT'?\n        _.chain(tasksByCat.AIRCRAFT)\n          .groupBy(taskcat  =>  taskcat.aircraft.costumer.name)\n          .mapValues( costumer => {\n            return(_.groupBy(costumer, task => task.aircraft.registration))\n          })\n          .value()\n        :cat\n  )\n\n\n  return (\n    <SegmentGroup>\n      <Segment basic clearing>\n        <Header floated =\"left\"> Shift Report from {reportData.shift} shift <span><h5>({reportData.startTime.substring(10)} - {reportData.endTime.substring(10)})</h5></span></Header>\n        <Header floated =\"right\" as=\"h5\">  {reportData.startTime.substring(10,0)}<span><br/>{reportData.station.location}</span> </Header>\n      </Segment>\n\n      <StaffWorkTime timesheets = {reportData.staffAndTime} />\n\n      {_.map(tasks, (tasksByType,key_taskType) => {\n        if(key_taskType === 'AIRCRAFT') return (\n          <AircraftTaskPanel key={key_taskType} aircraftTasks={ tasksByType} handoverId= {reportData.id}/>\n\n        )\n\n        return (\n          <GenericTaskPanel key = {key_taskType} genericTasks= {tasksByType} handoverId= {reportData.id}/>\n        )\n      }\n      )}\n\n\n    </SegmentGroup>\n  )\n}\n\nexport default ShiftReport","import { createContext } from 'react'\n\nconst Context = createContext( {\n  lastShiftReport: [],\n  station: []\n})\n\nexport default Context","const reducer = (state,action) => {\n  switch(action.type) {\n  case 'ADD_LASTSHIFTREPORT':\n    return {\n      ...state, lastShiftReport: action.payload\n    }\n  case 'INIT_STATION':\n    return {\n      ...state, station: action.payload\n    }\n  default:\n    return state\n  }\n}\n\nexport default reducer","import React from 'react'\r\nimport { useField, useFormikContext } from 'formik'\r\nimport { DateTimeInput } from 'semantic-ui-calendar-react'\r\nimport { Form, Label, Segment, Checkbox, Input } from 'semantic-ui-react'\r\n\r\n\r\nexport const DateInputField = ({ label,...props }) => {\r\n  const { setFieldValue,setFieldTouched } = useFormikContext()\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <Form.Field width = '4' >\r\n      {label &&\r\n      <label>{label}</label>}\r\n\r\n      <DateTimeInput  error = {meta.touched && meta.error?true:false} popupPosition='right center'  {...field} {...props} dateTimeFormat= 'DD-MM-YYYY HH:mm' closable onBlur= {() => {\r\n        setFieldTouched(field.name,true)\r\n      }} onChange={(event,{ value }) => {\r\n        setFieldValue(field.name, value)\r\n      }}\r\n      preserveViewMode={false}/>\r\n\r\n      {meta.touched && meta.error ?\r\n        <Label pointing prompt>\r\n          {meta.error}\r\n        </Label>:''}\r\n    </Form.Field>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport const InputField = ({ width,...props }) => {\r\n  const [field,meta] = useField(props)\r\n  return (\r\n    <>\r\n      <Form.Field error= { meta.touched && meta.error ? true: false} width={width} >\r\n        <label>{props.inputlabel?props.inputlabel:'' }</label>\r\n        <Input   {...field} {...props} />\r\n        { props.type !== 'hidden' && meta.touched && meta.error &&\r\n        <Label pointing prompt>\r\n          {meta.error}\r\n        </Label>\r\n        }\r\n\r\n      </Form.Field>\r\n\r\n    </>\r\n  )\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport const AircraftCheckBox = ({ label,children,checked,...props }) => {\r\n  return(\r\n    <Segment\r\n      style= {{ display:checked?'block':'inline-block'  }}>\r\n      <Checkbox checked={checked} {...props} toggle/>\r\n      <label style={{ display: 'inline-block' , marginLeft: '5px', verticalAlign: 'super' }}> {label.toUpperCase()} </label>\r\n      {children}\r\n    </Segment>\r\n  )}\r\n\r\nexport const TextAreaField = ({ label,...props }) => {\r\n  const [field,meta] = useField(props)\r\n  return (\r\n    <Form.TextArea  error = { meta.touched && meta.error} {...field} {...props}/>\r\n  )}\r\n","import { isNumber } from 'lodash'\n\n/**\n *\n * @param {int javascript date} dateToFormat\n */\nexport const formatDate = (dateToFormat) => {\n\n  const date = new Date(dateToFormat)\n\n  return (`${(date.getDate()).toString().padStart(2,0)}-${(date.getMonth()+1).toString().padStart(2,0)}-${date.getFullYear()} ${(date.getHours()).toString().padStart(2,0)}:${(date.getMinutes()).toString().padStart(2,0)}`)\n\n}\n\n/**\n *\n * @param {int or date format} date javascript date int or DD-MM-YYYY\n * @param {Double} duration duration to operate\n * @param {String} unit 'd for days, h for hours , m for minutes'\n * @param {String} operation 'add or sub'\n * @returns {string} Date format DD-MM-YYYY HH:MM\n */\nexport const operateDate = (date, duration, unit , operation) => {\n  if(!date){\n    return null\n  }\n  let ndate\n  if(!isNumber(date)){\n    const splitDateTime = date.split(' ')\n    const splitDate = splitDateTime[0].split('-')\n    const newDate =`${splitDate[2]}-${splitDate[1]}-${splitDate[0]} ${splitDateTime[1]}`\n\n    ndate = Date.parse(newDate)\n\n  }\n  else{\n    ndate = new Date(date)\n  }\n\n  switch (unit){\n  case 'd':\n    if(operation === 'add') return  formatDate((ndate + (duration * 24 * 60 * 60 * 1000)))\n    if(operation === 'sub') return  formatDate((ndate - (duration * 24 * 60 * 60 * 1000)))\n    break\n  case 'h':\n    if(operation === 'add') return formatDate((ndate + (duration * 60 * 60 * 1000)))\n    if(operation === 'sub') return  formatDate((ndate - (duration * 60 * 60 * 1000)))\n    break\n  case 'm':\n    if(operation === 'add') return formatDate((ndate + (duration * 60 * 1000)))\n    if(operation === 'sub') return  formatDate(ndate - (duration * 60 * 1000))\n    break\n  default:\n    return formatDate(ndate)\n  }\n}\n\n/**\n *\n * @param {String} stringDate format DD-MM-YYYY HH:MM\n * @returns {Int} Javascript date int\n */\nexport const toDate = (stringDate) => {\n  let ndate\n  if(!isNumber(stringDate)){\n    const splitDateTime = stringDate.split(' ')\n    const splitDate = splitDateTime[0].split('-')\n    const newDate =`${splitDate[2]}-${splitDate[1]}-${splitDate[0]} ${splitDateTime[1] || '00' }:${splitDateTime[2] | '00'}`\n\n    ndate = Date.parse(newDate)\n  }\n  else{\n    ndate = new Date(stringDate)\n  }\n\n  return ndate\n\n}\n\nexport const getWeekNumber= (dt) => {\n  var tdt = new Date(dt.valueOf())\n  var dayn = (dt.getDay() + 6) % 7\n  tdt.setDate(tdt.getDate() - dayn + 3)\n  var firstThursday = tdt.valueOf()\n  tdt.setMonth(0, 1)\n  if (tdt.getDay() !== 4)\n  {\n    tdt.setMonth(0, 1 + ((4 - tdt.getDay()) + 7) % 7)\n  }\n  return 1 + Math.ceil((firstThursday - tdt) / 604800000)\n}\n\n/**\n* Returns the week start date(Monday) for given year and weeknumber\n* @param {Int} w between 1-52/53\n* @param {Int} y year\n* @returns {Date}\n*/\nexport const getDatefromWeek = (w,y) => {\n  const simpleStartDate = new Date(Date.UTC(y,0,1 + (w-1) *7))\n  const dayOfWeek = simpleStartDate.getDay()\n\n  let IsoWeekStart = simpleStartDate\n  if(dayOfWeek <=4) {\n    IsoWeekStart.setDate(simpleStartDate.getDate() - simpleStartDate.getDay()+1)\n  }else {\n    IsoWeekStart.setDate(simpleStartDate.getDate()+8 - simpleStartDate.getDay())\n  }\n  return IsoWeekStart\n}\n\nexport const getMonthInt= (name) => {\n  const months = ['january','february','march','april','may','june','july','august','september','october','november','december']\n  const ind = months.findIndex((month) => {\n    return month === name.toLowerCase()\n  })\n  return ind\n}\n\n/**\n  * Positive prop gets month from  beginning of year\n  * Negative index gets month from end  of year\n  * @param  {Int} monthInt Month Number\n  */\nexport const getMonthName = (monthInt) => {\n  const months = new Proxy(['January','February','March','April','May','June','July','August','September','October','November','December'], {\n    get(target, prop) {\n      if (!isNaN(prop)) {\n        prop = parseInt(prop, 10)\n        if (prop < 0) {\n          prop += target.length\n        }\n      }\n      return target[prop]\n    }\n  })\n  return months[monthInt]\n}\n\n/**\n * Retrive months form given month duration including current month\n *\n *  */\nexport const getMonthOptions = (duration) => {\n  /**Default Duration is 4 months */\n  if(!duration ){\n    duration = 4\n  }\n\n  const today = new Date()\n  const currentMonth = today.getMonth()\n\n  const options = [...new Array(duration)].map((v,i) => {\n    return (\n      { key:i ,\n        text: getMonthName[currentMonth - i ] , value: currentMonth -1 < 0 ? 11 + currentMonth -i  : currentMonth -i }\n    ) })\n  return options\n}\n\n/**Retrieve all weeks that falls within given month duration including current month*/\nexport const getWeekOptions = (duration) => {\n  /**Default Duration is 4 months */\n  if(!duration ){\n    duration = 4\n  }\n  const today = new Date()\n  const currentMonth = today.getMonth()\n  let dYear = today.getFullYear()\n  const lastYearWeekNum = getWeekNumber( new Date(dYear-1,11,28))\n  const lastRetriveable  = getWeekNumber(new Date(dYear, currentMonth - duration ,1))\n  let currentWeek = getWeekNumber(today)\n  let options = []\n\n  let week = currentWeek\n  while ( week !== lastRetriveable-1  ){\n    const option = { key: week, text: week, value: week }\n    options.push (option )\n    week = week -1\n    if(week === 0) {\n      week = lastYearWeekNum\n    }\n  }\n  return options\n\n}\n\n","import { formatDate, toDate } from '../../../utils/DateHelper'\r\nimport _ from 'lodash'\r\n\r\n\r\nexport const validateStaffsField= (value) => {\r\n  let error\r\n  /**\r\n   * If np staff is set\r\n   */\r\n  if(!value ||  !value.length ){\r\n    error = 'Report must have staff information, please add staff'\r\n    return error\r\n  }\r\n  /**\r\n   * If at least one staff is set\r\n   */\r\n  if (value && value.length){\r\n    error = _.mapValues(value, staff => {\r\n      let errList = validateStaffInputField(staff)\r\n      /**\r\n       * If the staff input fields have error other than signOffKey\r\n       */\r\n      if(!_.isEmpty(errList)){\r\n        errList = { ...errList,  'signOffKey':'Please fix staff inputs' }\r\n        return errList\r\n      }\r\n\r\n      /**\r\n       * If staff is not signed off\r\n       */\r\n      if (!staff.signOffKey ){\r\n        errList = { ...errList,  'signOffKey':'Each staff must sign off' }\r\n      }\r\n\r\n\r\n      return errList\r\n\r\n    }) }\r\n\r\n  /**\r\n     * Removing the empty key value pairs from error\r\n     */\r\n  _.mapKeys(error,(v,k) => {\r\n    if(_.isEmpty(v)) {\r\n      delete error[k]\r\n    }\r\n  })\r\n\r\n  return error\r\n\r\n\r\n}\r\n\r\nexport const validateStaffInputField = (staff) => {\r\n\r\n  let error\r\n  if(!staff) {\r\n    return undefined\r\n  }\r\n  /**\r\n   * If staff name is not set\r\n   */\r\n  if(!staff.name ){\r\n    error = { ...error, 'name':'Staff name is required' }\r\n  }\r\n  /**\r\n   * Validating starttime and endtime\r\n   * */\r\n  error = { ...error,...validateStartEndTime(staff.startTime,staff.endTime) }\r\n\r\n  return error\r\n}\r\n\r\n\r\nexport const validateStartEndTime = (startTime,endTime,startDate)  => {\r\n\r\n  let error\r\n  /**\r\n   * If start time is not set\r\n   */\r\n  if(!startTime){\r\n    error = { ...error, 'startTime':'Start time is required' }\r\n  }\r\n  /**\r\n   * If end time is not set\r\n   */\r\n  if(!endTime){\r\n    error = { ...error,  'endTime':'End time is required' }\r\n  }\r\n\r\n  /**\r\n   * Id starttime is not correct format DD-MM-YYY HH:MM\r\n   */\r\n  if(!startTime.match(/^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-\\d\\d\\d\\d (0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$/)){\r\n    error = { ...error,  'startTime':'Start time should be on format DD-MM-YYYY HH:MM' }\r\n  }\r\n\r\n  /**\r\n   * Id starttime is not correct format DD-MM-YYY HH:MM\r\n   */\r\n  if(!endTime.match(/^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-\\d\\d\\d\\d (0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$/)){\r\n    error = { ...error,  'endTime':'End time should be on format DD-MM-YYYY HH:MM' }\r\n  }\r\n\r\n  /**\r\n   * If starttime is earlier than 24H\r\n   */\r\n  if( !startDate && toDate(startTime) + (24 *3600 * 1000) <= Date.now()){\r\n    error = { ...error,  'startTime':'Start time should be within last 24 hours' }\r\n  }\r\n\r\n  if(startDate && new Date(startDate).getDate() !== new Date(toDate(startTime)).getDate()){\r\n    error = { ...error,  'startTime':`Start time should be on ${formatDate(new Date(startDate)).split(' ')[0]}` }\r\n  }\r\n\r\n\r\n  /**\r\n   * If starttime isgreater than end time\r\n   */\r\n  if( toDate(startTime) >= toDate(endTime)){\r\n    error = { ...error,  'startTime':'Start time cannot be later than endtime' }\r\n  }\r\n\r\n  /**\r\n   * If starttime is set to end time\r\n   */\r\n\r\n  if( toDate(startTime) > Date.now()){\r\n    error = { ...error,  'startTime':'Start time cannot be on future' }\r\n  }\r\n  /**\r\n   * If endtime is set in future\r\n   */\r\n\r\n  if( toDate(endTime) > Date.now()){\r\n    error = { ...error,  'endTime':'End time cannot be on future' }\r\n  }\r\n\r\n  return error\r\n\r\n}\r\n\r\nexport const validateTasks = (tasks) => {\r\n  if(!tasks) return null\r\n  const error = _.mapValues(tasks,typedTasks => {\r\n    const taskErrors = _.mapValues( typedTasks,task => {\r\n      /**\r\n       * Validating individual tasks\r\n       */\r\n      const taskError = validateTaskField(task)\r\n      return taskError\r\n    })\r\n\r\n    /**\r\n     * Removing empty nested objects\r\n     */\r\n    return(_.pickBy(taskErrors,_.identity))\r\n\r\n\r\n\r\n  })\r\n\r\n\r\n  /**\r\n   * Removing empty key value pair\r\n   */\r\n  _.mapKeys(error,(v,k) => {\r\n    if(_.isEmpty(v)) {\r\n      delete error[k]\r\n    }\r\n    //console.log(k)\r\n  })\r\n\r\n  return error\r\n}\r\n\r\n\r\n\r\n\r\nconst validateTaskField = (task) => {\r\n  let error = null\r\n  /**\r\n   * If task status is open\r\n   */\r\n  if(task.status === 'DEFERRED') {\r\n    /**\r\n     * If there is no action on DEFERRED task\r\n     */\r\n    if(!task.action || task.action === 'NOTES_ADDED'){\r\n      console.log(task)\r\n      error = { ...error, action:'Action was requested on this task. Please perform a action. ' }\r\n    }\r\n  }\r\n\r\n  if(!task.status && !task.action){\r\n    error = { ...error, action: 'Task must have one of the following status' }\r\n  }\r\n\r\n  /**\r\n   * If task description is empty or spaces\r\n   */\r\n  if((!task.description || task.description.trim() === '')){\r\n    error= { ...error,description:'Please add task description' }\r\n  }\r\n  return error\r\n\r\n\r\n}\r\n\r\nexport const validateEmail = (email) => {\r\n\r\n  if(!email) {\r\n    return 'Email is required'\r\n  }\r\n  if(!email.match(/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/)){\r\n    return 'Incorrect email format'\r\n  }\r\n\r\n}\r\n\r\n\r\nexport const validateName = (name) => {\r\n\r\n  if(!name || name.trim === '') return 'Full name is required'\r\n  if(name.length < 4){\r\n    return 'Name must be at least 4 character long'\r\n  }\r\n\r\n\r\n}","import React from 'react'\r\nimport { Field, getIn } from 'formik'\r\nimport {  Label } from 'semantic-ui-react'\r\n\r\nconst ErrorMessage = ({ name,pointing }) => (\r\n  <Field\r\n    name={name}>\r\n    {({ form }) => {\r\n\r\n      const error = getIn(form.errors, name)\r\n      const touch = getIn(form.touched, name)\r\n      return touch && error && typeof error === 'string' ?\r\n        <Label pointing={pointing} style={{ height:'fit-content' }}color='red'  basic>{error}</Label> : null\r\n    }}\r\n  </Field>\r\n)\r\n\r\nexport default ErrorMessage","import { gql } from '@apollo/client'\nexport const SIGN_OFF_SHIFT = gql`\n  mutation signOff($startTime: String!, $break:Int, $endTime:String!, $username: String, $password:String, $idCardCode: String, $additionalAction: String, $id:String, $email: String, $name: String ){\n    signOffTimeSheet(\n      startTime: $startTime, \n      endTime:$endTime, \n      break: $break,\n      username: $username, \n      password: $password , \n      additionalAction: $additionalAction,\n      email: $email,\n      name: $name,\n      idCardCode: $idCardCode\n      id: $id\n      ) {\n        name,\n        value,\n        break,\n        startTime,\n        endTime,\n        id\n      }\n  }`\nexport const UPDATE_TIMESHEET = gql`\n mutation updateTimeSheet($id: String, $startTime: String , $endTime: String, $station: String, $shift : String, $break: Int, $staff: String, $remarks: [RemarkInput], $handover: String){\n  addToTimeSheet(\n      id: $id\n      startTime: $startTime , \n      endTime: $endTime,\n      station: $station, \n      shift: $shift,  \n      staff: $staff\n      break: $break,\n      remarks:$remarks,\n      handover:$handover,\n  )\n    {\n      id\n      startTime\n      status\n      date\n      endTime\n      break\n      remarks{\n        by\n        date\n        edit\n        text\n        title\n      }\n      staff{\n        id\n        name\n        reqHours\n      }\n      shiftReport {\n        shift\n        id\n        station {\n          id\n          location\n        }\n      }\n\n      shift\n      station{\n        id\n        location\n      }\n\n  } \n  \n\n }\n`\nexport const APPROVE_TIMESHEET = gql`\n mutation approveTimeSheet($id: String!, $status: String!){\n   approveTimeSheet(\n     id: $id,\n     status: $status\n   ){\n     id \n     status \n     remarks{\n      by\n      date\n      edit\n      text\n      title\n    }\n   }\n }\n`\nexport const DELETE_TIMESHEET = gql`\n mutation deleteTimeSheet($id: String!){\n   deleteTimeSheet(\n     id: $id,    \n   ){\n     status\n     message\n   }\n }\n`\nexport const REQUEST_CLARIFICATION = gql`\n mutation requestClarification($id: String!, $clearify: String){\n  requestClarification(\n     id: $id,\n     clearify:$clearify,    \n   ){\n    remarks{\n      by\n      date\n      edit\n      text\n      title\n    }\n   }\n }\n`","import React, { useState, useEffect } from 'react'\nimport { Modal,Grid,Header,Form ,Divider,Segment ,Icon,Button,Message, FormGroup, FormField, Dimmer,Loader } from 'semantic-ui-react'\nimport { DateInputField, InputField } from './FormFields'\nimport { operateDate, formatDate } from '../../../utils/DateHelper'\nimport { DateTimeInput } from 'semantic-ui-calendar-react'\nimport { useFormikContext, Formik } from 'formik'\nimport { validateEmail, validateName, validateStartEndTime } from './validator'\nimport { SIGN_OFF_SHIFT } from '../../../mutations/timeSheetMutation'\nimport { useMutation } from '@apollo/client'\nimport _ from 'lodash'\n//import { remove } from '../../../../../backend/Src/models/Staff'\n\n\nconst  StaffEditModel = ({ setOpen,open, fieldName, removeClick ,removeStaff ,setRemoveStaff }) => {\n\n  const{ getFieldMeta,setFieldValue } = useFormikContext()\n\n  const [signOff,{ loading, error, data }] = useMutation(SIGN_OFF_SHIFT,{\n    onError: (error) => {\n      console.log(error)\n    }\n  })\n\n  const shiftStartTime = getFieldMeta(`${fieldName}.startTime`).value\n  const shiftEndTime = getFieldMeta(`${fieldName}.endTime`).value\n  const ibreakt = getFieldMeta(`${fieldName}.break`).value\n  const [notifyResult,setNotifyResult] = useState('')\n  const [username,setUsername] = useState('')\n  const [password,setPassword] = useState('')\n  const [startTime,setStartTime] = useState(shiftStartTime)\n  const [endTime,setEndTime] = useState(shiftEndTime)\n  const [breakt,setBreakt] = useState(ibreakt)\n\n  useEffect(() => {\n    setStartTime(shiftStartTime)\n    setEndTime(shiftEndTime)\n  },[shiftEndTime, shiftStartTime])\n\n\n  useEffect (() => {\n    /**If the staff sign off is not sucessfull */\n    if(error){\n      setNotifyResult({ type: 'error', message:`Sorry, ${error.message}` })\n    }\n    /**\n     * If the staff signoff is successFull\n     */\n    if(data && data.signOffTimeSheet != null ){\n\n      if(removeStaff) {\n        removeClick()\n        setRemoveStaff(false)\n        setOpen(false)\n\n      }else {\n        setFieldValue(`${fieldName}.startTime`,data.signOffTimeSheet.startTime)\n        setFieldValue(`${fieldName}.endTime`,data.signOffTimeSheet.endTime)\n        setFieldValue(`${fieldName}.signOffKey`,data.signOffTimeSheet.value)\n        setOpen(false)\n\n      }\n\n\n\n\n\n    }\n\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[error, data])\n\n  const submit = async (values) => {\n    let signOffData\n    signOffData = { startTime:values.startTime ,endTime: values.endTime ,break: values.breakt, username: username, password: password, additionalAction: removeStaff?'remove':'update',id:getFieldMeta(`${fieldName}`).value.id }\n\n    console.log(signOffData)\n    await signOff({ variables:signOffData })\n  }\n\n  const renderAlert = () => {\n    if(!notifyResult) return null\n    return(\n      <Message\n        success = {notifyResult.type === 'success'}\n        error = {notifyResult.type === 'error'}\n        onDismiss = {() => setNotifyResult('')\n        }\n      > {notifyResult.message}\n      </Message>)\n\n\n  }\n\n  if(loading){\n    return<Dimmer active inverted>\n      <Loader active inverted>Verifying</Loader>\n    </Dimmer>\n  }\n\n  return (\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {open}\n      onClose= {() => {\n\n        setNotifyResult(false)\n        setOpen(false)}}\n      onOpen= {() => setOpen (true)}\n    >\n      <Modal.Header>{getFieldMeta(`${fieldName}.name`).value} </Modal.Header>\n      <Modal.Content>\n        {notifyResult &&\n         renderAlert()\n        }\n        <Formik\n          enableReinitialize\n          initialValues = {{\n            startTime: startTime,\n            endTime: endTime,\n            breakt: breakt,\n            username:'',\n            password:'',\n            email:'',\n            fullname:'',\n            resetEmail:''\n          }}\n\n          validate = {values => {\n            let errors = {}\n            errors = { ...errors,...validateStartEndTime(values.startTime,values.endTime)  }\n            return errors\n          } }\n\n          onSubmit = {(values) =>\n          {\n            submit(values)}\n          }\n\n\n        >\n\n\n          {({ values,handleSubmit,errors,touched }) =>\n\n            <Form size='large' onSubmit = { handleSubmit} >\n              <Form.Group >\n\n                < DateInputField\n                  label= 'Start Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name ='startTime'\n                  maxDate = {operateDate(Date.now(),30,'m','sub')}\n                  minDate= {operateDate(Date.now(),20,'h','sub')}\n                  onChange = {(e,{ value }) => {\n                    setStartTime(value)}\n                  }\n                />\n\n\n                < DateInputField\n                  label = 'End Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name='endTime'\n                  maxDate = {formatDate(Date.now())}\n                  minDate= {operateDate(startTime,20,'m','add')}\n                  onChange = {(e,{ value }) => {\n                    setEndTime(value)}\n                  }/>\n\n                <InputField\n                  inputlabel= 'Break'\n                  label = 'Minutes '\n                  labelPosition='right corner'\n                  name= 'breakt'\n                  type='number'\n                  min='0'\n                  onChange = {(e,{ value }) => {\n                    setBreakt(value)}\n                  }>\n                </InputField>\n\n\n\n              </Form.Group>\n\n              <Header as='h3' color='red' textAlign='center'>\n                {removeStaff?'Enter credentials to confirm remove.' : 'Enter credential to save changes'}\n\n              </Header>\n\n\n              <>\n                <Segment >\n\n                  <Grid columns={2} stackable >\n                    <Divider vertical>Or</Divider>\n                    <Grid.Row verticalAlign='middle'>\n                      <Grid.Column>\n                        <Grid.Row style={{ textAlign:'center' }}>\n                          <Header as ='h5' icon>\n                            <Icon name='sign in alternate' />\n                    Use Credentials\n                          </Header>\n                        </Grid.Row>\n                        <Grid.Row>\n                          <Form.Group>\n                            <Form.Input label='Username' onChange= {(e,{ value }) => setUsername(value)}></Form.Input>\n                            <Form.Input label= 'Password' type='password' onChange= {(e,{ value }) => setPassword(value)}></Form.Input>\n                          </Form.Group>\n                          <Form.Field style={{ textAlign:'center' }}>\n                            <Button type='submit' primary > Sign </Button>\n                          </Form.Field>\n                        </Grid.Row>\n                      </Grid.Column>\n\n                      <Grid.Column textAlign='center'>\n                        <Grid.Row >\n                          <Header icon>\n                            <Icon name='barcode' size='massive' />\n                  Use IdCard\n                          </Header>\n                        </Grid.Row>\n                        <Grid.Row><Button primary>Scan</Button></Grid.Row>\n\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n\n                </Segment>\n\n              </>\n            </Form>}\n        </Formik>\n      </Modal.Content>\n\n    </Modal>\n\n\n  )\n}\n\nexport default StaffEditModel","import React, { useState } from 'react'\nimport { Label, Form, Button, Segment } from 'semantic-ui-react'\nimport { InputField, DateInputField } from './FormFields'\nimport { Field } from 'formik'\nimport { formatDate, operateDate } from '../../../utils/DateHelper'\nimport StaffEditModel from './StaffEditModel'\n\nconst StaffForm = ({ staff,fieldName,values,index,remove }) => {\n  const [open, setOpen] = useState(false)\n  const [removeStaff, setRemoveStaff] = useState(false)\n\n  if(!staff) return null\n  return(\n    <Segment >\n      {staff.signOffKey &&\n      <Label attached='top left' size='mini' basic color=\"grey\" >Signed Off </Label> }\n      <Form.Group  >\n        <InputField  width= {4} readOnly = {staff.signOffKey } name={`${fieldName}.name`}></InputField>\n        < DateInputField\n          readOnly = {(staff.signOffKey && !staff.changing) }\n          maxDate = {operateDate(Date.now(),30,'m','sub')}\n          minDate= {operateDate(Date.now(),20,'h','sub')}\n          name = {`${fieldName}.startTime`}/>\n\n        < DateInputField\n          readOnly= {(staff.signOffKey  && !staff.changing) }\n          maxDate = {formatDate(Date.now())}\n          minDate= {operateDate(values.startTime,20,'m','add')}\n          name = {`${fieldName}.endTime`}/>\n\n        <Field type='hidden' value=\"\" name={`${fieldName}.signOffKey`}></Field>\n        <Field type='hidden' value=\"\" name={`${fieldName}.break`}></Field>\n\n        <Button\n          style={{ height:'fit-content' }}\n          type='button'\n          circular\n          icon='cancel'\n          basic\n          onClick = {() => {\n            setRemoveStaff(true)\n            setOpen(true)\n          }}\n        />\n\n\n        <>\n          <Button\n            style={{ height:'fit-content' }}\n            type='button'\n            inverted\n            color='red'\n            size=\"small\"\n            onClick = {() => {\n              setOpen(true)\n            }\n            }> Change</Button>\n        </>\n\n      </Form.Group>\n\n      <StaffEditModel\n        setOpen={setOpen}\n        open={open}\n        startTime ={values.staffs[index].startTime}\n        endTime ={values.staffs[index].endTime}\n        breakt = {values.staffs[index].break}\n        fieldName = {fieldName}\n        removeStaff = {removeStaff}\n        setRemoveStaff= {setRemoveStaff}\n        removeClick = {() => remove(index)}\n      />\n\n    </Segment>\n  )}\n\nexport default StaffForm","import React, { Fragment } from 'react'\nimport { FieldArray } from 'formik'\nimport ErrorMessage from './ErrorMessage'\nimport { Segment, Button,Icon,Header } from 'semantic-ui-react'\nimport StaffForm from './StaffForm'\n\nconst StaffForms = ({ values ,addStaffOpen }) => {\n\n  return (\n    <>\n      <FieldArray name=\"staffs\">\n        {({ remove, push, replace }) => (\n          <Fragment >\n            <Header as=\"h3\">Staffs</Header>\n            <Segment.Group >\n              { values.staffs.length >0 && values.staffs.map((staff,index) =>\n                <StaffForm\n                  key={index}\n                  index ={index}\n                  staff={staff}\n                  fieldName={`staffs.${index}`}\n                  values= {values}\n                  remove= {remove}\n                ></StaffForm>\n              )\n              }\n            </Segment.Group>\n            <Button type='button' icon\n              primary onClick={ () =>\n                addStaffOpen(true)\n                /*push({ name:'',startTime:'',endTime:'' ,signOffKey:'' })*/}>< Icon name=\"plus circle\"/> Add </Button>  <ErrorMessage name='staffs' pointing='left'/>\n          </Fragment>\n        )}\n\n      </FieldArray>\n\n    </>\n\n  )\n}\n\nexport default StaffForms","import React, { useState } from 'react'\nimport { useFormikContext } from 'formik'\nimport { Label, Icon, Divider,Form,Button,Accordion } from 'semantic-ui-react'\nimport ErrorMessage from './ErrorMessage'\nimport { TextAreaField } from './FormFields'\n\n\nexport const TaskForm = ({ label,onRemove,disabled,children,name, ...props }) => {\n  const { setFieldValue,getFieldProps,setFieldTouched, getFieldMeta } = useFormikContext()\n\n  const removeButtonClick = ( e ) => {\n    e.preventDefault()\n    onRemove()\n  }\n\n  const [noteFieldVisibile, setNoteFieldVisibile] = useState(false)\n\n  const taskAction = getFieldProps(`${name}.action`).value\n  const taskStatus = getFieldProps(`${name}.status`).value\n  const taskNotes =  getFieldProps(`${name}.newNote`).value\n\n  const actionButtonClick = (e,value) => {\n    e.preventDefault()\n    setFieldValue(`${name}.action`,value)\n    if(noteFieldVisibile && !taskNotes){\n      toggleNotes()\n    }\n  }\n\n  const actionOpenCheckBoxClick = (e,checked) => {\n    setFieldTouched(`${name}.description`,true)\n    if(!getFieldMeta(`${name}.description`).error){\n\n      if(checked){\n\n        setFieldValue(`${name}.action`,'OPEN')\n\n      }else{\n        setFieldValue(`${name}.action`,'')\n      }\n    }\n    else{\n      setFieldTouched(`${name}.description`)\n    }\n  }\n\n  const actionCloseCheckBoxClick = (e,checked) => {\n    setFieldTouched(`${name}.description`,true)\n    if(!getFieldMeta(`${name}.description`).error){\n      if(checked){\n        setFieldValue(`${name}.action`,'CLOSED')\n      }else{\n        setFieldValue(`${name}.action`,'')\n      }\n    }\n    else{\n      setFieldTouched(`${name}.description`)\n    }\n\n  }\n\n  const actionDeferCheckBoxClick = (e,checked) => {\n    setFieldTouched(`${name}.description`,true)\n    if(!getFieldMeta(`${name}.description`).error){\n      if(checked){\n        setFieldValue(`${name}.action`,'DEFERRED')\n      }else{\n        setFieldValue(`${name}.action`,'OPEN')\n      }\n    }\n    else{\n      setFieldTouched(`${name}.description`)\n    }\n\n\n  }\n\n  const undoButtonClick = () => {\n    setFieldValue(`${name}.action`,'')\n    if(taskNotes) {\n      setNoteFieldVisibile(true)\n    }\n  }\n\n  const toggleNotes = () => {\n    if(noteFieldVisibile){\n      const notes= taskNotes.trim()\n      setNoteFieldVisibile(false)\n      setFieldValue(`${name}.newNote`,notes)\n    }else{\n      setNoteFieldVisibile(true)\n    }\n\n  }\n\n  const TaskStatusBar = () => {\n\n    if( taskAction && taskAction !== 'NOTES_ADDED'){\n      return (\n        <div style={{ padding:'0.3125em 1.5em' }}>\n          <Label  size='mini' basic >Task from previous shifts </Label>\n\n          {taskNotes && taskNotes.trim() && <Label size='mini' basic color=\"blue\" as='a' onClick = {() => toggleNotes() }>Notes Added </Label>}\n          <Label size='mini' basic color=\"green\" >{taskAction} </Label>\n\n          <Label as=\"a\" size='mini' basic color='yellow'\n            onClick = {(e) => undoButtonClick(e)}> <Icon name='undo'/> Undo Action </Label>\n\n        </div>)\n    }\n\n    return (\n      <div style={{ padding:'0.3125em 1.5em' }}>\n        <Label  size='mini' basic >Task from previous shifts </Label>\n\n        {taskNotes && taskNotes.trim() && <Label size='mini' basic color=\"blue\" >Notes Added </Label>}\n        <Label  size='mini' basic color=\"purple\" >Open </Label>\n\n        {disabled && taskStatus === 'DEFERRED' &&\n        <Label size='mini' basic color=\"red\" >Action Required </Label>}\n      </div>)\n\n\n  }\n\n\n\n\n  const rootPanels = [\n    { key: 'panel-1', title: 'Updates', content: 'These are updates' },\n  ]\n\n\n  return(\n    <>\n      <Divider></Divider>\n      {disabled &&\n       <TaskStatusBar></TaskStatusBar>\n      }\n\n      <Form.Group style={{ marginBottom:'0px' }}>\n\n        <label style={{ display: 'inline-block', padding: '0.9375em 0px 0px 0.3125em', width:'1.5625em' }}>{label+1}</label>\n\n        <TextAreaField  name= {`${name}.description`} readOnly={disabled} rows ='1' width='16'></TextAreaField>\n\n\n\n        <Button\n          type='button'\n          circular\n          icon='cancel'\n          style= {{ visibility: disabled?'hidden':'',height:'fit-content' }}\n          basic\n          onClick = {(e) => removeButtonClick(e)}/>\n\n\n\n      </Form.Group>\n\n      {!disabled &&\n      <div style={{ padding:'0.5em 1.5em' }}>\n        <ErrorMessage name = {`${name}.action`} pointing='below' ></ErrorMessage>\n        <Form.Group>\n          <Form.Checkbox\n            checked ={ taskAction === 'CLOSED' }\n            label=\"closed\" onChange = {(e,{ checked }) => actionCloseCheckBoxClick(e,checked)}/>\n          <Form.Checkbox\n            checked ={ taskAction === 'DEFERRED'  || taskAction === 'OPEN'}\n            label=\"Is Open Task\" onChange = {(e,{ checked }) => actionOpenCheckBoxClick(e,checked)}/>\n          <Form.Checkbox\n            label=\"Action Required\"\n            checked= {taskAction === 'DEFERRED' }\n            onChange = {(e,{ checked }) => actionDeferCheckBoxClick (e,checked) }/>\n        </Form.Group>\n\n      </div> }\n\n      {disabled &&  taskAction !== 'CLOSED' && taskAction !== 'DEFERRED' &&\n\n\n      <div style={{ margin:'0px 3.125em 0.625em 1.5em' }}>\n        <Accordion  panels={rootPanels} />\n        <ErrorMessage name = {`${name}.action`} pointing='below' ></ErrorMessage>\n        <div>\n          <Button size='mini'\n            type='button'\n            onClick = {(e) => toggleNotes(e)}> {noteFieldVisibile?'Hide Notes' : taskNotes?'Show Notes':'Add Notes'}</Button>\n          <Button.Group size='mini'>\n            <Button type='button'\n              size='mini' positive\n              value= 'CLOSED'\n              onClick = {(e,{ value }) => actionButtonClick(e,value)}>Close Task</Button>\n\n            <Button.Or size='mini' />\n            <Button  type='button'\n              size='mini' negative\n              value= 'DEFERRED'\n              onClick = {(e,{ value }) => actionButtonClick(e,value)}> Defer Task to next Shift</Button>\n          </Button.Group>\n        </div>\n      </div>\n\n\n      }\n      <TextAreaField rows='1'\n        readOnly = {taskAction && taskAction !== 'NOTES_ADDED' ? true:false}\n        hidden= {!noteFieldVisibile}\n        style= {{ paddingBotton:'0.3125em',margin:'0px 3.125em 0.625em 1.5em'  }}\n        name={`${name}.newNote`  }\n        width='14'\n        onChange= {(e,{ value }) => {\n          if(value.trim() !== ''){\n            setFieldValue(`${name}.newNote`,value)\n            if (!taskAction){\n              setFieldValue(`${name}.action`,'NOTES_ADDED')\n            }\n\n          }else{\n            setFieldValue(`${name}.newNote`,'')\n            if (taskAction  === 'NOTES_ADDED'){\n              setFieldValue(`${name}.action`,'')\n\n            }\n\n          }\n\n        }}/>\n\n\n    </>\n  )\n\n}\n\nexport default TaskForm","import React from 'react'\nimport { FieldArray } from 'formik'\nimport TaskForm from './TaskForm'\nimport { Button, Icon } from 'semantic-ui-react'\n\n\nconst TaskForms = ({ tasksIdentifier,tasks,taskCategory,onRemove,aircraftId }) => {\n\n  const newTaskField = () => {\n    const newTaskField = { description:'',status:'',action:'',taskCategory: tasksIdentifier }\n    if(taskCategory && taskCategory === 'AIRCRAFT'){\n      newTaskField.aircraft = aircraftId\n      newTaskField.taskCategory = taskCategory\n    }\n\n    return newTaskField\n\n  }\n\n  return  <FieldArray name={`tasks.${tasksIdentifier}`}>\n    {({ push,remove }) => (<>\n      {tasks && tasks.map((task,index) =>\n        <TaskForm key={index}\n          label= {index}\n          name={`tasks.${tasksIdentifier}.${index}`}\n          //The input Field is disabled if the task is open or deferred from previous shifts implied by task.id field\n          disabled = {task.id && (task.status === 'DEFERRED' || task.status==='OPEN')}\n          onRemove = {\n            () => {\n              if(onRemove) onRemove()\n              remove(index)\n            }\n          }\n        >\n        </TaskForm>\n      )}\n\n      {/**\n       * Add new row button\n       */}\n      <Button\n        type='button'\n        icon\n        style={{ marginLeft:'10px' }}\n        primary\n        onClick={ (e) => push (newTaskField())\n        }>\n        <Icon name=\"plus circle\"/> Add\n      </Button>\n    </>)}\n  </FieldArray>}\n\nexport default TaskForms","import React, { Fragment, useState } from 'react'\nimport { Header, Confirm } from 'semantic-ui-react'\nimport { AircraftCheckBox } from './FormFields'\nimport { useFormikContext } from 'formik'\nimport TaskForms from './TaskForms'\n\nconst AircraftSelectionForm = ({ costumers,setCheckedAircrafts,checkedAircrafts,values }) => {\n  const { setFieldValue } = useFormikContext()\n  const [confirmOpen,setConfirmOpen] = useState ({ open:false,aircraft:'',event:'' })\n\n  return (<>\n    {costumers && costumers.map(costumer =>\n      <Fragment key= {costumer.name }>\n        <Header as=\"h3\">Work Performed for {costumer.name}</Header>\n\n\n        {costumer.aircrafts.map(aircraft =>\n\n          <Fragment key={aircraft.id}>\n            <AircraftCheckBox\n              label = {aircraft.registration}\n\n              // If the aircaft registration is on the checked list the checkbox should be checked\n              checked = {checkedAircrafts[aircraft.registration]&& checkedAircrafts[aircraft.registration]['checked']}\n\n              //If the aircraft reistration is on the checked list and is disabled the checkbox is disabled\n              disabled = {checkedAircrafts[aircraft.registration]&& checkedAircrafts[aircraft.registration]['disbleCheck']}\n\n              onChange={\n                (e,{ checked }) =>  {\n                  e.preventDefault()\n                  //if the aircraft is checked by user it should initalize with a taskarea input\n                  if(checked && (!values.tasks[aircraft.registration] || values.tasks[aircraft.registration].length === 0) ){\n                    setCheckedAircrafts({ ...checkedAircrafts,[aircraft.registration]:{ 'checked':checked } })\n                    setFieldValue(`tasks.${aircraft.registration}`,[{ description:'',status:'' ,action:'',taskCategory:'AIRCRAFT' ,aircraft: aircraft.id }])\n                  }\n                  if(!checked) {\n                    if(values.tasks[aircraft.registration].length >0 ){\n                      setConfirmOpen({ open:true, aircraft:aircraft.registration })\n                    }\n                  }\n                }\n\n              }>\n\n\n              {/**\n              * If Unchecked diaplay all task will be erased warning\n              */}\n              <Confirm\n                open = {confirmOpen.open}\n                header = {`Uncheck Aircraft ${confirmOpen.aircraft}`}\n                content= {'Are you sure you want to uncheck this aircraft? Doing so will remove all the entered tasks for this Aircraft'}\n                onCancel = { () => {\n                  setConfirmOpen({ open:false })\n                }}\n                onConfirm = { () => {\n                  console.log('called me')\n                  setFieldValue(`tasks.${confirmOpen.aircraft}`,null)\n                  setCheckedAircrafts({ ...checkedAircrafts,[confirmOpen.aircraft]:{ 'checked':false } })\n                  setConfirmOpen({ open:false })\n                }}\n              />\n\n              {checkedAircrafts[aircraft.registration]&& checkedAircrafts[aircraft.registration]['checked'] &&\n              <TaskForms\n                tasksIdentifier={aircraft.registration}\n                tasks={values.tasks[aircraft.registration]}\n                taskCategory= 'AIRCRAFT'\n                aircraftId = {aircraft.id}\n                onRemove = {\n                  () => {\n                    /**\n                     * If the last remaining task is removed then the aircraft chekbox should uncheck\n                     */\n                    if(values.tasks[aircraft.registration].length===1){\n                      setCheckedAircrafts({ ...checkedAircrafts,[aircraft.registration]:{ 'checked':false } })\n                    }\n\n                  }}\n              ></TaskForms>\n              }\n            </AircraftCheckBox>\n\n          </Fragment>\n        )}\n\n\n      </Fragment>)}\n  </>\n\n  )\n}\n\nexport default AircraftSelectionForm","import React, { useState, useEffect } from 'react'\nimport { Modal,Grid,Header,Form ,Divider,Segment ,Icon,Button,Message, FormGroup, FormField, Dimmer,Loader } from 'semantic-ui-react'\nimport { DateInputField, InputField } from './FormFields'\nimport { operateDate, formatDate } from '../../../utils/DateHelper'\nimport { useFormikContext, Formik } from 'formik'\nimport { validateEmail, validateName, validateStartEndTime } from './validator'\nimport { SIGN_OFF_SHIFT } from '../../../mutations/timeSheetMutation'\nimport { useMutation } from '@apollo/client'\nimport _ from 'lodash'\n\n\nconst  StaffAddModel = ({ setOpen,open ,e }) => {\n\n  const{ getFieldMeta,setFieldValue } = useFormikContext()\n\n  const [signOff,{ loading, error, data }] = useMutation(SIGN_OFF_SHIFT,{\n    onError: (error) => {\n      console.log(error)\n    }\n  })\n\n  const shiftStartTime = getFieldMeta('startTime').value\n  const shiftEndTime = getFieldMeta('endTime').value\n  const [notifyResult,setNotifyResult] = useState('')\n  const [username,setUsername] = useState('')\n  const [password,setPassword] = useState('')\n  const [startTime,setStartTime] = useState(shiftStartTime)\n  const [endTime,setEndTime] = useState(shiftEndTime)\n  const [breakt,setBreakt] = useState('30')\n  const [registerUserOpen,setRegisterUserOpen]= useState(false)\n  const [forgotPasswordOpen,setForgotPasswordOpen] = useState(false)\n\n  useEffect(() => {\n    setStartTime(shiftStartTime)\n    setEndTime(shiftEndTime)\n  },[shiftEndTime, shiftStartTime])\n\n\n  useEffect (() => {\n    /**If the staff sign off is not sucessfull */\n    if(error){\n      if(registerUserOpen){\n        setNotifyResult({ type: 'error', message:`Failed to register user. ${error.message}` })\n      }if(forgotPasswordOpen){\n        setNotifyResult({ type: 'error', message:`Failed to reset password. ${error.message}` })\n      }\n      else{\n        setNotifyResult({ type: 'error', message:`Failed to add user. ${error.message}` })\n      }\n    }\n    /**\n     * If the staff signoff is successFull\n     */\n    if(data && data.signOffTimeSheet != null ){\n      /**\n       * Check if the staff is alrady added if so notify user to remove old entry\n       */\n      const staffs= getFieldMeta('staffs').value\n      if(_.find(staffs,{ id:data.signOffTimeSheet.id })){\n\n        setNotifyResult({ type: 'error', message: `${data.signOffTimeSheet.name} is already exist on report` } )\n\n      }else {\n        const addedStaff = [...staffs,{ name:data.signOffTimeSheet.name, startTime:data.signOffTimeSheet.startTime, endTime: data.signOffTimeSheet.endTime ,signOffKey:data.signOffTimeSheet.value ,id: data.signOffTimeSheet.id, break: data.signOffTimeSheet.break }]\n        setFieldValue('staffs', addedStaff)\n\n        if(registerUserOpen){\n\n          setNotifyResult({ type: 'success', message:`${data.signOffTimeSheet.name} is added to report.<br/> Further registration instruction sent to email. Please complete registration within 48 hours` })\n          setRegisterUserOpen(false)\n\n        }if(forgotPasswordOpen){\n          setNotifyResult({ type: 'success', message:`${data.signOffTimeSheet.name} is added to report <br/> Password reset link sent to email.`  })\n          setForgotPasswordOpen(false)\n        }\n        else{\n          setNotifyResult({ type: 'success', message: `${data.signOffTimeSheet.name} is added to report` } )\n        }\n      }\n\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[error, data])\n\n\n\n\n\n  const submit = async (values) => {\n\n    let signOffData\n\n    if(registerUserOpen){\n      signOffData = {  startTime:values.startTime ,endTime:values.endTime , break:parseInt(breakt), email: values.email, name: values.fullname ,additionalAction:'register' }\n    }\n    else if(forgotPasswordOpen){\n      signOffData = { startTime:values.startTime ,endTime:values.endTime ,break:parseInt(breakt), email:values.resetEmail,additionalAction:'reset' }\n    }else {\n      signOffData = { startTime:values.startTime ,endTime: values.endTime ,break:parseInt(breakt), username: username, password: password }\n    }\n    console.log(signOffData)\n    await signOff({ variables:signOffData })\n  }\n\n  const renderAlert = () => {\n    if(!notifyResult) return null\n    return(\n      <Message\n        success = {notifyResult.type === 'success'}\n        error = {notifyResult.type === 'error'}\n        onDismiss = {() => setNotifyResult('')\n        }\n      > {notifyResult.message}\n      </Message>)\n\n\n  }\n  const renderNewUserInput = (values) => {\n\n    return(\n\n      <Segment basic>\n        <Message positive>\n          <Message.Header>Register info</Message.Header>\n\n            Please enter following information to add yourself to shift . Registraion instruction will be forwarded to you on the provided email.\n            It is important that you register as soon as possible.\n        </Message>\n\n        <Message warning visible>\n          <Message.Header>Attention!!</Message.Header>\n        Your info will be added to report automatically after this step, make sure you enter your name and work time correctly\n        </Message>\n        <Form.Group>\n          <InputField width= '12' name ='fullname' label='Full Name' />\n          <InputField width= '12' name = 'email' label = 'Email Address'/>\n        </Form.Group>\n        <FormGroup>\n          <Button  positive >Register</Button>\n          <Button type='button' negative onClick ={() => setRegisterUserOpen(false)}>Cancel</Button>\n        </FormGroup>\n\n\n      </Segment>\n    )\n  }\n\n  const renderForgotPassword = (values) => {\n    return(\n      <Segment basic>\n        <Message warning visible>\n          <Message.Header>Reset Password</Message.Header>\n            Please enter your email address used while creating account.\n        </Message>\n\n        <Message warning visible>\n          <Message.Header>Attention!!</Message.Header>\n        Your info will be added to report automatically after this step, make sure you <strong>Enter your work time correctly</strong>\n        </Message>\n\n        <InputField width= '12' name = 'resetEmail'label = 'Email Address'/>\n        <FormGroup>\n          <Button  primary >Reset</Button>\n          <Button  negative onClick ={() => setForgotPasswordOpen(false)}>Cancel</Button>\n        </FormGroup>\n      </Segment>\n    )\n  }\n\n\n  if(loading){\n    return<Dimmer active inverted>\n      <Loader active inverted>Veryfing User</Loader>\n    </Dimmer>\n  }\n\n  return (\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {open}\n      onClose= {() => {\n        setForgotPasswordOpen(false)\n        setRegisterUserOpen(false)\n        setNotifyResult(false)\n        setOpen(false)}}\n      onOpen= {() => setOpen (true)}\n    >\n      <Modal.Header>Add User to Shift </Modal.Header>\n      <Modal.Content>\n\n        {notifyResult &&\n         renderAlert()\n        }\n\n        <Formik\n          enableReinitialize\n          initialValues = {{\n            startTime: startTime,\n            endTime: endTime,\n            breakt:breakt,\n            username:'',\n            password:'',\n            email:'',\n            fullname:'',\n            resetEmail:''\n          }}\n\n          validate = {values => {\n            let errors = {}\n            errors = { ...errors,...validateStartEndTime(values.startTime,values.endTime) }\n\n            if(forgotPasswordOpen){\n              let emailError = validateEmail(values.resetEmail)\n              if(emailError) errors.resetEmail = emailError\n            }\n            if(registerUserOpen){\n              let emailError = validateEmail(values.email)\n              if(emailError) errors.email = emailError\n\n              let usernameError = validateName(values.fullname)\n              if(usernameError) errors.fullname = usernameError\n\n            }\n            console.log(errors)\n            return errors\n          } }\n\n          onSubmit = {(values) =>\n          {\n            console.log(values ,'submitted')\n            submit(values)}\n          }\n\n\n        >\n\n\n          {({ values,handleSubmit,errors,touched }) =>\n\n            <Form size='large' onSubmit = { handleSubmit} >\n              <Form.Group >\n\n                < DateInputField\n                  label= 'Start Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name ='startTime'\n                  maxDate = {operateDate(Date.now(),30,'m','sub')}\n                  minDate= {operateDate(Date.now(),20,'h','sub')}\n                  onChange = {(e,{ value }) => {\n                    setStartTime(value)}\n                  }\n                />\n\n\n                < DateInputField\n                  label = 'End Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name='endTime'\n                  maxDate = {formatDate(Date.now())}\n                  minDate= {operateDate(startTime,20,'m','add')}\n                  onChange = {(e,{ value }) => {\n                    setEndTime(value)}\n                  }/>\n\n                <InputField\n                  inputlabel= 'Break'\n                  label = 'Minutes '\n                  labelPosition='right corner'\n                  name= 'breakt'\n                  type='number'\n                  min='0'\n                  onChange = {(e,{ value }) => {\n                    setBreakt(value)}\n                  }>\n                </InputField>\n\n\n\n              </Form.Group>\n\n              <Header as='h5' color='blue' textAlign='center'>\n\n              </Header>\n\n              {!registerUserOpen && !forgotPasswordOpen &&\n\n\n            <>\n              <Segment >\n\n                <Grid columns={2} stackable >\n                  <Divider vertical>Or</Divider>\n                  <Grid.Row verticalAlign='middle'>\n                    <Grid.Column>\n                      <Grid.Row style={{ textAlign:'center' }}>\n                        <Header as ='h5' icon>\n                          <Icon name='sign in alternate' />\n                    Use Credentials\n                        </Header>\n                      </Grid.Row>\n                      <Grid.Row>\n                        <Form.Group>\n                          <Form.Input label='Username' onChange= {(e,{ value }) => setUsername(value)}></Form.Input>\n                          <Form.Input label= 'Password' type='password' onChange= {(e,{ value }) => setPassword(value)}></Form.Input>\n                        </Form.Group>\n                        <Form.Field style={{ textAlign:'center' }}>\n                          <Button type='submit' primary > Sign </Button>\n                        </Form.Field>\n                        <Form.Field style={{ textAlign:'center' }}>\n                          <Button size='tiny' onClick={() => setForgotPasswordOpen(true)}>Forgot Password</Button>\n                        </Form.Field>\n                      </Grid.Row>\n                    </Grid.Column>\n\n                    <Grid.Column textAlign='center'>\n                      <Grid.Row >\n                        <Header icon>\n                          <Icon name='barcode' size='massive' />\n                  Use IdCard\n                        </Header>\n                      </Grid.Row>\n                      <Grid.Row><Button primary>Scan</Button></Grid.Row>\n\n                    </Grid.Column>\n                  </Grid.Row>\n                </Grid>\n\n              </Segment>\n              <FormField style={{ textAlign:'center' }}>\n                <label> If you do not have a account yet, contact your supervisor or click below.</label>\n                <Button type='button' onClick={() => setRegisterUserOpen(true)}> New User </Button>\n              </FormField>\n            </>\n              }\n\n\n              {registerUserOpen && renderNewUserInput( values)}\n              {forgotPasswordOpen && renderForgotPassword(values)}\n            </Form>}\n        </Formik>\n      </Modal.Content>\n\n    </Modal>\n\n\n  )\n}\n\nexport default StaffAddModel","import { gql } from '@apollo/client'\nexport const SUBMIT_REPORT = gql`\n  mutation submitReport($station: String!, $shift:String! , $startTime: String! ,$endTime: String!, $tasks: [ShiftReportTask]! , $staffs: [ShiftReportStaffs!]! ) { \n  submitShiftReport(\n    station:$station\n    shift:$shift\n    startTime: $startTime\n    endTime: $endTime\n    tasks:$tasks\n    staffs: $staffs\n  ){\n    endTime\n    id\n    shift\n    staffAndTime {\n      id\n      staff {\n        name\n      }\n      endTime\n      startTime\n    }\n    startTime\n    station {\n      location\n      id\n    }\n    tasks {\n      aircraft {\n        registration\n        id\n        costumer {\n          name\n        }\n      }\n      taskCategory\n      description\n      id\n      status\n      \n    }\n  } \n}\n`","import React, { useState, useContext, useEffect } from 'react'\r\nimport { Formik } from 'formik'\r\nimport Context from '../Context'\r\nimport { Form, Header, Button, Icon } from 'semantic-ui-react'\r\nimport { DateInputField } from './FormFields'\r\nimport { validateStaffsField, validateStartEndTime, validateTasks } from './validator'\r\nimport { formatDate, operateDate } from '../../../utils/DateHelper'\r\nimport _ from 'lodash'\r\nimport StaffForms from './StaffForms'\r\nimport AircraftSelectionForm from './AircraftSelectionForm'\r\nimport TaskForms from './TaskForms'\r\nimport StaffAddModel from './StaffAddModel'\r\nimport { useMutation } from '@apollo/client'\r\nimport { SUBMIT_REPORT } from '../../../mutations/submitShiftReport'\r\n\r\n\r\n\r\nconst NewReport = () => {\r\n  const context = useContext(Context)\r\n  const station = context.state.station\r\n  const reportData = context.state.lastShiftReport\r\n\r\n  const [openAddStaffModel,setOpenAddStaffModel] = useState (false)\r\n\r\n  // costumers assigned to this station\r\n  const [costumers,setCostumers] = useState(station.costumers)\r\n\r\n  const [checkedAircrafts, setCheckedAircrafts] = useState({})\r\n  const init = {\r\n    startTime:'', //default shift starttime\r\n    endTime:'',\r\n    staffs:[],\r\n    tasks:{}\r\n  }\r\n  const [initialFields,setInitialFields] = useState(init)\r\n\r\n  const [submitReport,{ loading, error, data }] = useMutation(SUBMIT_REPORT,{\r\n    onError: (error) => {\r\n      console.log(error)\r\n    }\r\n  })\r\n\r\n\r\n  useEffect (() => {\r\n    //initial aircraft list from last shift report\r\n    let list = {}\r\n    //initial task list from last shift report\r\n    let taskList = {}\r\n    let costumerList = []\r\n\r\n    // eslint-disable-next-line array-callback-return\r\n\r\n    reportData && reportData.tasks && reportData.tasks.map(task =>  {\r\n      if( (task.status==='DEFERRED' || task.status==='OPEN') ){\r\n        // Initial field for deferred or open tasks\r\n        const simplifiedTask = { id:task.id, description:task.description, status:task.status ,updates: task.updates ,action:'', newNote:'',taskCategory:task.taskCategory }\r\n\r\n        //From the last shift report if the task is aircraft tasks aircraft has open tasks it is checked by default and cannot be disabled\r\n        if(task.aircraft) {\r\n          list[task.aircraft.registration] = { checked:true,disbleCheck:true }\r\n        }\r\n\r\n        //arranging tasks based on aircraft registration\r\n        if(task.aircraft && taskList[task.aircraft.registration]){\r\n          taskList[task.aircraft.registration].push( { ...simplifiedTask })\r\n\r\n        }else if (task.aircraft){\r\n          taskList[task.aircraft.registration] = [ { ...simplifiedTask }]\r\n\r\n        }else{\r\n          if(taskList[task.taskCategory]){\r\n            taskList[task.taskCategory].push(simplifiedTask)\r\n          }else{\r\n            taskList[task.taskCategory] = [simplifiedTask]\r\n          }\r\n\r\n\r\n        }\r\n\r\n        //if there is a task from a costumer who is not assigned to this station we add that arcraft & costumer to list\r\n        if(task.aircraft){\r\n          if(! _.find( station.costumers,_.matchesProperty('name',task.aircraft.costumer.name))){\r\n\r\n            if( ! _.find( costumerList,_.matchesProperty('name',task.aircraft.costumer.name))){\r\n              costumerList.push({ name:task.aircraft.costumer.name,aircrafts:[{ registration:task.aircraft.registration,id: task.aircraft.id }] })\r\n            }else{\r\n              costumerList.aircrafts.push({ registration:task.aircraft.registration , id: task.aircraft.id })\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    )\r\n\r\n    setCostumers([...costumers,...costumerList])\r\n\r\n    //Set initail form values based on shiftreport\r\n    setInitialFields({ ...initialFields,tasks:taskList })\r\n    setCheckedAircrafts(list)\r\n\r\n  }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  ,[])\r\n\r\n  useEffect(() => {\r\n    if(data){\r\n      console.log(data.submitShiftReport)\r\n    }\r\n  })\r\n\r\n  /**Format submit data  before submit*/\r\n  const beforeSubmit = (formdata) => {\r\n    let submitData = { station: station.id , staffs: formdata.staffs, startTime:formdata.startTime, endTime: formdata.endTime, tasks:{} }\r\n\r\n    /**Reduce the tasks to be only array of tasks */\r\n    const tasks =  _.reduce(formdata.tasks, (tasks,tasksByIdentifier,identifier) => {\r\n      let taskList = _.map(tasksByIdentifier, (task,index) => {\r\n        let initialTask\r\n        /**Compare the task with the initial tasks, reduce to only include the changes */\r\n        if(initialFields.tasks[identifier] && initialFields.tasks[identifier][index]){\r\n          initialTask = initialFields.tasks[identifier] && initialFields.tasks[identifier][index]\r\n          const difference = Object.keys(initialTask).filter(k => initialTask[k] !== task[k])\r\n\r\n          /**If no changes return null */\r\n          if(!difference) return null\r\n          const reducedTask = difference.reduce((p,c) => p[c] = { ...p,[c]:task[c] },{})\r\n          task = { id: task.id, ...reducedTask }\r\n        }\r\n\r\n        return task\r\n      })\r\n\r\n      /**remove null tasks */\r\n      taskList = taskList.filter(task => task !== null)\r\n\r\n      return [...tasks,...taskList]\r\n    },[])\r\n\r\n\r\n    /**Only include staff signoff Key and name */\r\n    const staffs = formdata.staffs.map((staff) => {return { signOffKey: staff.signOffKey, name:staff.name }})\r\n\r\n    submitData = { ...submitData,tasks: tasks, staffs: staffs ,shift: 'Day' }\r\n\r\n    return submitData\r\n\r\n  }\r\n\r\n  /*if(loading) {\r\n    return(\r\n      <Segment>\r\n        <Dimmer active inverted>\r\n          <Loader inverted>Submitting Data</Loader>\r\n        </Dimmer>\r\n      </Segment>\r\n    )\r\n  }*/\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues = {initialFields}\r\n        validate = { values => {\r\n          let errors = {}\r\n          errors = { ...errors,...validateStartEndTime(values.startTime,values.endTime) }\r\n          const staffErrors = validateStaffsField(values.staffs)\r\n          const taskErrors = validateTasks(values.tasks)\r\n\r\n          if(!_.isEmpty(taskErrors) ) errors.tasks = taskErrors\r\n          if(!_.isEmpty(staffErrors) ) errors.staffs = staffErrors\r\n          return errors\r\n\r\n        }}\r\n        onSubmit={(values) => {\r\n\r\n          console.log('submit Clicked',values)\r\n          const submitData = beforeSubmit(values)\r\n          submitReport({ variables: submitData })\r\n\r\n        }}\r\n      >\r\n\r\n        {({ values,handleSubmit,errors,touched,dirty  }) =>\r\n          <>\r\n            <Form onSubmit = {handleSubmit}>\r\n              {/*Shift start end times*/}\r\n              <Form.Group >\r\n                <DateInputField\r\n                  label = \"Shift Start Time\"\r\n                  name='startTime'\r\n                  maxDate = {operateDate(Date.now(),30,'m','sub')}\r\n                  minDate= {operateDate(Date.now(),20,'h','sub')}/>\r\n\r\n                <DateInputField\r\n                  label = \"Shift End Time\"\r\n                  name='endTime'\r\n                  maxDate = {formatDate(Date.now())}\r\n                  minDate= {operateDate(values.startTime,20,'m','add')}/>\r\n              </Form.Group>\r\n\r\n              {/*Dynamic Input fields for staff Information*/}\r\n              <StaffForms values={values} touched={touched} errors={errors} addStaffOpen =  {setOpenAddStaffModel}/>\r\n\r\n              {/*Dynamic Input fields for Aircraft Tasks*/}\r\n              <AircraftSelectionForm costumers ={costumers} checkedAircrafts={checkedAircrafts} setCheckedAircrafts= {setCheckedAircrafts} values={values} />\r\n\r\n              {/**\r\n           * TODO:\r\n           * Input fields if the aircraft/costumer is not listed on the reporting page\r\n           */}\r\n              <Header as=\"h3\">Work Performed for Other Costumer</Header>\r\n              <Button  type='button' icon primary><Icon name=\"plus circle\"/> Add </Button>\r\n\r\n              <Header as=\"h3\">Other Tasks</Header>\r\n              <TaskForms tasksIdentifier = 'OTHER' tasks = {values.tasks.OTHER}> </TaskForms>\r\n\r\n              <Header as=\"h3\">Logistics Task</Header>\r\n              <TaskForms tasksIdentifier = 'LOGISTICS' tasks = {values.tasks.LOGISTICS}> </TaskForms>\r\n\r\n\r\n\r\n\r\n              <Button   primary type=\"submit\"> Submit Report </Button>\r\n            </Form>\r\n\r\n\r\n            <StaffAddModel setOpen= {setOpenAddStaffModel} open= {openAddStaffModel} shiftStartTime = {values.startTime} shiftEndTime={values.endTime}></StaffAddModel></>}\r\n\r\n\r\n      </Formik>\r\n\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default NewReport","import { useLazyQuery } from '@apollo/client'\nimport React ,{  } from 'react'\nimport { Loader, Header, Modal } from 'semantic-ui-react'\nimport { GET_SHIFT_REPORT } from '../../queries/shiftReportQuery'\n\nimport _ from 'lodash'\n\nimport ShiftReport from '.'\n\n\nconst ReportViewModal = ({ openReport,setOpenReport }) => {\n  const [getReport,{ error,loading,data }] = useLazyQuery(GET_SHIFT_REPORT)\n\n  const onMount = () => {\n    if(openReport.id) {\n      getReport({ variables:{ id: openReport.id } })\n    } else{\n      setOpenReport({ ...openReport,id:'', open: false })\n    }\n\n\n  }\n\n  return (\n    <Modal\n      onClose={() => setOpenReport({ id:'',open:false })}\n      onMount={() => onMount()}\n      open= {openReport.open}\n    >\n      { error &&\n      <>\n        <Modal.Content> <Header as ='h5'>Oouch...Something Went Wrong, Please try again</Header> </Modal.Content>\n      </>\n      }\n      { loading &&\n      <Loader active>Retriving Report</Loader>\n\n      }\n\n      {data && data.getShiftReport &&\n      <>\n        <Modal.Header>Shift Report: {data.getShiftReport.startTime.split(' ')[0]} {data.getShiftReport.station.location} {data.getShiftReport.shift} shift</Modal.Header>\n        <Modal.Content>\n          <ShiftReport reportData = {data.getShiftReport}> </ShiftReport>\n        </Modal.Content></>\n      }\n    </Modal>\n  )\n\n}\n\nexport default ReportViewModal","import { useQuery } from '@apollo/client'\nimport React ,{ Fragment, useContext, useState } from 'react'\nimport { Table,Loader, Header, List } from 'semantic-ui-react'\nimport { GET_REPORTLIST } from '../../queries/shiftReportQuery'\nimport Context from './Context'\nimport _ from 'lodash'\n\nimport ReportViewModal from '../ShiftReport/ReportViewModal'\n\n\nconst AllReportsTable = () => {\n  const context = useContext(Context)\n  const station = context.state.station\n\n  const { error,loading,data } = useQuery(GET_REPORTLIST, { variables:{ stationId: station.id } })\n  const [openReport,setOpenReport]= useState({ id:'', open: false })\n\n  let transformData\n  if(data) {\n    transformData = data.getReportList\n    transformData = _.groupBy(transformData, report => report.startTime.split(' ')[0] )\n    transformData = _.mapValues(transformData, date => _.groupBy(date,report => report.station.location))\n\n  }\n\n  if (loading) {\n    return (\n      <Loader active>Initiatilizing reporting</Loader>\n    )\n  }\n\n  if (error) {\n    console.log(error)\n    return (\n      <Header as ='h5'>Something Went Wrong, Please try again</Header>\n    )\n  }\n\n  return (\n    <>\n      <Table  compact celled striped structured>\n        <Table.Header>\n          <Table.Row><Table.HeaderCell> Date </Table.HeaderCell><Table.HeaderCell textAlign='center'> Station </Table.HeaderCell><Table.HeaderCell> Shift </Table.HeaderCell></Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {transformData && _.map(transformData,(stations,date) =>\n            <Fragment key = {date}>\n              {Object.entries(stations).map(([station,reports],index) =>\n                <Table.Row  key = {station}>\n                  {index === 0 && <Table.Cell collapsing rowSpan={Object.keys(transformData[date]).length}>{date}</Table.Cell>}\n                  <Table.Cell textAlign='center' >{station}</Table.Cell>\n                  <Table.Cell>\n                    <List horizontal>\n                      {_.map(reports, report =>\n                        <List.Item as = 'a' key={report.id}\n                          onClick = {() => {\n                            setOpenReport({ id: report.id,open:true })\n                          }}>{report.shift}\n                        </List.Item>)}\n                    </List>\n                  </Table.Cell>\n                </Table.Row>\n              )\n              }</Fragment>\n          )\n          }\n        </Table.Body>\n      </Table>\n      <ReportViewModal setOpenReport= {setOpenReport} openReport={openReport}></ReportViewModal>\n    </>\n  )\n}\n\nexport default AllReportsTable","import React,{ useState, useContext, useReducer, useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { GET_SHIFT_REPORT } from '../../queries/shiftReportQuery'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { Loader,Image,Segment, Header } from 'semantic-ui-react'\nimport MenuBar from './MenuBar'\nimport ShiftReport from '../ShiftReport'\nimport Context from './Context'\nimport reducer from './stationReducer'\nimport { GET_STATION } from '../../queries/stationQuery'\nimport NewReportForm from './NewReportForm'\nimport AllReportsTable from './AllReportsTable'\n\n\nconst StationReportPage = () => {\n  const history = useHistory()\n\n  const initialState = useContext(Context)\n  const [state,dispatch] = useReducer(reducer, initialState)\n\n\n  if(!JSON.parse( sessionStorage.getItem('stationKey'))){\n    history.push('/')\n  }\n\n  const params = useParams()\n  const id =params.id\n  const station = params.station\n\n  const [activeItem, setActiveItem] = useState('lastShiftReport')\n\n  let queryParams\n\n  if (station && id ){\n    queryParams = {\n      station: id,\n      flag:'MOST_RECENTLY_COMPLETED'\n    }\n  }\n\n  const useMultipleQuery = () => {\n    const res1 = useQuery(GET_SHIFT_REPORT,{ variables:queryParams })\n    const res2 = useQuery(GET_STATION,{ variables:{ id: id } })\n    return [res1, res2]\n  }\n\n  const [\n    { loading:loadingReport, error:errorReport, data: dataReport },\n    {  data: dataStation }\n  ] = useMultipleQuery()\n\n  useEffect(() => {\n    if(dataStation) dispatch({ type:'INIT_STATION',payload:dataStation.getStation })\n  },[dataStation])\n\n  useEffect(() => {\n    if(dataReport) dispatch({ type:'ADD_LASTSHIFTREPORT',payload:dataReport.getShiftReport })\n  },[dataReport])\n\n  //const { loading:loadingReport, error:errorReport, data: dataReport } = useQuery(GET_SHIFT_REPORT,{ variables:queryParams })\n\n\n  if (loadingReport) {\n    return (\n      <Loader active>Fetching Data</Loader>\n    )\n  }\n\n\n\n  if (errorReport) return `Error! ${errorReport}`\n\n  return (\n    <>\n      <Context.Provider value={{ state, dispatch }}>\n        <Segment  basic>\n          <Header textAlign =\"right\" color =\"blue\" floated=\"right\">Shift Reporting System <br/><span><h5> Station: {dataStation && dataStation.getStation.location} </h5></span></Header>\n          <Image src='\\LogoBig.png' size=\"medium\" />\n        </Segment>\n\n        <MenuBar activeItem= {activeItem} setActiveItem={setActiveItem}/>\n\n        { activeItem === 'lastShiftReport' &&\n          <ShiftReport reportData= {dataReport.getShiftReport} />\n        }\n        { activeItem === 'browseAllReports' &&\n          <AllReportsTable  />\n        }\n\n        {activeItem === 'startNewReport'&&\n          //<NewReportShiftSelectModel  stationId={id} ></NewReportShiftSelectModel>\n          <NewReportForm ></NewReportForm>\n        }\n      </Context.Provider>\n    </>\n  )\n}\n\nexport default StationReportPage\n\n","import { gql } from '@apollo/client'\nexport const LOGIN_STAFF = gql`\n  mutation staffLogin($username: String!, $password:String!){\n    staffLogin(username: $username, password: $password) \n  }\n`\n\nexport const RESET_PASSWORD = gql`\nmutation resetPassword ($resetCode: String!, $password: String!){\n  resetPassword(\n    password: $password,\n    resetCode: $resetCode\n  ){\n    status\n    message\n  }\n}`\n\nexport const RESET_REGISTER_CODE = gql`\nmutation resetRegisterCode ($id: String!){\n  resetRegisterCode(\n    id: $id,\n  ){\n    status\n    message\n  }\n}`\n\nexport const RESET_PASSWORD_REQ = gql`\nmutation resetPasswordReq ($id: String!){\n  resetPasswordReq(\n    id: $id,\n  ){\n    status\n    message\n  }\n}`\n\nexport const CHANGE_PASSWORD = gql`\nmutation changePassword ( $id: String!, $password: String!, $newPassword: String! ){\n  changePassword ( \n    id: $id,\n    password: $password,\n    newPassword: $newPassword\n    ){\n      status\n      message\n    }\n}`\n\nexport const STAFF_EDIT = gql`\nmutation staffEdit($id:String! $email:String, $phone: String , $contractType: String , $reqHours: Float , $position :String){\n  staffEdit(\n    id: $id,\n    email:$email,\n    phone:$phone,\n    contractType: $contractType,\n    reqHours: $reqHours,\n    position: $position\n  ){\n    id\n    email\n    phone\n    contractType\n    reqHours\n    position\n  }\n}`\n\nexport const STAFF_ADD = gql`\n  mutation addStaff( $name: String!, $email: String!, $contractType: String! , $ contractHours: Int!, $position: String, $idCardCode: String){\n    addStaff(\n      name: $name,\n      email:$email,\n      contractType: $contractType,\n      contractHours: $contractHours,\n      position: $position\n      idCardCode: $idCardCode\n    ){\n      id,\n      name,\n      email,\n      phone\n    }\n  }\n`\n\nexport const COMPLETE_REGISTRATION = gql`\n  mutation registerStaff( $registerCode:String!, $username: String!, $password: String!){\n    registerStaff(\n      registerCode: $registerCode\n      username: $username,\n      password:$password,\n    ){\n      status,\n      message\n\n    }\n  }`\n","import React, { useState,useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Button, Form, Radio, Grid, Header, Image, Segment, Divider } from 'semantic-ui-react'\nimport { ALL_STATION } from '../queries/stationQuery'\nimport { LOGIN_STAFF } from '../mutations/staffMutation'\n\n\nconst StaffLoginPage = () => {\n  const history = useHistory()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  /**\n   * staff Login mutation hook\n   */\n  const [login,{ loading, error, data }] = useMutation(LOGIN_STAFF,{\n    onError: (error) => {\n      console.log(error)\n    }\n  })\n\n  /**\n   * side effect when the staff login mutation is executed and loginToStationResult is set\n   */\n  useEffect(() => {\n    if ( data ) {\n      const staff = data.staffLogin\n      sessionStorage.setItem('staffKey',JSON.stringify(staff))\n      history.push(`/staff/${staff.id}`)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data])\n\n  /**\n   * function for station loginStation action\n   * @param {event} event submit button event\n   */\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    login({ variables:{ username:username, password: password } })\n\n  }\n\n  /**\n   * If stationKey is found on localStorage/sessionStorage skip the loginStation and browse shift report\n   */\n  let storedStaffKey = JSON.parse(sessionStorage.getItem('staffKey'))\n  if(storedStaffKey){\n    history.push(`/staff/${storedStaffKey.id}`)\n  }\n\n  /**If Login mutation error */\n  if (error) return `Error! ${error}`\n\n\n  return (\n\n    <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as='h2' color='blue' textAlign='center'>\n          <Image src='/LogoMin.png' />  Log-in to your account\n        </Header>\n        <Form size='large' style={{ textAlign:'left' } } onSubmit={handleLogin}>\n          <Segment stacked>\n            <Form.Input fluid icon='user' iconPosition='left' placeholder='username' onChange = {(e,{ value }) => setUsername(value) }/>\n            <Form.Input\n              fluid\n              icon='lock'\n              iconPosition='left'\n              placeholder='Password'\n              type='password'\n              onChange = {(e,{ value }) => setPassword(value) }\n            />\n            <Button type = 'submit' color='blue' fluid size='large' >\n            Login\n            </Button>\n\n          </Segment>\n        </Form>\n        <Divider horizontal>Or</Divider>\n        <Segment  stacked>\n          <Button type = 'button' content='Log in to station'size='large' color=\"teal\" fluid\n            onClick = {() => history.push('/stationLogin')}/>\n        </Segment>\n\n      </Grid.Column>\n\n    </Grid>\n\n\n  )\n\n\n}\n\nexport default StaffLoginPage","import { gql } from '@apollo/client'\nexport const GET_STAFF = gql`\nquery fetchStaff($id:String, $registerCode:String, $withPermission: Boolean!){\n    getStaff(\n      id: $id\n      registerCode: $registerCode\n      ){ \n    id     \n    name\n    idCardCode\n    currentStation{\n      location\n    }\n    email\n    position\n    contractType\n    lastActive\n    username\n    resetCode\n    phone\n    reqHours\n    registerCode\n    permission  @include(if: $withPermission ) {\n      id\n      station\n      timesheet\n      staff\n      admin\n    }\n    }\n  }\n`\nexport const GET_STAFF_REG = gql`\nquery fetchStaff($registerCode:String,){\n    getStaff(\n      registerCode: $registerCode\n      ){ \n    name\n    }\n  }\n`\n\nexport const GET_ALL_STAFF_MINIMAL = gql`\n  query{ allStaff {\n    id\n    name\n  }}\n`\n\nexport const GET_ALL_STAFF = gql`\n  query{ allStaff {\n    id\n    name\n    email\n    phone\n    lastActive\n    currentStation{\n      location\n    }\n  }}\n`\n\n\nexport const VERIFY_USERNAME = gql`\n  query verifyUsername( $username: String!){\n    verifyUsername(   \n      username: $username,\n    ){\n      status,\n      message\n    }\n  }`","import React from 'react'\nimport { Form, Input, Dropdown, Segment, Header, List, Label } from 'semantic-ui-react'\nimport { TextAreaField } from '../StationReportPage/NewReportForm/FormFields'\nimport { useField, useFormikContext } from 'formik'\nimport _ from 'lodash'\n\nexport const InputField = ({ ...props }) => {\n  const [field, meta] = useField(props)\n  return (\n    <Form.Field>\n      <label>{props.inputlabel }</label>\n      <Input  {...field} {...props}  error= {meta.touched && meta.error} />\n    </Form.Field>\n  )\n\n}\n\n\nexport const RemarkField = ({ name }) => {\n  const { getFieldProps } = useFormikContext()\n  const remarkTitle = getFieldProps(`${name}.title`).value\n  const remarkDate = getFieldProps(`${name}.date`).value\n  const remarkBy = getFieldProps(`${name}.by`).value\n  const remarkText = getFieldProps(`${name}.text`).value\n  const remarkEdit = getFieldProps(`${name}.edit`).value\n\n  if (!remarkTitle || remarkTitle === 'Add Clearification')\n  {\n    return (\n      <Segment basic>\n        {remarkTitle &&\n        <Header as ='h5'>\n          {remarkTitle === 'Add Clearification'&& 'Clearification Added' }\n          <Header.Subheader>by {remarkBy} on {remarkDate}</Header.Subheader>\n        </Header>\n        }\n        <TextAreaField name={`${name}.text`}></TextAreaField>\n      </Segment>\n    )\n  }\n\n  return (\n    <Segment>\n      <Header as ='h5'>\n        {remarkTitle}\n        <Header.Subheader>by {remarkBy} on {remarkDate}</Header.Subheader>\n      </Header>\n      {remarkTitle && <p>{remarkText}</p>}\n      {remarkEdit && <List>\n        {_.map(remarkEdit,(val,k) =>\n          <List.Item key={k}>\n            {k[0].toUpperCase() + k.substring(1).replace(/([a-z])([A-Z])/g, '$1 $2')}:\n            <span style={{ color:'red',fontStyle: 'italic', textDecoration: 'line-through' }}> {val.split('to')[0]} </span>\n            to\n            <span style={{ color:'green' }}> {val.split('to')[1]} </span>\n          </List.Item> )}\n\n      </List> }\n\n    </Segment>\n  )\n\n}\n\nexport const DropDownField = ({ label,...props }) => {\n  const{ setFieldValue }= useFormikContext()\n  const [field,meta] = useField(props)\n  return (\n    <Form.Field error= { meta.touched && meta.error?true:false}>\n      {!props.labeled && <label>{label }</label>}\n      <Input\n        label= {props.labeled? label :false}\n        input = {<Dropdown {...field} {...props}\n          style= {\n            props.labeled? { margin: 0,\n              borderTopLeftRadius: 0,\n              borderBottomLeftRadius: 0 }:{}\n          }\n          onChange = {props.onChange? props.onChange: (e,{ value }) => {\n            setFieldValue(props.name,value)\n          }}\n        ></Dropdown>}></Input>\n      {meta.touched && meta.error &&\n      <Label pointing prompt>\n        {meta.error}\n      </Label>}\n    </Form.Field>\n  )\n\n}","import { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useEffect } from 'react'\nimport { Button, Dimmer, Form, Grid, Icon, List, Loader, Modal,ModalContent, ModalHeader, Segment } from 'semantic-ui-react'\nimport { STAFF_ADD } from '../../../mutations/staffMutation'\nimport { InputField } from '../../StationReportPage/NewReportForm/FormFields'\nimport { validateEmail, validateName } from '../../StationReportPage/NewReportForm/validator'\nimport { DropDownField } from '../../TimeSheetsReport/TimeSheetEditFields'\nconst NewStaffModel = (props) => {\n\n  const [addStaffMutation,{ loading,error }] = useMutation(STAFF_ADD)\n\n  const addStaff = (values) => {\n    addStaffMutation({\n      variables: values,\n      update: (store,response) => {\n        store.modify({\n          fields:{\n            allStaff(existingStaffRefs , { readField }){\n              const newStaff = response.data.addStaff\n              if(existingStaffRefs.some(ref => readField('id',ref) === newStaff.id)){\n                return existingStaffRefs\n              }\n              return [...existingStaffRefs,newStaff]\n\n            }\n          }\n\n        })\n      }\n    })\n\n  }\n  const initVal = {\n    name: '',\n    email: '',\n    phone: '',\n    contractType: '',\n    contractHours: '',\n    position: '',\n  }\n  return(\n    <Formik\n      initialValues = { initVal }\n      onSubmit= {(values) => {\n        addStaff(values)\n      }}\n      validate = {(values) => {\n        let errors = {}\n\n        errors.name = validateName(values.name)\n        errors.email = validateEmail(values.email)\n\n        if(_.isEmpty(errors.name)) delete errors.name\n        if(_.isEmpty(errors.email)) delete errors.email\n\n        if(!values.contractType ){\n          errors.contractType = 'Please select contract type'\n        }\n\n        if(!values.contractHours || !parseFloat(values.contractHours) ){\n          errors.contractHours = 'Invalid contract hours'\n        }\n\n        return errors\n\n      }}\n    >\n      {({ values,handleSubmit,setFieldValue,dirty }) =>\n        <Modal\n          closeIcon\n          closeOnEscape={false}\n          closeOnDimmerClick={false}\n          open = {props.open}\n          onClose= {() =>  props.setOpen(false)}\n          onOpen= {() => props.setOpen (true)}\n        >\n          <ModalHeader>New Staff {props.name} </ModalHeader>\n          <ModalContent>\n\n            { loading &&\n            <Dimmer active>\n              <Loader />\n            </Dimmer>\n            }\n\n\n            <Form style={{ marginBottom:'5rem' }}>\n              <Grid>\n                <Grid.Row>\n                  <InputField name='name' label='Name' type='text' width='8'/>\n                </Grid.Row>\n                <Grid.Row>\n                  <InputField name='email' label='Email' type='email'  width='8'/>\n                </Grid.Row>\n                <Grid.Row>\n                  <InputField name='phone' label='Phone' type='tel'  width='8'/>\n\n                </Grid.Row>\n                <Grid.Row>\n                  <DropDownField  name='contractType' labeled label='Contract'\n                    selection\n                    width='8'\n                    options= {[{\n                      key:1, value:'Contractor', text: 'Contractor' },\n                    { key:2, value:'Employee', text: 'Employee' }]}\n                    onChange = {  (e,{ value }) => {\n                      setFieldValue('contractType',value)\n                    }}\n                  >\n\n                  </DropDownField>\n\n\n                </Grid.Row>\n                <Grid.Row>\n                  <InputField name='contractHours' label='Required Hours per day' type='number'  width='8'/>\n\n                </Grid.Row>\n                <Grid.Row>\n                  <InputField name='position' label='Position' width='8'/>\n                </Grid.Row>\n                <Grid.Row>\n                  <Form.Button icon type='button'  labelPosition='right' primary><Icon size='big' name='barcode'/>Link Id card</Form.Button>\n                </Grid.Row>\n              </Grid>\n            </Form>\n          </ModalContent>\n          <Modal.Actions>\n            <Button   negative onClick={() => props.setOpen (false)}>Cancel</Button>\n            {dirty &&\n            <Button  positive onClick= {() => handleSubmit()}>Save</Button>}\n          </Modal.Actions>\n        </Modal>\n      }\n    </Formik>\n\n  )\n}\n\nexport default NewStaffModel","import React, { useState,useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { GET_ALL_STAFF } from '../../../queries/staffQuery'\nimport { Segment, Dimmer, Loader, Table, TableHeaderCell, TableRow, TableCell, Button, Icon, FormButton, Input } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport NewStaffModel from './NewStaffModal'\n\n\nconst AllStaffs = () => {\n  const { loading,error,data } = useQuery(GET_ALL_STAFF)\n  const  [staffsData,setStaffsData]  = useState([])\n  const [staffAddOpen,setStaffAddOpen ]= useState(false)\n\n  useEffect  (() => {\n    if(data  && data.allStaff ){\n      setStaffsData(data.allStaff)\n    }\n  }, [data])\n\n  if(loading){\n    return (\n      <Loader active>Fetching Staffs</Loader>\n    )\n  }\n\n  if(error){\n    return <Segment >Something Went Wrong </Segment>\n  }\n\n\n\n\n  return (\n    <>\n      <Button primary icon onClick= {() => setStaffAddOpen(true)}>Add New Staff <Icon name = 'add'> </Icon></Button>\n      {\n        staffsData &&\n      <Input icon='search' placeholder='Search...'\n        onChange ={ (event,{ value }) => {\n          if(!value || value.trim() === ''){\n            setStaffsData(data.allStaff)\n          }else{\n            const filterData = staffsData.filter(staff => staff.name.includes(value) )\n            setStaffsData(filterData)\n          }\n\n\n        }}\n      />}\n      <Table>\n        <Table.Header>\n          <TableRow>\n            <TableHeaderCell> Name </TableHeaderCell>\n            <TableHeaderCell> Email </TableHeaderCell>\n            <TableHeaderCell> Phone </TableHeaderCell>\n            <TableHeaderCell> Last Active </TableHeaderCell>\n            <TableHeaderCell> Recent Station </TableHeaderCell>\n          </TableRow>\n        </Table.Header>\n        <Table.Body>\n          {staffsData && staffsData.map( staff =>\n            <Table.Row key= {staff.id}>\n              <TableCell><Link to={`/allStaffs/${staff.id}`}>{staff.name}</Link></TableCell>\n              <TableCell>{staff.email}</TableCell>\n              <TableCell>{staff.phone}</TableCell>\n              <TableCell>{staff.lastActive}</TableCell>\n              <TableCell>{staff.station}</TableCell>\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n      <NewStaffModel open={staffAddOpen} setOpen= {setStaffAddOpen}></NewStaffModel>\n    </>\n\n  )\n}\n\nexport default AllStaffs","import React from 'react'\nimport { Header } from 'semantic-ui-react'\n\nconst AllStations = () => {\n  return (\n    <Header as='h4'>\n      This page is not yet implemented\n    </Header>\n  )\n\n}\n\nexport default AllStations\n","import { gql } from '@apollo/client'\nexport const GET_TIMESHEETS =\ngql `query getTimesheetByUser($staff: String!, $filterDuration: String! ,$number: Int!, $year: Int!){\n  getTimeSheetByUser(\n    staff: $staff,\n     filterDuration: $filterDuration, \n     number: $number, \n     year: $year\n    ) {\n      id\n      startTime\n      status\n      date\n      endTime\n      break\n      remarks{\n        by\n        date\n        edit\n        text\n        title\n      }\n      staff{\n        name\n        reqHours\n        contractType\n      }\n      shiftReport {\n        shift\n        id\n        station {\n          id\n          location\n        }\n      }\n\n      shift\n      station{\n        id\n        location\n      }\n\n  },\n\n  getStaff(\n    id: $staff\n    ){    \n  name}\n\n}`\n\nexport const GET_ALL_TIMESHEETS = gql`\nquery getAllTimeSheets(\n  $staffId: String, $staff: [String] ,$period: String, $from: String , $to: String, $number: Int, $groupBy: String , $year: Int, $stations: [String], $filterStatus: String\n){\n  getAllTimeSheets(\n    staff:$staff,\n    period:$period,\n    from: $from,\n    to:$to ,\n    number:$number ,\n    groupBy:$groupBy,\n    year:$year ,\n    stations:$stations\n    filterStatus: $filterStatus\n    )\n  getStaff(\n      id: $staffId\n      ){    \n    name}\n   \n}`","import React, { useEffect, useState } from 'react'\nimport { Modal,Form, Button, Message, Segment, Header, Icon, Dimmer, Loader } from 'semantic-ui-react'\nimport { DateInputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { operateDate, formatDate, toDate } from '../../utils/DateHelper'\nimport { FieldArray, Formik } from 'formik'\nimport { validateStartEndTime } from '../StationReportPage/NewReportForm/validator'\nimport _ from 'lodash'\nimport { ALL_STATION } from '../../queries/stationQuery'\nimport { GET_SHIFTREPORT_ID } from '../../queries/shiftReportQuery'\nimport { UPDATE_TIMESHEET } from '../../mutations/timeSheetMutation'\nimport { gql, useLazyQuery, useMutation, useQuery } from '@apollo/client'\nimport { DropDownField, InputField, RemarkField } from './TimeSheetEditFields'\nimport { useParams } from 'react-router-dom'\n\nconst  TimeSheetEditModel = (props) => {\n  const params= useParams()\n  const self=  JSON.parse( sessionStorage.getItem('staffKey'))\n  const { loading,data } = useQuery(ALL_STATION,{ skip: props.add === false  })\n\n\n  const [getShiftReport,{ loading:shiftReportLoading, data:shiftReportData }] = useLazyQuery(GET_SHIFTREPORT_ID)\n  const [updateTimeSheet,{ loading: updateTimeSheetLoading }] = useMutation(UPDATE_TIMESHEET)\n  const [stationOptions, setStationOptions] = useState([])\n  const [newRemarkField,setNewRemarkField] = useState(false)\n\n  useEffect(() => {\n    if(data){\n      const stations = data.allStations\n      const stationOptions = stations.map((station,index) => {\n        return { key:index, value: station.id, text: station.location }\n      })\n      setStationOptions(stationOptions)\n    }\n  },[data])\n\n\n  const getShiftList= (stationId) => {\n    if(data){\n      const station = data.allStations.filter(station => station.id === stationId)\n\n      if(station && station[0].shifts) {\n\n        const shiftList = station[0].shifts.map((shift,index) => {\n\n          return{ key:index, value: shift.name, text: shift.name }\n        })\n\n        return shiftList\n\n      }\n    }\n  }\n\n  /**returns approprite shift selection value to appropite shift based on starttime for choosen station  */\n  const getRecomendedShiftOption = (startTime,stationId) => {\n    if(data){\n      const station = data.allStations.filter(station => station.id === stationId)\n      if(station && station[0].shifts) {\n        const sdt = new Date(toDate(startTime))\n        const shiftName = station[0].shifts.reduce((p,c) => {\n          /**Setting the shiftTime to given startTime for comparision  */\n          const splitSt = c.startTime.split(':')\n          const st = new Date(sdt)\n          st.setHours(splitSt[0])\n          st.setMinutes(splitSt[1])\n          /** Diffence between given startTIme and shift startttime */\n          const diff = (sdt-st)/(60*60*1000)\n          /**return the lowest positive diffence if exist or highest negative differnce*/\n          if((p.diff<0 && diff > p.diff) || (p.diff >= 0 && diff < p.diff && diff < 0)){\n            return { name: c.name ,diff: diff }\n          }\n\n          return p\n\n        },{ name:'',diff:-24 })\n\n        return shiftName.name\n\n      }\n    }\n\n\n  }\n\n  const handleShiftChange = (startTime,shift,station) => {\n\n    const st = new Date(toDate(startTime))\n    const ISODate = new Date ( Date.UTC(st.getFullYear() , st.getMonth() , st.getDate())).toISOString()\n    const vars = { date:ISODate ,shift: shift, station:station }\n    getShiftReport({ variables: vars })\n  }\n\n  const submit = async (values) => {\n    const vars = { ...values,break: parseInt(values.break) }\n    if(shiftReportData && shiftReportData.getShiftReportByShift &&  shiftReportData.getShiftReportByShift.id){\n      vars.handover = shiftReportData.getShiftReportByShift.id\n    }\n\n    if(!props.add){\n      vars.id = props.id\n    }\n\n    /**If new remarks is added only update added remarks */\n    if(values.remarks.length >= props.remarks.length){\n      vars.remarks.splice(0,props.remarks.length)\n    }\n    updateTimeSheet(\n      {\n        variables: vars,\n        update:(store,response) => {\n        /** Need to update cache only if add , graphql auto updates timesheet on update */\n          if(props.add){\n            store.modify ({\n              fields:{\n                getTimeSheetByUser(existingTimeSheetRefs , { readField }){\n                  const newTimeSheet = response.data.addToTimeSheet\n\n                  if(existingTimeSheetRefs.some(ref => readField('id',ref) === newTimeSheet.id)){\n                    return existingTimeSheetRefs\n                  }\n\n                  return [...existingTimeSheetRefs,newTimeSheet]\n\n                },\n\n                getAllTimeSheets(existingTimeSheetRefs, { readField }){\n                  const period = params.period\n                  if(!period){\n                    return existingTimeSheetRefs\n                  }\n                  const newTimeSheet = response.data.addToTimeSheet\n                  const modify = _.cloneDeep(existingTimeSheetRefs)\n\n                  const totHours = (((toDate(newTimeSheet.endTime) - toDate(newTimeSheet.startTime) )/ (60*1000*60)) - (newTimeSheet.break || 0)/60).toFixed(1)\n                  if(!modify[period]){\n                    modify[period] = {}\n                  }\n\n                  if(!modify[period][newTimeSheet.staff.name]){\n                    modify[period][newTimeSheet.staff.name]= {}\n                    modify[period][newTimeSheet.staff.name].station = { [newTimeSheet.station.location]:1 }\n                    modify[period][newTimeSheet.staff.name].itemsPending = 1\n                    modify[period][newTimeSheet.staff.name].totHours = totHours\n\n                    return modify\n                  }\n\n                  const stations = modify[period][newTimeSheet.staff.name].station\n                  modify[period][newTimeSheet.staff.name] = {\n                    ...modify[period][newTimeSheet.staff.name],\n                    itemsPending:modify[period][newTimeSheet.staff.name].itemsPending+1,\n                    totHours: (parseFloat(modify[period][newTimeSheet.staff.name].totHours) + parseFloat(totHours)).toFixed(1),\n                    station:  { ...stations,[newTimeSheet.station.location]: stations[newTimeSheet.station.location]+1 }\n                  }\n\n                  return modify\n\n                }\n              },\n              broadcast: false\n            })\n          }\n        }\n      })\n  }\n\n  const closeModel = () => {\n    props.setOpen(false)\n    setNewRemarkField(false)\n\n  }\n\n  const getInitValues = () => {\n    const init = {\n      startTime: props.startTime ,\n      endTime: props.endTime ,\n      break: props.break || 30,\n      remarks: props.remarks || [],\n\n    }\n\n    if(props.add){\n      init.staff = props.staffId\n      init.startTime = formatDate((new Date(props.date).setHours(0)))\n      init.endTime= (new Date(props.date).setHours(8)) > Date.now() ? formatDate(toDate(Date.now())) : formatDate((new Date(props.date).setHours(8)))\n      init.station = ''\n      init.shift = ''\n      init.remarks = [{ title:'Manually Entered to TimeSheet' , date: formatDate(Date.now()), by: self.name }]\n\n    }\n    /**/\n    return init\n  }\n\n  /**Function to auto generate remarks field based on user actions */\n  const autoAddRemarks = (values) => {\n    /**If the user is not making a new entry */\n    if (!props.add) {\n      const insertAt = props.remarks.length === 0 ? 0 : props.remarks.length\n      let newRemarks = [...values.remarks]\n      /**If start time and end time is modified from the original  */\n      if((values.startTime !== props.startTime || values.endTime !== props.endTime)){\n        /**Adding Filed Edited remarks to the last index of original remarks field, user entered remark should appear after this if there is any */\n        if(!newRemarks[insertAt] || (newRemarks[insertAt] && newRemarks[insertAt].title!== 'Edited')){\n          newRemarks.splice(insertAt,0,{ title:'Edited',date: formatDate(Date.now()),by:self.name, edit:{} })\n        }\n\n        if(values.startTime !== props.startTime){\n          newRemarks[insertAt].edit.startTime = `${props.startTime} to  ${values.startTime}`\n        }\n        if(values.endTime !== props.endTime){\n          newRemarks[insertAt].edit.endTime= `${props.endTime} to  ${values.endTime}`\n        }\n        values.remarks= newRemarks\n      }\n      /**If startTime is not modified or restored to original Value */\n      if(values.startTime === props.startTime){\n\n        if(newRemarks[insertAt] && values.remarks[insertAt].edit){\n          delete newRemarks[insertAt].edit.startTime\n        }\n      }\n      /**If startTime is not modified or restored to original Value */\n      if(values.endTime === props.endTime){\n        if(newRemarks[insertAt] && values.remarks[insertAt].edit){\n          delete newRemarks[insertAt].edit.endTime\n        }\n      }\n      /*If everything was restored to original value then remove the edited remarks */\n      if(newRemarks[insertAt] && newRemarks[insertAt].edit && _.isEmpty(newRemarks[insertAt].edit)){\n        newRemarks.splice(insertAt,1)\n      }\n      values.remarks= newRemarks\n    }\n  }\n\n  const modalHeader = props.add? `Adding Work Time Record to Date ${formatDate (Date.parse(props.date)).split(' ')[0]}`: `Editing Work Time Record to Date ${formatDate (Date.parse(props.date)).split(' ')[0]}`\n  return (\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {props.open}\n      onClose= {() => closeModel()}\n      onOpen= {() => props.setOpen (true)}\n    >\n      <Modal.Header>{modalHeader} </Modal.Header>\n      <Modal.Content>\n\n\n\n        {updateTimeSheetLoading &&\n            <Dimmer active>\n              <Loader />\n            </Dimmer>\n        }\n        <Formik\n\n          initialValues = {getInitValues()}\n          validate = {values => {\n\n            let errors = {}\n            errors = { ...errors,...validateStartEndTime(values.startTime,values.endTime,props.date) }\n            if(_.isEmpty(errors)){\n              autoAddRemarks(values)\n            }\n\n            return errors\n\n\n          } }\n\n          onSubmit = {(values) =>\n          {\n            /**If last added remark is empty remark then remove from values\n             * Retrived Remarks from database will have a title, new remark will always be at the end of array and may not have either title or text\n             */\n            if(values.remarks.length &&  !values.remarks[values.remarks.length-1].title  &&  !values.remarks[values.remarks.length-1].text ){\n\n              const newRemarks = [...values.remarks]\n              newRemarks.splice(values.remarks.length-1,1)\n              values.remarks = newRemarks\n            }\n            /**If last added remark has text but no title then set title */\n            if(values.remarks.length &&  ! values.remarks[values.remarks.length-1].title &&  values.remarks[values.remarks.length-1].text){\n              values.remarks[values.remarks.length-1].title = 'Remark Added'\n            }\n\n            submit(values)}\n          }\n\n\n        >\n\n\n          {({ values,handleSubmit,setFieldValue }) =>\n\n            <Form size='large' style={{ marginBottom:'5rem' }} onSubmit = { handleSubmit} >\n\n              <Form.Group >\n\n                < DateInputField\n                  label= 'Start Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name ='startTime'\n                  maxDate = {operateDate(Date.now(),30,'m','sub')}\n                  minDate= {formatDate (Date.parse(props.date))}\n\n                />\n\n\n                < DateInputField\n                  label = 'End Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name='endTime'\n                  maxDate = {\n                    Date.now() < toDate(values.endTime)? formatDate(Date.now()) : operateDate(values.startTime,20,'h','add')\n                  }\n                  minDate= {operateDate(values.startTime,20,'m','add')}\n\n                />\n\n                <InputField\n                  inputlabel= 'Break'\n                  label = 'Minutes '\n                  labelPosition='right corner'\n                  name= 'break'\n                  type='number'\n                  min='0'>\n                </InputField>\n\n              </Form.Group>\n\n\n              {\n                /** If the user is inserting new timesheet  */\n                props.add &&\n      <Form.Group>\n\n        <DropDownField\n          label =' Select Station'\n          loading= {loading}\n          name = 'station'\n          placholder= 'Select Station'\n          search\n          selection\n          options= {stationOptions}\n          onChange = {  (e,{ value }) => {\n            setFieldValue('station',value)\n            const shift = getRecomendedShiftOption(values.startTime,value)\n            setFieldValue('shift',shift)\n            handleShiftChange(values.startTime,shift,value)\n\n          }}\n        ></DropDownField>\n\n        <DropDownField\n          label =' Select Shift'\n\n          disabled = {!values.station}\n          name = 'shift'\n          placholder= 'Select Shift'\n          search\n          selection\n          options= {values.station? getShiftList(values.station):[]}\n          onChange = {(e,{ value } ) => {\n            setFieldValue('shift',value)\n            handleShiftChange(values.startTime,value,values.station)\n          }}\n        ></DropDownField>\n\n\n      </Form.Group>\n              }\n\n              {shiftReportLoading &&\n      <Segment secondary loading>\n        Verifying {values.shift} Shift\n      </Segment>\n              }\n\n              {values.shift && shiftReportData && shiftReportData.getShiftReportByShift &&\n      <Segment clearing secondary>\n        <Header as='h3'><Icon name='check circle' color='green'></Icon> Verified</Header>\n        <Header floated='left' as='h5'>{shiftReportData.getShiftReportByShift.station.location} {values.shift} Shift {shiftReportData.getShiftReportByShift.startTime.split(' ')[0]}\n          <Header.Subheader><strong> Shift Start : </strong> {shiftReportData.getShiftReportByShift.startTime}<strong> Shift End : </strong> {shiftReportData.getShiftReportByShift.endTime} </Header.Subheader>\n        </Header>\n        <Button floated='right' onClick={() => props.openReport({ id: shiftReportData.getShiftReportByShift.id, open:true })} > View Shift Report</Button>\n\n      </Segment>\n              }\n\n              { /**If the shift is set and the shift report doesnot exist for corresponding shift */\n                values.shift && shiftReportData && !shiftReportData.getShiftReportByShift &&\n      <Message warning visible\n        header='Selected shift is not reported'\n        content='Adding to record to unreported shift will not be reflected on any shift reports thus cannot be verified. This may result on work time not being approved'\n      />\n              }\n\n              <label ><strong>Remarks</strong></label>\n              <FieldArray name='remarks'>\n                {({ push,remove }) => <>\n\n                  {values.remarks && values.remarks.length > 0 && values.remarks.map((remark,index) =>\n                    <RemarkField key= {index} name={`remarks.${index}`}></RemarkField>\n                  )}\n\n                  <Form.Button type='button'\n                    onClick= {(e) => {\n                      e.preventDefault()\n                      if(newRemarkField){\n                        remove(values.remarks.length-1)\n                        setNewRemarkField(false)\n                      } else{\n                        if(values.remarks.length > 0 && values.remarks[values.remarks.length-1].title === 'Clearification Requested'){\n                          push({ title:'Add Clearification',date: formatDate(Date.now()),by:self.name,text:'' })\n                        } else {\n                          push({ title:'',date: formatDate(Date.now()),by:self.name,text:'' })\n                        }\n                        setNewRemarkField(true)\n                      }\n                    }}>\n                    {!newRemarkField && values.remarks.length > 0 && values.remarks[values.remarks.length-1].title === 'Clearification Requested' ?\n                      'Add Clearification' :\n                      newRemarkField?'Remove Remark':\n                        'Add Remark'}\n                  </Form.Button>\n\n\n\n                </>\n                }\n              </FieldArray>\n              <Button type='submit' floated='right' positive>Save</Button>\n              <Button type='button' floated='right' negative onClick={() => closeModel()}>Cancel</Button>\n            </Form>}\n        </Formik>\n\n\n\n      </Modal.Content>\n\n    </Modal>\n\n\n  )\n}\n\nexport default TimeSheetEditModel","import {  gql, useApolloClient, useMutation } from '@apollo/client'\nimport React, { useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { Table,Button, Popup, Header, Message,  Segment,Form } from 'semantic-ui-react'\nimport { APPROVE_TIMESHEET, DELETE_TIMESHEET, REQUEST_CLARIFICATION } from '../../mutations/timeSheetMutation'\nimport TimeSheetEditModel from './TimeSheetEditModel'\nimport _ from 'lodash'\n\nconst TimeSheetRow = ({ timeSheet, rowSpan ,openReport ,index ,date ,staffId }) => {\n  const client = useApolloClient()\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\n\n  const params= useParams()\n\n  const permission = staff.permission.timesheet\n\n  //console.log(permission)\n\n  const startTime = timeSheet.startTime\n  const endTime = timeSheet.endTime\n  const station = timeSheet.station && timeSheet.station.location\n  const shift = (timeSheet.shiftReport && timeSheet.shiftReport.shift) || timeSheet.shift\n  const  breakt = timeSheet.break\n  const totalHours = timeSheet.total\n  const ot = timeSheet.overTime\n  const remarks = timeSheet.remarks || []\n  const [open,setOpen] = useState(false)\n  const [add,setAdd] = useState(false)\n  const [deleteOpen,setDeleteOpen]=  useState(false)\n  const [clarifyOpen,setClarifyOpen]=  useState(false)\n\n  const [clarifyText,setClarifyText] = useState('')\n\n  const [approveTimesheet,{ loading:timesheetSignLoading,error:timesignError, data:timesheetSignData }] = useMutation(APPROVE_TIMESHEET)\n  const [mutatedeleteTimesheet,{ loading:deleteLoading,error:deleteError, data:deleteData }] = useMutation(DELETE_TIMESHEET)\n  const [requestClarification,{ loading:clarifyLoading,error:clarifyError, data:clarifyData }] = useMutation(REQUEST_CLARIFICATION)\n\n  const deleteTimeSheet = () => {\n    mutatedeleteTimesheet(\n      { variables:{ id: timeSheet.id },\n        update: (store,response) => {\n          if(response.data.deleteTimeSheet && response.data.deleteTimeSheet.status === 'SUCCESS') {\n            store.modify({\n              fields:{\n                getTimeSheetByUser(existingTimeSheetRefs, { DELETE }){\n                  return DELETE\n                },\n\n                getAllTimeSheets(existingTimeSheetRefs, { readField }){\n                  const period = params.period\n                  if(!period){\n                    return existingTimeSheetRefs\n                  }\n\n                  const modify = _.cloneDeep(existingTimeSheetRefs)\n\n\n                  const totHours = modify[period][timeSheet.staff.name].totHours-totalHours\n                  if (totHours === 0){\n                    delete (modify[period])\n                    return modify\n                  }\n\n                  const stations = modify[period][timeSheet.staff.name].station\n                  modify[period][timeSheet.staff.name] = {\n                    ...modify[period][timeSheet.staff.name],\n                    itemsPending:modify[period][timeSheet.staff.name].itemsPending-1,\n                    totHours: totHours,\n                    station:  { ...stations,[timeSheet.station.location]: stations[timeSheet.station.location]-1 }\n\n                  }\n\n                  return modify\n                }\n              },\n\n              broadcast: false\n\n            })\n\n          }\n\n        }\n      })\n\n  }\n\n  const askToclarify = () => {\n    const vars = {\n      id: timeSheet.id,\n      clearify: clarifyText\n    }\n\n    requestClarification({ variables: vars ,\n      update:(store,response) => {\n        store.writeFragment({\n          id: `TimeSheet:${timeSheet.id}`,\n          fragment: gql `fragment AddRemarks on TimeSheet {\n            remarks\n          }`,\n          data: {\n            remarks : response.data.requestClarification.remarks\n          }\n        },\n        )\n\n        const test = store.readFragment({\n          id: `TimeSheet:${timeSheet.id}`,\n          fragment: gql ` fragment ReadRemarks on TimeSheet {\n            remarks\n          }`\n        })\n\n        console.log(test)\n\n\n      } }\n\n\n    )\n\n  }\n\n  const updateTimeSheetApproval = () => {\n    approveTimesheet({\n      variables:{ id:timeSheet.id , status:timeSheet.status==='APPROVED'?'':'APPROVED' },\n      update: (store,response) => {\n        store.modify({\n          fields: {\n            getAllTimeSheets(existingTimeSheetRefs, { readField }){\n              const period = params.period\n              if(!period){\n                return existingTimeSheetRefs\n              }\n\n              const approved = response.data.approveTimeSheet.status\n              const modify = _.cloneDeep(existingTimeSheetRefs)\n\n              console.log('before',modify[period][timeSheet.staff.name].itemsPending)\n\n              modify[period][timeSheet.staff.name].itemsPending = approved==='APPROVED'? modify[period][timeSheet.staff.name].itemsPending-1: (modify[period][timeSheet.staff.name].itemsPending)+1\n\n\n              return modify\n\n            }\n          }\n        })\n\n\n      }\n    })\n\n  }\n\n  const isWeekDay = ()  => {\n    const today = new Date(date).getDay()\n    if( today === 0 || today ===6){\n      return false\n    }\n    return true\n  }\n  /**If the id is a valid id string, empty rows with no data will not have valid ids. */\n  const isEmptyRow = timeSheet.id.toString().match(/^[0-9a-fA-F]{24}$/) ? false: true\n\n  return (\n    <Table.Row  key = {timeSheet.id} negative= {!isWeekDay()}>\n      {index === 0 && <Table.Cell collapsing rowSpan={rowSpan}>{ date.split('T')[0]}</Table.Cell>}\n      <Table.Cell> {station} </Table.Cell>\n      <Table.Cell onClick= {(e) => {\n        e.preventDefault()\n        openReport({ id: timeSheet.shiftReport && timeSheet.shiftReport.id, open:true })\n      }}>\n        {  // eslint-disable-next-line jsx-a11y/anchor-is-valid\n          timeSheet.shiftReport && timeSheet.shiftReport.id ? <a href =\"\"> {shift} </a> : shift?`${shift} `:''\n        }  </Table.Cell>\n      <Table.Cell >{ startTime && startTime.split(' ')[1]}</Table.Cell>\n      <Table.Cell> {endTime &&endTime.split(' ')[1]} </Table.Cell>\n      <Table.Cell> {breakt} </Table.Cell>\n      <Table.Cell> {totalHours?totalHours:''} </Table.Cell>\n      {index === 0 &&  <Table.Cell  rowSpan={rowSpan} > {ot?ot:''} </Table.Cell>}\n      <Table.Cell> {timeSheet.status === 'PENDING_APPROVAL'? 'No' : timeSheet.status === 'APPROVED'? 'Yes' : timeSheet.status  } </Table.Cell>\n      <Table.Cell>\n        {remarks && remarks.length>0 &&\n        <>{`${remarks[remarks.length-1].title} ${remarks[remarks.length-1].date.split(' ')[0]}` }  <br/>  {remarks[remarks.length-1].text}`  <br/>\n          {// eslint-disable-next-line jsx-a11y/anchor-is-valid\n            <a href='#'\n              onClick = {(e ) => {\n                e.preventDefault()\n                setOpen(true)\n              }\n\n              }>See all</a>}\n\n        </>\n        }</Table.Cell>\n      <Table.Cell  >\n\n        <Segment loading={timesheetSignLoading || deleteLoading || clarifyLoading} disabled={timesheetSignLoading || deleteLoading || clarifyLoading} size='tiny' basic  style={{ width:'max-content', display:'inline-block' }} >\n\n\n          {\n            /**\n               * Add Button,\n               * visible only if data staff is loggedin Staff or  logged in staff has permission and no record exists for  that day\n               */\n            isEmptyRow  && (permission.edit.length >0 || staff.id === staffId ) &&\n              <Button icon='add' size='mini' circular onClick = {() => {\n                setAdd(true)\n                setOpen(true)\n\n              }}/>\n\n          }\n          {\n          /**\n           * If the record exist for that day\n           */\n            !isEmptyRow &&\n            <>\n              {\n                /**\n                 * Edit Button,\n                 * visible only\n                 *    if data staff is loggedin Staff\n                 *    or\n                 *    logged in staff has permission to edit timesheet for that station\n                 *    and\n                 *    record exists for that day\n                 *    and\n                 *    record is not already approved\n                 *\n                 */\n                timeSheet.status !== 'APPROVED' && ((permission.edit.filter(station => timeSheet.station && station._id === timeSheet.station.id ).length !== 0 )) &&\n                  <Popup\n                    trigger=  {<Button icon='edit' size='mini' circular onClick = {() => {\n                      setAdd(false)\n                      setOpen(true)\n                    }}/>}\n                    content='Edit Timesheet'\n                    position='bottom center'\n                  />}\n\n\n              { /**\n                   * Approve Button,\n                   * visible only\n                   *    if data staff is not loggedin Staff\n                   *    or\n                   *    logged in staff has permission to sign timesheet for that station\n                   *    and\n                   *    record is not already approved\n                   */\n                permission.sign.filter(station => timeSheet.station && station._id === timeSheet.station.id ).length !== 0  &&  staff.id !== staffId &&\n                  <>\n                    <Popup\n                      trigger=  { <Button  color ={timeSheet.status === 'APPROVED'?'green':'grey'} icon='check' size='mini' circular onClick = {() => {\n                        updateTimeSheetApproval()\n                      }}/>}\n                      content={timeSheet.status === 'APPROVED'? 'Undo Approve': 'Approve'}\n                      position='bottom center'\n                    />\n\n                    {\n                      /**\n                      * Request Clarification button,\n                      * visible only\n                      *    record is not already approved\n                      */\n\n                      timeSheet.status !== 'APPROVED' &&\n                      <Popup size='huge' wide='very' style={{ width:'100%' }}\n                        trigger=  { <Button color='blue' icon='talk' size='mini' circular />}\n                        onOpen= {() => setClarifyOpen(true)}\n                        onClose= {() => setClarifyOpen(false)}\n                        open = {clarifyOpen}\n                        content={\n                          <Form onSubmit = {() => {\n                            askToclarify()\n                            setClarifyOpen(false)\n                          }}>\n                            <Header as ='h5'>Request Clearification </Header>\n                            <Form.TextArea\n                              value= {clarifyText}\n                              onChange= {\n                                (e,{ value }) => setClarifyText(value)\n                              }>\n\n                            </Form.TextArea>\n                            <Form.Button floated='right' type= 'submit' primary> Send</Form.Button>\n                          </Form>\n                        }\n                        on='click'\n                        position='bottom right'\n                      />\n                    }\n                  </>\n              }\n\n              {\n                /**\n                * Delete Button,\n                * visible only\n                *    if data staff is  loggedin Staff\n                *    or\n                *    logged in staff has permission to edit timesheet for that station\n                *    and\n                *    record is not already approved\n                */\n\n                timeSheet.status !== 'APPROVED' &&((permission.edit.filter(station => timeSheet.station && station._id === timeSheet.station.id ).length !== 0)   || staff.id === staffId  ) &&\n                <Popup as={Message} warning\n                  trigger=  { <Button  color = 'red' icon='trash' size='mini' circular />}\n                  content={\n                    <>\n\n                      <Message.Header>Are you sure, you want to remove this record?</Message.Header>\n                      <p> Action is non reversible and will remove all the instances of this record from the system.</p>\n\n                      <Button fluid color='red' icon='trash' content='Confirm' onClick = {() => {\n                        deleteTimeSheet(timeSheet.id)\n                        setDeleteOpen(false)\n\n                      }} /></>}\n                  on='click'\n                  onOpen= {() => setDeleteOpen(true)}\n                  onClose= {() => setDeleteOpen(false)}\n                  open={deleteOpen}\n                  position='bottom center'\n                />}\n            </>}\n        </Segment>\n\n\n\n      </Table.Cell>\n      <TimeSheetEditModel\n        staffId = {staffId}\n        id= {timeSheet.id}\n        openReport={openReport}\n        date = {date}\n        open={open}\n        setOpen= {setOpen}\n        startTime= {startTime}\n        endTime= {endTime}\n        break= {breakt}\n        add= {add}\n        remarks= {remarks} >\n      </TimeSheetEditModel>\n    </Table.Row>)\n\n}\n\nexport default TimeSheetRow","import React,{ Fragment, useState } from 'react'\nimport { Button, Header, Table } from 'semantic-ui-react'\nimport { toDate } from '../../utils/DateHelper'\nimport _ from 'lodash'\nimport ReportViewModal from '../ShiftReport/ReportViewModal'\nimport TimeSheetRow from './TImeSheetRow'\n\n\nconst TimeSheetsReport = ({ startDate,endDate,data, staffId, setAllApproved ,title })  => {\n  const [openReport,setOpenReport]= useState({ id:'', open: false })\n\n  /** sets the calender from start date and end dates so the empty dates will also be displayed on report*/\n  const calenderArray =[...new Array( Math.ceil((endDate - startDate)/(24*60*60*1000)) +1 )].map((n,index) => {\n    const day = index\n    const date = new Date ( Date.UTC(startDate.getFullYear() , startDate.getMonth() , startDate.getDate()+day)).toISOString()\n    return date\n  } )\n\n  /**Converting calender array to object */\n  const calenderObject = _.zipObject(calenderArray,calenderArray.map((val,index) => [{ id:index }]))\n  let netTotal =0\n  let netOt = 0\n\n  let shiftDate\n  if(data) {\n\n    /**There is chance that the staff might be on 2 shifts on the day so grouping by date */\n    shiftDate = _.groupBy(data.getTimeSheetByUser, 'date')\n\n    const formatData = shiftDate && _.mapValues(shiftDate,(timeSheets,date) => {\n      let totalDaily = 0\n      let ot = 0\n      timeSheets = timeSheets.map((timesheet,index) => {\n        const breakt = (timesheet.break*60*1000)\n        const total =  ((toDate(timesheet.endTime) - toDate(timesheet.startTime) - breakt)/ (60*1000*60)).toFixed(1)\n\n        timesheet = { ...timesheet,total:parseFloat(total) }\n\n        totalDaily = totalDaily + parseFloat(total)\n\n        /**Overtime rules can be imlemented here\n         * For now for simplicity for Employee sundays is 100% saturday is 50%  and 8 hrs(specified by contractType) + is overtime, for contractor 10hrs + is overtime\n         */\n\n        /**If staff is a employee\n        const today = new Date(toDate(timesheet.startTime)).getDay()\n        if( timesheet.staff.contractType === 'Employee') {\n          /**If sunday */\n        /*if(today === 0 ){\n            ot = (totalDaily+parseFloat(total) - timesheet.staff.reqHours).toFixed(1)\n          }\n          /**If saturday */\n        /* else if(today === 6 ){\n            ot = (totalDaily + 0.5 * parseFloat(total) - timesheet.staff.reqHours).toFixed(1)\n          }\n          else{\n            ot = (totalDaily - timesheet.staff.reqHours).toFixed(1)\n          }\n        }\n        else{\n          ot =  (totalDaily - timesheet.staff.reqHours).toFixed(1)\n        }*/\n        ot =  (totalDaily - timesheet.staff.reqHours).toFixed(1)\n        return timesheet\n      })\n      timeSheets[0] = { ...timeSheets[0],overTime:ot }\n      netOt = netOt + parseFloat(ot)\n      netTotal = netTotal + totalDaily\n      return timeSheets\n    } )\n\n    shiftDate = ( { ...calenderObject,...formatData })\n\n  }\n\n  const stickyTh = {\n    position: 'sticky',\n    top : '0',\n    zIndex: 1\n\n\n  }\n\n  return (\n    <>\n      {title &&\n     <Header as = 'h5' floated='right'>{title}</Header>\n      }\n      <Table celled striped structured textAlign='center'>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell style= {stickyTh}> Date </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Station </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Shift </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Start Time </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> End Time </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Break (Mins) </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Total (Hrs) </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> OverTime </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Approved </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Remarks </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Actions</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {shiftDate && _.map(shiftDate,(timeSheets,date) =>\n            <Fragment key = {date}>\n              {timeSheets.map( (timeSheet,index) =>\n                <TimeSheetRow  staffId= {staffId} date = {date} index = {index} key = {timeSheet.id} openReport= {setOpenReport} timeSheet={timeSheet} rowSpan={timeSheets.length} />\n              )\n              }</Fragment>\n          )\n          }\n\n        </Table.Body>\n        <Table.Footer>\n          <Table.Row >\n            <Table.HeaderCell  colSpan='6'>Total</Table.HeaderCell>\n            <Table.HeaderCell> {netTotal.toFixed(1)} </Table.HeaderCell>\n            <Table.HeaderCell> {netOt.toFixed(1)} </Table.HeaderCell>\n            <Table.HeaderCell colSpan='3' />\n          </Table.Row>\n        </Table.Footer>\n      </Table>\n\n      <ReportViewModal setOpenReport= {setOpenReport} openReport={openReport}></ReportViewModal>\n    </>)\n}\n\nexport default TimeSheetsReport","import { useQuery } from '@apollo/client'\nimport React ,{ useEffect, useState } from 'react'\nimport { Loader, Header, Segment,Dropdown, Button ,Form, Popup } from 'semantic-ui-react'\n\nimport { GET_TIMESHEETS } from '../../queries/timeSheetQuery'\nimport { getWeekNumber, getDatefromWeek  } from '../../utils/DateHelper'\nimport TimeSheetsReport from '../TimeSheetsReport'\n\nconst TimeSheet = ({ staffId,setStaffName, period ,selected ,selectedYear ,timesheetOnly }) => {\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const [selectBy,setSelectBy] = useState (period || 'week')\n  const today = new Date()\n  const [number,setNumber] = useState (selected || getWeekNumber(today))\n  const [year,setYear] = useState(selectedYear || today.getFullYear())\n  const queryParams = { staff: staffId, filterDuration: selectBy  , number:number, year: year }\n  const { error,loading,data } = useQuery(GET_TIMESHEETS, { variables:queryParams })\n\n  useEffect(() => {\n    if (data && data.getStaff )\n      setStaffName(data.getStaff.name)\n\n  },[data, setStaffName])\n\n  /** Get Month name from index\n  * Negative index gets month from end of array\n  */\n  const months = new Proxy(['January','February','March','April','May','June','July','August','September','October','November','December'], {\n    get(target, prop) {\n      if (!isNaN(prop)) {\n        prop = parseInt(prop, 10)\n        if (prop < 0) {\n          prop += target.length\n        }\n      }\n      return target[prop]\n    }\n  })\n\n\n  /**Get startDate of timeSheet Report */\n  const filterStartDate  =  () => {\n    let sdate\n    if(selectBy==='month'){\n      sdate = new Date(year,number,1)\n    } else {\n      sdate  = getDatefromWeek(number,year)\n    }\n    sdate = new Date(Date.UTC( sdate.getFullYear(), sdate.getMonth(), sdate.getDate()))\n    return (sdate)\n  }\n\n  /**Get startDate of timeSheet Report */\n  const filterEndDate  =  () => {\n    let ed\n    if(selectBy==='month'){\n      ed = new Date(year,number+1,0)\n    } else {\n      const sd  = getDatefromWeek(number,year)\n      ed = new Date(Date.UTC( sd.getFullYear(), sd.getMonth(), sd.getDate()+6))\n    }\n    if(ed >= today ){\n      ed = new Date(Date.UTC(today.getFullYear(),today.getMonth(),today.getDate()))\n    }\n    return (ed )\n  }\n\n  const start = filterStartDate()\n  const end = filterEndDate()\n\n  if (loading) {\n    return (\n      <Loader active>Fetching timesheets</Loader>\n    )\n  }\n\n  if (error) {\n    console.log(error)\n    return (\n      <Header as ='h5'>Something Went Wrong, Please try again</Header>\n    )\n  }\n\n  const isAllApproved = () => {\n    let approved = false\n    if(data && data.getTimeSheetByUser && data.getTimeSheetByUser.length > 0){\n      approved = !data.getTimeSheetByUser.some(timeSheet => timeSheet.status !== 'APPROVED')\n    }\n\n    return approved\n  }\n\n\n  /**Retrive last four month including current month */\n  const getMonthOptions = () => {\n    let options = []\n\n    const currentMonth = today.getMonth()\n    options = [\n      { key:1 ,text: months[currentMonth] , value: currentMonth },\n      { key:2 ,text: months[currentMonth -1 ] , value: currentMonth -1 < 0 ? months.length + currentMonth -1  : currentMonth -1 },\n      { key:3 ,text: months[currentMonth -2] , value: currentMonth -2 < 0 ? months.length + currentMonth -2: currentMonth -2 },\n      { key:4 ,text: months[currentMonth -3] , value: currentMonth -3 < 0 ? months.length + currentMonth -3: currentMonth -3 },\n    ]\n    return options\n  }\n\n  /**Retrieve all weeks that falls within last four month including current month*/\n  const getWeekOptions = () => {\n    const currentMonth = today.getMonth()\n    let dYear = today.getFullYear()\n    const lastYearWeekNum = getWeekNumber( new Date(dYear-1,11,28))\n    const lastRetriveable  = getWeekNumber(new Date(dYear, currentMonth -3 ,1))\n    let currentWeek = getWeekNumber(today)\n    let options = []\n\n    let week = currentWeek\n    while ( week !== lastRetriveable-1  ){\n      const option = { key: week, text: week, value: week }\n      options.push (option )\n      week = week -1\n      if(week === 0) {\n        week = lastYearWeekNum\n      }\n    }\n    return options\n\n  }\n\n\n\n  return (\n    <>\n      <Segment basic style= {{ marginBottom:'20em' }} >\n        <Form>\n          {!timesheetOnly &&\n            <><label> Select by: </label>\n              <Form.Group>\n                <Form.Field>\n                  <Dropdown\n                    selection\n                    options = {[ { key:1 ,text: 'Month' , value: 'month' }, { key:2 ,text: 'Week' , value: 'week' }]}\n                    onChange = {(e,{ value }) => {\n                      setSelectBy(value)\n                      if(value==='month') {\n                        setNumber (today.getMonth())\n                      }else {\n                        setNumber (getWeekNumber(today))\n                      }\n\n                    }\n                    }\n                    value = {selectBy}/>\n                </Form.Field>\n                <Form.Field>\n                  <Dropdown\n                    compact = { selectBy === 'month'? false:true }\n                    selection\n                    options = { selectBy === 'month'?getMonthOptions():getWeekOptions()}\n                    onChange ={(e,{ value }) => {\n                      setNumber(value)\n                      if( selectBy === 'week' && value > getWeekNumber(today)) {\n                        setYear(today.getFullYear -1)\n                      }\n                      if(selectBy === 'month' && value > today.getMonth()) {\n                        setYear(today.getFullYear -1)\n                      }\n\n                    }}\n                    value = {number}/>\n                </Form.Field>\n              </Form.Group>\n            </> }\n          <TimeSheetsReport staffId={staffId} startDate={start} endDate= {end} data={data} title = {`Timesheet ${selectBy === 'month'? months[number]:  `Week ${number},` } ${year} `}></TimeSheetsReport>\n\n\n          { staffId === staff.id &&\n            <Segment  basic clearing>\n              <Popup\n                trigger = {<span  floated='right' ><Button  floated='right' disabled ={!isAllApproved()} type='button' color='blue'> Submit to Payroll</Button></span>}\n                disabled= {isAllApproved()}\n                content= ' All records should be approved for submission'\n              />\n            </Segment>\n          }\n\n\n\n        </Form>\n      </Segment>\n\n\n\n    </>\n  )\n}\n\nexport default TimeSheet","import { useLazyQuery, useQuery } from '@apollo/client'\nimport React, { useEffect, useState } from 'react'\nimport { Link, useHistory, useLocation, useParams } from 'react-router-dom'\nimport  _  from 'lodash'\nimport { DateInput } from 'semantic-ui-calendar-react'\nimport { Dropdown, Form, FormGroup, Header, Select ,Segment,Button, Label, Table, TableHeader, TableRow, TableHeaderCell, TableBody, TableCell, Loader } from 'semantic-ui-react'\nimport { GET_ALL_STAFF_MINIMAL } from '../../../queries/staffQuery'\nimport { GET_ALL_TIMESHEETS } from '../../../queries/timeSheetQuery'\nimport { formatDate, getMonthOptions, getWeekOptions,getWeekNumber,getMonthInt } from '../../../utils/DateHelper'\nimport TimeSheet from '../TimeSheet'\nimport TimeSheetsReport from '../../TimeSheetsReport'\n\nconst ManageTimeSheets = ({ setStaffName }) => {\n  const loggedInStaff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const params = useParams()\n  const location = useLocation()\n  const today = new Date()\n  const [staff,setStaff] = useState([])\n  const [period,setPeriod] = useState('date')\n  const [stations,setStations] = useState( [])\n  const [groupBy,setGroupBy] = useState('week')\n  const [from,setFrom] = useState(formatDate(new Date(today.getFullYear(), today.getMonth() -3, 1 )).split(' ')[0])\n  const [to,setTo] = useState(formatDate(today).split(' ')[0])\n  const [number,setNumber] = useState(getWeekNumber(today))\n  const [year,setYear] = useState(today.getFullYear())\n\n  const [filterStatus,setFilterStatus] = useState('')\n\n  const [staffOptions,setStaffOptions] = useState([])\n\n  const [getAllStaffs,{ loading: staffLoading, data: staffData }] = useLazyQuery(GET_ALL_STAFF_MINIMAL)\n\n  useEffect(() => {\n    if (staffData){\n      const staffOpt = staffData.allStaff.map((staff,index) => {\n        return { key:index, value:staff.id, text: staff.name }\n      } )\n\n      setStaffOptions(staffOpt)\n    }\n  },[staffData])\n\n  useEffect(() => {\n    if(params.staffId){\n      setStaff([params.staffId])\n    }else{\n      setStaff([])\n    }\n  },[params])\n\n\n\n  const variables  = {\n    staff:staff,\n    period:period,\n    from:from,\n    to:to,\n    number:number,\n    groupBy:groupBy,\n    year:year,\n    stations:stations,\n    filterStatus: filterStatus\n  }\n\n  if(staff.length === 1){\n    variables.staffId = staff[0]\n  }\n\n  const { loading,error,data } = useQuery(GET_ALL_TIMESHEETS,{ variables: variables,skip: params.period })\n\n\n  useEffect (() => {\n    if(data && data.getStaff){\n      setStaffName(data.getStaff.name)\n    }\n  },[data, setStaffName])\n\n\n  if(params.period) {\n    const periodTitle = params.period.split(' ')\n    let period\n    let selected\n    let selectedYear\n    if(periodTitle[0] === 'Week'){\n      period='week'\n      selected = periodTitle[1]\n      selectedYear = periodTitle[2]\n    }\n    else{\n      period='month'\n      selected = getMonthInt(periodTitle[0])\n      selectedYear = periodTitle[1]\n      console.log(selected,periodTitle[0])\n    }\n\n    return <TimeSheet period= {period} selected={parseInt(selected)} selectedYear={parseInt(selectedYear) } staffId={params.staffId} setStaffName={setStaffName} timesheetOnly />\n  }\n\n\n  const stationOptions = loggedInStaff.permission.timesheet.view.map((station,index ) => {\n    return { key: index, value:station._id, text: station.location }})\n\n\n\n  return (\n\n    <>\n\n      <Segment size='tiny' clearing>\n        <Label size='mini' attached='top left'>Filters</Label>\n        <Form size='mini'>\n          <FormGroup widths='equal' >\n            {\n              !params.staffId &&\n              <Form.Dropdown\n                label='Staff'\n                value= {staff}\n                loading={staffLoading}\n                options={staffOptions}\n                selection multiple clearable\n                placeholder='All'\n                onFocus= {() => getAllStaffs()}\n                onChange= {(e,{ value }) => setStaff(value)}></Form.Dropdown>\n            }\n            <Form.Dropdown label='Period'\n              value= {period}\n              options= {[{ key:1, value:'date', text:'Date' },{ key:2, value:'week', text:'Week' },{ key:3, value:'month', text:'Month' }, ]}\n              placeholder='All' selection clearable compact\n              onChange ={(e,{ value }) => {\n                if(value ==='week'){\n                  setNumber(getWeekNumber(today))\n                }\n                if(value === 'month'){\n                  setNumber(today.getMonth())\n                }\n                setPeriod(value)\n              } }></Form.Dropdown>\n\n\n            {period === 'date' && <>\n              <DateInput value={from}  label='From'\n                dateFormat='DD-MM-YYYY'\n                onChange = {(e,{ value }) => {\n                  setFrom(value)\n                }}></DateInput>\n              <DateInput value={to} label='To' dateFormat='DD-MM-YYYY'\n                onChange = {(e,{ value }) => {\n                  setTo(value)\n                }}></DateInput>\n            </>}\n\n            {\n              (period === 'week' || period === 'month') && <>\n                <Form.Dropdown\n                  value={number}\n                  label={`Select ${period}`}\n                  options={period==='week'?getWeekOptions():getMonthOptions()}\n                  selection compact\n                  onChange ={(e,{ value }) => {\n                    setNumber(value)\n                    if( period === 'week' && value > getWeekNumber(today)) {\n                      setYear(today.getFullYear -1)\n                    }\n                    if(period === 'month' && value > today.getMonth()) {\n                      setYear(today.getFullYear -1)\n                    }\n\n                  }}></Form.Dropdown>\n              </>\n            }\n            <Form.Dropdown label= 'Group By'\n              value= {groupBy}\n              options= {[{ key:1,value:'week',text:'Week' }, { key:2,value:'month',text:'Month' },]}\n              onChange = {(e,{ value }) => setGroupBy(value)}\n              selection\n              compact>\n\n            </Form.Dropdown >\n            <Form.Dropdown\n              label= 'Station'\n              options={stationOptions}\n              value= {stations}\n              selection multiple clearable\n              placeholder='All'\n              onChange = {(e,{ value }) => setStations(value)}></Form.Dropdown>\n\n            <Form.Dropdown label= 'Status'\n              value= {filterStatus}\n              options= {[{ key:1,value:'approved',text:'Approved' }, { key:2,value:'pending',text:'Pending' },]}\n              onChange = {(e,{ value }) => setFilterStatus(value)}\n              placeholder='All'\n              clearable\n              selection\n              compact>\n\n            </Form.Dropdown >\n\n          </FormGroup>\n        </Form>\n      </Segment>\n\n\n\n      <Loader active={loading}> Loading TimeSheet Overview</Loader>\n\n      <Table >\n        <TableHeader>\n          <TableRow>\n            {!params.staffId &&\n            <TableHeaderCell>Staff Name</TableHeaderCell>\n            }\n            <TableHeaderCell>Period</TableHeaderCell>\n            <TableHeaderCell> Stations</TableHeaderCell>\n            <TableHeaderCell> Total Hours</TableHeaderCell>\n            <TableHeaderCell> Status</TableHeaderCell>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {data && data.getAllTimeSheets && _.map(data.getAllTimeSheets, (staffs,period) =>\n            _.map(staffs,(staff,name) =>\n              <TableRow key={name} positive= {staff.itemsPending?false:true} negative= {staff.itemsPending?true:false}>\n                {!params.staffId &&\n                <TableCell><Link to={`/ManageTimesheets/${staff.id}`} onClick={() => {\n                  setStaffName(name)\n                }}> {name}</Link></TableCell> }\n                <TableCell>{period}</TableCell>\n                <TableCell>{\n                  _.reduce(staff.station,(p,c,key) => {\n                    if(c !== 0){\n                      return ( (p?p+'/':'')+key)\n                    }\n                    return p\n\n                  },'')}\n                </TableCell>\n                <TableCell>{staff.totHours}</TableCell>\n                <TableCell><Link to={`${location.pathname}/${params.staffId?'':`${staff.id}/`}${period}`}\n                  onClick={() => {\n                    setStaffName(name)\n                  }}>{staff.itemsPending ?  `${staff.itemsPending}  Items Pending`: 'All Approved' } </Link></TableCell>\n              </TableRow>)\n\n          )\n          }\n\n        </TableBody>\n      </Table>\n\n\n\n\n    </>)\n\n\n\n\n\n}\nexport default ManageTimeSheets","import { gql } from '@apollo/client'\n\nexport const CHANGE_PERMISSION = gql`\nmutation changePermission( $id: String! $staff: JsonObject, $station: JsonObject, $timesheet: JsonObject ,$admin: Boolean){\n  changePermission(\n    id: $id\n    staff: $staff\n    station: $station\n    timesheet: $timesheet\n    admin: $admin\n    ){\n      id\n      staff\n      station\n      timesheet\n      admin\n    }\n}`","import { useMutation, useQuery } from '@apollo/client'\nimport React, { Fragment, useEffect, useState } from 'react'\nimport { Button, Checkbox, Dimmer, Form, Header,Loader, Table, TableBody } from 'semantic-ui-react'\nimport _ from 'lodash'\nimport { ALL_STATION } from '../../queries/stationQuery'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nimport { FieldArray, Formik } from 'formik'\nimport { CHANGE_PERMISSION } from '../../mutations/permissionMutation'\n\n\nconst PermissionManager = ({ permissions }) => {\n\n  const staff =  JSON.parse(sessionStorage.getItem('staffKey'))\n  const [superUserSet,setSuperUserSet] = useState((permissions && permissions.admin )|| false)\n\n  const hasSuperPermission = staff.permission.admin\n\n  // console.log(hasSuperPermission,staff ,superUserSet)\n  const [updatePermission,{ loading: pLoading, error: pError, data: pData }] = useMutation(CHANGE_PERMISSION)\n\n  const mapPermission = (permssionType,v) => permssionType && permssionType.map(v => {\n    if(!v) return null\n    return v._id\n  })\n\n  /**Generates station option based on user permission\n   * User can only assign permsission if the user have rights for the station\n   */\n\n  const hasPermission = (permissions) => {\n    if(hasSuperPermission){\n      return true\n    }\n    if((typeof permissions === 'object' )) {\n      if(!_.isEmpty(permissions)){\n        return true\n      }\n    }  else if(permissions){\n      return true\n    }\n    return false\n  }\n\n  const permission = _.mapValues(permissions,(v,k) => {\n    if(typeof v === 'object'){\n      const mod = { ...v }\n      if(k==='station'){\n        mod.edit = mapPermission (mod.edit )\n\n      }\n\n      if(k==='timesheet'){\n        mod.edit = mapPermission (mod.edit )\n        mod.view = mapPermission (mod.view )\n        mod.sign = mapPermission (mod.sign)\n\n      }\n      return mod\n\n    }\n    else return v\n\n  })\n\n  const { loading,data } = useQuery(ALL_STATION,{ skip: !hasSuperPermission })\n  const [options,setOptions] = useState([])\n\n\n\n  const getStationOptions = (fieldName) => {\n    if (hasSuperPermission) {\n      return options\n    }\n    let soptions = []\n    switch (fieldName){\n    case 'station.edit':\n      if(staff.permission.station.edit.length ) {\n        soptions= staff.permission.station.edit.map((v,i) => {\n          return { key:i, value: v._id, text: v.location }\n        })\n\n      }\n      return soptions\n    case 'timesheet.edit':\n      if(staff.permission.timesheet.edit.length ) {\n        soptions = staff.permission.timesheet.edit.map((v,i) => {\n          return { key:i, value: v._id, text: v.location }\n        })\n\n      }\n      return soptions\n    case 'timesheet.view':\n      if(staff.permission.timesheet.view.length ) {\n        soptions = staff.permission.timesheet.view.map((v,i) => {\n          return { key:i, value: v._id, text: v.location }\n        })\n\n      }\n      return  soptions\n    case 'timesheet.sign':\n      if(staff.permission.timesheet.sign.length ) {\n        soptions =  staff.permission.timesheet.sign.map((v,i) => {\n          return { key:i, value: v._id, text: v.location }\n        })\n      }\n      return soptions\n\n    default:\n      return soptions\n\n    }\n\n  }\n\n  useEffect(() => {\n    if(data){\n      const stations = data.allStations\n      const stationOptions = stations.map((station,index) => {\n        return { key:index, value: station.id, text: station.location }\n      })\n      setOptions(stationOptions)\n    }\n  },[data])\n\n\n  const allStationIds =  options.map(station => station.value)\n\n  return (\n    <Formik\n      initialValues = {{ ...permission }}\n      onSubmit= { (values ) => {\n        //delete(values.__typename)\n        const formValues = { ...values }\n\n        _.reduce(values,(prev,cur,scope) =>\n        {\n          if(permission[scope] && _.isEqual(permission[scope] , formValues[scope] )){\n            delete formValues[scope]\n\n          }\n          if(permission[scope] && !_.isEqual( permission[scope] ,formValues[scope] )){\n            _.reduce(formValues[scope],(prev,cur,pType) => {\n              console.log(scope,pType,formValues[scope][pType],permissions[scope][pType], _.isEqual( permissions[scope][pType],formValues[scope][pType]))\n              if( _.isEqual(permissions[scope][pType],formValues[scope][pType] )){\n                delete formValues[scope][pType]\n              }\n            },{})\n\n          }\n\n\n\n\n        },{})\n\n        updatePermission({ variables: { ...formValues,id: permissions.id } })\n      }\n\n      }\n\n    >\n      {({ setFieldValue,values,handleSubmit,dirty,resetForm }) => <>\n        <Header as ='h3'>Permission</Header>\n        <Checkbox\n          label = 'Administrator (All Permissions for all stations)'\n          disabled = { !hasSuperPermission}\n          toggle\n          name= 'admin'\n          checked = {values.admin}\n          onChange= {(e,{ checked }) => {\n            setFieldValue('admin',checked)\n            setSuperUserSet(checked)\n\n            /**If superUser is set then set all permission fileds  */\n            if(checked) {\n              setFieldValue('station.edit',allStationIds)\n              setFieldValue('station.add',true)\n              setFieldValue('timesheet.edit',allStationIds)\n              setFieldValue('timesheet.view',allStationIds)\n              setFieldValue('timesheet.sign',allStationIds)\n              setFieldValue('staff.edit',true)\n              setFieldValue('staff.add',true)\n              setFieldValue('staff.view',true)\n\n            }\n          }}/>\n\n\n        <Form as='table' loading={loading || pLoading} className='ui celled padded table' onSubmit={handleSubmit}>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>\n          Scope\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n          Edit\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n          Add\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n          View\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n          Sign\n              </Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <TableBody>\n\n            {_.map(permissions,(val,key) => <Fragment key={key}>\n              {key !== '__typename' && key !== 'id' &&  key !== 'admin' &&\n              <FieldArray>\n                {() => <Table.Row key={key}>\n                  <Table.Cell>\n                    {key.toUpperCase()}\n                  </Table.Cell>\n                  {/**EDIT COLUMN */}\n                  <Table.Cell >\n                    {(key=== 'station' || key=== 'timesheet') &&\n                    <DropDownField\n                      multiple\n                      selection\n                      options= {getStationOptions(`${key}.edit`)}\n                      placeholder = 'Add Stations'\n                      disabled = {loading || !hasPermission(staff.permission[key].edit) || superUserSet}\n                      loading= {loading}\n                      name={`${key}.edit`}\n                    />}\n\n                    {key === 'staff'?\n                      <Checkbox\n                        disabled = {  !hasPermission(staff.permission[key].edit) || superUserSet}\n                        toggle name={`${key}.edit` }\n                        checked = {values[`${key}`].edit }\n                        onChange= {(e,{ checked }) => {\n                          setFieldValue(`${key}.edit`,checked)\n\n                          /** If edit is enabled then user must have view permission */\n                          if(checked) {\n                            setFieldValue(`${key}.view`,checked)\n                          }\n\n                        }}/> : ''\n                    }\n                  </Table.Cell >\n\n                  {/**ADD COLUMN */}\n                  <Table.Cell >\n                    {key !== 'timesheet'?\n                      <Checkbox\n                        toggle\n                        disabled = {  !hasPermission(staff.permission[key].add) || superUserSet}\n                        name={`${key}.add`}\n                        checked = {values[`${key}`].add }\n                        onChange= {(e,{ checked }) => {\n                          setFieldValue(`${key}.add`,checked)\n                        }}/> : ''\n                    }\n                  </Table.Cell>\n\n                  {/**VIEW COLUMN */}\n                  <Table.Cell  >\n                    {key === 'staff' &&\n                     <Checkbox\n                       disabled = {  !hasPermission(staff.permission[key].view) || superUserSet }\n                       toggle\n                       name={`${key}.view` }\n                       checked = {values[`${key}`].view }\n                       onChange= {(e,{ checked }) => {\n                       /** If edit is enabled then user must have view permission */\n                         if(values.staff.edit){\n                           setFieldValue(`${key}.view`,true)\n                         }else{\n                           setFieldValue(`${key}.view`,checked)\n                         }\n                       }}/>\n                    }\n\n                    {key === 'timesheet' &&\n                     <DropDownField\n                       multiple\n                       selection\n                       options={superUserSet?options:getStationOptions(`${key}.view`)}\n                       placeholder = 'Add Stations'\n                       disabled = {loading  ||  !hasPermission(staff.permission[key].view) || superUserSet}\n                       loading= {loading}\n                       name={`${key}.view`}\n                     />\n                    }\n\n                  </Table.Cell>\n\n                  {/**SIGN COLUMN */}\n                  <Table.Cell disabled = {key !== 'timesheet'}>\n                    {key === 'timesheet' &&\n                    <DropDownField\n                      multiple\n                      selection\n                      options={superUserSet?options:getStationOptions(`${key}.sign`)}\n                      placeholder = 'Add Stations'\n                      disabled = {loading ||  !hasPermission(staff.permission[key].sign) || superUserSet}\n                      loading= {loading}\n                      name={`${key}.sign`}\n                    />\n                    }\n                  </Table.Cell>\n                </Table.Row>}\n\n              </FieldArray>\n              }</Fragment>\n            )\n            }\n\n          </TableBody>\n        </Form>\n        {dirty &&\n        <>\n          <Button  onClick = {() => handleSubmit()}> Save Changes</Button>\n          <Button  onClick = {() => resetForm()}> Discard Changes</Button>\n        </>\n        }</>\n      }\n    </Formik>\n\n  )\n\n}\n\nexport default PermissionManager","import { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useEffect } from 'react'\nimport { Button, Dimmer, Form, Grid, Loader, Modal,ModalContent, ModalHeader } from 'semantic-ui-react'\nimport { STAFF_EDIT } from '../../mutations/staffMutation'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nconst StaffEditModel = (props) => {\n\n  const [updateStaff,{ loading: updateStaffLoading }] = useMutation(STAFF_EDIT)\n\n\n  const initVal = { email: props.email,\n    phone: props.phone || '',\n    contractType: props.contractType,\n    contractHours: props.reqHours,\n    position: props.position || '',\n  }\n  return(\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {props.open}\n      onClose= {() =>  props.setOpen(false)}\n      onOpen= {() => props.setOpen (true)}\n    >\n      <ModalHeader>Editing Staff {props.name} </ModalHeader>\n      <ModalContent>\n\n        {updateStaffLoading &&\n            <Dimmer active>\n              <Loader />\n            </Dimmer>\n        }\n\n        <Formik\n          initialValues = { initVal }\n\n          onSubmit= {(values) => {\n            const updatedValues = _.omitBy(values, (v,k) => initVal[k] === v )\n\n            updateStaff({ variables:{ ...updatedValues,id:props.id } })\n          }}\n        >\n          {({ values,handleSubmit,setFieldValue,dirty }) => <Form style={{ marginBottom:'5rem' }} onSubmit= {handleSubmit}>\n            <Grid>\n              <Grid.Row>\n                <InputField name='email' label='Email' type='email'/>\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='phone' label='Phone' type='tel'/>\n\n              </Grid.Row>\n              <Grid.Row>\n                <DropDownField  name='contractType' labeled label='Contract'\n                  selection\n                  options= {[{\n                    key:1, value:'Contractor', text: 'Contractor' },\n                  { key:2, value:'Employee', text: 'Employee' }]}></DropDownField>\n\n\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='contractHours' label='Required Hours per day'/>\n\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='position' label='Position'/>\n              </Grid.Row>\n            </Grid>\n            {dirty &&\n            <Button type='submit' floated='right' positive>Save</Button>}\n\n          </Form>\n          }\n        </Formik></ModalContent>\n    </Modal>\n\n  )\n}\n\nexport default StaffEditModel","import { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React from 'react'\nimport { Button, Dimmer, Form, Grid, Loader, Modal,ModalContent, ModalHeader } from 'semantic-ui-react'\nimport { CHANGE_PASSWORD } from '../../mutations/staffMutation'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nconst PasswordChangeModel = (props) => {\n\n  const [changePassword,{ loading,error,data }] = useMutation(CHANGE_PASSWORD)\n\n\n  const initVal = {\n    password:'',\n    newPassword:'',\n    confirmPassword:''\n  }\n\n  if(error){\n    console.log(error)\n  }\n\n  return(\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {props.open}\n      onClose= {() =>  props.setOpen(false)}\n      onOpen= {() => props.setOpen (true)}\n    >\n      <ModalHeader>Password Change</ModalHeader>\n      <ModalContent>\n\n        {loading &&\n            <Dimmer active>\n              Updating Password\n              <Loader />\n            </Dimmer>\n        }\n\n        <Formik\n          initialValues = { initVal }\n          validate= {(values) =>\n          {\n            const errors = {}\n            if(!values.password){\n              errors.password = 'Old Password is required'\n            }\n\n            if(values.newPassword === values.password){\n              errors.newPassword = 'New password cannot be same as old password'\n            }\n\n            if(!values.newPassword ){\n              errors.newPassword = 'New password cannot be empty'\n            }\n\n            if(values.newPassword !== values.confirmPassword){\n              errors.confirmPassword = 'New password and confirm password must match'\n            }\n            console.log(errors)\n            return errors\n          }\n\n          }\n          onSubmit= {(values) => {\n            changePassword({ variables:{ id:props.id,password: values.password, newPassword: values.newPassword } })\n\n          }}\n        >\n          {({ values,handleSubmit,setFieldValue,dirty ,errors }) => <Form style={{ marginBottom:'5rem' }} onSubmit= {handleSubmit}>\n            <Grid>\n              <Grid.Row>\n                <InputField name='password' label='Old Password' type='password'/>\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='newPassword' label='New Password' type='password'/>\n\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='confirmPassword' label='Confirm Password' type='password'/>\n              </Grid.Row>\n            </Grid>\n            {dirty && _.isEmpty(errors) &&\n            <Button type='submit' style={{ marginTop: '1rem' }} positive>Change Password</Button>}\n\n          </Form>\n          }\n        </Formik></ModalContent>\n    </Modal>\n\n  )\n}\n\nexport default PasswordChangeModel","import { useMutation, useQuery } from '@apollo/client'\nimport React, { useEffect, useState } from 'react'\nimport { Button, Confirm, Divider, Grid,Header,Icon,Loader, Menu, MenuItem, Table, TableBody } from 'semantic-ui-react'\nimport { GET_STAFF } from '../../queries/staffQuery'\nimport PermissionManager from './PermissionManager'\nimport StaffEditModel from './StaffEditModel'\nimport {  RESET_PASSWORD_REQ, RESET_REGISTER_CODE } from '../../mutations/staffMutation'\nimport PasswordChangeModel from './PasswordChangeModel'\nimport { useParams } from 'react-router-dom'\n\n\nconst Profile = (props) => {\n  const params = useParams()\n\n  const [confirm,setConfirm] = useState({ open:false, handleCancel:() => {}, handleConfirm:() => {} })\n\n  const [passwordChangeOpen,setPasswordChangeOpen] = useState(false)\n  const staff =  JSON.parse(sessionStorage.getItem('staffKey'))\n\n  /**Staff can edit if staff has edit or admin  permission and not own profile */\n  let staffId = staff.id\n\n  if(props.id){\n    staffId= props.id\n  } else if(params.staffId) {\n    staffId= params.staffId\n  }else {\n    staffId= staff.id\n  }\n\n\n  const { loading,error,data } = useQuery(GET_STAFF,{ variables:{ id:staffId ,withPermission: props.staffCanEdit  } })\n\n\n\n  const [resetPassword,{ loading: rpLoading,error:rpError,data:rpData }] = useMutation(RESET_PASSWORD_REQ)\n  const [resetRegisterCode,{ loading: rcLoading,error:rcError,data:rcData }] = useMutation(RESET_REGISTER_CODE)\n\n\n  const resetConfirm = () => {\n    setConfirm(({ open:false, handleCancel:() => {}, handleConfirm:() => {}  }))\n  }\n\n  useEffect(() => {\n    if(data)\n      props.setStaffName(data.getStaff.name)\n\n  },[data, props])\n\n  if ( rpError || rcError) {\n    console.log( rpError, rcError)\n  }\n\n\n  if (loading) {\n    return (\n      <Loader active>Fetching User Profile</Loader>\n    )\n  }\n\n  if (error) {\n    console.log(error)\n    return (\n      <Header as ='h5'>Something Went Wrong, Please try again</Header>\n    )\n  }\n\n  /**If the user has completed registration\n   * Registered user should have regiserCode empty\n  */\n\n  const registered =  data && data.getStaff.registerCode ? false: true\n\n  return (<>\n\n    <Grid columns='3' style={{ marginTop:'1rem' }}>\n      <Grid.Row centered  textAlign='center'>\n        <Grid.Column>\n          <Header as ='h4'>Basic Info</Header>\n          <Table compact>\n            <TableBody>\n              <Table.Row>\n                <Table.Cell width='8'> <strong> Id Card Saved </strong> </Table.Cell>\n                <Table.Cell width='7'>{data.getStaff.idCardCode ?\n                  <Icon name='checkmark' color='green'></Icon> : <Icon name='cancel' color='red'></Icon> }</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell width='8'> <strong> Registration Complete</strong> </Table.Cell>\n                <Table.Cell width='7'>{registered ?\n                  <Icon name='checkmark' color='green'></Icon> : <Icon name='cancel' color='red'></Icon> }</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Email </strong> </Table.Cell>\n                <Table.Cell > {data.getStaff.email}</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Phone </strong> </Table.Cell>\n                <Table.Cell > {data.getStaff.phone}</Table.Cell>\n              </Table.Row>\n              { registered &&\n              <Table.Row>\n                <Table.Cell> <strong> Username </strong> </Table.Cell>\n                <Table.Cell> {data.getStaff.username}</Table.Cell>\n              </Table.Row>}\n            </TableBody>\n            <Table.Footer>\n              {(props.staffCanEdit || staff.id === data.getStaff.id) &&\n              <Table.Row>\n                <Table.HeaderCell >\n                  <Button\n                    primary\n                    size='small'\n                  >\n                 Scan Id Card\n                  </Button>\n                </Table.HeaderCell>\n                <Table.HeaderCell >\n                  <Button\n                    loading = {rpLoading || rcLoading}\n                    disabled =  {rpLoading || rcLoading}\n                    primary\n                    size='small'\n                    onClick = { (e,{ children }) => {\n\n                      switch( children ){\n                      case 'Change Password':\n                        setPasswordChangeOpen(true)\n                        break\n                      case 'Reset Password':\n                        setConfirm({\n                          open:true,\n                          handleConfirm: () => {\n                            resetPassword({ variables:{ id:data.getStaff.id } })\n                            resetConfirm()\n                          },\n                          handleCancel:() => {\n                            resetConfirm()\n                          },\n                          content: 'Confirm Reset Password',\n                          header:'Confirm'\n                        })\n                        break\n                      case 'Resend Register Link':\n                        setConfirm({\n                          open:true,\n                          handleConfirm: () => {\n                            resetRegisterCode({ variables:{ id:data.getStaff.id } })\n                            resetConfirm()\n                          },\n                          handleCancel:() => {\n                            resetConfirm()\n                          },\n                          content: 'Confirm Reset Registration Link',\n                          header:'Confirm'\n                        })\n                        break\n                      default:\n                        break\n                      }\n                    }\n\n                    }\n                  >\n                    {registered\n                      ?staff.id === data.getStaff.id\n                        ? 'Change Password'\n                        : props.staffCanEdit?  'Reset Password':''\n                      :'Resend Register Link'}\n                  </Button>\n                </Table.HeaderCell>\n              </Table.Row>}\n            </Table.Footer>\n\n          </Table>\n        </Grid.Column>\n        <Grid.Column>\n          <Header as ='h4'>Contract</Header>\n          <Table compact>\n            <TableBody>\n              <Table.Row>\n                <Table.Cell> <strong> Type </strong> </Table.Cell>\n                <Table.Cell>{data && data.getStaff.contractType }</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Required Hrs/Day </strong> </Table.Cell>\n                <Table.Cell > {data && data.getStaff.reqHours}</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Position </strong> </Table.Cell>\n                <Table.Cell> {data && data.getStaff.position}</Table.Cell>\n              </Table.Row>\n            </TableBody>\n\n\n          </Table>\n        </Grid.Column>\n        <Grid.Column>\n          <Header as ='h4'>Last Active</Header>\n          <Table compact>\n            <TableBody>\n              <Table.Row>\n                <Table.Cell> <strong> Station </strong> </Table.Cell>\n                <Table.Cell>{ data && data.getStaff.currentStation &&  data.getStaff.currentStation.location }</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Active at </strong> </Table.Cell>\n                <Table.Cell > {data && data.getStaff.lastActive}</Table.Cell>\n              </Table.Row>\n            </TableBody>\n\n          </Table>\n        </Grid.Column>\n\n      </Grid.Row>\n      {props.staffCanEdit &&\n      <Grid.Row > <Grid.Column><PermissionManager permissions= {data.getStaff.permission}></PermissionManager> </Grid.Column>  </Grid.Row>}\n\n      <StaffEditModel\n        open={props.editModelOpen}\n        setOpen= {props.setEditModelOpen}\n        email = {data.getStaff.email}\n        phone =  {data.getStaff.phone}\n        contractType ={data.getStaff.contractType}\n        reqHours =  {data.getStaff.reqHours}\n        position = {data.getStaff.position}\n        id= {data.getStaff.id}\n      ></StaffEditModel>\n\n      <PasswordChangeModel\n        open = {passwordChangeOpen}\n        setOpen = {setPasswordChangeOpen}\n        id= {data.getStaff.id }\n      ></PasswordChangeModel>\n\n\n      <Confirm\n        open={confirm.open}\n        content = {confirm.content}\n        header = {confirm.header}\n        onCancel={confirm.handleCancel}\n        onConfirm={confirm.handleConfirm}\n      />\n\n    </Grid>\n  </>\n\n\n\n\n  )\n}\n\n\n\n\n\nexport default Profile","import { useLazyQuery, useMutation, useQuery } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useEffect, useState } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { Button, Form, Header, Icon, Input, Label,  Message, Segment } from 'semantic-ui-react'\nimport { COMPLETE_REGISTRATION } from '../../mutations/staffMutation'\nimport { GET_STAFF_REG,VERIFY_USERNAME } from '../../queries/staffQuery'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nconst RegisterPage = ({ setName }) => {\n\n  const params= useParams()\n  const history = useHistory()\n\n  const { loading,error,data } = useQuery(GET_STAFF_REG, { variables: { registerCode: params.registerCode }, skip: !params.registerCode  })\n  const [completeRegistration,{ loading:regstrationLoading,error:registrationError,data:registrationData }] = useMutation(COMPLETE_REGISTRATION)\n  const [validateUsernameQuery,{ loading:usernameLoading,data:usernameData }] = useLazyQuery(VERIFY_USERNAME)\n  const [usernameVerified,setUsernameVerified] = useState({ verified:false })\n\n\n  useEffect(() => {\n    if(usernameData){\n\n      setUsernameVerified({ verified:true,status:usernameData.verifyUsername.status })\n      //setFieldError('username','This is a error')\n    }\n\n  }, [usernameData])\n\n  if(!params.registerCode){\n    return <Header>Registration code mising or invalid</Header>\n  }\n\n  if(error || registrationError){\n    console.log(error)\n\n  }\n\n  if(registrationData && registrationData.registerStaff.status === 'SUCCESS'){\n    history.push('/staff')\n    return null\n  }\n\n  if(data && data.getStaff){\n    console.log(data)\n    setName(data.getStaff.name)\n  }\n\n\n  const initVal = {\n    password:'',\n    username:'',\n    confirmPassword:''\n  }\n\n  const validateUsername =(value) => {\n    validateUsernameQuery({ variables:{ username:value } })\n\n  }\n\n\n  return(\n    <Segment basic loading ={loading || regstrationLoading}>\n      <Message success={data && data.getStaff} error={error?true:false}>\n        <Message.Header>\n          {data && data.getStaff && 'Please complete registration by setting  your username and password'}\n          {error && error.message}\n          {(data && !data.getStaff) && 'Registration code Invalid'}\n        </Message.Header>\n      </Message>\n\n      { data && data.getStaff &&\n      <Formik\n        initialValues = { initVal }\n        validate= {(values) =>\n        {\n          const errors = {}\n\n          if(!values.username || values.username.trim() === ''){\n            errors.username = 'Username is required'\n          }\n\n          if(values.username && values.username.length < 4){\n            errors.username = 'Username should be at least 4 character long'\n          }\n          if(!values.password || values.password.trim() === '') {\n            errors.password = 'Password is required'\n          }\n\n          if(values.password !== values.confirmPassword){\n            errors.confirmPassword = 'New password and confirm password must match'\n          }\n\n          return errors\n        }\n\n        }\n        onSubmit= {(values) => {\n\n          completeRegistration({ variables:{ registerCode: params.registerCode, password: values.password ,username: values.username } })\n\n\n        }}\n      >\n        {({ values,handleChange, handleSubmit,dirty ,errors, handleBlur, touched }) => <Form style={{ marginBottom:'5rem' }} onSubmit= {handleSubmit}>\n\n          <Form.Field width='8'>\n            <Input\n              loading={usernameLoading}\n              icon= {<Icon name= {errors.username === undefined && usernameVerified.verified?(usernameVerified.status==='SUCCESS'?'check circle':'cancel'):''} color={usernameVerified.verified?usernameVerified.status==='SUCCESS'?'green':'red':'red'} />}\n              onBlur= {handleBlur}\n              name='username' label='Username' width='8' onChange = {e => {\n              // call the built-in onchange\n                handleChange(e)\n                let username = e.currentTarget.value\n                validateUsername(username)\n              }}/>\n\n            { ((errors.username && touched.username) ||  (errors.username === undefined && usernameVerified.verified && usernameVerified.status!=='SUCCESS')) &&\n           <Label pointing prompt>\n             { errors.username || 'Selected username already taken, please select new username' }\n           </Label>}\n          </Form.Field>\n\n\n\n\n          <InputField name='password' label='Password' type='password' width='8'/>\n\n          <InputField name='confirmPassword' label='Confirm Password' type='password' width='8'/>\n\n\n          <Button disabled = {!( dirty && _.isEmpty(errors) && usernameVerified.verified && usernameVerified.status ==='SUCCESS') }type='submit' style={{ marginTop: '1rem' }} positive>Register</Button>\n\n        </Form>\n        }\n      </Formik>}\n    </Segment>\n\n  )\n}\nexport default RegisterPage","import React from 'react'\nimport { Button, Dropdown, Menu } from 'semantic-ui-react'\nimport { useHistory, useLocation, useParams } from 'react-router-dom'\n\n\nconst StaffMenuBar = ({ staffName, activeItem, setActiveItem }) => {\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const history = useHistory()\n\n  const location = useLocation()\n\n  if(location.pathname.split('/')[1] === 'register'){\n    return (\n\n      <Menu inverted color=\"blue\" stackable >\n        <Menu.Item position='right'>\n          Welcome {staffName}\n        </Menu.Item>\n      </Menu>\n    )\n\n  }\n\n  const handleMenuClick = (e, { name }) => {\n    setActiveItem( name )\n    if( ['Profile','Timesheets','TimesheetsOverview'].includes(name) ){\n      history.push(`/staff/${staff.id}/${name}`)\n    }else{\n      history.push(`/${name}`)\n    }\n  }\n\n  const logout = () => {\n    sessionStorage.removeItem('staffKey')\n    history.push('/staffLogin')\n  }\n\n  const menuItems = []\n\n  /**If user has some admin rights then add those items to menu and own profile view will be on dropdown Button */\n  if(staff.permission.station.edit.length > 0 || staff.permission.station.add){\n    menuItems.push ('AllStations')\n  }\n\n  if(staff.permission.staff.view){\n    menuItems.push ('AllStaffs')\n  }\n\n  if(staff.permission.timesheet.view.length > 0){\n    menuItems.push ('ManageTimesheets')\n  }\n\n  const cornerButton = () => {\n    return (\n      <Dropdown item text = {`Welcome ${staff.name}` } >\n        <Dropdown.Menu>\n          {menuItems.length > 0 && <>\n            <Dropdown.Item disabled text='My Pages'  onClick = { handleMenuClick }/>\n            <Dropdown.Item name= 'Profile' text='Profile'  onClick = { handleMenuClick }/>\n            <Dropdown.Item name ='Timesheets' text='Timesheets'  onClick = { handleMenuClick }/>\n            <Dropdown.Item name = 'TimesheetsOverview' text='TimesheetsOverview'  onClick = { handleMenuClick }/>\n            <Dropdown.Divider/>\n\n          </>\n          }\n          <Dropdown.Item text='Logout' onClick={() => logout()}/>\n\n        </Dropdown.Menu>\n\n      </Dropdown>\n    )\n  }\n\n  /** If user doesnot have any admin rights then */\n  if (menuItems.length === 0) {\n    menuItems.push('Timesheets')\n    menuItems.push('SubmittedTimesheets')\n    menuItems.push('Profile')\n  }\n\n\n  const getMenuItems = () => {\n    return menuItems.map(item =>\n      <Menu.Item  key={ item} name = {item} active = {activeItem ===  item }\n        onClick = {handleMenuClick} />)\n\n  }\n\n\n  return (\n    <Menu inverted color=\"blue\" stackable >\n\n      {getMenuItems()}\n      <Menu.Menu position='right'>\n        {cornerButton()}\n      </Menu.Menu>\n    </Menu>\n\n\n\n\n  )\n\n\n}\n\nexport default StaffMenuBar","import React,{ useEffect, useState } from 'react'\nimport { Link, useHistory, useLocation, useParams } from 'react-router-dom'\nimport { Breadcrumb, BreadcrumbDivider, BreadcrumbSection, Menu } from 'semantic-ui-react'\nimport AllStaffs from './AdminPages/AllStaffs'\nimport AllStations from './AdminPages/AllStations'\nimport ManageTimeSheets from './AdminPages/ManageTimeSheets'\nimport Profile from './Profile'\nimport RegisterPage from './RegisterPage'\nimport StaffMenuBar from './StaffMenuBar'\nimport TimeSheet from './TimeSheet'\n/**\n * Staff page component\n * Can receive staffName as props  if props not set then retrives staffId from url nad fetches name\n * @param {staffName,id}\n */\nconst StaffPage = ({ name ,id }) => {\n\n  const params = useParams()\n\n  let staffId = params && params.staffId\n  let page = params && params.page\n  const location = useLocation()\n  const history = useHistory()\n  const [staffName, setStaffName] = useState(name)\n\n  const [editModelOpen,setEditModelOpen] = useState(false)\n  const [activeItem, setActiveItem] = useState(page )\n\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\n\n  const [loggedInStaffName, setLoggedInStaffName] = useState(staff && staff.name)\n\n  const locationPaths = location.pathname.split('/')\n\n  if(locationPaths[1].toLowerCase() === 'managetimesheets' ){\n    page = 'ManageTimesheets'\n  }\n\n  if(locationPaths[1].toLowerCase() === 'allstaffs' && locationPaths.length <= 2 ){\n    page = 'AllStaffs'\n  }\n\n  if(locationPaths[1].toLowerCase() === 'allstations' && locationPaths.length <= 2 ){\n    page = 'AllStations'\n  }\n\n\n\n  useEffect(() => {\n    setActiveItem(page)\n  },[page])\n\n  if(locationPaths[1].toLowerCase() === 'register'){\n    page = 'register'\n    return<>\n      <StaffMenuBar staffName = {loggedInStaffName} activeItem= {activeItem} setActiveItem={setActiveItem}></StaffMenuBar>\n      <RegisterPage setName={setLoggedInStaffName}></RegisterPage></>\n  }\n\n\n  /**If user is not logged in */\n  if(!staff && page !== 'register'){\n    history.push('/staffLogin')\n    return null\n  }\n  const staffCanEdit  = (staff.id !== staffId && staffId !== undefined)  && ((staff.permission && staff.permission.staff.edit) ||  staff.permission.admin || false)\n\n  /**If id is passed as props */\n  if(id){\n    staffId= id\n  }\n  /**If the url have staff Id */\n  else if(params.staffId) {\n    staffId= params.staffId\n  }\n  /**staff is loggedIn user */\n  else {\n    staffId= staff.id\n  }\n\n\n\n  if(!staffId){\n    staffId = staff.id\n  }\n\n  if(id){\n    staffId = id\n  }\n\n  const basePage =  location.pathname.split('/')[1].toLocaleLowerCase()\n  if(staff.id !== staffId && basePage === 'staff' ){\n    if(location.pathname.split('/')[1] !== 'AllStaffs')\n      history.push(`/AllStaffs/${staffId}/${activeItem}`)\n\n  }\n\n  /**\n   * Set bredcrumbs for diffent view\n   */\n\n  const getBreadCrumb = () => {\n\n    return(\n      /**\n         * If the staff page is page of browsing user then reflect that info on breadcrumb\n         */\n      basePage === 'staff' && staff.id === staffId ?\n        <Breadcrumb>\n          <BreadcrumbSection> My Page </BreadcrumbSection>\n          <BreadcrumbDivider/>\n          <BreadcrumbSection active> {page} </BreadcrumbSection>\n          {page=== 'Timesheets' && params.period && <>\n            <BreadcrumbDivider icon='right chevron'/>\n            <BreadcrumbSection active>{params.period.replace('_',' ')}</BreadcrumbSection>\n          </>}\n\n        </Breadcrumb> :\n\n        basePage === 'allstaffs' ?\n          <>\n            { params.staffId &&\n            <>\n              <Breadcrumb>\n                <BreadcrumbSection link as = {Link} to = {'/AllStaffs'}> All Staffs </BreadcrumbSection>\n                <BreadcrumbDivider/>\n                <BreadcrumbSection link as={Link} to={`/AllStaffs/${staffId}/Profile`}> {staffName || staffId} </BreadcrumbSection>\n                <BreadcrumbDivider/>\n                <BreadcrumbSection active> {page} </BreadcrumbSection>\n                {page=== 'Timesheets'  && params.period && <>\n                  <BreadcrumbDivider icon='right chevron'/>\n                  <BreadcrumbSection active>{params.period.replace('_',' ')}</BreadcrumbSection>\n                </>}\n\n              </Breadcrumb>\n            </>\n            }\n\n\n          </> :\n\n          basePage === 'managetimesheets' ?\n            <>\n              { params.staffId &&\n              <Breadcrumb>\n                <BreadcrumbSection link as = {Link} to = {'/ManageTimesheets'}> Manage Timesheets </BreadcrumbSection>\n                <BreadcrumbDivider/>\n                <BreadcrumbSection active = {params.period? false: true}  as={params.period?  Link: ''} to={`/ManageTimesheets/${params.staffId}`}> {staffName || params.staffId} </BreadcrumbSection>\n                {params.period && <>\n                  <BreadcrumbDivider icon='right chevron'/>\n                  <BreadcrumbSection active>{params.period.replace('_',' ')}</BreadcrumbSection>\n                </>}\n              </Breadcrumb> }\n            </> :''\n\n\n    )\n\n  }\n\n\n  return (\n    <>\n      <StaffMenuBar staffName = {loggedInStaffName} activeItem= {activeItem} setActiveItem={setActiveItem}></StaffMenuBar>\n\n      {getBreadCrumb()}\n\n      {staffId !== staff.id && basePage === 'allstaffs' &&\n\n<Menu pointing secondary >\n  <Menu.Item header>{staffName}</Menu.Item>\n  <Menu.Item\n    position='right'\n    name='Profile'\n    active = {activeItem === 'Profile'}\n    onClick={() => {\n      setActiveItem('Profile')\n      history.push(`/allStaffs/${staffId}/Profile`)\n    }}\n  />\n\n  <Menu.Item\n    name='Timesheets'\n    active = {activeItem === 'Timesheets'}\n    onClick={() => {\n      setActiveItem('Timesheets')\n      history.push(`/allStaffs/${staffId}/Timesheets`)\n    }}\n  />\n\n  <Menu.Item\n    name='TimesheetsOverview'\n    active = {activeItem === 'TimesheetsOverview'}\n    onClick={() => {\n      setActiveItem('TimesheetsOverview')\n      history.push(`/allStaffs/${staffId}/TimesheetsOverview`)\n\n\n    }}\n  />\n  {staffCanEdit &&<Menu.Item\n    position='right'\n    name='EditProfile'\n    icon = 'edit'\n    onClick={(e) => {\n      e.preventDefault()\n      history.push('Profile')\n      setActiveItem('Profile')\n      setEditModelOpen(true)\n    }}\n  />}\n\n</Menu>\n      }\n      { activeItem && activeItem.toLowerCase() === 'timesheets' && <>\n        <TimeSheet staffId ={staffId} setStaffName={setStaffName} />\n      </>\n      }\n      { activeItem && activeItem.toLowerCase() === 'profile' &&\n        <>\n          <Profile id={staffId} staffCanEdit={staffCanEdit} setEditModelOpen={setEditModelOpen} editModelOpen={editModelOpen} setStaffName={setStaffName}/>\n        </>\n      }\n      { activeItem && activeItem.toLowerCase() === 'managetimesheets' &&\n        <>\n          <ManageTimeSheets setStaffName={setStaffName}></ManageTimeSheets>\n        </>\n      }\n      { activeItem && activeItem.toLowerCase() === 'timesheetsoverview' &&\n        <>\n          <ManageTimeSheets setStaffName={setStaffName}></ManageTimeSheets>\n        </>\n      }\n      { activeItem && activeItem.toLowerCase() === 'allstaffs' &&\n        <>\n          <AllStaffs></AllStaffs>\n        </>\n      }\n\n      { activeItem && activeItem.toLowerCase() === 'allstations' &&\n        <>\n          <AllStations />\n        </>\n      }\n    </>\n  )\n}\n\nexport default StaffPage","import React from 'react'\nimport { BrowserRouter as  Router, Switch, Route, Redirect } from 'react-router-dom'\nimport StationLoginPage from './components/StationLoginPage'\nimport './App.css'\nimport StationReportPage from './components/StationReportPage'\nimport StaffLoginPage from './components/StaffLoginPage'\nimport StaffPage from './components/StaffPage'\n\n\nconst  App = () =>   {\n  return (\n    <Router>\n      <Switch>\n        <Route path = \"/shiftReport/:station/:id\">\n          <StationReportPage></StationReportPage>\n        </Route>\n        <Route path = \"/shiftReport/:id\">\n          <StationReportPage></StationReportPage>\n        </Route>\n        <Route path = \"/stationLogin\">\n          <StationLoginPage ></StationLoginPage>\n        </Route>\n        <Route path = \"/staffLogin\">\n          <StaffLoginPage />\n        </Route>\n        <Route path = \"/staff/:staffId/:page/:period\">\n          <StaffPage></StaffPage>\n        </Route>\n        <Route path = \"/staff/:staffId/:page\">\n          <StaffPage></StaffPage>\n        </Route>\n        <Redirect from=\"/staff/:staffId\" to=\"/staff/:staffId/Profile\"/>\n        <Route path = \"/staff\">\n          <StaffPage></StaffPage>\n        </Route>\n\n        {/** Routing for AllStaffs (Admin ) Page*/}\n        <Route path = \"/AllStaffs/:staffId/:page/:period\">\n          <StaffPage></StaffPage>\n        </Route>\n        <Route path = \"/AllStaffs/:staffId/:page/\">\n          <StaffPage></StaffPage>\n        </Route>\n        <Redirect from=\"/AllStaffs/:staffId\" to=\"/AllStaffs/:staffId/Profile\"/>\n        <Route path = \"/AllStaffs\">\n          <StaffPage></StaffPage>\n        </Route>\n\n        {/** Routing for ManageTimeSheets (Admin ) Page*/}\n        <Route path = \"/ManageTimeSheets/:staffId/:period\">\n          <StaffPage></StaffPage>\n        </Route>\n        <Route path = \"/ManageTimeSheets/:staffId\">\n          <StaffPage></StaffPage>\n        </Route>\n        <Route path = \"/ManageTimeSheets\">\n          <StaffPage></StaffPage>\n        </Route>\n\n        {/** Routing for AllStations (Admin) Page */}\n        <Route path = \"/AllStations\">\n          <StaffPage></StaffPage>\n        </Route>\n\n        <Route path = \"/Register/:registerCode\">\n          <StaffPage></StaffPage>\n        </Route>\n\n        <Route path = \"/\">\n          <StationLoginPage ></StationLoginPage>\n        </Route>\n      </Switch>\n    </Router>\n\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'semantic-ui-css/semantic.min.css'\nimport { Container } from 'semantic-ui-react'\n\nimport { ApolloClient, HttpLink , InMemoryCache, ApolloProvider } from '@apollo/client'\n\nimport { setContext } from 'apollo-link-context'\n\nconst authLink = setContext((_, { headers }) => {\n  /**\n   * If the user is on staffs page session must have staffKey set , then set authorisation header to staffKey\n   */\n  let key = JSON.parse(sessionStorage.getItem('staffKey'))\n\n  /**If the staff page is not active then authorisation header is set to stationKey */\n  if(!key){\n    /**If the login info was saved preiously key will be set else retrive key from session*/\n    key =  JSON.parse(localStorage.getItem('stationKey'))\n    if(!key) {\n      key = JSON.parse(sessionStorage.getItem('stationKey'))\n    }\n  }\n\n  const token = key? key.value:null\n\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst httpLink = new HttpLink({ uri: 'http://localhost:4000' })\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link:  authLink.concat(httpLink)\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Container><App /></Container>\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}