{"version":3,"sources":["queries/stationQuery.js","mutations/stationMutation.js","components/Notifications/Notification.js","components/Notifications/index.js","contexts/NotificationContext.js","components/StationLoginPage.js","queries/shiftReportQuery.js","components/StationReportPage/MenuBar.js","components/ShiftReport/TaskModal.js","components/ShiftReport/TaskInfo.js","components/ShiftReport/GenericTasksPanel.js","components/ShiftReport/AircraftTasksPanel.js","components/ShiftReport/StaffWorkTime.js","components/ShiftReport/index.js","components/StationReportPage/Context.js","components/StationReportPage/stationReducer.js","components/StationReportPage/NewReportForm/FormFields.js","utils/DateHelper.js","components/StationReportPage/NewReportForm/validator.js","components/StationReportPage/NewReportForm/ErrorMessage.js","mutations/timeSheetMutation.js","components/StationReportPage/NewReportForm/StaffEditModel.js","components/StationReportPage/NewReportForm/StaffForm.js","components/StationReportPage/NewReportForm/StaffForms.js","components/StationReportPage/NewReportForm/TaskForm.js","components/StationReportPage/NewReportForm/TaskForms.js","components/StationReportPage/NewReportForm/AircraftSelectionForm.js","components/StationReportPage/NewReportForm/StaffAddModel.js","mutations/submitShiftReport.js","components/StationReportPage/NewReportForm/index.js","mutations/costumerMutation.js","queries/costumerQuey.js","components/ConfirmModal.js","components/CostumerInfo/AddAircraftModal.js","components/CostumerInfo/AddContactModal.js","components/TimeSheetsReport/TimeSheetEditFields.js","components/CostumerInfo/AddStationModal.js","components/CostumerInfo/index.js","components/StationInfo/AssignCostumersModal.js","components/StationInfo/AddMailingListModal.js","components/StationInfo/AddShiftsModal.js","components/StationInfo/ResetStationKeyModal.js","components/StationInfo/Settings.js","components/StationInfo/stationMenu.js","components/StationInfo/Index.js","components/ShiftReportsList/ShiftReportFilter.js","components/ShiftReport/ReportViewModal.js","components/ShiftReportsList/ReportsTable.js","components/ShiftReportsList/index.js","components/StationReportPage/index.js","mutations/staffMutation.js","components/StaffLoginPage.js","queries/timeSheetQuery.js","components/TimeSheetsReport/TimeSheetEditModel.js","components/TimeSheetsReport/TImeSheetRow.js","components/TimeSheetsReport/index.js","components/StaffPage/TimeSheet.js","queries/staffQuery.js","components/TimeSheetsOverview/TimeSheetsFilter.js","components/TimeSheetsOverview/index.js","components/AdminPages/ManageTimeSheets.js","components/StaffPage/PasswordResetPage.js","mutations/permissionMutation.js","components/StaffPage/PermissionManager.js","components/StaffPage/StaffEditModel.js","components/StaffPage/PasswordChangeModel.js","components/StaffPage/Profile.js","components/StaffPage/RegisterPage.js","components/StaffPage/StaffMenuBar.js","components/StaffPage/StaffSubMenu.js","components/StaffPage/index.js","components/AdminPages/NewStaffModal.js","components/AdminPages/AllStaffs.js","components/AdminPages/NewStationModal.js","components/AdminPages/AllStations.js","components/AdminPages/AdminMenuBar.js","components/AdminPages/NewCostumerModal.js","components/AdminPages/Costumers.js","components/AdminPages/index.js","router.js","App.js","index.js"],"names":["ALL_STATION","gql","GET_STATION","LOGIN_TO_STATION","ADD_STATION","ADD_TO_MAILINGLIST","REMOVE_FROM_MAILINGLIST","ADD_SHIFTS","REMOVE_SHIFTS","CHANGE_STATION_KEY","DELETE_STATION","ASSIGN_COSTUMERS","Notification","dispatch","notification","useEffect","timeout","setTimeout","type","payload","id","clearTimeout","Message","success","error","attached","onDismiss","content","Notifications","useContext","NotificationContext","notifications","Segment","basic","style","width","position","zIndex","padding","map","key","createContext","initialState","notificationReducer","state","action","length","filter","n","NotificationProvider","props","useReducer","Provider","value","children","StationLoginPage","history","useHistory","useState","radioButton","setRadioButton","stationKey","setStationKey","remember","setRemember","useQuery","notifyOnNetworkStatusChange","loading","data","useMutation","onError","message","loginStation","loginToStationResult","station","loginToStation","sessionStorage","setItem","JSON","stringify","localStorage","push","event","a","preventDefault","variables","password","storedStationKey","parse","getItem","toggleRemember","Grid","textAlign","height","verticalAlign","Column","maxWidth","Header","as","color","Image","src","Form","size","onSubmit","clearing","stacked","allStations","Field","float","clear","marginRight","Radio","label","location","checked","onChange","radioButtonChange","Input","name","target","fluid","icon","iconPosition","placeholder","Checkbox","onClick","Button","renderPasswordInput","Divider","horizontal","GET_SHIFT_REPORT","GET_REPORTLIST","GET_SHIFTREPORT_ID","MenuBar","activeItem","setActiveItem","confirmOpen","setConfirmOpen","navigatingTo","setNavigatingTo","CurrentDataLossWarning","Confirm","open","cancelButton","confirmButton","header","onCancel","onConfirm","handleMenuClick","e","Menu","inverted","stackable","Item","active","primary","removeItem","TaskModal","task","Modal","onClose","setOpen","Content","taskCategory","Group","Subheader","aircraft","registration","costumer","status","description","updates","update","i","handoverId","viewingOnHanodover","handoverDetail","Label","note","TaskInfo","openDetail","setOpenDetail","updateOnthisHandover","_","find","includes","Icon","compact","GenericTaskPanel","genericTasks","legth","block","SegmentGroup","AircraftTaskPanel","aircraftTasks","aircrafts","key_costumerName","tasks","key_aircraft","StaffWorkTime","timesheets","Table","celled","Row","HeaderCell","Body","timesheet","Cell","staff","startTime","substring","endTime","ShiftReport","reportData","tasksByCat","groupBy","mapValues","cat","k","chain","AIRCRAFT","taskcat","floated","shift","staffAndTime","tasksByType","key_taskType","Context","lastShiftReport","reducer","DateInputField","useFormikContext","setFieldValue","setFieldTouched","useField","field","meta","touched","popupPosition","dateTimeFormat","closable","onBlur","preserveViewMode","pointing","prompt","TimeInputField","InputField","inputlabel","AircraftCheckBox","display","toggle","marginLeft","toUpperCase","TextAreaField","TextArea","formatDate","dateToFormat","isNaN","findIndex","regex","match","splitT","split","date","time","dateSplit","timeSplit","Date","getDate","toString","padStart","getMonth","getFullYear","getHours","getMinutes","operateDate","duration","unit","operation","ndate","isNumber","splitDateTime","splitDate","newDate","toDate","stringDate","getWeekNumber","dt","tdt","valueOf","dayn","getDay","setDate","firstThursday","setMonth","Math","ceil","getDatefromWeek","w","y","simpleStartDate","UTC","dayOfWeek","IsoWeekStart","getMonthName","monthInt","Proxy","get","prop","parseInt","getMonthOptions","currentMonth","Array","v","text","getWeekOptions","today","dYear","lastYearWeekNum","lastRetriveable","options","week","option","getFilterYear","filterBy","number","year","currentWeek","validateStaffInputField","validateStartEndTime","startDate","now","validateTaskField","trim","validateEmail","email","validateName","ErrorMessage","form","getIn","errors","SIGN_OFF_SHIFT","UPDATE_TIMESHEET","APPROVE_TIMESHEET","DELETE_TIMESHEET","REQUEST_CLARIFICATION","StaffEditModel","fieldName","removeClick","removeStaff","setRemoveStaff","getFieldMeta","signOff","shiftStartTime","shiftEndTime","ibreakt","notifyResult","setNotifyResult","username","setUsername","setPassword","setStartTime","setEndTime","breakt","setBreakt","signOffTimeSheet","submit","values","signOffData","break","additionalAction","Dimmer","Loader","closeIcon","closeOnEscape","closeOnDimmerClick","onOpen","enableReinitialize","initialValues","fullname","resetEmail","validate","handleSubmit","maxDate","minDate","labelPosition","min","columns","vertical","StaffForm","index","remove","signOffKey","readOnly","changing","circular","staffs","StaffForms","addStaffOpen","replace","TaskForm","onRemove","disabled","getFieldProps","noteFieldVisibile","setNoteFieldVisibile","taskAction","taskStatus","taskNotes","actionButtonClick","toggleNotes","notes","TaskStatusBar","prevShiftLabel","notesLabel","marginBottom","rows","visibility","removeButtonClick","actionCloseCheckBoxClick","actionOpenCheckBoxClick","actionDeferCheckBoxClick","margin","backgroundColor","link","positive","Or","negative","hidden","paddingBotton","TaskForms","tasksIdentifier","aircraftId","newTaskField","AircraftSelectionForm","costumers","setCheckedAircrafts","checkedAircrafts","StaffAddModel","registerUserOpen","setRegisterUserOpen","forgotPasswordOpen","setForgotPasswordOpen","addedStaff","emailError","usernameError","FormField","warning","visible","FormGroup","SUBMIT_REPORT","NewReportForm","context","openAddStaffModel","setOpenAddStaffModel","setCostumers","initialFields","setInitialFields","store","result","getShiftReport","submitShiftReport","writeQuery","query","flag","onCompleted","submitReport","getShiftName","sdt","shifts","reduce","p","c","splitSt","st","setHours","setMinutes","diff","list","taskList","costumerList","simplifiedTask","newNote","disbleCheck","matchesProperty","exisitingItem","some","staffErrors","errList","isEmpty","mapKeys","validateStaffsField","taskErrors","typedTasks","pickBy","identity","validateTasks","submitData","formdata","updatedTasks","tasksByIdentifier","identifier","initialTask","difference","Object","keys","reducedTask","beforeSubmit","submitCount","OTHER","LOGISTICS","tertiary","ADD_COSTUMER","ADD_AIRCRFAT","ADD_CONTACT","ADD_STATION_TO_COSTUMER","REMOVE_AIRCRFAT","REMOVE_CONTACT","REMOVE_COSTUMER_FROM_STATION","DELETE_COSTUMER","ALL_COSTUMERS","VERIFY_REGISTRATION","GET_COSTUMER","ConfirmModal","confirm","title","Actions","fn","AddAircraftModal","useLazyQuery","checkAircraftRegistration","duplicateError","setDuplicateError","verifyAircraftRegistration","addAircrafts","modify","fields","existingAircraftRefs","readField","newAircraftRefs","forEach","ref","writeFragment","fragment","onerror","err","errAircraft","registrations","AddContactModal","addContact","keyContacts","existingContactsRefs","newContactRefs","contact","addContacts","phone","widths","marginTop","RemarkField","remarkTitle","remarkDate","remarkBy","remarkText","remarkEdit","List","val","fontStyle","textDecoration","DropDownField","labeled","input","Dropdown","borderTopLeftRadius","borderBottomLeftRadius","AddStationModal","stationOptions","setStationOptions","loadStations","stationLoading","stationData","existingStationIds","stations","addStationsToCostumer","existingCostumerRefs","addStation","dirty","search","selection","multiple","onFocus","CostumerInfo","costumerData","costumerId","setData","addStationModalOpen","setAddStationModalOpen","addAircraftModalOpen","setAddAircraftModalOpen","addContactModalOpen","setAddContactModalOpen","params","useParams","skip","costumerLoading","costumerError","fetchedData","removeFromStation","evict","goBack","deleteCostumer","removeContact","removeAircraftMut","removeCostumerFromStation","costumersRef","existingStationRefs","stationsRef","then","res","setConfirm","confirmModalOpen","setConfirmModalOpen","getCostumer","padded","permission","admin","floating","removeAircraft","edit","stationId","removeContactFromStation","Footer","address","city","country","Flag","toLowerCase","_id","AssignCostumersModal","setCostumerList","loadCostumers","allCostumers","currentCostumers","costumerOptions","assignCostumers","existingStationsRefs","response","addCostumers","AddMailingListModal","emails","setEmails","mailingList","existingAddresses","newEmails","errEmail","AddShiftsModal","addShifts","existingShiftsRefs","newShiftRefs","ResetStationKeyModal","changekey","ModalHeader","ModalContent","newKey","confirmKey","Settings","loggedInStaff","addShiftsModalOpen","setAddShiftsModalOpen","addMailingListModalOpen","setAddMailingListModalOpen","resetStationKeyModalOpen","setResetStationKeyModalOpen","setStationData","getStation","deleteStation","deleteFromMailingList","deleteShift","collapsing","existingEmails","item","deleteFromMailingMutation","shiftName","StationMenu","setActiveCostumer","useLocation","page","aar","pathname","path","splice","navigatePath","secondary","StationInfo","activeCostumer","assignCostumerModalOpen","setAssignCostumerModalOpen","locationPaths","getBreadCrumbLink","arr","Breadcrumb","BreadcrumbSection","Link","to","BreadcrumbDivider","street","postcode","staffList","view","lastActive","activeAt","Card","raised","contract","extra","ShiftReportFilter","setFilter","loggedInStation","setFilterBy","setNumber","setStations","stOpt","ReportViewModal","openReport","setOpenReport","getReport","onMount","ReportsTable","transformedData","setTransformedData","transformingData","getReportList","report","striped","structured","entries","reports","rowSpan","ShiftReportsList","slectBy","StationReportPage","notificationDispatch","queryParams","loadingReport","dataReport","dataStation","LOGIN_STAFF","RESET_PASSWORD","RESET_REGISTER_CODE","RESET_PASSWORD_REQ","CHANGE_PASSWORD","STAFF_EDIT","STAFF_ADD","SET_STAFF_STATUS","DELETE_STAFF","COMPLETE_REGISTRATION","StaffLoginPage","login","staffLogin","handleLogin","storedStaffKey","GET_TIMESHEETS","GET_ALL_TIMESHEETS","TimeSheetEditModel","self","add","shiftReportLoading","shiftReportData","closeModel","updateTimeSheet","updateTimeSheetLoading","newRemarkField","setNewRemarkField","selfHasPermissionToAddEdit","sign","staffId","getShiftList","handleShiftChange","ISODate","toISOString","vars","getShiftReportByShift","handover","remarks","getTimeSheetByUser","existingTimeSheetRefs","newTimeSheet","addToTimeSheet","getAllTimeSheets","period","cloneDeep","totHours","toFixed","itemsPending","parseFloat","broadcast","modalHeader","init","by","getInitValues","insertAt","newRemarks","autoAddRemarks","placholder","getRecomendedShiftOption","remark","TimeSheetRow","timeSheet","shiftReport","totalHours","total","ot","overTime","setAdd","deleteOpen","setDeleteOpen","clarifyOpen","setClarifyOpen","clarifyText","setClarifyText","approveTimesheet","timesheetSignLoading","mutatedeleteTimesheet","deleteLoading","requestClarification","clarifyLoading","isEmptyRow","isWeekDay","href","Popup","trigger","approved","approveTimeSheet","perid","wide","clearify","askToclarify","on","deleteTimeSheet","TimeSheetsReport","shiftDate","endDate","calenderArray","day","calenderObject","zipObject","netTotal","netOt","formatData","timeSheets","totalDaily","reqHours","stickyTh","top","colSpan","TimeSheet","setStaffName","selected","timesheetOnly","selectedYear","selectBy","setSelectBy","filterDuration","getStaffName","start","sdate","filterStartDate","end","ed","sd","filterEndDate","isAllApproved","GET_STAFF","GET_STAFF_REG","GET_ALL_STAFF_MINIMAL","GET_ALL_STAFF","VERIFY_USERNAME","TimeSheetsFilter","setStaff","setPeriod","setGroupBy","from","setFrom","setTo","basePage","filterStatus","setFilterStatus","staffOptions","setStaffOptions","getAllStations","getAllStaffs","staffLoading","staffData","staffOpt","allStaff","clearable","dateFormat","TimeSheetsOverview","periodTitle","month","TableHeader","TableRow","TableHeaderCell","TableBody","TableCell","ManageTimeSheets","setName","staffName","Section","PasswordResetPage","resetPassword","resetCode","confirmPassword","CHANGE_PERMISSION","PermissionManager","permissions","setOptions","superUserSet","setSuperUserSet","hasSuperPermission","updatePermission","pLoading","mapPermission","permssionType","hasPermission","mod","getStationOptions","soptions","allStationIds","formValues","prev","cur","scope","isEqual","pType","resetForm","className","newViewValues","Set","updateStaff","updateStaffLoading","initVal","contractType","contractHours","test","updatedValues","omitBy","PasswordChangeModel","changePassword","newPassword","Profile","handleCancel","handleConfirm","passwordChangeOpen","setPasswordChangeOpen","withPermission","staffCanEdit","rpLoading","resetRegisterCode","rcLoading","resetConfirm","getStaff","registered","registerCode","centered","idCardCode","editModelOpen","setEditModelOpen","RegisterPage","completeRegistration","regstrationLoading","registrationData","validateUsernameQuery","usernameLoading","usernameData","verified","usernameVerified","setUsernameVerified","verifyUsername","registerStaff","handleChange","handleBlur","undefined","currentTarget","StaffMenuBar","menuItems","StaffSubMenu","loggedInStaffPermissions","StaffPage","subMenuActiveItem","setSubMenuActiveItem","loggedInStaffName","setLoggedInStaffName","staffHasMangeRights","toLocaleLowerCase","NewStaffModel","addStaffMutation","existingStaffRefs","newStaff","addStaff","AllStaffs","staffsData","setStaffsData","staffAddOpen","setStaffAddOpen","loggedInstaff","deleteStaff","toggleStaffStatus","filterData","accountStatus","NewStationModel","addStationMutation","countryList","setCountryList","fetch","json","countries","countryArray","alpha2Code","fetchCountries","stationKeyConfirm","newStation","autoComplete","paddingTop","AllStations","detailed","stationsData","setStationsData","stationAddOpen","setStationAddOpen","activeStaffs","AdminMenuBar","NewCostumerModel","addCostumerMutation","aircraftCheckLoading","aircraftCheckData","duplicateAircraftError","setDuplicateAircraftError","addCostumer","existingCostumersRefs","newCostumerRef","Costumers","costumerAddOpen","setCostumerAddOpen","AdminPages","AppRouter","App","authLink","setContext","headers","token","authorization","httpLink","HttpLink","uri","window","client","ApolloClient","cache","InMemoryCache","concat","ReactDOM","render","Container","document","getElementById"],"mappings":"6+CACO,IAAMA,EAAcC,cAAH,KAsBXC,EAAcD,cAAH,K,u/ECtBjB,IAAME,EAAmBF,cAAH,KAMhBG,EAAcH,cAAH,KAeXI,EAAqBJ,cAAH,KAYlBK,EAA0BL,cAAH,KASvBM,EAAYN,cAAF,KAWVO,EAAgBP,cAAH,KAWbQ,EAAqBR,cAAH,KAelBS,EAAiBT,cAAH,KAUdU,EAAmBV,cAAH,K,iBCjEdW,EAtBO,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAWC,EAAmB,EAAnBA,aAUlC,OATAC,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACzBJ,EAAS,CAAEK,KAAM,sBAAwBC,QAAS,CAAEC,GAAIN,EAAaM,QACrE,KACF,OAAO,WACLC,aAAaL,MAEf,IAGA,kBAACM,EAAA,EAAD,CACEC,QAAiC,YAAtBT,EAAaI,KACxBM,MAA6B,UAAtBV,EAAaI,KACpBO,UAAQ,EACRC,UAAa,kBAAMb,EAAS,CAAEK,KAAM,sBAAwBC,QAAS,CAAEC,GAAIN,EAAaM,QAEvFN,EAAaa,UCELC,EAjBO,WAAO,IAAD,EACOC,qBAAWC,GADlB,mBACnBC,EADmB,KACLlB,EADK,KAE1B,OACE,kBAACmB,EAAA,EAAD,CAASC,OAAK,EAAEC,MAAO,CACrBC,MAAO,UACPC,SAAU,QACVC,OAAQ,IACRC,QAAQ,IAEPP,EAAcQ,KAAI,SAAAzB,GAAY,OAC7B,kBAAC,EAAD,CAAc0B,IAAK1B,EAAaM,GAAIN,aAAeA,EAAcD,SAAWA,SCZvEiB,EAAsBW,0BAE7BC,EAAe,GAMRC,EAAsB,SAACC,EAAOC,GACzC,OAAQA,EAAO3B,MACf,IAN8B,mBAO5B,MAAM,GAAN,mBACK0B,GADL,CACY,CACRxB,GAAIwB,EAAME,OAAQ,EAClBnB,QAAUkB,EAAO1B,QAAQQ,QACzBT,KAAM2B,EAAO1B,QAAQD,QAG3B,IAbiC,sBAe/B,OAAO0B,EAAMG,QAAQ,SAAAC,GAAC,OAAIA,EAAE5B,KAAOyB,EAAO1B,QAAQC,MAEpD,QACE,OAAOwB,IAIEK,EAAuB,SAAAC,GAClC,IAAMnB,EAAgBoB,qBAAYR,EAAqBD,GACvD,OACE,kBAACZ,EAAoBsB,SAArB,CAA8BC,MAAStB,GACrC,kBAAC,EAAD,MACCmB,EAAMI,WCkIEC,GA5JU,WAAO,IAAD,EACV1B,qBAAWC,GAAvBjB,EADsB,oBAEvB2C,EAAUC,cAFa,EAGSC,mBAAS,IAHlB,mBAGtBC,EAHsB,KAGTC,EAHS,OAIKF,mBAAS,IAJd,mBAItBG,EAJsB,KAIXC,EAJW,OAKGJ,oBAAS,GALZ,mBAKtBK,EALsB,KAKZC,EALY,OAMFC,mBAASjE,EAAY,CAAEkE,6BAA6B,IAAvEC,EANqB,EAMrBA,QAASC,EANY,EAMZA,KANY,EAWeC,sBAAYlE,EAAiB,CACvEmE,QAAS,SAAC9C,GACRX,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,sBAAsB,6BAAzB,IAAgCH,EAAM+C,SAAarD,KAAM,cAbxF,mBAWtBsD,EAXsB,KAWTC,EAXS,KAqB7B1D,qBAAU,WACR,GAAK0D,EAAqBL,KAAO,CAC/B,IAAMM,EAAUD,EAAqBL,KAAKO,eAC1Cb,EAAcY,GACdE,eAAeC,QAAQ,aAAaC,KAAKC,UAAUL,IAEhDX,GACDiB,aAAaH,QAAQ,aAAaC,KAAKC,UAAUL,IAEnDlB,EAAQyB,KAAR,+BAAqCtB,EAAYN,WAGlD,CAACoB,EAAqBL,OAMzB,IAAMO,EAAc,uCAAG,WAAOO,GAAP,SAAAC,EAAA,sDACrBD,EAAME,iBACNZ,EAAa,CAAEa,UAAU,CAAEjE,GAAGuC,EAAYN,MAAOiC,SAAUzB,KAFtC,2CAAH,sDAShB0B,EAAmBT,KAAKU,MAAMZ,eAAea,QAAQ,eACzD,IAAIF,EAAiB,CACnB,IAAM/C,EAAMwC,aAAaS,QAAQ,cACjCF,EAAmBT,KAAKU,MAAMhD,GAI9BoC,eAAeC,QAAQ,aAAaC,KAAKC,UAAUvC,IAElD+C,GACD/B,EAAQyB,KAAR,+BAAqCM,EAAiBnE,KAMxD,IAAMsE,EAAiB,WAEnB1B,GADED,IAiDN,OAEE,kBAAC4B,EAAA,EAAD,CAAMC,UAAU,SAAS1D,MAAO,CAAE2D,OAAQ,SAAWC,cAAc,UACjE,kBAACH,EAAA,EAAKI,OAAN,CAAa7D,MAAO,CAAE8D,SAAU,MAC9B,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAAM,OAAOP,UAAU,UACrC,kBAACQ,EAAA,EAAD,CAAOC,IAAI,iBADb,4BAGA,kBAACC,EAAA,EAAD,CAAMC,KAAK,QAAQrE,MAAO,CAAE0D,UAAU,QAAWY,SAAU7B,GACzD,kBAAC3C,EAAA,EAAD,CAASyE,UAAQ,EAACC,SAAO,GACpBvC,GACF,kBAACnC,EAAA,EAAD,CAASmC,SAAO,EAAClC,OAAK,KAIrBkC,GAAWC,EAAKuC,aAAevC,EAAKuC,YAAYpE,KAAI,SAAAmC,GAAO,OAAK,kBAAC4B,EAAA,EAAKM,MAAN,CAAY1E,MAAO,CAAE2E,MAAO,OAAQC,MAAM,OAASC,YAAY,QAAUvE,IAAKkC,EAAQtD,IACtJ,kBAAC4F,EAAA,EAAD,CAAQC,MAAOvC,EAAQwC,SAAU7D,MAAOqB,EAAQtD,GAAI+F,QAAUxD,EAAYN,QAAUqB,EAAQtD,GAAIgG,SAAU,SAAClC,EAAM7B,GAAP,OAvB5F,SAAC6B,EAAD,GAA4B,IAAnB7B,EAAkB,EAAlBA,MAAM4D,EAAY,EAAZA,MACvCrD,EAAe,CAAEP,QAAM4D,UAsB8GI,CAAkBnC,EAAM7B,UAIrJ,yBAAKnB,MAAO,CAAE4E,MAAM,UAEnBnD,EAAYN,OAzDK,SAACM,GAC3B,OACE,oCACE,kBAAC2C,EAAA,EAAKgB,MAAN,CACEC,KAAM,aACNlE,MAAOQ,EACPuD,SAAW,gBAAGI,EAAH,EAAGA,OAAH,OAAgB1D,EAAc0D,EAAOnE,QAEhD4D,MAAK,6BAAyBtD,EAAYsD,OAC1CQ,OAAK,EACLC,KAAK,OACLC,aAAa,OACbC,YAAY,WACZ1G,KAAK,aAIP,kBAACoF,EAAA,EAAKuB,SAAN,CAAeN,KAAK,cAAcN,MAAM,4BAA4BE,QAASpD,EAAU+D,QAAWpC,IAClG,kBAACqC,EAAA,EAAD,CAAQN,OAAK,EAAClB,KAAK,QAAQJ,MAAM,QAAjC,0BAuC0B6B,CAAoBrE,KAM9C,kBAACsE,EAAA,EAAD,CAASC,YAAU,GAAnB,MACA,kBAAClG,EAAA,EAAD,CAASyE,UAAQ,EAACC,SAAO,GACvB,kBAACqB,EAAA,EAAD,CAAQpG,QAAQ,0BAA0B+F,KAAK,OAAQnB,KAAK,QAAQJ,MAAM,OAAOsB,OAAK,EAACK,QAAW,kBAAMtE,EAAQyB,KAAK,sB,0+CCtJxH,IAAMkD,GAAmBlI,cAAH,MA4ChBmI,GAAiBnI,cAAH,MAgBdoI,GAAqBpI,cAAH,M,8BCsChBqI,GA/FC,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACvBhF,EAAUC,cADiC,EAEZC,oBAAS,GAFG,mBAE1C+E,EAF0C,KAE9BC,EAF8B,OAIThF,mBAAS,IAJA,mBAI1CiF,EAJ0C,KAI5BC,EAJ4B,KAM3CC,EAAyB,WAC7B,OACE,kBAACC,GAAA,EAAD,CACEC,KAAQN,EACRO,aAAe,yDACfC,cAAe,gCACfC,OAAO,gBACPvH,QAAS,oJACTwH,SAAY,WACVX,EAAcG,GACdD,GAAe,IAGjBU,UAAY,WACVV,GAAe,OAQjBW,EAAkB,SAACC,EAAD,GAAkB,IAAZ/B,EAAW,EAAXA,KAE5B,GAAkB,mBAAfgB,EAGD,OAFAK,EAAgBrB,QAChBmB,GAAe,GAIjBF,EAAejB,IAUjB,OACE,oCACE,kBAACgC,GAAA,EAAD,CAAMC,UAAQ,EAACrD,MAAM,OAAOsD,WAAS,GACnC,kBAACF,GAAA,EAAKG,KAAN,CAAWR,QAAM,GAAjB,6BACA,kBAACK,GAAA,EAAKG,KAAN,CAAWnC,KAAM,kBACfoC,OAAyB,oBAAfpB,EACVT,QAAWuB,IAGb,kBAACE,GAAA,EAAKG,KAAN,CAAWnC,KAAM,mBACfoC,OAAyB,qBAAfpB,EACVT,QAAWuB,IAGb,kBAACE,GAAA,EAAKG,KAAN,CAAWnC,KAAM,iBACfoC,OAAyB,mBAAfpB,EACVT,QAAWuB,IAGb,kBAACE,GAAA,EAAKG,KAAN,CAAWnC,KAAM,cACfoC,OAAyB,gBAAfpB,EACVT,QAAWuB,IASb,kBAACE,GAAA,EAAKA,KAAN,CAAWnH,SAAS,SAClB,kBAAC2F,EAAA,EAAD,CAAQ6B,SAAO,EACbrC,KAAK,kBACLoC,OAAuB,WAAfpB,EACRT,QAxCY,WACpB9C,aAAa6E,WAAW,cACxBjF,eAAeiF,WAAW,cAC1BrG,EAAQyB,KAAK,OAkCP,oBAOJ,kBAAC4D,EAAD,Q,2DCvBSiB,GA/DG,SAAC5G,GACjB,IAAM6G,EAAO7G,EAAM6G,KACnB,OACE,kBAACC,GAAA,EAAD,CACEjB,KAAQ7F,EAAM6F,KACdkB,QAAU,kBAAM/G,EAAMgH,SAAQ,KAE9B,kBAACF,GAAA,EAAM/D,OAAP,uBACA,kBAAC+D,GAAA,EAAMG,QAAP,KACyB,aAArBJ,EAAKK,cACL,kBAACpI,EAAA,EAAQqI,MAAT,CAAenC,YAAU,GACvB,kBAAClG,EAAA,EAAD,CAASC,OAAK,EAACR,SAAS,MAAKyE,GAAKD,KAAlC,WAAkD,kBAACA,EAAA,EAAOqE,UAAR,KAAmBP,EAAKQ,SAASC,eACnF,kBAACxI,EAAA,EAAD,CAASC,OAAK,EAACR,SAAS,SAASyE,GAAKD,KAAtC,WAAsD,kBAACA,EAAA,EAAOqE,UAAR,KAAmBP,EAAKQ,SAASE,SAASlD,QAIpG,kBAACvF,EAAA,EAAD,KACE,kBAACiE,EAAA,EAAD,CAAQC,GAAI,MAAZ,UACA,2BAAI6D,EAAKW,SAGX,kBAAC1I,EAAA,EAAD,KACE,kBAACiE,EAAA,EAAD,CAAQC,GAAI,MAAZ,eACA,2BAAI6D,EAAKY,cAIX,kBAAC3I,EAAA,EAAD,KACE,kBAACiE,EAAA,EAAD,CAAQC,GAAI,MAAZ,kBACA,kBAAClE,EAAA,EAAQqI,MAAT,KACGN,EAAKa,QAAQrI,KAAI,SAACsI,EAAOC,GAAR,OAChB,kBAAC9I,EAAA,EAAD,CAASyE,UAAQ,EAACjE,IAAKsI,EACrB3E,MAAO0E,EAAOE,aAAe7H,EAAM8H,qBAAwB9H,EAAM8H,oBAAsBjB,EAAKa,QAAQ9H,OAAO,IAAMgI,EAAK,QAAQ,QAE9H,kBAAC7E,EAAA,EAAD,CAAQC,GAAG,MAAM2E,EAAOhI,OAAO,kBAACoD,EAAA,EAAOqE,UAAR,KAAmBO,EAAOI,iBACxDJ,EAAOE,aAAe7H,EAAM8H,oBAC7B,kBAACE,GAAA,EAAD,CAAO/E,MAAM,QAAQ1E,SAAS,aAA9B,mCAEEyB,EAAM8H,oBAAsBjB,EAAKa,QAAQ9H,OAAO,IAAMgI,GACvD,kBAACI,GAAA,EAAD,CAAO/E,MAAM,QAAQ1E,SAAS,aAA9B,0BAGAoJ,EAAOM,cCYTC,GApDE,SAAC,GAA2B,IAAzBrB,EAAwB,EAAxBA,KAAOgB,EAAiB,EAAjBA,WAAiB,EACNrH,oBAAS,GADH,mBACnC2H,EADmC,KACvBC,EADuB,KAEpCC,EAAuBC,KAAEC,KAAK1B,EAAKa,QAAS,CAAE,WAAcG,IAClE,OAAQ,oCACN,kBAAC/I,EAAA,EAAD,MAEKuJ,EAAqB1I,OAAO6I,SAAS,iBACtC,kBAACR,GAAA,EAAD,CAAQ3E,KAAK,OAAOtE,OAAK,GAAzB,+BAQgC,aAA/BsJ,EAAqB1I,QAAwD,0BAA/B0I,EAAqB1I,SACpE,oCAAE,kBAACqI,GAAA,EAAD,CAAO3E,KAAK,OAAOJ,MAAM,MAAMlE,OAAK,GAApC,cACA,kBAACiJ,GAAA,EAAD,CAAO/E,MAAM,MAAKI,KAAK,OAAOtE,OAAK,GAAnC,sBAK6B,WAA/BsJ,EAAqB1I,QACtB,kBAACqI,GAAA,EAAD,CAAO/E,MAAM,QAAQI,KAAK,OAAOtE,OAAK,GAAtC,eAIgB,SAAf8H,EAAKW,QAAoBa,GACzB,qCACGA,EAAqB1I,OAAO6I,SAAS,iBACtC,kBAACR,GAAA,EAAD,CAAO3E,KAAK,OAAOtE,OAAK,GAAxB,IAA2BsJ,EAAqB1I,OAAhD,KAEF,kBAACqI,GAAA,EAAD,CAAO/E,MAAM,SAAQI,KAAK,OAAOtE,OAAK,GAAtC,YAICsJ,EAAqB1I,OAAO6I,SAAS,iBAAmB3B,EAAKa,QAAQ9H,OAAS,GACjF,kBAACoI,GAAA,EAAD,CAAOhF,GAAG,IAAIK,KAAK,OAAOuB,QAAW,WACnCwD,GAAc,KADhB,IAEI,kBAACK,GAAA,EAAD,CAAMpE,KAAM,YAFhB,sBAKA,kBAACvF,EAAA,EAAD,CAASE,MAAQ,CAAE,WAAc,EAAE,YAAe,GAAID,OAAK,EAAC2J,SAAO,GAAE7B,EAAKY,YAA1E,QAKF,kBAAC,GAAD,CAAW5B,KAAOsC,EAAYnB,QAAWoB,EAAevB,KAAOA,EAAMiB,mBAAsBD,GAA3F,OCvBYc,GAxBS,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,aAAaf,EAAiB,EAAjBA,WACvC,OAA0B,IAAvBe,EAAaC,MACP,KAGP,oCACE,kBAAC/J,EAAA,EAAD,CAAS0E,SAAO,GAEd,kBAACT,EAAA,EAAD,CAAQE,MAAQ,OAAOD,GAAG,KAAK8F,OAAK,GAApC,IAAuCF,EAAa,GAAG1B,aAAvD,KAEA,kBAAC6B,GAAA,EAAD,KACIT,KAAEjJ,IAAIuJ,GAAa,SAAA/B,GAAI,OACvB,kBAAC,GAAD,CAAUvH,IAAKuH,EAAK3I,GAAI2I,KAAOA,EAAMgB,WAAcA,WCsBhDmB,GAlCW,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,cAAepB,EAAiB,EAAjBA,WAC1C,OAA2B,IAAxBoB,EAAcJ,MACR,KAIP,kBAAC/J,EAAA,EAAD,CAAS0E,SAAO,GACb8E,KAAEjJ,IAAI4J,GAAc,SAACC,EAAUC,GAAX,OACnB,kBAACJ,GAAA,EAAD,CAAgBzJ,IAAM6J,GAEpB,kBAACpG,EAAA,EAAD,CAAQE,MAAQ,OAAOD,GAAG,KAAK8F,OAAK,GAApC,IAAwC,kBAACL,GAAA,EAAD,CAAMpE,KAAO,UAArD,uBAAmF8E,GAGjFb,KAAEjJ,IAAI6J,GAAW,SAACE,EAAMC,GAAP,OACjB,kBAACN,GAAA,EAAD,CAAczJ,IAAK+J,GACjB,kBAACvK,EAAA,EAAD,KACGuK,GAEFf,KAAEjJ,IAAI+J,GAAM,SAAAvC,GAAI,OACf,kBAAC,GAAD,CAAUvH,IAAKuH,EAAK3I,GAAI2I,KAAOA,EAAMgB,WAAYA,iB,UCQlDyB,GA7BO,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACvB,OACE,kBAACzK,EAAA,EAAD,KACE,kBAAC0K,GAAA,EAAD,CAAOC,QAAM,GACX,kBAACD,GAAA,EAAMzG,OAAP,KACE,kBAACyG,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMG,WAAP,cACA,kBAACH,GAAA,EAAMG,WAAP,mBACA,kBAACH,GAAA,EAAMG,WAAP,mBAGJ,kBAACH,GAAA,EAAMI,KAAP,KACGL,EAAWlK,KAAI,SAAAwK,GAAS,OACvB,kBAACL,GAAA,EAAME,IAAP,CAAWpK,IAAKuK,EAAU3L,IACxB,kBAACsL,GAAA,EAAMM,KAAP,KAAaD,EAAUE,MAAM1F,MAC7B,kBAACmF,GAAA,EAAMM,KAAP,KAAaD,EAAUG,UAAUC,UAAU,KAC3C,kBAACT,GAAA,EAAMM,KAAP,KAAaD,EAAUK,QAAQD,UAAU,aCkCxCE,GA7CK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAErB,IAAIA,EACF,OAAM,kBAACtL,EAAA,EAAD,yBAER,IAAMuL,EAAa/B,KAAEgC,QAAQF,EAAWhB,OAAO,SAAAvC,GAAI,OAAIA,EAAKK,gBACtDkC,EAAQd,KAAEiC,UACdF,GAAW,SAACG,EAAIC,GAAL,MACH,aAANA,EACEnC,KAAEoC,MAAML,EAAWM,UAChBL,SAAQ,SAAAM,GAAO,OAAMA,EAAQvD,SAASE,SAASlD,QAC/CkG,WAAW,SAAAhD,GACV,OAAOe,KAAEgC,QAAQ/C,GAAU,SAAAV,GAAI,OAAIA,EAAKQ,SAASC,mBAElDnH,QACFqK,KAIP,OACE,kBAACzB,GAAA,EAAD,KACE,kBAACjK,EAAA,EAAD,CAASC,OAAK,EAACwE,UAAQ,GACrB,kBAACR,EAAA,EAAD,CAAQ8H,QAAS,QAAjB,sBAA4CT,EAAWU,MAAvD,UAAoE,8BAAM,gCAAMV,EAAWJ,UAAUC,UAAU,IAArC,MAA6CG,EAAWF,QAAQD,UAAU,IAA1E,OAC1E,kBAAClH,EAAA,EAAD,CAAQ8H,QAAS,QAAQ7H,GAAG,MAA5B,KAAoCoH,EAAWJ,UAAUC,UAAU,GAAG,GAAG,8BAAM,6BAAMG,EAAW5I,QAAQwC,UAAxG,MAGF,kBAAC,GAAD,CAAeuF,WAAca,EAAWW,eAEvCzC,KAAEjJ,IAAI+J,GAAO,SAAC4B,EAAYC,GACzB,MAAoB,aAAjBA,EACD,kBAAC,GAAD,CAAmB3L,IAAK2L,EAAchC,cAAgB+B,EAAanD,WAAauC,EAAWlM,KAK3F,kBAAC,GAAD,CAAkBoB,IAAO2L,EAAcrC,aAAeoC,EAAanD,WAAauC,EAAWlM,UCpCtFgN,GALC3L,wBAAe,CAC7B4L,gBAAiB,GACjB3J,QAAS,KCWI4J,GAfC,SAAC1L,EAAMC,GACrB,OAAOA,EAAO3B,MACd,IAAK,sBACH,OAAO,2BACF0B,GADL,IACYyL,gBAAiBxL,EAAO1B,UAEtC,IAAK,eACH,OAAO,2BACFyB,GADL,IACY8B,QAAS7B,EAAO1B,UAE9B,QACE,OAAOyB,I,mECLE2L,GAAiB,SAAC,GAAwB,IAAtBtH,EAAqB,EAArBA,MAAS/D,EAAY,4BACVsL,eAAlCC,EAD4C,EAC5CA,cAAcC,EAD8B,EAC9BA,gBAD8B,EAE9BC,aAASzL,GAFqB,mBAE7C0L,EAF6C,KAEtCC,EAFsC,KAIpD,OACE,kBAACvI,EAAA,EAAKM,MAAN,CAAYzE,MAAQ,KACjB8E,GACD,+BAAQA,GAER,kBAAC,iBAAD,eAAgBzF,SAASqN,EAAKC,UAAWD,EAAKrN,OAAkBuN,cAAc,gBAAoBH,EAAW1L,EAA7G,CAAoH8L,eAAgB,mBAAmBC,UAAQ,EAACC,OAAS,WACvKR,EAAgBE,EAAMrH,MAAK,IAC1BH,SAAU,SAAClC,EAAD,GAAsB,IAAb7B,EAAY,EAAZA,MACpBoL,EAAcG,EAAMrH,KAAMlE,IAE5B8L,kBAAkB,KAEjBN,EAAKC,SAAWD,EAAKrN,MACpB,kBAAC0J,GAAA,EAAD,CAAOkE,UAAQ,EAACC,QAAM,GACnBR,EAAKrN,OACC,KAMJ8N,GAAiB,SAAC,GAAwB,IAAtBrI,EAAqB,EAArBA,MAAS/D,EAAY,4BACVsL,eAAlCC,EAD4C,EAC5CA,cAAcC,EAD8B,EAC9BA,gBAD8B,EAE9BC,aAASzL,GAFqB,mBAE7C0L,EAF6C,KAEtCC,EAFsC,KAIpD,OACE,kBAACvI,EAAA,EAAKM,MAAN,CAAYzE,MAAQ,KACjB8E,GACD,+BAAQA,GAER,kBAAC,aAAD,eAAWzF,SAASqN,EAAKC,UAAWD,EAAKrN,OAAkBuN,cAAc,gBAAmBH,EAAW1L,EAAvG,CAA8G+L,UAAQ,EAACC,OAAS,WAC9HR,EAAgBE,EAAMrH,MAAK,IAC1BH,SAAU,SAAClC,EAAD,GAAsB,IAAb7B,EAAY,EAAZA,MACpBoL,EAAcG,EAAMrH,KAAMlE,OAI3BwL,EAAKC,SAAWD,EAAKrN,MACpB,kBAAC0J,GAAA,EAAD,CAAOkE,UAAQ,EAACC,QAAM,GACnBR,EAAKrN,OACC,KAOJ+N,GAAa,SAAC,GAAwB,IAAtBpN,EAAqB,EAArBA,MAASe,EAAY,4BAC3ByL,aAASzL,GADkB,mBACzC0L,EADyC,KACnCC,EADmC,KAEhD,OACE,oCACE,kBAACvI,EAAA,EAAKM,MAAN,CAAYpF,SAASqN,EAAKC,UAAWD,EAAKrN,OAAqBW,MAAOA,GACpE,+BAAQe,EAAMsM,WAAWtM,EAAMsM,WAAW,IAC1C,kBAAClI,GAAA,EAAD,iBAAasH,EAAW1L,IACP,WAAfA,EAAMhC,MAAqB2N,EAAKC,SAAWD,EAAKrN,OAClD,kBAAC0J,GAAA,EAAD,CAAOkE,UAAQ,EAACC,QAAM,GACnBR,EAAKrN,UAcHiO,GAAmB,SAAC,GAAyC,IAAvCxI,EAAsC,EAAtCA,MAAM3D,EAAgC,EAAhCA,SAAS6D,EAAuB,EAAvBA,QAAWjE,EAAY,+CACvE,OACE,kBAAClB,EAAA,EAAD,CACEE,MAAQ,CAAEwN,QAAQvI,EAAQ,QAAQ,iBAClC,kBAACU,GAAA,EAAD,eAAUV,QAASA,GAAajE,EAAhC,CAAuCyM,QAAM,KAC7C,2BAAOzN,MAAO,CAAEwN,QAAS,eAAiBE,WAAY,MAAO9J,cAAe,UAA5E,IAAyFmB,EAAM4I,cAA/F,KACCvM,IAIMwM,GAAgB,SAAC,GAAuB,EAArB7I,MAAsB,IAAb/D,EAAY,4BAC9ByL,aAASzL,GADqB,mBAC5C0L,EAD4C,KACtCC,EADsC,KAEnD,OACE,kBAACvI,EAAA,EAAKyJ,SAAN,eAAgBvO,MAAUqN,EAAKC,SAAWD,EAAKrN,OAAWoN,EAAW1L,KCtF5D8M,GAAa,SAACC,GACzB,IAAIA,EACF,OAAO,KAET,GAAGC,MAAMD,GAAc,CAWrB,OAVqB,CACnB,uIAE8BE,WAAU,SAACC,GACzC,QAAIH,EAAaI,MAAMD,OAQzB,KAAK,EACH,IAAME,EAASL,EAAaM,MAAM,KAC5BC,EAAMF,EAAO,GACbG,EAAMH,EAAO,GAEbI,EAAYF,EAAKD,MAAM,KACvBI,EAAYF,EAAKF,MAAM,KAAK,GAAGA,MAAM,KAE3C,OAAOG,EAAU,GAAG,IAAIA,EAAU,GAAG,IAAIA,EAAU,GAAI,IAAKC,EAAU,GAAI,IAAKA,EAAU,GAG3F,QACE,OAAO,MAIX,IAAMH,EAAO,IAAII,KAAKX,GACtB,MAAM,GAAN,OAAYO,EAAKK,UAAWC,WAAWC,SAAS,EAAE,GAAlD,aAAyDP,EAAKQ,WAAW,GAAGF,WAAWC,SAAS,EAAE,GAAlG,YAAwGP,EAAKS,cAA7G,YAA+HT,EAAKU,WAAYJ,WAAWC,SAAS,EAAE,GAAtK,YAA6KP,EAAKW,aAAcL,WAAWC,SAAS,EAAE,KAY3MK,GAAc,SAACZ,EAAMa,EAAUC,EAAOC,GACjD,IAAIf,EACF,OAAO,KAET,IAAIgB,EACJ,GAAIC,oBAASjB,GASXgB,EAAQ,IAAIZ,KAAKJ,OATA,CACjB,IAAMkB,EAAgBlB,EAAKD,MAAM,KAC3BoB,EAAYD,EAAc,GAAGnB,MAAM,KACnCqB,EAAO,UAAKD,EAAU,GAAf,YAAqBA,EAAU,GAA/B,YAAqCA,EAAU,GAA/C,YAAqDD,EAAc,IAEhFF,EAAQZ,KAAKpL,MAAMoM,GAOrB,OAAQN,GACR,IAAK,IACH,GAAiB,QAAdC,EAAqB,OAAQvB,GAAYwB,EAAoB,GAAXH,EAAgB,GAAK,GAAK,KAC/E,GAAiB,QAAdE,EAAqB,OAAQvB,GAAYwB,EAAoB,GAAXH,EAAgB,GAAK,GAAK,KAC/E,MACF,IAAK,IACH,GAAiB,QAAdE,EAAqB,OAAOvB,GAAYwB,EAAoB,GAAXH,EAAgB,GAAK,KACzE,GAAiB,QAAdE,EAAqB,OAAQvB,GAAYwB,EAAoB,GAAXH,EAAgB,GAAK,KAC1E,MACF,IAAK,IACH,GAAiB,QAAdE,EAAqB,OAAOvB,GAAYwB,EAAoB,GAAXH,EAAgB,KACpE,GAAiB,QAAdE,EAAqB,OAAQvB,GAAWwB,EAAoB,GAAXH,EAAgB,KACpE,MACF,QACE,OAAOrB,GAAWwB,KASTK,GAAS,SAACC,GACrB,IAAIN,EACJ,GAAIC,oBAASK,GAQXN,EAAQ,IAAIZ,KAAKkB,OARM,CACvB,IAAMJ,EAAgBI,EAAWvB,MAAM,KACjCoB,EAAYD,EAAc,GAAGnB,MAAM,KACnCqB,EAAO,UAAKD,EAAU,GAAf,YAAqBA,EAAU,GAA/B,YAAqCA,EAAU,GAA/C,YAAqDD,EAAc,IAAM,KAAzE,YAAqG,KAAnBA,EAAc,IAE7GF,EAAQZ,KAAKpL,MAAMoM,GAMrB,OAAOJ,GAIIO,GAAe,SAACC,GAC3B,IAAIC,EAAM,IAAIrB,KAAKoB,EAAGE,WAClBC,GAAQH,EAAGI,SAAW,GAAK,EAC/BH,EAAII,QAAQJ,EAAIpB,UAAYsB,EAAO,GACnC,IAAIG,EAAgBL,EAAIC,UAMxB,OALAD,EAAIM,SAAS,EAAG,GACK,IAAjBN,EAAIG,UAENH,EAAIM,SAAS,EAAG,GAAM,EAAIN,EAAIG,SAAY,GAAK,GAE1C,EAAII,KAAKC,MAAMH,EAAgBL,GAAO,SASlCS,GAAkB,SAACC,EAAEC,GAChC,IAAMC,EAAkB,IAAIjC,KAAKA,KAAKkC,IAAIF,EAAE,EAAE,EAAW,GAAND,EAAE,KAC/CI,EAAYF,EAAgBT,SAE9BY,EAAeH,EAMnB,OALGE,GAAY,EACbC,EAAaX,QAAQQ,EAAgBhC,UAAYgC,EAAgBT,SAAS,GAE1EY,EAAaX,QAAQQ,EAAgBhC,UAAU,EAAIgC,EAAgBT,UAE9DY,GAgBIC,GAAe,SAACC,GAY3B,OAXe,IAAIC,MAAM,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAAS,YAAY,UAAU,WAAW,YAAa,CACxIC,IADwI,SACpI5L,EAAQ6L,GAOV,OANKnD,MAAMmD,KACTA,EAAOC,SAASD,EAAM,KACX,IACTA,GAAQ7L,EAAO1E,QAGZ0E,EAAO6L,MAGJH,IAOHK,GAAkB,SAAClC,GAE1BA,IACFA,EAAW,GAGb,IACMmC,GADQ,IAAI5C,MACSI,WAQ3B,OANgB,YAAI,IAAIyC,MAAMpC,IAAW9O,KAAI,SAACmR,EAAE5I,GAC9C,MACE,CAAEtI,IAAIsI,EACJ6I,KAAMV,GAAaO,EAAa1I,GAChCzH,MAAQmQ,EAAc1I,EAAI,EAAI,GAAK0I,EAAc1I,EAAK0I,EAAc1I,OAM/D8I,GAAiB,SAACvC,GAEzBA,IACFA,EAAW,GAWb,IATA,IAAMwC,EAAQ,IAAIjD,KACZ4C,EAAeK,EAAM7C,WACvB8C,EAAQD,EAAM5C,cACZ8C,EAAkBhC,GAAe,IAAInB,KAAKkD,EAAM,EAAE,GAAG,KACrDE,EAAmBjC,GAAc,IAAInB,KAAKkD,EAAON,EAAenC,EAAU,IAE5E4C,EAAU,GAEVC,EAHcnC,GAAc8B,GAIxBK,IAASF,EAAgB,GAAI,CACnC,IAAMG,EAAS,CAAE3R,IAAK0R,EAAMP,KAAMO,EAAM7Q,MAAO6Q,GAC/CD,EAAQhP,KAAMkP,GAEF,KADZD,GAAa,KAEXA,EAAOH,GAGX,OAAOE,GAWIG,GAAgB,SAACC,EAAUC,GAEtC,IAAIC,EACEV,EAAQ,IAAIjD,KAElB,GAAe,SAAZyD,EAAoB,CAErB,IAAMG,EAAczC,GAAc8B,GAIlC,GAHIS,EAASE,IACXD,EAAOV,EAAM5C,cAAe,GAE3BqD,GAAUE,EAEXD,EADsB,IAAI3D,KAAM,IAAIA,KAAKiD,GAAQxB,QAAQwB,EAAMhD,UAAYgD,EAAMzB,UAA+B,IAAnByB,EAAMzB,UAAkB,EAAE,KAClGnB,cAGvB,OAAOsD,EAIT,OACEA,EADa,UAAZF,GAAuBC,EAAST,EAAM7C,WAChC6C,EAAM5C,cAAe,EAIvB4C,EAAM5C,eCtMFwD,GAA0B,SAACxH,GAEtC,IAAIzL,EACJ,GAAIyL,EAcJ,OARIA,EAAM1F,OACR/F,EAAK,2BAAQA,GAAR,IAAe,KAAO,4BAK7BA,EAAK,2BAAQA,GAASkT,GAAqBzH,EAAMC,UAAUD,EAAMG,WAMtDsH,GAAuB,SAACxH,EAAUE,EAAQuH,GAErD,IAAInT,EA8DJ,OA1DI0L,IACF1L,EAAK,2BAAQA,GAAR,IAAe,UAAY,4BAK9B4L,IACF5L,EAAK,2BAAQA,GAAR,IAAgB,QAAU,0BAM7B0L,EAAUmD,MAAM,mGAClB7O,EAAK,2BAAQA,GAAR,IAAgB,UAAY,qDAM/B4L,EAAQiD,MAAM,mGAChB7O,EAAK,2BAAQA,GAAR,IAAgB,QAAU,oDAM5BmT,GAAa9C,GAAO3E,GAAc,OAAoB0D,KAAKgE,QAC9DpT,EAAK,2BAAQA,GAAR,IAAgB,UAAY,+CAGhCmT,GAAa,IAAI/D,KAAK+D,GAAW9D,YAAc,IAAID,KAAKiB,GAAO3E,IAAY2D,YAC5ErP,EAAK,2BAAQA,GAAR,IAAgB,UAAY,2BAAZ,OAAuCwO,GAAW,IAAIY,KAAK+D,IAAYpE,MAAM,KAAK,OAOrGsB,GAAO3E,IAAc2E,GAAOzE,KAC9B5L,EAAK,2BAAQA,GAAR,IAAgB,UAAY,6CAO/BqQ,GAAO3E,GAAa0D,KAAKgE,QAC3BpT,EAAK,2BAAQA,GAAR,IAAgB,UAAY,oCAM/BqQ,GAAOzE,GAAWwD,KAAKgE,QACzBpT,EAAK,2BAAQA,GAAR,IAAgB,QAAU,kCAG1BA,GAyCHqT,GAAoB,SAAC9K,GACzB,IAAIvI,EAAQ,KAwBZ,MApBmB,aAAhBuI,EAAKW,SAIFX,EAAKlH,QAA0B,gBAAhBkH,EAAKlH,SAEtBrB,EAAK,2BAAQA,GAAR,IAAeqB,OAAO,mEAI3BkH,EAAKW,QAAWX,EAAKlH,SACvBrB,EAAK,2BAAQA,GAAR,IAAeqB,OAAQ,gDAMzBkH,EAAKY,aAA2C,KAA5BZ,EAAKY,YAAYmK,SACxCtT,EAAM,2BAAMA,GAAP,IAAamJ,YAAY,iCAEzBnJ,GAKIuT,GAAgB,SAACC,GAE5B,OAAIA,EAGAA,EAAM3E,MAAM,wCAAhB,EACS,yBAHA,qBASE4E,GAAe,SAAC1N,GAE3B,OAAIA,GAAsB,KAAdA,EAAKuN,KACdvN,EAAKzE,OAAS,EACR,8CADT,EADqC,yBC9MxBoS,GAbM,SAAC,GAAD,IAAG3N,EAAH,EAAGA,KAAK6H,EAAR,EAAQA,SAAR,OACnB,kBAAC,KAAD,CACE7H,KAAMA,IACL,YAAe,IAAZ4N,EAAW,EAAXA,KAEI3T,EAAQ4T,aAAMD,EAAKE,OAAQ9N,GAEjC,OADc6N,aAAMD,EAAKrG,QAASvH,IAClB/F,GAA0B,kBAAVA,EAC9B,kBAAC0J,GAAA,EAAD,CAAOkE,SAAUA,EAAUlN,MAAO,CAAE2D,OAAO,eAAgBM,MAAM,MAAOlE,OAAK,GAAET,GAAiB,S,66ECXjG,IAAM8T,GAAiBrV,cAAH,MAsBdsV,GAAmBtV,cAAH,MAoDhBuV,GAAoBvV,cAAH,MAkBjBwV,GAAmBxV,cAAH,MAUhByV,GAAwBzV,cAAH,MCoInB0V,GAjOS,SAAC,GAA2E,IAAzEzL,EAAwE,EAAxEA,QAAQnB,EAAgE,EAAhEA,KAAM6M,EAA0D,EAA1DA,UAAWC,EAA+C,EAA/CA,YAAaC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,eAAqB,EAE3DvH,eAA/BwH,EAF0F,EAE1FA,aAAavH,EAF6E,EAE7EA,cAF6E,EAItDpK,sBAAYiR,IAJ0C,mBAI1FW,EAJ0F,YAIhF9R,EAJgF,EAIhFA,QAAS3C,EAJuE,EAIvEA,MAAO4C,EAJgE,EAIhEA,KAE3B8R,EAAiBF,EAAa,GAAD,OAAIJ,EAAJ,eAA2BvS,MACxD8S,EAAeH,EAAa,GAAD,OAAIJ,EAAJ,aAAyBvS,MACpD+S,EAAUJ,EAAa,GAAD,OAAIJ,EAAJ,WAAuBvS,MAR8C,EAS1DK,mBAAS,IATiD,mBAS1F2S,EAT0F,KAS7EC,EAT6E,OAUlE5S,mBAAS,IAVyD,mBAU1F6S,EAV0F,KAUjFC,EAViF,OAWlE9S,mBAAS,IAXyD,mBAW1F4B,EAX0F,KAWjFmR,EAXiF,OAYhE/S,mBAASwS,GAZuD,mBAY1FhJ,EAZ0F,KAYhFwJ,EAZgF,OAapEhT,mBAASyS,GAb2D,mBAa1F/I,EAb0F,KAalFuJ,EAbkF,QActEjT,mBAAS0S,GAd6D,qBAc1FQ,GAd0F,MAcnFC,GAdmF,MAgBjG9V,qBAAU,WACR2V,EAAaR,GACbS,EAAWR,KACX,CAACA,EAAcD,IAGjBnV,qBAAW,WAENS,GACD8U,EAAgB,CAAEpV,KAAM,QAASqD,QAAQ,UAAD,OAAW/C,EAAM+C,WAKxDH,GAAiC,MAAzBA,EAAK0S,mBAEXhB,GACDD,IACAE,GAAe,GACf7L,GAAQ,KAGRuE,EAAc,GAAD,OAAImH,EAAJ,cAA0BxR,EAAK0S,iBAAiB5J,WAC7DuB,EAAc,GAAD,OAAImH,EAAJ,YAAwBxR,EAAK0S,iBAAiB1J,SAC3DqB,EAAc,GAAD,OAAImH,EAAJ,eAA2BxR,EAAK0S,iBAAiBzT,OAC9D6G,GAAQ,OAYZ,CAAC1I,EAAO4C,IAEV,IAAM2S,GAAM,uCAAG,WAAOC,GAAP,eAAA7R,EAAA,6DAEb8R,EAAc,CAAE/J,UAAU8J,EAAO9J,UAAWE,QAAS4J,EAAO5J,QAAS8J,MAAOF,EAAOJ,OAAQL,SAAUA,EAAUjR,SAAUA,EAAU6R,iBAAkBrB,EAAY,SAAS,SAAS1U,GAAG4U,EAAa,GAAD,OAAIJ,IAAavS,MAAMjC,IAF5M,SAGP6U,EAAQ,CAAE5Q,UAAU4R,IAHb,2CAAH,sDAoBZ,OAAG9S,EACK,kBAACiT,GAAA,EAAD,CAAQzN,QAAM,EAACH,UAAQ,GAC3B,kBAAC6N,GAAA,EAAD,CAAQ1N,QAAM,EAACH,UAAQ,GAAvB,cAKF,kBAACQ,GAAA,EAAD,CACEsN,WAAS,EACTC,eAAe,EACfC,oBAAoB,EACpBzO,KAAQA,EACRkB,QAAU,WAERqM,GAAgB,GAChBpM,GAAQ,IACVuN,OAAS,kBAAMvN,GAAS,KAExB,kBAACF,GAAA,EAAM/D,OAAP,KAAe+P,EAAa,GAAD,OAAIJ,EAAJ,UAAsBvS,MAAjD,KACA,kBAAC2G,GAAA,EAAMG,QAAP,KACGkM,IAjCDA,EAEF,kBAAC/U,EAAA,EAAD,CACEC,QAAiC,YAAtB8U,EAAanV,KACxBM,MAA+B,UAAtB6U,EAAanV,KACtBQ,UAAa,kBAAM4U,EAAgB,MAHrC,IAKGD,EAAa9R,SAPO,MAoCrB,kBAAC,KAAD,CACEmT,oBAAkB,EAClBC,cAAiB,CACfzK,UAAWA,EACXE,QAASA,EACTwJ,OAAQA,GACRL,SAAS,GACTjR,SAAS,GACT0P,MAAM,GACN4C,SAAS,GACTC,WAAW,IAGbC,SAAY,SAAAd,GACV,IAAI3B,EAAS,GAEb,OADAA,EAAM,2BAAQA,GAAUX,GAAqBsC,EAAO9J,UAAU8J,EAAO5J,WAIvE5G,SAAY,SAACwQ,GAEXD,GAAOC,MAOR,gBAAGe,EAAH,EAAGA,aAAH,OAEC,kBAACzR,EAAA,EAAD,CAAMC,KAAK,QAAQC,SAAauR,GAC9B,kBAACzR,EAAA,EAAK+D,MAAN,KAEE,kBAAE,GAAF,CACEpD,MAAO,aACP+H,eAAiB,mBACjBzH,KAAM,YACNyQ,QAAW5G,GAAYR,KAAKgE,MAAM,GAAG,IAAI,OACzCqD,QAAU7G,GAAYR,KAAKgE,MAAM,GAAG,IAAI,OACxCxN,SAAY,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACfqT,EAAarT,MAKjB,kBAAE,GAAF,CACE4D,MAAQ,WACR+H,eAAiB,mBACjBzH,KAAK,UACLyQ,QAAWhI,GAAWY,KAAKgE,OAC3BqD,QAAU7G,GAAYlE,EAAU,GAAG,IAAI,OACvC9F,SAAY,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACfsT,EAAWtT,MAGf,kBAAC,GAAD,CACEmM,WAAY,QACZvI,MAAQ,WACRiR,cAAc,eACd3Q,KAAM,SACNrG,KAAK,SACLiX,IAAI,IACJ/Q,SAAY,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACfwT,GAAUxT,OAQhB,kBAAC4C,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAAM,MAAMP,UAAU,UACnCkQ,EAAY,uCAAyC,oCAKxD,oCACE,kBAAC9T,EAAA,EAAD,KAEE,kBAAC2D,EAAA,EAAD,CAAMyS,QAAS,EAAG3O,WAAS,GACzB,kBAACxB,EAAA,EAAD,CAASoQ,UAAQ,GAAjB,MACA,kBAAC1S,EAAA,EAAKiH,IAAN,CAAU9G,cAAc,UACtB,kBAACH,EAAA,EAAKI,OAAN,KACE,kBAACJ,EAAA,EAAKiH,IAAN,CAAU1K,MAAO,CAAE0D,UAAU,WAC3B,kBAACK,EAAA,EAAD,CAAQC,GAAI,KAAKwB,MAAI,GACnB,kBAACiE,GAAA,EAAD,CAAMpE,KAAK,sBADb,oBAKF,kBAAC5B,EAAA,EAAKiH,IAAN,KACE,kBAACtG,EAAA,EAAK+D,MAAN,KACE,kBAAC/D,EAAA,EAAKgB,MAAN,CAAYL,MAAM,WAAWG,SAAW,SAACkC,EAAD,OAAKjG,EAAL,EAAKA,MAAL,OAAiBmT,EAAYnT,MACrE,kBAACiD,EAAA,EAAKgB,MAAN,CAAYL,MAAO,WAAW/F,KAAK,WAAWkG,SAAW,SAACkC,EAAD,OAAKjG,EAAL,EAAKA,MAAL,OAAiBoT,EAAYpT,OAExF,kBAACiD,EAAA,EAAKM,MAAN,CAAY1E,MAAO,CAAE0D,UAAU,WAC7B,kBAACmC,EAAA,EAAD,CAAQ7G,KAAK,SAAS0I,SAAO,GAA7B,aAKN,kBAACjE,EAAA,EAAKI,OAAN,CAAaH,UAAU,UACrB,kBAACD,EAAA,EAAKiH,IAAN,KACE,kBAAC3G,EAAA,EAAD,CAAQyB,MAAI,GACV,kBAACiE,GAAA,EAAD,CAAMpE,KAAK,UAAUhB,KAAK,YAD5B,eAKF,kBAACZ,EAAA,EAAKiH,IAAN,KAAU,kBAAC7E,EAAA,EAAD,CAAQ6B,SAAO,GAAf,qBC5InB0O,GArEG,SAAC,GAA6C,IAA3CrL,EAA0C,EAA1CA,MAAM2I,EAAoC,EAApCA,UAAUoB,EAA0B,EAA1BA,OAAOuB,EAAmB,EAAnBA,MAAMC,EAAa,EAAbA,OAAa,EACrC9U,oBAAS,GAD4B,mBACtDqF,EADsD,KAChDmB,EADgD,OAEvBxG,oBAAS,GAFc,mBAEtDoS,EAFsD,KAEzCC,EAFyC,KAI7D,OAAI9I,EAEF,kBAACjL,EAAA,EAAD,KACGiL,EAAMwL,YACP,kBAACvN,GAAA,EAAD,CAAOzJ,SAAS,WAAW8E,KAAK,OAAOtE,OAAK,EAACkE,MAAM,QAAnD,eACA,kBAACG,EAAA,EAAK+D,MAAN,KACE,kBAAC,GAAD,CAAalI,MAAQ,EAAGuW,SAAYzL,EAAMwL,WAAalR,KAAI,UAAKqO,EAAL,WAC3D,kBAAE,GAAF,CACE8C,SAAazL,EAAMwL,aAAexL,EAAM0L,SACxCX,QAAW5G,GAAYR,KAAKgE,MAAM,GAAG,IAAI,OACzCqD,QAAU7G,GAAYR,KAAKgE,MAAM,GAAG,IAAI,OACxCrN,KAAI,UAAOqO,EAAP,gBAEN,kBAAE,GAAF,CACE8C,SAAYzL,EAAMwL,aAAgBxL,EAAM0L,SACxCX,QAAWhI,GAAWY,KAAKgE,OAC3BqD,QAAU7G,GAAY4F,EAAO9J,UAAU,GAAG,IAAI,OAC9C3F,KAAI,UAAOqO,EAAP,cAEN,kBAAC,KAAD,CAAO1U,KAAK,SAASmC,MAAM,GAAGkE,KAAI,UAAKqO,EAAL,iBAClC,kBAAC,KAAD,CAAO1U,KAAK,SAASmC,MAAM,GAAGkE,KAAI,UAAKqO,EAAL,YAElC,kBAAC7N,EAAA,EAAD,CACE7F,MAAO,CAAE2D,OAAO,eAChB3E,KAAK,SACL0X,UAAQ,EACRlR,KAAK,SACLzF,OAAK,EACL6F,QAAW,WACTiO,GAAe,GACf7L,GAAQ,MAKZ,oCACE,kBAACnC,EAAA,EAAD,CACE7F,MAAO,CAAE2D,OAAO,eAChB3E,KAAK,SACLsI,UAAQ,EACRrD,MAAM,MACNI,KAAK,QACLuB,QAAW,WACToC,GAAQ,KAPZ,aAcJ,kBAAC,GAAD,CACEA,QAASA,EACTnB,KAAMA,EACNmE,UAAY8J,EAAO6B,OAAON,GAAOrL,UACjCE,QAAU4J,EAAO6B,OAAON,GAAOnL,QAC/BwJ,OAAUI,EAAO6B,OAAON,GAAOrB,MAC/BtB,UAAaA,EACbE,YAAeA,EACfC,eAAiBA,EACjBF,YAAe,kBAAM2C,EAAOD,OA3DhB,MC8BLO,GAnCI,SAAC,GAA8B,IAA5B9B,EAA2B,EAA3BA,OAAQ+B,EAAmB,EAAnBA,aAE5B,OACE,oCACE,kBAAC,KAAD,CAAYxR,KAAK,WACd,gBAAGiR,EAAH,EAAGA,OAAH,EAAWvT,KAAX,EAAiB+T,QAAjB,OACC,kBAAC,WAAD,KACE,kBAAC/S,EAAA,EAAD,CAAQC,GAAG,MAAX,UACA,kBAAClE,EAAA,EAAQqI,MAAT,KACI2M,EAAO6B,OAAO/V,OAAQ,GAAKkU,EAAO6B,OAAOtW,KAAI,SAAC0K,EAAMsL,GAAP,OAC7C,kBAAC,GAAD,CACE/V,IAAK+V,EACLA,MAAQA,EACRtL,MAAOA,EACP2I,UAAS,iBAAY2C,GACrBvB,OAASA,EACTwB,OAASA,QAKf,kBAACzQ,EAAA,EAAD,CAAQ7G,KAAK,SAASwG,MAAI,EACxBkC,SAAO,EAAC9B,QAAU,kBAChBiR,GAAa,KACiD,kBAAEpN,GAAA,EAAF,CAAOpE,KAAK,gBAH9E,SAfF,KAkB+G,kBAAC,GAAD,CAAcA,KAAK,SAAS6H,SAAS,eCyM/I6J,GA/NS,SAAC,GAAoD,IAAlDhS,EAAiD,EAAjDA,MAAMiS,EAA2C,EAA3CA,SAASC,EAAkC,EAAlCA,SAAkB5R,GAAgB,EAAzBjE,SAAyB,EAAhBiE,MAAKwC,EAAW,EAAXA,KAAW,EACJyE,eAA9DC,EADkE,EAClEA,cAAc2K,EADoD,EACpDA,cAAc1K,EADsC,EACtCA,gBAAiBsH,EADqB,EACrBA,aADqB,EAEtCtS,oBAAS,GAF6B,mBAEnE2H,EAFmE,KAEvDC,EAFuD,OAQxB5H,oBAAS,GARe,mBAQnE2V,EARmE,KAQhDC,EARgD,KAUpEC,EAAaH,EAAc,GAAD,OAAI7R,EAAJ,YAAmBlE,MAC7CmW,EAAaJ,EAAc,GAAD,OAAI7R,EAAJ,YAAmBlE,MAC7CoW,EAAaL,EAAc,GAAD,OAAI7R,EAAJ,aAAoBlE,MAE9CqW,EAAoB,SAACpQ,EAAEjG,GAC3BiG,EAAElE,iBACFqJ,EAAc,GAAD,OAAIlH,EAAJ,WAAkBlE,GAC5BgW,IAAsBI,GACvBE,KA2DEA,EAAc,WAClB,GAAGN,EAAkB,CACnB,IAAMO,EAAOH,EAAU3E,OACvBwE,GAAqB,GACrB7K,EAAc,GAAD,OAAIlH,EAAJ,YAAmBqS,QAEhCN,GAAqB,IAKnBO,EAAgB,WACpB,IAAMC,EAAiB,kBAAC5O,GAAA,EAAD,CAAQ3E,KAAK,OAAOtE,OAAK,GAAzB,8BACjB8X,EAAaN,GAAaA,EAAU3E,OACxC,kBAAC5J,GAAA,EAAD,CAAO3E,KAAK,OAAOtE,OAAK,EAACkE,MAAM,OAAOD,GAAG,IAAI4B,QAAW,WACnDyR,GAA6B,gBAAfA,GACfI,MAFJ,gBAIuB,GAGzB,OACE,yBAAKzX,MAAO,CAAEI,QAAQ,mBACnBwX,EACAC,EACAZ,GAA2B,aAAfK,IAA8BD,GACrC,kBAACrO,GAAA,EAAD,CAAO3E,KAAK,OAAOtE,OAAK,EAACkE,MAAM,OAA/B,oBACLoT,GACF,oCACE,kBAACrO,GAAA,EAAD,CAAO3E,KAAK,OAAOtE,OAAK,EAACkE,MAAM,SAAUoT,EAAzC,KACA,kBAACrO,GAAA,EAAD,CAAOhF,GAAG,IAAIK,KAAK,OAAOtE,OAAK,EAACkE,MAAM,SACpC2B,QAAW,SAACwB,GAAD,OArClBmF,EAAc,GAAD,OAAIlH,EAAJ,WAAkB,SAC5BkS,GACDH,GAAqB,MAkClB,IACyC,kBAAC3N,GAAA,EAAD,CAAMpE,KAAK,SADpD,mBAUP,OACE,oCACE,kBAACU,EAAA,EAAD,MACCkR,GACA,kBAACU,EAAD,MAGD,kBAACvT,EAAA,EAAK+D,MAAN,CAAYnI,MAAO,CAAE8X,aAAa,QAGhC,2BAAO9X,MAAO,CAAEwN,QAAS,eAAgBpN,QAAS,4BAA6BH,MAAM,aAAe8E,EAAM,GAE1G,kBAAC,GAAD,CAAgBM,KAAI,UAAMA,EAAN,gBAA0BmR,SAAUS,EAAUc,KAAM,IAAI9X,MAAM,OAElF,kBAAC4F,EAAA,EAAD,CACE7G,KAAK,SACL0X,UAAQ,EACRlR,KAAK,SACLxF,MAAQ,CAAEgY,WAAYf,EAAS,SAAS,GAAGtT,OAAO,eAClD5D,OAAK,EACL6F,QAAW,SAACwB,GAAD,OAtIO,SAAEA,GAC1BA,EAAElE,iBACF8T,IAoIwBiB,CAAkB7Q,QAMtC6P,GACF,yBAAKjX,MAAO,CAAEI,QAAQ,gBACpB,kBAAC,GAAD,CAAciF,KAAI,UAAOA,EAAP,WAAsB6H,SAAS,UACjD,kBAAC9I,EAAA,EAAK+D,MAAN,KACE,kBAAC/D,EAAA,EAAKuB,SAAN,CACEV,QAA0B,WAAfoS,EACXtS,MAAM,SAASG,SAAY,SAACkC,EAAD,UA9GJ,SAACA,EAAEnC,GAClCuH,EAAgB,GAAD,OAAInH,EAAJ,iBAAuB,GAClCyO,EAAa,GAAD,OAAIzO,EAAJ,iBAAwB/F,MAQtCkN,EAAgB,GAAD,OAAInH,EAAJ,iBANbkH,EAAc,GAAD,OAAIlH,EAAJ,WADZJ,EAC8B,SAEA,IAwGmBiT,CAAyB9Q,EAA5C,EAAKnC,YAClC,kBAACb,EAAA,EAAKuB,SAAN,CACEV,QAA0B,aAAfoS,GAA6C,SAAfA,EACzCtS,MAAM,eAAeG,SAAY,SAACkC,EAAD,UAlIX,SAACA,EAAEnC,GACjCuH,EAAgB,GAAD,OAAInH,EAAJ,iBAAuB,GAClCyO,EAAa,GAAD,OAAIzO,EAAJ,iBAAwB/F,MAWtCkN,EAAgB,GAAD,OAAInH,EAAJ,iBAPbkH,EAAc,GAAD,OAAIlH,EAAJ,WAFZJ,EAE8B,OAGA,IAyHyBkT,CAAwB/Q,EAA3C,EAAKnC,YACxC,kBAACb,EAAA,EAAKuB,SAAN,CACEZ,MAAM,kBACNE,QAAyB,aAAfoS,EACVnS,SAAY,SAACkC,EAAD,UAtGW,SAACA,EAAEnC,GAClCuH,EAAgB,GAAD,OAAInH,EAAJ,iBAAuB,GAClCyO,EAAa,GAAD,OAAIzO,EAAJ,iBAAwB/F,MAQtCkN,EAAgB,GAAD,OAAInH,EAAJ,iBANbkH,EAAc,GAAD,OAAIlH,EAAJ,WADZJ,EAC8B,WAEA,QAgGImT,CAA0BhR,EAA7C,EAAKnC,cAKtBgS,GAA4B,WAAfI,GAA0C,aAAfA,GAGzC,yBAAKrX,MAAO,CAAEqY,OAAO,8BACnB,kBAACrP,GAAA,EAAD,CAAOhJ,MAAO,CAAEsY,gBAAgB,cAAcrU,MAAM,WAAaD,GAAG,IAAIK,KAAK,SAAUuB,QAAW,WAChGwD,GAAc,KADhB,0BAE0B,kBAACK,GAAA,EAAD,CAAO8O,MAAI,EAAClT,KAAM,YAF5C,KAIA,kBAAC,GAAD,CAAWwB,KAAOsC,EAAYnB,QAAWoB,EAAevB,KAAOA,GAA/D,KAEA,kBAAC,GAAD,CAAcxC,KAAI,UAAOA,EAAP,WAAsB6H,SAAS,UACjD,6BACE,kBAACrH,EAAA,EAAD,CAAQxB,KAAK,OACXrF,KAAK,SACL4G,QAAW,SAACwB,GAAD,OAAOqQ,EAAYrQ,KAFhC,IAEsC+P,EAAkB,aAAeI,EAAU,aAAa,aAC9F,kBAAC1R,EAAA,EAAOsC,MAAR,CAAc9D,KAAK,QACjB,kBAACwB,EAAA,EAAD,CAAQ7G,KAAK,SACXqF,KAAK,OAAOmU,UAAQ,EACpBrX,MAAO,SACPyE,QAAW,SAACwB,EAAD,OAAKjG,EAAL,EAAKA,MAAL,OAAiBqW,EAAkBpQ,EAAEjG,KAHlD,cAKA,kBAAC0E,EAAA,EAAO4S,GAAR,CAAWpU,KAAK,SAChB,kBAACwB,EAAA,EAAD,CAAS7G,KAAK,SACZqF,KAAK,OAAOqU,UAAQ,EACpBvX,MAAO,WACPyE,QAAW,SAACwB,EAAD,OAAKjG,EAAL,EAAKA,MAAL,OAAiBqW,EAAkBpQ,EAAEjG,KAHlD,gCAUN,kBAAC,GAAD,CAAe4W,KAAK,IAClBvB,YAAYa,GAA6B,gBAAfA,GAC1BsB,QAAUxB,EACVnX,MAAQ,CAAE4Y,cAAc,WAAWP,OAAO,6BAC1ChT,KAAI,UAAKA,EAAL,YACJpF,MAAM,KACNiF,SAAW,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACM,KAAjBA,EAAMyR,QACPrG,EAAc,GAAD,OAAIlH,EAAJ,YAAmBlE,GAC3BkW,GACH9K,EAAc,GAAD,OAAIlH,EAAJ,WAAkB,iBAIjCkH,EAAc,GAAD,OAAIlH,EAAJ,YAAmB,IACZ,gBAAhBgS,GACF9K,EAAc,GAAD,OAAIlH,EAAJ,WAAkB,UCpK9BwT,GA/CG,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,gBAAgB1O,EAA6C,EAA7CA,MAAMlC,EAAuC,EAAvCA,aAAa8O,EAA0B,EAA1BA,SAAS+B,EAAiB,EAAjBA,WAa/D,OAAQ,kBAAC,KAAD,CAAY1T,KAAI,gBAAWyT,KAChC,gBAAG/V,EAAH,EAAGA,KAAKuT,EAAR,EAAQA,OAAR,OAAsB,oCACpBlM,GAASA,EAAM/J,KAAI,SAACwH,EAAKwO,GAAN,OAClB,kBAAC,GAAD,CAAU/V,IAAK+V,EACbtR,MAAQsR,EACRxO,KAAQA,EACRxC,KAAI,gBAAWyT,EAAX,YAA8BzC,GAElCY,SAAYpP,EAAK3I,KAAuB,aAAhB2I,EAAKW,QAAuC,SAAdX,EAAKW,QAC3DwO,SACE,WACKA,GAAUA,IACbV,EAAOD,SAUf,kBAACxQ,EAAA,EAAD,CACE7G,KAAK,SACLwG,MAAI,EACJxF,MAAO,CAAE0N,WAAW,QACpBhG,SAAO,EACP9B,QAAU,SAACwB,GAAD,OAAOrE,EAtCF,WACnB,IAAMiW,EAAe,CAAEvQ,YAAY,GAAGD,OAAO,GAAG7H,OAAO,GAAGuH,aAAc4Q,GAMxE,OALG5Q,GAAiC,aAAjBA,IACjB8Q,EAAa3Q,SAAW0Q,EACxBC,EAAa9Q,aAAeA,GAGvB8Q,EA+BoBA,MAEvB,kBAACvP,GAAA,EAAD,CAAMpE,KAAK,gBAPb,aCoDS4T,GAvFe,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,UAAUC,EAAkD,EAAlDA,oBAAoBC,EAA8B,EAA9BA,iBAAiBtE,EAAa,EAAbA,OACtEvI,EAAkBD,eAAlBC,cADmF,EAEtD/K,mBAAU,CAAEqF,MAAK,EAAMwB,SAAS,GAAGrF,MAAM,KAFa,mBAEpFuD,EAFoF,KAExEC,EAFwE,KAI3F,OAAQ,oCACL0S,GAAaA,EAAU7Y,KAAI,SAAAkI,GAAQ,OAClC,kBAAC,WAAD,CAAUjI,IAAMiI,EAASlD,MACvB,kBAACtB,EAAA,EAAD,CAAQC,GAAG,MAAX,sBAAoCuE,EAASlD,MAG5CkD,EAAS2B,UAAU7J,KAAI,SAAAgI,GAAQ,OAE9B,kBAAC,WAAD,CAAU/H,IAAK+H,EAASnJ,IACtB,kBAAC,GAAD,CACE6F,MAASsD,EAASC,aAGlBrD,QAAWmU,EAAiB/Q,EAASC,eAAgB8Q,EAAiB/Q,EAASC,cAA1B,QAGrD2O,SAAYmC,EAAiB/Q,EAASC,eAAgB8Q,EAAiB/Q,EAASC,cAA1B,YAEtDpD,SACE,SAACkC,EAAD,GAAqB,IAAhBnC,EAAe,EAAfA,QACHmC,EAAElE,kBAEC+B,GAAa6P,EAAO1K,MAAM/B,EAASC,eAAgE,IAA/CwM,EAAO1K,MAAM/B,EAASC,cAAc1H,SACzFuY,EAAoB,2BAAKC,GAAN,mBAAwB/Q,EAASC,aAAc,CAAE,QAAUrD,MAC9EsH,EAAc,SAAD,OAAUlE,EAASC,cAAe,CAAC,CAAEG,YAAY,GAAGD,OAAO,GAAI7H,OAAO,GAAGuH,aAAa,WAAYG,SAAUA,EAASnJ,OAEhI+F,GACC6P,EAAO1K,MAAM/B,EAASC,cAAc1H,OAAQ,GAC7C4F,EAAe,CAAEK,MAAK,EAAMwB,SAASA,EAASC,iBAWtD,kBAAC1B,GAAA,EAAD,CACEC,KAAQN,EAAYM,KACpBG,OAAM,2BAAwBT,EAAY8B,UAC1C5I,QAAU,+GACVwH,SAAa,WACXT,EAAe,CAAEK,MAAK,KAExBK,UAAc,WACZqF,EAAc,SAAD,OAAUhG,EAAY8B,UAAW,MAC9C8Q,EAAoB,2BAAKC,GAAN,mBAAwB7S,EAAY8B,SAAU,CAAE,SAAU,MAC7E7B,EAAe,CAAEK,MAAK,OAIzBuS,EAAiB/Q,EAASC,eAAgB8Q,EAAiB/Q,EAASC,cAA1B,SAC3C,kBAAC,GAAD,CACEwQ,gBAAiBzQ,EAASC,aAC1B8B,MAAO0K,EAAO1K,MAAM/B,EAASC,cAC7BJ,aAAc,WACd6Q,WAAc1Q,EAASnJ,GACvB8X,SACE,WAIkD,IAA7ClC,EAAO1K,MAAM/B,EAASC,cAAc1H,QACrCuY,EAAoB,2BAAKC,GAAN,mBAAwB/Q,EAASC,aAAc,CAAE,SAAU,oB,mBC4QrF+Q,GA5UQ,SAAC,GAAyB,IAAvBrR,EAAsB,EAAtBA,QAAQnB,EAAc,EAAdA,KAAc,KAARO,EAEAkF,gBAA/BwH,EAFuC,EAEvCA,aAAavH,EAF0B,EAE1BA,cAF0B,EAIHpK,sBAAYiR,IAJT,mBAIvCW,EAJuC,YAI7B9R,EAJ6B,EAI7BA,QAAS3C,EAJoB,EAIpBA,MAAO4C,EAJa,EAIbA,KAE3B8R,EAAiBF,EAAa,aAAa3S,MAC3C8S,EAAeH,EAAa,WAAW3S,MAPC,EAQPK,mBAAS,IARF,mBAQvC2S,EARuC,KAQ1BC,EAR0B,OASf5S,mBAAS,IATM,mBASvC6S,EATuC,KAS9BC,EAT8B,OAUf9S,mBAAS,IAVM,mBAUvC4B,EAVuC,KAU9BmR,EAV8B,OAWb/S,mBAASwS,GAXI,mBAWvChJ,EAXuC,KAW7BwJ,EAX6B,OAYjBhT,mBAASyS,GAZQ,mBAYvC/I,EAZuC,KAY/BuJ,EAZ+B,OAanBjT,mBAAS,MAbU,mBAavCkT,EAbuC,KAahCC,EAbgC,QAcAnT,oBAAS,GAdT,qBAcvC8X,GAduC,MActBC,GAdsB,SAeK/X,oBAAS,GAfd,qBAevCgY,GAfuC,MAepBC,GAfoB,MAiB9C5a,qBAAU,WACR2V,EAAaR,GACbS,EAAWR,KACX,CAACA,EAAcD,IAGjBnV,qBAAW,WAeT,GAbGS,IACEga,IACDlF,EAAgB,CAAEpV,KAAM,QAASqD,QAAQ,4BAAD,OAA6B/C,EAAM+C,WAE3E+R,EADEoF,GACc,CAAExa,KAAM,QAASqD,QAAQ,6BAAD,OAA8B/C,EAAM+C,UAG5D,CAAErD,KAAM,QAASqD,QAAQ,uBAAD,OAAwB/C,EAAM+C,YAMvEH,GAAiC,MAAzBA,EAAK0S,iBAA0B,CAIxC,IAAM+B,EAAQ7C,EAAa,UAAU3S,MACrC,GAAGmI,KAAEC,KAAKoN,EAAO,CAAEzX,GAAGgD,EAAK0S,iBAAiB1V,KAE1CkV,EAAgB,CAAEpV,KAAM,QAASqD,QAAQ,GAAD,OAAKH,EAAK0S,iBAAiBvP,KAA3B,qCAEpC,CACJ,IAAMqU,EAAU,sBAAO/C,GAAP,CAAc,CAAEtR,KAAKnD,EAAK0S,iBAAiBvP,KAAM2F,UAAU9I,EAAK0S,iBAAiB5J,UAAWE,QAAShJ,EAAK0S,iBAAiB1J,QAASqL,WAAWrU,EAAK0S,iBAAiBzT,MAAOjC,GAAIgD,EAAK0S,iBAAiB1V,GAAI8V,MAAO9S,EAAK0S,iBAAiBI,SACvPzI,EAAc,SAAUmN,GAErBJ,KAEDlF,EAAgB,CAAEpV,KAAM,UAAWqD,QAAQ,GAAD,OAAIH,EAAK0S,iBAAiBvP,KAA1B,4HAC1CkU,IAAoB,IAElBC,IACFpF,EAAgB,CAAEpV,KAAM,UAAWqD,QAAQ,GAAD,OAAIH,EAAK0S,iBAAiBvP,KAA1B,kEAC1CoU,IAAsB,IAGtBrF,EAAgB,CAAEpV,KAAM,UAAWqD,QAAQ,GAAD,OAAKH,EAAK0S,iBAAiBvP,KAA3B,6BAMhD,CAAC/F,EAAO4C,IAMV,IAAM2S,GAAM,uCAAG,WAAOC,GAAP,eAAA7R,EAAA,6DAKX8R,EADCuE,GACa,CAAGtO,UAAU8J,EAAO9J,UAAWE,QAAQ4J,EAAO5J,QAAU8J,MAAM5D,SAASsD,GAAS5B,MAAOgC,EAAOhC,MAAOzN,KAAMyP,EAAOY,SAAUT,iBAAiB,YAErJuE,GACQ,CAAExO,UAAU8J,EAAO9J,UAAWE,QAAQ4J,EAAO5J,QAAS8J,MAAM5D,SAASsD,GAAS5B,MAAMgC,EAAOa,WAAWV,iBAAiB,SAEvH,CAAEjK,UAAU8J,EAAO9J,UAAWE,QAAS4J,EAAO5J,QAAS8J,MAAM5D,SAASsD,GAASL,SAAUA,EAAUjR,SAAUA,GAVhH,SAYP2Q,EAAQ,CAAE5Q,UAAU4R,IAZb,2CAAH,sDAiFZ,OAAG9S,EACK,kBAACiT,GAAA,EAAD,CAAQzN,QAAM,EAACH,UAAQ,GAC3B,kBAAC6N,GAAA,EAAD,CAAQ1N,QAAM,EAACH,UAAQ,GAAvB,kBAKF,kBAACQ,GAAA,EAAD,CACEsN,WAAS,EACTC,eAAe,EACfC,oBAAoB,EACpBzO,KAAQA,EACRkB,QAAU,WACR0R,IAAsB,GACtBF,IAAoB,GACpBnF,GAAgB,GAChBpM,GAAQ,IACVuN,OAAS,kBAAMvN,GAAS,KAExB,kBAACF,GAAA,EAAM/D,OAAP,2BACA,kBAAC+D,GAAA,EAAMG,QAAP,KAEGkM,IAvFDA,EAEF,kBAAC/U,EAAA,EAAD,CACEC,QAAiC,YAAtB8U,EAAanV,KACxBM,MAA+B,UAAtB6U,EAAanV,KACtBQ,UAAa,kBAAM4U,EAAgB,MAHrC,IAKGD,EAAa9R,SAPO,MA2FrB,kBAAC,KAAD,CACEmT,oBAAkB,EAClBC,cAAiB,CACfzK,UAAWA,EACXE,QAASA,EACTwJ,OAAOA,EACPL,SAAS,GACTjR,SAAS,GACT0P,MAAM,GACN4C,SAAS,GACTC,WAAW,IAGbC,SAAY,SAAAd,GACV,IAAI3B,EAAS,GAGb,GAFAA,EAAM,2BAAQA,GAAUX,GAAqBsC,EAAO9J,UAAU8J,EAAO5J,UAElEsO,GAAmB,CACpB,IAAIG,EAAa9G,GAAciC,EAAOa,YACnCgE,IAAYxG,EAAOwC,WAAagE,GAErC,GAAGL,GAAiB,CAClB,IAAIK,EAAa9G,GAAciC,EAAOhC,OACnC6G,IAAYxG,EAAOL,MAAQ6G,GAE9B,IAAIC,EAAgB7G,GAAa+B,EAAOY,UACrCkE,IAAezG,EAAOuC,SAAWkE,GAGtC,OAAOzG,GAGT7O,SAAY,SAACwQ,GAEXD,GAAOC,MAOR,cAAGA,OAAH,IAAUe,EAAV,EAAUA,aAAV,EAAuB1C,OAAvB,EAA8BvG,QAA9B,OAEC,kBAACxI,EAAA,EAAD,CAAMC,KAAK,QAAQC,SAAauR,GAC9B,kBAACzR,EAAA,EAAK+D,MAAN,KAEE,kBAAE,GAAF,CACEpD,MAAO,aACP+H,eAAiB,mBACjBzH,KAAM,YACNyQ,QAAW5G,GAAYR,KAAKgE,MAAM,GAAG,IAAI,OACzCqD,QAAU7G,GAAYR,KAAKgE,MAAM,GAAG,IAAI,OACxCxN,SAAY,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACfqT,EAAarT,MAKjB,kBAAE,GAAF,CACE4D,MAAQ,WACR+H,eAAiB,mBACjBzH,KAAK,UACLyQ,QAAWhI,GAAWY,KAAKgE,OAC3BqD,QAAU7G,GAAYlE,EAAU,GAAG,IAAI,OACvC9F,SAAY,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACfsT,EAAWtT,MAGf,kBAAC,GAAD,CACEmM,WAAY,QACZvI,MAAQ,WACRiR,cAAc,eACd3Q,KAAM,SACNrG,KAAK,SACLiX,IAAI,IACJ/Q,SAAY,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACfwT,EAAUxT,OAQhB,kBAAC4C,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAAM,OAAOP,UAAU,YAIrC4V,KAAqBE,IAGzB,oCACE,kBAAC1Z,EAAA,EAAD,KAEE,kBAAC2D,EAAA,EAAD,CAAMyS,QAAS,EAAG3O,WAAS,GACzB,kBAACxB,EAAA,EAAD,CAASoQ,UAAQ,GAAjB,MACA,kBAAC1S,EAAA,EAAKiH,IAAN,CAAU9G,cAAc,UACtB,kBAACH,EAAA,EAAKI,OAAN,KACE,kBAACJ,EAAA,EAAKiH,IAAN,CAAU1K,MAAO,CAAE0D,UAAU,WAC3B,kBAACK,EAAA,EAAD,CAAQC,GAAI,KAAKwB,MAAI,GACnB,kBAACiE,GAAA,EAAD,CAAMpE,KAAK,sBADb,oBAKF,kBAAC5B,EAAA,EAAKiH,IAAN,KACE,kBAACtG,EAAA,EAAK+D,MAAN,KACE,kBAAC/D,EAAA,EAAKgB,MAAN,CAAYL,MAAM,WAAWG,SAAW,SAACkC,EAAD,OAAKjG,EAAL,EAAKA,MAAL,OAAiBmT,EAAYnT,MACrE,kBAACiD,EAAA,EAAKgB,MAAN,CAAYL,MAAO,WAAW/F,KAAK,WAAWkG,SAAW,SAACkC,EAAD,OAAKjG,EAAL,EAAKA,MAAL,OAAiBoT,EAAYpT,OAExF,kBAACiD,EAAA,EAAKM,MAAN,CAAY1E,MAAO,CAAE0D,UAAU,WAC7B,kBAACmC,EAAA,EAAD,CAAQ7G,KAAK,SAAS0I,SAAO,GAA7B,WAEF,kBAACtD,EAAA,EAAKM,MAAN,CAAY1E,MAAO,CAAE0D,UAAU,WAC7B,kBAACmC,EAAA,EAAD,CAAQxB,KAAK,OAAOuB,QAAS,kBAAM6T,IAAsB,KAAzD,sBAKN,kBAAChW,EAAA,EAAKI,OAAN,CAAaH,UAAU,UACrB,kBAACD,EAAA,EAAKiH,IAAN,KACE,kBAAC3G,EAAA,EAAD,CAAQyB,MAAI,GACV,kBAACiE,GAAA,EAAD,CAAMpE,KAAK,UAAUhB,KAAK,YAD5B,eAKF,kBAACZ,EAAA,EAAKiH,IAAN,KAAU,kBAAC7E,EAAA,EAAD,CAAQ6B,SAAO,GAAf,aAOlB,kBAACmS,GAAA,EAAD,CAAW7Z,MAAO,CAAE0D,UAAU,WAC5B,6GACA,kBAACmC,EAAA,EAAD,CAAQ7G,KAAK,SAAS4G,QAAS,kBAAM2T,IAAoB,KAAzD,gBAMDD,IAvNT,kBAACxZ,EAAA,EAAD,CAASC,OAAK,GACZ,kBAACX,EAAA,EAAD,CAASoZ,UAAQ,GACf,kBAACpZ,EAAA,EAAQ2E,OAAT,sBADF,gMAOA,kBAAC3E,EAAA,EAAD,CAAS0a,SAAO,EAACC,SAAO,GACtB,kBAAC3a,EAAA,EAAQ2E,OAAT,oBADF,0HAIA,kBAACK,EAAA,EAAK+D,MAAN,KACE,kBAAC,GAAD,CAAYlI,MAAO,KAAKoF,KAAM,WAAWN,MAAM,cAC/C,kBAAC,GAAD,CAAY9E,MAAO,KAAKoF,KAAO,QAAQN,MAAQ,mBAEjD,kBAACiV,GAAA,EAAD,KACE,kBAACnU,EAAA,EAAD,CAAS2S,UAAQ,GAAjB,YACA,kBAAC3S,EAAA,EAAD,CAAQ7G,KAAK,SAAS0Z,UAAQ,EAAC9S,QAAU,kBAAM2T,IAAoB,KAAnE,YAsMKC,IA5LT,kBAAC1Z,EAAA,EAAD,CAASC,OAAK,GACZ,kBAACX,EAAA,EAAD,CAAS0a,SAAO,EAACC,SAAO,GACtB,kBAAC3a,EAAA,EAAQ2E,OAAT,uBADF,gEAKA,kBAAC3E,EAAA,EAAD,CAAS0a,SAAO,EAACC,SAAO,GACtB,kBAAC3a,EAAA,EAAQ2E,OAAT,oBADF,kFAE+E,mEAG/E,kBAAC,GAAD,CAAY9D,MAAO,KAAKoF,KAAO,aAAYN,MAAQ,kBACnD,kBAACiV,GAAA,EAAD,KACE,kBAACnU,EAAA,EAAD,CAAS6B,SAAO,GAAhB,SACA,kBAAC7B,EAAA,EAAD,CAAS6S,UAAQ,EAAC9S,QAAU,kBAAM6T,IAAsB,KAAxD,mB,24BC7JH,IAAMQ,GAAgBlc,cAAH,M,UC2SXmc,GA1RO,SAAC,GAAuB,IAArB5T,EAAoB,EAApBA,cACjB6T,EAAUxa,qBAAWuM,IADgB,EAExBvM,qBAAWC,GAAvBjB,EAFoC,oBAGrC6D,EAAU2X,EAAQzZ,MAAM8B,QACxB4I,EAAa+O,EAAQzZ,MAAMyL,gBAJU,EAMM3K,oBAAU,GANhB,mBAMpC4Y,EANoC,KAMlBC,EANkB,OASV7Y,mBAASgB,EAAQ0W,WATP,mBASpCA,EAToC,KAS1BoB,EAT0B,OAWK9Y,mBAAS,IAXd,mBAWpC4X,EAXoC,KAWlBD,EAXkB,OAkBF3X,mBAN5B,CACXwJ,UAAU,GACVE,QAAQ,GACRyL,OAAO,GACPvM,MAAM,KAhBmC,mBAkBpCmQ,EAlBoC,KAkBtBC,EAlBsB,OAoBDrY,sBAAY8X,GAAc,CAClEtR,OADkE,SAC3D8R,EAAMC,GACX,IAAMxY,EAAO,CAAEyY,eAAgBD,EAAOxY,KAAK0Y,mBAC3CH,EAAMI,WACJ,CAAEC,MAAO7U,GACP9C,UAAU,CACRX,QAASA,EAAQtD,GACjB6b,KAAK,2BAEP7Y,UAKN8Y,YAAa,WACXlY,aAAa8B,MAAMwG,EAAWlM,IAC9BoH,EAAc,oBAGhBlE,QAAS,SAAC9C,GACRX,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAASH,EAAM+C,QAASrD,KAAM,cAxCtC,mBAoBpCic,EApBoC,YAoBrBhZ,EApBqB,EAoBrBA,QAAS3C,EApBY,EAoBZA,MAyBzB4b,EAAe,SAAClQ,GACpB,IAAMmQ,EAAM,IAAIzM,KAAKiB,GAAO3E,IAkB5B,OAjBkBxI,EAAQ4Y,OAAOC,QAAO,SAACC,EAAEC,GAEzC,IAAMC,EAAUD,EAAEvQ,UAAUqD,MAAM,KAC5BoN,EAAK,IAAI/M,KAAKyM,GACpBM,EAAGC,SAASF,EAAQ,IACpBC,EAAGE,WAAWH,EAAQ,IAEtB,IAAMI,GAAQT,EAAIM,GAAL,KAEb,OAAIG,EAAON,EAAEM,MAAQN,EAAEM,KAAO,GAG3BA,EAAO,GAAKA,EAAMN,EAAEM,KAFd,CAAEvW,KAAMkW,EAAElW,KAAMuW,KAAMA,GAKxBN,IACP,CAAEjW,KAAK,GAAGuW,MAAM,KACDvW,MAGnBxG,qBAAW,WAET,IAAIgd,EAAO,GAEPC,EAAW,GACXC,EAAe,GAGnB3Q,GAAcA,EAAWhB,OAASgB,EAAWhB,MAAM/J,KAAI,SAAAwH,GACrD,GAAmB,aAAdA,EAAKW,QAAqC,SAAdX,EAAKW,OAAkB,CAEtD,IAAMwT,EAAiB,CAAE9c,GAAG2I,EAAK3I,GAAImJ,SAASR,EAAKQ,SAAUI,YAAYZ,EAAKY,YAAaD,OAAOX,EAAKW,OAAQE,QAASb,EAAKa,QAAS/H,OAAO,GAAIsb,QAAQ,GAAG/T,aAAaL,EAAKK,cAyB9K,GAtBGL,EAAKQ,WACNwT,EAAKhU,EAAKQ,SAASC,cAAgB,CAAErD,SAAQ,EAAKiX,aAAY,IAI7DrU,EAAKQ,UAAYyT,EAASjU,EAAKQ,SAASC,cACzCwT,EAASjU,EAAKQ,SAASC,cAAcvF,KAArC,eAAgDiZ,IAExCnU,EAAKQ,SACbyT,EAASjU,EAAKQ,SAASC,cAAgB,CAAC,eAAM0T,IAG3CF,EAASjU,EAAKK,cACf4T,EAASjU,EAAKK,cAAcnF,KAAKiZ,GAEjCF,EAASjU,EAAKK,cAAgB,CAAC8T,GAOhCnU,EAAKQ,WAEDiB,KAAEC,KAAM/G,EAAQ0W,UAAU5P,KAAE6S,gBAAgB,OAAOtU,EAAKQ,SAASE,SAASlD,OAAO,CAEpF,IAAM+W,EAAgB9S,KAAEC,KAAMwS,EAAazS,KAAE6S,gBAAgB,OAAOtU,EAAKQ,SAASE,SAASlD,OAC3F,GAAK+W,EAGmBA,EAAclS,UAAUmS,MAAK,SAAAhU,GAAQ,OAAIA,EAASC,eAAiBT,EAAKQ,SAASC,iBAErG8T,EAAclS,UAAUnH,KAAK,CAAEuF,aAAaT,EAAKQ,SAASC,aAAepJ,GAAI2I,EAAKQ,SAASnJ,UAJ7F6c,EAAahZ,KAAK,CAAEsC,KAAKwC,EAAKQ,SAASE,SAASlD,KAAK6E,UAAU,CAAC,CAAE5B,aAAaT,EAAKQ,SAASC,aAAapJ,GAAI2I,EAAKQ,SAASnJ,YAatIob,EAAa,GAAD,mBAAKpB,GAAa6C,IAG9BvB,EAAiB,2BAAKD,GAAN,IAAoBnQ,MAAM0R,KAC1C3C,EAAoB0C,KAIrB,IA8CD,OAAG5Z,EAEC,kBAACnC,EAAA,EAAD,CAASE,MAAO,CAAE2D,OAAO,SAAW5D,OAAK,EAACsE,KAAK,QAC7C,kBAAC6Q,GAAA,EAAD,CAAQzN,QAAM,EAACH,UAAQ,GACrB,kBAAC6N,GAAA,EAAD,CAAQ7N,UAAQ,GAAhB,qBAON,oCACE,kBAAC,KAAD,CACEkO,oBAAkB,EAClBC,cAAiB8E,EACjB3E,SAAa,SAAAd,GACX,IAAI3B,EAAS,GACbA,EAAM,2BAAQA,GAAUX,GAAqBsC,EAAO9J,UAAU8J,EAAO5J,UACrE,IAAMoR,EXhNkB,SAACnb,GACjC,IAAI7B,EAIJ,OAAI6B,GAAWA,EAAMP,QAOjBO,GAASA,EAAMP,SACjBtB,EAAQgK,KAAEiC,UAAUpK,GAAO,SAAA4J,GACzB,IAAIwR,EAAUhK,GAAwBxH,GAItC,OAAIzB,KAAEkT,QAAQD,IAQTxR,EAAMwL,aACTgG,EAAO,2BAAQA,GAAR,IAAkB,WAAa,8BAIjCA,GAZLA,EAAO,2BAAQA,GAAR,IAAkB,WAAa,gCAmB5CjT,KAAEmT,QAAQnd,GAAM,SAACkS,EAAE/F,GACdnC,KAAEkT,QAAQhL,WACJlS,EAAMmM,MAIVnM,GAtCLA,EAAQ,uDW0MkBod,CAAoB5H,EAAO6B,QACzCgG,EXvEa,SAACvS,GAC5B,IAAIA,EAAO,OAAO,KAClB,IAAM9K,EAAQgK,KAAEiC,UAAUnB,GAAM,SAAAwS,GAC9B,IAAMD,EAAarT,KAAEiC,UAAWqR,GAAW,SAAA/U,GAKzC,OADkB8K,GAAkB9K,MAOtC,OAAOyB,KAAEuT,OAAOF,EAAWrT,KAAEwT,aAiB/B,OAPAxT,KAAEmT,QAAQnd,GAAM,SAACkS,EAAE/F,GACdnC,KAAEkT,QAAQhL,WACJlS,EAAMmM,MAKVnM,EWwCoByd,CAAcjI,EAAO1K,OAKxC,OAHId,KAAEkT,QAAQG,KAAcxJ,EAAO/I,MAAQuS,GACvCrT,KAAEkT,QAAQF,KAAenJ,EAAOwD,OAAS2F,GAEtCnJ,GAGT7O,SAAU,SAACwQ,GACT,IAAMkI,EAvEO,SAACC,GACpB,IAAID,EAAa,CAAExa,QAASA,EAAQtD,GAAKyX,OAAQsG,EAAStG,OAAQ3L,UAAUiS,EAASjS,UAAWE,QAAS+R,EAAS/R,QAASd,MAAM,IAG3H8S,EAAgB5T,KAAE+R,OAAO4B,EAAS7S,OAAO,SAACA,EAAM+S,EAAkBC,GACtE,IAAItB,EAAWxS,KAAEjJ,IAAI8c,GAAmB,SAACtV,EAAKwO,GAC5C,IAAIgH,EAEJ,GAAG9C,EAAcnQ,MAAMgT,IAAe7C,EAAcnQ,MAAMgT,GAAY/G,GAAO,CAC3EgH,EAAc9C,EAAcnQ,MAAMgT,IAAe7C,EAAcnQ,MAAMgT,GAAY/G,GACjF,IAAMiH,EAAaC,OAAOC,KAAKH,GAAaxc,QAAO,SAAA4K,GAAC,OAAI4R,EAAY5R,KAAO5D,EAAK4D,MAGhF,IAAI6R,EAAY,OAAO,KACvB,IAAMG,EAAcH,EAAWjC,QAAO,SAACC,EAAEC,GAAH,OAASD,EAAEC,GAAF,2BAAYD,GAAZ,mBAAeC,EAAG1T,EAAK0T,OAAK,WAC3E1T,EAAI,aAAK3I,GAAI2I,EAAK3I,IAAOue,IAIbpV,gBACLR,EAAKa,QAId,OAAOb,KAMT,OAFAiU,EAAWA,EAASjb,QAAO,SAAAgH,GAAI,OAAa,OAATA,KAE7B,GAAN,mBAAWuC,GAAX,YAAoB0R,MACpB,IAIInF,EAASsG,EAAStG,OAAOtW,KAAI,SAAC0K,GAAW,MAAO,CAAEwL,WAAYxL,EAAMwL,WAAYlR,KAAK0F,EAAM1F,SAIjG,OAFA2X,EAAU,2BAAQA,GAAR,IAAmB5S,MAAO8S,EAAcvG,OAAQA,EAAQ7K,MAAOoP,EAAa+B,EAASjS,aAkCtE0S,CAAa5I,GAChCmG,EAAa,CAAE9X,UAAW6Z,OAK3B,gBAAGlI,EAAH,EAAGA,OAAOe,EAAV,EAAUA,aAAa1C,EAAvB,EAAuBA,OAAOvG,EAA9B,EAA8BA,QAAQ+Q,EAAtC,EAAsCA,YAAtC,OACC,oCACE,kBAACvZ,EAAA,EAAD,CAAME,SAAY,SAAC8C,GACjBA,EAAElE,iBACF2S,MAGA,kBAACzR,EAAA,EAAK+D,MAAN,KACE,kBAAC,GAAD,CACEpD,MAAQ,mBACRM,KAAK,YACLyQ,QAAW5G,GAAYR,KAAKgE,MAAM,GAAG,IAAI,OACzCqD,QAAU7G,GAAYR,KAAKgE,MAAM,GAAG,IAAI,SAE1C,kBAAC,GAAD,CACE3N,MAAQ,iBACRM,KAAK,UACLyQ,QAAWhI,GAAWY,KAAKgE,OAC3BqD,QAAU7G,GAAY4F,EAAO9J,UAAU,GAAG,IAAI,UAIlD,kBAAC,GAAD,CAAY8J,OAAQA,EAAQlI,QAASA,EAASuG,OAAQA,EAAQ0D,aAAiBwD,IAG/E,kBAAC,GAAD,CAAuBnB,UAAYA,EAAWE,iBAAkBA,EAAkBD,oBAAsBA,EAAqBrE,OAAQA,IAGrI,kBAAC/Q,EAAA,EAAD,CAAQC,GAAG,MAAX,eACA,kBAAC,GAAD,CAAW8U,gBAAkB,QAAQ1O,MAAS0K,EAAO1K,MAAMwT,OAA3D,KAGA,kBAAC7Z,EAAA,EAAD,CAAQC,GAAG,MAAX,kBACA,kBAAC,GAAD,CAAW8U,gBAAkB,YAAY1O,MAAS0K,EAAO1K,MAAMyT,WAA/D,KAEA,kBAACze,EAAA,EAAD,CACEE,OAAK,EACLG,QACE,oCACE,kBAACsE,EAAA,EAAD,CAAQC,GAAG,MAAX,uCAAoD,kBAACD,EAAA,EAAOqE,UAAR,mDACnD9I,GACH,2BAAIA,EAAM+C,UAIZ0X,SAAYzQ,KAAEkT,QAAQrJ,IAAWwK,EAAc,GAAMre,IAGvD,kBAACF,EAAA,EAAD,CACEC,SAAO,EACPI,QACE,kBAACsE,EAAA,EAAD,CAAQC,GAAG,MAAX,uCAAoD,kBAACD,EAAA,EAAOqE,UAAR,kDAEtD2R,QAAWzQ,KAAEkT,QAAQrJ,IAAWwK,EAAc,IAAQre,IAGxD,kBAACQ,EAAA,EAAD,CAASmX,UAAa3N,KAAEkT,QAAQrJ,IAAWwK,EAAc,EAAG1Z,MAAM,OAAOqD,UAAQ,EAACwW,UAAQ,EAACvZ,UAAQ,GACjG,kBAACsB,EAAA,EAAD,CAAQgG,QAAQ,QAAQ7M,KAAK,SAAS0I,SAAO,GAA7C,oBAGF,kBAAC,KAAD,CAASrC,KAAM+F,EAAWlM,MAE5B,kBAAC,GAAD,CAAe8I,QAAUqS,EAAsBxT,KAAOuT,EAAmBpG,eAAkBc,EAAO9J,UAAWiJ,aAAca,EAAO5J,gB,2yEChSvI,IAAM6S,GAAehgB,cAAH,MAqBZigB,GAAejgB,cAAH,MAWZkgB,GAAclgB,cAAH,MAaXmgB,GAA0BngB,cAAH,MAcvBogB,GAAkBpgB,cAAH,MAUfqgB,GAAiBrgB,cAAH,MAWdsgB,GAA+BtgB,cAAH,MAW5BugB,GAAkBvgB,cAAH,M,wgCC5FrB,IAAMwgB,GAAgBxgB,cAAH,MAkBbygB,GAAsBzgB,cAAH,MAMnB0gB,GAAe1gB,cAAH,MCAV2gB,GAtBM,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAAU3W,EAAqB,EAArBA,QAAUnB,EAAW,EAAXA,KAC1C,OACE,kBAACiB,GAAA,EAAD,CACEjB,KAAOA,EACPwO,eAAgB,EAChBC,oBAAoB,GAEpB,kBAACxN,GAAA,EAAM/D,OAAP,gBACA,kBAAC+D,GAAA,EAAMG,QAAP,KAAgB0W,EAAQC,OACxB,kBAAC9W,GAAA,EAAM+W,QAAP,KACE,kBAAChZ,EAAA,EAAD,CAAQ2S,UAAQ,EAAC5S,QAAU,WACzB+Y,EAAQG,KACR9W,GAAQ,KAFV,YAKA,kBAACnC,EAAA,EAAD,CAAQ6S,UAAQ,EAAE9S,QAAU,kBAAMoC,GAAQ,KAA1C,c,oNCRR,IA8He+W,GA9HU,SAAC,GAAiC,IAA/BlY,EAA8B,EAA9BA,KAAMmB,EAAwB,EAAxBA,QAASO,EAAe,EAAfA,SAAe,EACpC5I,qBAAWC,GAAvBjB,EADgD,sBAEHqgB,uBAAaR,IAFV,mBAEjDS,EAFiD,YAErBhd,EAFqB,EAErBA,QAAQC,EAFa,EAEbA,KAFa,EAGbV,mBAAS,IAHI,mBAGjD0d,EAHiD,KAGlCC,EAHkC,KAIxDtgB,qBAAU,WACLqD,GACDid,EAAkBjd,EAAKkd,8BAExB,CAACld,IARoD,MAUjCC,sBAAa6b,GAAa,CAC/CrV,OAAO,SAAC8R,EAAD,GAAuC,IAAtB4E,EAAqB,EAA7Bnd,KAAQmd,aAEtB5E,EAAM6E,OAAO,CACXpgB,GAAG,YAAD,OAAcqJ,EAASrJ,IACzBqgB,OAAO,CACLrV,UADK,SACKsV,EADL,GAC2C,IAAdC,EAAa,EAAbA,UAE5BC,EAAiB,GAerB,OAbAC,mBAAQN,GAAa,SAAEnV,EAAUtB,GAC5B4W,EAAqBnD,MAAK,SAAAuD,GAAG,OAAIH,EAAU,KAAKG,KAAS1V,EAAUhL,OACpEwgB,EAAgB3c,KAAK0X,EAAMoF,cAAc,CACvC3d,KAAMmd,EAAazW,GACnBkX,SAAU/hB,cAAF,YASR,GAAN,mBAAWyhB,GAAyBE,QAK5C1E,YAAa,YAAuB,IAApBqE,EAAmB,EAAnBA,aACd1gB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAQ,sBAAD,OAAwB4f,EAAahE,QAAO,SAACC,EAAEC,GAAH,OAASD,EAAEC,EAAEjT,aAAc,OAAK,IAA5E,WAA0FtJ,KAAM,aACtJgJ,GAAQ,IAGV+X,QAAS,SAACC,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,iCAAiC,6BAApC,IAA2CugB,EAAI3d,SAAarD,KAAM,WAC1HgJ,GAAQ,MAnCLqX,EAViD,oBAkDxD,OAEE,kBAAC,KAAD,CACE5J,cAAgB,CACdvL,UAAW,IAGb0L,SAAa,SAACd,GAEZ,IAAM3B,EAAS,GACf,GAAI2B,EAAO5K,UAAUtJ,OAAQ,CACvBkU,EAAO5K,UAAUiE,MAAM,mBACzBgF,EAAOjJ,UAAY,2CAGrB,IAAM+V,EAAa,GACnBN,mBAAQ7K,EAAO5K,UAAUmE,MAAM,MAAM,SAAAhG,GAChCA,EAASuK,OAAOhS,OAAS,GAAGqf,EAAYld,KAAKsF,EAASuK,OAAOjF,kBAE9DsS,EAAYrf,SACduS,EAAOjJ,UAAP,UAAsB+V,EAAYrR,WAAlC,iEAIEuE,EAAOjJ,YACT+U,EAA0B,CAAE9b,UAAU,CAAE+c,cAAepL,EAAO5K,aAC3DgV,EAAete,SAChBuS,EAAOjJ,UAAP,uBAAmCgV,EAAetQ,WAAlD,2BAKJuE,EAAOjJ,UAAY,8BAGrB,OAAOiJ,GAGT7O,SAAW,SAACwQ,GACV,IAAM5K,EAAY4K,EAAO5K,UAAUyD,cAAcU,MAAM,KACvDgR,EAAa,CAAElc,UAAU,CAAGmF,aAAc4B,EAAW3B,SAAUA,EAASrJ,SAGzE,gBAAG2W,EAAH,EAAGA,aAAH,OAEC,kBAAC/N,GAAA,EAAD,CACEjB,KAAOA,EACPwO,eAAgB,EAChBC,oBAAoB,GAEpB,kBAACxN,GAAA,EAAM/D,OAAP,+BACA,kBAAC+D,GAAA,EAAMG,QAAP,KACE,kBAAC7D,EAAA,EAAD,KACE,kBAAC,GAAD,CAAYiB,KAAK,YAAYN,MAAM,YAAY/F,KAAK,OAAOiB,MAAM,IAAIyF,YAAY,oDAGrF,kBAACoC,GAAA,EAAM+W,QAAP,KACE,kBAAChZ,EAAA,EAAD,CAAQ7G,KAAK,SAASiD,QAASA,EAASgV,SAAUhV,EAASuW,UAAQ,EAAC5S,QAAW,SAACwB,GAC9EA,EAAElE,iBACF2S,MAFF,SAKA,kBAAChQ,EAAA,EAAD,CAAQ7G,KAAK,SAAS0Z,UAAQ,EAAC9S,QAAW,kBAAMoC,GAAQ,KAAxD,kB,mQChHZ,IAqJemY,GArJS,SAAC,GAAiC,IAA/BtZ,EAA8B,EAA9BA,KAAMmB,EAAwB,EAAxBA,QAASO,EAAe,EAAfA,SAAe,EACpC5I,qBAAWC,GAAvBjB,EADgD,sBAEjCwD,sBAAa8b,GAAY,CAC7CtV,OAAO,SAAC8R,EAAD,GAAqC,IAApB2F,EAAmB,EAA3Ble,KAAQke,WAEtB3F,EAAM6E,OAAO,CACXpgB,GAAG,YAAD,OAAcqJ,EAASrJ,IACzBqgB,OAAO,CACLc,YADK,SACOC,EADP,GAC6C,IAAdb,EAAa,EAAbA,UAE9Bc,EAAgB,GAiBpB,OAfAZ,mBAAQS,GAAW,SAAEI,GAChBF,EAAqBjE,MAAK,SAAAuD,GAAG,OAAIH,EAAU,KAAKG,KAASY,EAAQthB,OAClEqhB,EAAexd,KAAK0X,EAAMoF,cAAc,CACtC3d,KAAKse,EACLV,SAAU/hB,cAAF,YAWR,GAAN,mBAAWuiB,GAAyBC,QAK5CvF,YAAa,YAAoB,EAAjBoF,WACdzhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,0BAA2BT,KAAM,aACzFgJ,GAAQ,IAGV+X,QAAS,SAACC,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,gCAAgC,6BAAnC,IAA0CugB,EAAI3d,SAAarD,KAAM,WACzHgJ,GAAQ,MArCLyY,EAFgD,oBA4CvD,OAEE,kBAAC,KAAD,CACEhL,cAAgB,CACd4K,YAAa,CAAC,CAAE5X,YAAY,GAAGiY,MAAM,GAAI5N,MAAM,MAGjD8C,SAAa,SAACd,GAEZ,IAAM3B,EAAS,GA6Bf,OA5BG2B,EAAOuL,YAAYzf,QACpB+e,mBAAQ7K,EAAOuL,aAAa,SAACG,EAAQnK,GAC/BmK,EAAQ/X,cACL0K,EAAOkN,cAAalN,EAAOkN,YAAY,IACvClN,EAAOkN,YAAYhK,KAASlD,EAAOkN,YAAYhK,GAAS,IAC7DlD,EAAOkN,YAAYhK,GAAO5N,YAAc,sCAGtC+X,EAAQE,OAAUF,EAAQ1N,QACvBK,EAAOkN,cAAalN,EAAOkN,YAAY,IACvClN,EAAOkN,YAAYhK,KAASlD,EAAOkN,YAAYhK,GAAS,IAE7DlD,EAAOkN,YAAYhK,GAAOqK,MAAQ,0CAClCvN,EAAOkN,YAAYhK,GAAOvD,MAAQ,2CAGjC0N,EAAQ1N,OACND,GAAc2N,EAAQ1N,SAClBK,EAAOkN,cAAalN,EAAOkN,YAAY,IACvClN,EAAOkN,YAAYhK,KAASlD,EAAOkN,YAAYhK,GAAS,IAC7DlD,EAAOkN,YAAYhK,GAAOvD,MAAQ,oBAQnCK,GAGT7O,SAAW,SAACwQ,GAEV2L,EAAY,CAAEtd,UAAU,2BAAK2R,GAAN,IAAcvM,SAAUA,EAASrJ,UAGzD,gBAAG2W,EAAH,EAAGA,aAAcf,EAAjB,EAAiBA,OAAjB,OAEC,kBAAChN,GAAA,EAAD,CACEjB,KAAOA,EACPwO,eAAgB,EAChBC,oBAAoB,GAEpB,kBAACxN,GAAA,EAAM/D,OAAP,+BACA,kBAAC+D,GAAA,EAAMG,QAAP,KACE,kBAAC7D,EAAA,EAAD,KACE,kBAAC,KAAD,CAAaiB,KAAM,gBAChB,gBAAGtC,EAAH,EAAGA,KAAKuT,EAAR,EAAQA,OAAR,OAAsB,oCACnBxB,EAAOuL,YAAYzf,OAAS,GAAKkU,EAAOuL,YAAYhgB,KAAI,SAACmgB,EAAQnK,GAAT,OAAmB,kBAAC,WAAD,CAAU/V,IAAM+V,GAC3F,kBAACjS,EAAA,EAAK+D,MAAN,CAAYnI,MAAO,CAAEqY,OAAO,GAAKsI,OAAO,MAAM,kBAAC,GAAD,CAAYtb,KAAI,sBAAiBgR,EAAjB,iBAAuCtR,MAAM,gBAAgB,kBAAC,GAAD,CAAYM,KAAI,sBAAiBgR,EAAjB,WAAiCtR,MAAM,UAAU,kBAAC,GAAD,CAAYM,KAAI,sBAAiBgR,EAAjB,WAAiCtR,MAAM,UACtO,IAAVsR,GACF,kBAAC5M,GAAA,EAAD,CACE8O,MAAI,EACJlT,KAAM,SACNpB,MAAM,MACN2B,QAAU,kBAAM0Q,EAAOD,WAK5B,kBAACxQ,EAAA,EAAD,CACE7F,MAAQ,CAAE4gB,UAAU,QACpB5hB,KAAK,SACL0X,UAAQ,EACRlR,MAAI,EACJnB,KAAM,OACNqD,SAAO,EACP9B,QAAU,kBAAM7C,EAAM,CAAE0F,YAAY,GAAGiY,MAAM,GAAI5N,MAAM,OAEvD,kBAACrJ,GAAA,EAAD,CAAMpE,KAAK,gBAMrB,kBAACyC,GAAA,EAAM+W,QAAP,KACE,kBAAChZ,EAAA,EAAD,CAAQ7G,KAAK,SAASwZ,UAAQ,EAAC5S,QAAW,SAACwB,GACzCA,EAAElE,iBACF2S,MAFF,SAKA,kBAAChQ,EAAA,EAAD,CAAQ7G,KAAK,SAAS0Z,UAAQ,EAAC9S,QAAW,kBAAMoC,GAAQ,KAAxD,kB,oBC3ICqF,GAAa,SAAC,GAAkB,IAAbrM,EAAY,sBACpByL,aAASzL,GADW,mBACnC0L,EADmC,KAC5BC,EAD4B,KAE1C,OACE,kBAACvI,EAAA,EAAKM,MAAN,KACE,+BAAQ1D,EAAMsM,YACd,kBAAClI,GAAA,EAAD,iBAAYsH,EAAW1L,EAAvB,CAA+B1B,MAAQqN,EAAKC,SAAWD,EAAKrN,WAOrDuhB,GAAc,SAAC,GAAc,IAAZxb,EAAW,EAAXA,KACpB6R,EAAkB5K,eAAlB4K,cACF4J,EAAc5J,EAAc,GAAD,OAAI7R,EAAJ,WAAkBlE,MAC7C4f,EAAa7J,EAAc,GAAD,OAAI7R,EAAJ,UAAiBlE,MAC3C6f,EAAW9J,EAAc,GAAD,OAAI7R,EAAJ,QAAelE,MACvC8f,EAAa/J,EAAc,GAAD,OAAI7R,EAAJ,UAAiBlE,MAC3C+f,EAAahK,EAAc,GAAD,OAAI7R,EAAJ,UAAiBlE,MAEjD,OAAK2f,GAA+B,uBAAhBA,EAgBlB,kBAAChhB,EAAA,EAAD,KACE,kBAACiE,EAAA,EAAD,CAAQC,GAAI,MACT8c,EACD,kBAAC/c,EAAA,EAAOqE,UAAR,WAAsB4Y,EAAtB,OAAoCD,IAErCD,GAAe,2BAAIG,GACnBC,GAAc,kBAACC,GAAA,EAAD,KACZ7X,KAAEjJ,IAAI6gB,GAAW,SAACE,EAAI3V,GAAL,OAChB,kBAAC0V,GAAA,EAAK3Z,KAAN,CAAWlH,IAAKmL,GACbA,EAAE,GAAGkC,cAAgBlC,EAAER,UAAU,GAAG6L,QAAQ,kBAAmB,SADlE,IAEE,0BAAM9W,MAAO,CAAEiE,MAAM,MAAMod,UAAW,SAAUC,eAAgB,iBAAhE,IAAoFF,EAAI/S,MAAM,MAAM,GAApG,KAFF,KAIE,0BAAMrO,MAAO,CAAEiE,MAAM,UAArB,IAAkCmd,EAAI/S,MAAM,MAAM,GAAlD,WAzBN,kBAACvO,EAAA,EAAD,CAASC,OAAK,GACX+gB,GACD,kBAAC/c,EAAA,EAAD,CAAQC,GAAI,MACO,uBAAhB8c,GAAuC,uBACxC,kBAAC/c,EAAA,EAAOqE,UAAR,WAAsB4Y,EAAtB,OAAoCD,IAGtC,kBAAC,GAAD,CAAe1b,KAAI,UAAKA,EAAL,aA4Bdkc,GAAgB,SAAC,GAAwB,IAAtBxc,EAAqB,EAArBA,MAAS/D,EAAY,0BAC5CuL,EAAiBD,eAAjBC,cAD4C,EAE9BE,aAASzL,GAFqB,mBAE5C0L,EAF4C,KAEtCC,EAFsC,KAGnD,OACE,kBAACvI,EAAA,EAAKM,MAAN,CAAYpF,SAASqN,EAAKC,UAAWD,EAAKrN,SACtC0B,EAAMwgB,SAAW,+BAAQzc,GAC3B,kBAACK,GAAA,EAAD,CACEL,QAAQ/D,EAAMwgB,SAASzc,EACvB0c,MAAS,kBAACC,GAAA,EAAD,iBAAchV,EAAW1L,EAAzB,CACPhB,MACEgB,EAAMwgB,QAAS,CAAEnJ,OAAQ,EACvBsJ,oBAAqB,EACrBC,uBAAwB,GAAI,GAEhC1c,SAAYlE,EAAMkE,SAAUlE,EAAMkE,SAAU,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MAC/CoL,EAAcvL,EAAMqE,KAAKlE,SAG9BwL,EAAKC,SAAWD,EAAKrN,OACtB,kBAAC0J,GAAA,EAAD,CAAOkE,UAAQ,EAACC,QAAM,GACnBR,EAAKrN,SCgDCuiB,GA1HS,SAAC,GAAiC,IAA/Bhb,EAA8B,EAA9BA,KAAMmB,EAAwB,EAAxBA,QAASO,EAAe,EAAfA,SAAe,EACnC5I,qBAAWC,GAAvBjB,EAD+C,sBAEb6C,mBAAS,IAFI,mBAEjDsgB,EAFiD,KAElCC,EAFkC,OAGe/C,uBAAalhB,GAH5B,mBAGhDkkB,EAHgD,YAGxBC,EAHwB,EAGhChgB,QAA8BigB,EAHE,EAGRhgB,KAE/CrD,qBAAU,WACR,GAAGqjB,GAAeA,EAAYzd,YAAY,CAExC,IAAM0d,EAAqB5Z,EAAS6Z,SAAS/hB,KAAI,SAAAmC,GAAO,OAAIA,EAAQtD,MAChE6S,EAAU,GAEdmQ,EAAYzd,YAAY4W,QAAO,SAACC,EAAEC,EAAE3S,GAIlC,OAHG2S,EAAErc,KAAOijB,EAAmB3Y,SAAS+R,EAAErc,KACxC6S,EAAQhP,KAAM,CAAEzC,IAAIsI,EAAGzH,MAAOoa,EAAErc,GAAIuS,KAAK8J,EAAEvW,WAEtC+M,IACP,IAGFgQ,EAAkBhQ,MAGpB,CAACxJ,EAAS6Z,SAAUF,IAtBiC,MAwBlC/f,sBAAa+b,GAAwB,CACxDvV,OAAQ,SAAC8R,EAAD,GAA+C,IAA/B4H,EAA8B,EAArCngB,KAAOmgB,sBAEtB1C,mBAAQ0C,EAAsBD,UAAU,SAAA5f,GACtCiY,EAAM6E,OAAO,CACXpgB,GAAG,WAAD,OAAasD,EAAQtD,IACvBqgB,OAAO,CACLrG,UADK,SACKoJ,EADL,GAC2C,IAAd7C,EAAa,EAAbA,UAChC,OAAG6C,EAAqBjG,MAAK,SAAAuD,GAAG,OAAIH,EAAU,KAAKG,KAASyC,EAAsBnjB,MACzEojB,EAEH,GAAN,mBAAWA,GAAX,CAAiC,CAAE,MAAQ,YAAR,OAAoBD,EAAsBnjB,eAMvF8b,YAAa,YAA+B,EAA5BqH,sBACd1jB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,0BAA2BT,KAAM,aACzFgJ,GAAQ,IAGV+X,QAAS,SAACC,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,gCAAgC,6BAAnC,IAA0CugB,EAAI3d,SAAarD,KAAM,WACzHgJ,GAAQ,MAxBLua,EAxBgD,oBAoDvD,OAEE,kBAAC,KAAD,CACE9M,cAAgB,CACd2M,SAAU,IAGZxM,SAAa,SAACd,GACZ,IAAM3B,EAAS,GAKf,OAJI2B,EAAOsN,SAASxhB,SAClBuS,EAAOiP,SAAW,sCAGbjP,GAGT7O,SAAW,SAACwQ,GACVyN,EAAW,CAAEpf,UAAU,2BAAK2R,GAAN,IAAcvM,SAAUA,EAASrJ,UAGxD,gBAAG2W,EAAH,EAAGA,aAAatJ,EAAhB,EAAgBA,cAAhB,EAA8BiW,MAA9B,OAEC,kBAAC1a,GAAA,EAAD,CACEjB,KAAOA,EACPwO,eAAgB,EAChBC,oBAAoB,GAEpB,kBAACxN,GAAA,EAAM/D,OAAP,+BACA,kBAAC+D,GAAA,EAAMG,QAAP,KACE,kBAAC7D,EAAA,EAAD,KACE,kBAAC,GAAD,CAAeiB,KAAK,WAAWmc,SAAO,EAACzc,MAAM,UAC3CW,YAAY,kBACZ+c,QAAM,EACNxgB,QAASggB,EACTS,WAAS,EACTC,UAAQ,EACR1iB,MAAM,IACN8R,QAAU+P,EACVc,QAAW,kBAAMZ,KACjB9c,SAAc,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACjBoL,EAAc,WAAWpL,QAMjC,kBAAC2G,GAAA,EAAM+W,QAAP,KACE,kBAAChZ,EAAA,EAAD,CAAQ7G,KAAK,SAASwZ,UAAQ,EAAC5S,QAAW,SAACwB,GACzCA,EAAElE,iBACF2S,MAFF,SAKA,kBAAChQ,EAAA,EAAD,CAAQ7G,KAAK,SAAS0Z,UAAQ,EAAC9S,QAAW,kBAAMoC,GAAQ,KAAxD,kBC6NG6a,GAlUM,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,WAC9BhY,EAAQnI,KAAKU,MAAOZ,eAAea,QAAQ,aADI,EAElC5D,qBAAWC,GAAtBjB,EAF6C,sBAG9B6C,mBAAS,IAHqB,mBAG9CU,EAH8C,KAGzC8gB,EAHyC,OAIAxhB,oBAAS,GAJT,mBAI9CyhB,EAJ8C,KAI1BC,EAJ0B,OAKE1hB,oBAAS,GALX,mBAK9C2hB,EAL8C,KAKzBC,EALyB,OAMA5hB,oBAAS,GANT,mBAM9C6hB,EAN8C,KAM1BC,EAN0B,KAQ/CC,EAASC,cAETliB,EAAUC,cAVqC,EAWyBQ,mBAAS0c,GAAa,CAAEtb,UAAU,CAAEjE,GAAIqkB,EAAOR,YAAaA,GAAcU,KAAMX,IAA7IY,EAXoC,EAW7CzhB,QAAiC0hB,EAXY,EAWnBrkB,MAA4BskB,EAXT,EAWG1hB,KAXH,EAazBC,sBAAYkc,IAAjCwF,EAb8C,sBAc5B1hB,sBAAYmc,GAAiB,CACpD3V,OAAQ,SAAC8R,GACPA,EAAMqJ,MAAM,CACV5kB,GAAG,YAAD,OAAcgD,EAAKhD,OAGzB8b,YAAa,WACX1Z,EAAQyiB,SACRplB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAQ,qBAAD,OAAuByC,EAAKmD,KAA5B,YAA4CrG,KAAM,cAI1GoD,QAAS,SAAC4d,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,gFAAwCyC,EAAKmD,MAAO,6BAApD,IAA2D2a,EAAI3d,SAAarD,KAAM,cAbvIglB,EAd8C,sBA+B7B7hB,sBAAaic,IAA9B6F,EA/B8C,sBAgCzB9hB,sBAAagc,IAAlC+F,EAhC8C,oBAgE/CC,EAA4B,SAAC,GAA8B,IAA5BhhB,EAA2B,EAA3BA,UAAW6B,EAAgB,EAAhBA,SAC9C6e,EAAkB,CAChB1gB,UAAWA,EACXwF,OAAQ,SAAC8R,GACPA,EAAM6E,OAAO,CACXpgB,GAAG,WAAD,OAAaiE,EAAUX,SACzB+c,OAAQ,CACNrG,UADM,SACIoJ,EADJ,GAC0C,IAAd7C,EAAa,EAAbA,UAChC,OAAO6C,EAAqBzhB,QAC1B,SAAAujB,GAAY,OAAKliB,EAAKhD,KAAOugB,EAAU,KAAM2E,UAOrD3J,EAAM6E,OACJ,CACEpgB,GAAG,YAAD,OAAcgD,EAAKhD,IACrBqgB,OAAQ,CACN6C,SADM,SACGiC,EADH,GACwC,IAAd5E,EAAa,EAAbA,UAE9B,OAAO4E,EAAoBxjB,QACzB,SAAAyjB,GAEE,OAAOnhB,EAAUX,UAAYid,EAAU,KAAM6E,aAOtDC,MACL,SAAAC,GACE7lB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAQ,oBAAD,OAAsBuF,GAAmB,GAAzC,oCAAuE9C,EAAKmD,MAAQrG,KAAM,aAChJsC,EAAQyiB,YAEV,SAAA/D,GAAG,OAAKrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,8EAAsCyC,EAAKmD,KAA3C,YAAmDL,EAAS,OAAOA,EAAW,IAAK,6BAAnF,IAA0Fgb,EAAI3d,SAAarD,KAAM,eArGhI,EA6GxBwC,mBAAS,CAAEod,MAAM,GAAGE,GAAI,eA7GA,mBA6G9CH,EA7G8C,KA6GtC8F,EA7GsC,OA8GLjjB,oBAAS,GA9GJ,mBA8G9CkjB,EA9G8C,KA8G5BC,GA9G4B,KA2HrD,OAXA9lB,qBAAU,WACLikB,GACDE,EAAQF,GAEPc,GACDZ,EAAQY,EAAYgB,eAGtB,CAAC9B,EAAcc,EAAaZ,IAG3BU,EACM,kBAACvO,GAAA,EAAD,CAAQ1N,QAAM,EAACpD,KAAK,UAApB,+BAGNsf,EACM,kBAAC5f,EAAA,EAAD,CAAQC,GAAG,MAAX,wBAGL9B,EAOF,oCACE,kBAAC6B,EAAA,EAAD,CAAQC,GAAG,MAAM9B,EAAKmD,MACtB,kBAAC5B,EAAA,EAAD,CAAMohB,QAAM,GACV,kBAACphB,EAAA,EAAKiH,IAAN,CAAUwL,QAAQ,KAChB,kBAACzS,EAAA,EAAKI,OAAN,KACE,kBAACE,EAAA,EAAD,CAAQC,GAAI,MAAZ,eACA,kBAAClE,EAAA,EAAD,KAEGoC,EAAKgI,WAAahI,EAAKgI,UAAU7J,KAAI,SAACgI,EAASgO,GAAV,OACpC,kBAACvW,EAAA,EAAD,CAASQ,IAAK+V,EAAO3M,SAAO,EAAC1J,MAAO,CAAEwN,QAAQ,cAAe6K,OAAO,SAAWpY,MAAM,WAChF8K,GAASA,EAAM+Z,WAAWC,OAC7B,kBAAC/b,GAAA,EAAD,CAAOgc,UAAQ,EAAE3gB,KAAK,OAAOrE,MAAO,CAAEsY,gBAAgB,gBACpD,kBAAC7O,GAAA,EAAD,CAAM8O,MAAI,EAAElT,KAAK,SAASO,QAAW,WACnC6e,EAAW,CAAE7F,MAAM,+CAAD,OAAiDvW,EAASC,aAA1D,yBAA+FwW,GAAI,YArGlH,SAAC,GAA0B,IAAxB5f,EAAuB,EAAvBA,GAAIoJ,EAAmB,EAAnBA,aAC5B4b,EAAkB,CAChB/gB,UAAU,CAAEjE,MACZyJ,OAAQ,SAAC8R,GACPA,EAAMqJ,MAAM,CACV5kB,GAAG,YAAD,OAAcA,QAGnBqlB,MACD,SAAAC,GAAG,OAAK7lB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAQ,qBAAD,OAAuB6I,EAAvB,YAA+CtJ,KAAM,gBACnH,SAAAghB,GAAG,OAAKrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,4EAAoC6I,GAAe,6BAAnD,IAA0D0X,EAAI3d,SAAarD,KAAM,cA4F/HimB,CAAe,CAAE/lB,GAAGmJ,EAASnJ,GAAIoJ,aAAcD,EAASC,kBAE1Dqc,IAAoB,OAIvBtc,EAASC,iBAIZyC,GAASA,EAAM+Z,WAAWC,OAC1B,kBAAClf,EAAA,EAAD,CAAQ7F,MAAO,CAAE4gB,UAAU,OAAQpT,QAAQ,SAAUkJ,UAAQ,EAAClR,MAAI,EAACkC,SAAO,EAACrD,KAAK,QAAQuB,QAAU,kBAAMwd,GAAwB,KAAO,kBAAC3Z,GAAA,EAAD,CAAMpE,KAAK,WAOxJ,kBAAC5B,EAAA,EAAKI,OAAN,KACE,kBAACE,EAAA,EAAD,CAAQC,GAAI,MAAZ,kBACA,kBAACwG,GAAA,EAAD,KACE,kBAACA,GAAA,EAAMzG,OAAP,KACE,kBAACyG,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMG,WAAP,sBACA,kBAACH,GAAA,EAAMG,WAAP,gBACA,kBAACH,GAAA,EAAMG,WAAP,gBACA,kBAACH,GAAA,EAAMG,WAAP,YAGJ,kBAACH,GAAA,EAAMI,KAAP,KAEI1I,EAAKme,aAAene,EAAKme,YAAYzf,OAAS,GAAKsB,EAAKme,YAAYhgB,KAAI,SAACmgB,EAAQnK,GAAT,OACtE,kBAAC7L,GAAA,EAAME,IAAP,CAAWpK,IAAK+V,GACd,kBAAC7L,GAAA,EAAMM,KAAP,KACG0V,EAAQ/X,aAEX,kBAAC+B,GAAA,EAAMM,KAAP,KACG0V,EAAQE,OAEX,kBAAClW,GAAA,EAAMM,KAAP,KACG0V,EAAQ1N,OAET/H,IAAUA,EAAM+Z,WAAWC,OAASha,EAAM+Z,WAAWtiB,QAAQ0iB,KAAK1b,SAAU+Z,EAAO4B,aACjF,kBAAC3a,GAAA,EAAMM,KAAP,KACE,kBAACrB,GAAA,EAAD,CAAM8O,MAAI,EAAClT,KAAK,SAASO,QAAU,WACjC6e,EAAW,CAAE7F,MAAM,4CAAD,OAA8C4B,EAAQ/X,YAAtD,yBAA0FqW,GAAI,YAlK3G,SAAC,GAAyB,IAAvB5f,EAAsB,EAAtBA,GAAIuJ,EAAkB,EAAlBA,YACtCwb,EAAc,CACZ9gB,UAAU,CAAEjE,KAAGqJ,SAAUrG,EAAKhD,IAC9ByJ,OAAQ,SAAC8R,GAEPA,EAAMqJ,MAAM,CACV5kB,GAAG,WAAD,OAAaA,QAGlBqlB,MACD,SAAAC,GAAG,OAAK7lB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAQ,oBAAD,OAAsBgJ,EAAtB,YAA6CzJ,KAAM,gBACjH,SAAAghB,GAAG,OAAKrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,2EAAmCgJ,GAAc,6BAAjD,IAAwDuX,EAAI3d,SAAarD,KAAM,cAwJrHomB,CAAyB,CAAElmB,GAAIshB,EAAQthB,GAAIuJ,YAAa+X,EAAQ/X,iBAElEkc,IAAoB,YAQlC5Z,IAAUA,EAAM+Z,WAAWC,OAASha,EAAM+Z,WAAWtiB,QAAQ0iB,KAAK1b,SAAU+Z,EAAO4B,aACrF,kBAAC3a,GAAA,EAAM6a,OAAP,KACE,kBAAC7a,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMM,KAAP,KACE,kBAACjF,EAAA,EAAD,CAAQ6Q,UAAQ,EAAClR,MAAI,EAACkC,SAAO,EAACrD,KAAK,QAASuB,QAAU,kBAAM0d,GAAuB,KAAQ,kBAAC7Z,GAAA,EAAD,CAAMpE,KAAK,cAWhH,kBAAC5B,EAAA,EAAKI,OAAN,KACE,kBAACE,EAAA,EAAD,CAAQC,GAAI,MAAZ,cACA,kBAACwG,GAAA,EAAD,CAAOqa,QAAM,GACX,kBAACra,GAAA,EAAMzG,OAAP,KACE,kBAACyG,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMG,WAAP,kBACA,kBAACH,GAAA,EAAMG,WAAP,MACA,kBAACH,GAAA,EAAMG,WAAP,QAGJ,kBAACH,GAAA,EAAMI,KAAP,KAEI1I,EAAKkgB,UAAYlgB,EAAKkgB,SAASxhB,OAAS,GAAKsB,EAAKkgB,SAAS/hB,KAAI,SAACmC,EAAQ6T,GAAT,OAC7D,kBAAC7L,GAAA,EAAME,IAAP,CAAWpK,IAAK+V,GACd,kBAAC7L,GAAA,EAAMM,KAAP,KACGtI,EAAQwC,UAEX,kBAACwF,GAAA,EAAMM,KAAP,eACMtI,EAAQ8iB,QAAQC,KADtB,cACgC/iB,EAAQ8iB,QAAQE,SADhD,IAC2D,kBAACC,GAAA,EAAD,CAAMpgB,KAAM7C,EAAQ8iB,QAAQE,SAAWhjB,EAAQ8iB,QAAQE,QAAQE,iBAEzH3a,IAAUA,EAAM+Z,WAAWC,OAASha,EAAM+Z,WAAWtiB,QAAQ0iB,KAAK1b,SAAU+Z,EAAO4B,aAClF,kBAAC3a,GAAA,EAAMM,KAAP,KACIyY,EAAO4B,YAAc3iB,EAAQtD,IAC/B,kBAACuK,GAAA,EAAD,CAAM8O,MAAI,EAAGlT,KAAK,SAASO,QAAS,WAClC6e,EAAW,CAAE7F,MAAM,4CAAD,OAA8Cpc,EAAQwC,SAAtD,yBAAuF8Z,GAAI,WAC3GqF,EAA0B,CAAEhhB,UAAU,CAAEX,QAASA,EAAQtD,GAAIqJ,SAAUrG,EAAKhD,IAAM8F,SAAUxC,EAAQwC,cAEtG2f,IAAoB,YAM/B5Z,IAAUA,EAAM+Z,WAAWC,OAASha,EAAM+Z,WAAWtiB,QAAQ0iB,KAAK1b,SAAU+Z,EAAO4B,aACvF,kBAAC3a,GAAA,EAAM6a,OAAP,KACE,kBAAC7a,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMM,KAAP,KACE,kBAACjF,EAAA,EAAD,CAAQ6Q,UAAQ,EAAClR,MAAI,EAACkC,SAAO,EAACrD,KAAK,QAAQuB,QAAU,kBAAMsd,GAAuB,KAAO,kBAACzZ,GAAA,EAAD,CAAMpE,KAAK,eAU/G,kBAAC5B,EAAA,EAAKiH,IAAN,KACG6Y,EAAO4B,WAAcpa,IAAUA,EAAM+Z,WAAWC,OAASha,EAAM+Z,WAAWtiB,QAAQ0iB,KAAK7kB,KAAI,SAAAmC,GAAO,OAAIA,EAAQmjB,OAAKnc,SAAU+Z,EAAO4B,aACrI,kBAACtf,EAAA,EAAD,CAAQ6S,UAAQ,EACd9S,QAAS,WACP6e,EAAW,CAAE7F,MAAM,6CAAD,OAA+C1c,EAAKmD,KAApD,wBAAgFyZ,GAAI,WACpGqF,EAA0B,CAAEhhB,UAAU,CAAEX,QAAS+gB,EAAO4B,UAAW5c,SAAUrG,EAAKhD,SAEpFylB,IAAoB,KALxB,0BASEpB,EAAO4B,WAAapa,GAASA,EAAM+Z,WAAWC,OAChD,kBAAClf,EAAA,EAAD,CAAQL,MAAI,EAACkT,UAAQ,EACnB9S,QAAS,WACP6e,EAAW,CAAE7F,MAAM,6CAAD,OAA+C1c,EAAKmD,KAApD,MAA+DyZ,GAAI,WACnFkF,EAAe,CAAE7gB,UAAU,CAAEoF,SAAUrG,EAAKhD,SAG9CylB,IAAoB,KANxB,IAOM,kBAAClb,GAAA,EAAD,CAAMpE,KAAK,UAPjB,uBAYHqf,GACC,kBAAC,GAAD,CAAc7d,KAAO6d,EAAkB/F,QAAUA,EAAS3W,QAAU2c,KAKpE1B,GACF,kBAAC,GAAD,CAAiBpc,KAAMoc,EAAqBjb,QAAWkb,EAAwB3a,SAAWrG,IAIxFihB,GACF,kBAAC,GAAD,CAAkBtc,KAAMsc,EAAsBnb,QAAWob,EAAyB7a,SAAWrG,IAI3FmhB,GACA,kBAAC,GAAD,CAAiBxc,KAAOwc,EAAqBrb,QAAWsb,EAAwB/a,SAAWrG,KAnLxF,MCpBI0jB,GAnHc,SAAC,GAAgC,IAA9B/e,EAA6B,EAA7BA,KAAMmB,EAAuB,EAAvBA,QAASxF,EAAc,EAAdA,QAAc,EACvC7C,qBAAWC,GAAvBjB,EADmD,sBAEpB6C,mBAAS,IAFW,mBAEpDua,EAFoD,KAEvC8J,EAFuC,OAIa7G,uBAAaT,IAJ1B,mBAIrDuH,EAJqD,YAI3BpC,EAJ2B,EAIpCzhB,QAA+B6gB,EAJK,EAIV5gB,KAEjDrD,qBAAU,WACR,GAAGikB,GAAgBA,EAAaiD,aAAa,CAE3C,IAAMC,EAAmBxjB,EAAQ0W,UAAU7Y,KAAI,SAAAkI,GAAQ,OAAIA,EAASrJ,MAE9D+mB,EAAiBnD,EAAaiD,aAAa1lB,KAAI,SAACkI,EAAS8N,GAC7D,MAAO,CAAE/V,IAAI+V,EAAOlV,MAAOoH,EAASrJ,GAAIuS,KAAMlJ,EAASlD,SAEzDwgB,EAAgBI,EAAgBplB,QAAQ,SAAAoR,GAAM,OAAK+T,EAAiBxc,SAAUyI,EAAO9Q,cAIvF,CAAC2hB,EAActgB,EAAQ0W,YAlBkC,MAoBpC/W,sBAAa1D,EAAiB,CACnDkK,OAAQ,SAAC8R,EAAD,GAAyC,IAAzByL,EAAwB,EAA/BhkB,KAAOgkB,gBAEtBvG,mBAAQuG,EAAgBhN,WAAW,SAAA3Q,GACjCkS,EAAM6E,OAAO,CACXpgB,GAAG,YAAD,OAAcqJ,EAASrJ,IACzBqgB,OAAO,CACL6C,SADK,SACI+D,EADJ,GAC0C,IAAd1G,EAAa,EAAbA,UAC/B,OAAG0G,EAAqB9J,MAAK,SAAAuD,GAAG,OAAIH,EAAU,KAAKG,KAASpd,EAAQtD,MAC3DinB,EAEH,GAAN,mBAAWA,GAAX,CAAiC,CAAE,MAAQ,UAAR,OAAkB3jB,EAAQtD,eAOvE8b,YAAa,SAAEoL,GACbznB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,yCAA0CT,KAAM,aACxGgJ,GAAQ,IAGV+X,QAAS,SAACC,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,oCAAoC,6BAAvC,IAA8CugB,EAAI3d,SAAarD,KAAM,WAC7HgJ,GAAQ,MAzBLqe,EApBoD,oBAiD3D,OAEE,kBAAC,KAAD,CACE5Q,cAAgB,CACdyD,UAAW,IAGbtD,SAAa,SAACd,GACZ,IAAM3B,EAAS,GAKf,OAJI2B,EAAOoE,UAAUtY,SACnBuS,EAAO+F,UAAY,uCAGd/F,GAGT7O,SAAW,SAACwQ,GACVuR,EAAa,CAAEljB,UAAU,2BAAK2R,GAAN,IAAcqQ,UAAW3iB,EAAQtD,UAG1D,gBAAG2W,EAAH,EAAGA,aAAatJ,EAAhB,EAAgBA,cAAhB,OAEC,kBAACzE,GAAA,EAAD,CACEjB,KAAOA,EACPwO,eAAgB,EAChBC,oBAAoB,GAEpB,kBAACxN,GAAA,EAAM/D,OAAP,mCACA,kBAAC+D,GAAA,EAAMG,QAAP,KACE,kBAAC7D,EAAA,EAAD,KACE,kBAAC,GAAD,CAAeiB,KAAK,YAAYmc,SAAO,EAACzc,MAAM,YAC5CW,YAAY,mBACZ+c,QAAM,EACNxgB,QAASyhB,EACThB,WAAS,EACTC,UAAQ,EACR1iB,MAAM,IACN8R,QAAUgK,EACV6G,QAAW,kBAAMkD,KACjB5gB,SAAc,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACjBoL,EAAc,YAAYpL,QAMlC,kBAAC2G,GAAA,EAAM+W,QAAP,KACE,kBAAChZ,EAAA,EAAD,CAAQ7G,KAAK,SAASwZ,UAAQ,EAAC5S,QAAW,SAACwB,GACzCA,EAAElE,iBACF2S,MAFF,SAKA,kBAAChQ,EAAA,EAAD,CAAQ7G,KAAK,SAAS0Z,UAAQ,EAAC9S,QAAW,kBAAMoC,GAAQ,KAAxD,kBCHGse,GAjGa,SAAC,GAAgC,IAA9Bzf,EAA6B,EAA7BA,KAAMmB,EAAuB,EAAvBA,QAASxF,EAAc,EAAdA,QAAc,EACtC7C,qBAAWC,GAAvBjB,EADkD,sBAE/B6C,mBAAS,IAFsB,mBAEnD+kB,EAFmD,KAE5CC,EAF4C,OAGnCrkB,sBAAahE,EAAmB,CACrDwK,OAAO,SAAC8R,GACNA,EAAM6E,OAAO,CACXpgB,GAAG,WAAD,OAAasD,EAAQtD,IACvBqgB,OAAO,CACLkH,YADK,SACOC,GAGV,IAAIC,EAAW,GAOf,OALAhH,mBAAQ4G,GAAQ,SAAAzT,GACV4T,EAAkBrK,MAAK,SAAAuD,GAAQ,OAAOA,IAAQ9M,MAChD6T,EAAU5jB,KAAK+P,MAGb,GAAN,mBAAW4T,GAAsBC,QAKzC3L,YAAa,YAAsB,EAAnBqE,aACd1gB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAQ,mBAAD,OAAqB8mB,EAAO3X,WAA5B,WAAiD5P,KAAM,aAC7GgJ,GAAQ,IAGV+X,QAAS,SAACC,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,8BAA8B,6BAAjC,IAAwCugB,EAAI3d,SAAarD,KAAM,WACvHgJ,GAAQ,MA3BLqX,EAHmD,oBAkC1D,OAEE,kBAAC,KAAD,CACE5J,cAAgB,CACd8Q,OAAQ,IAGV3Q,SAAa,SAACd,GAEZ,IAAM3B,EAAS,GACf,GAAG2B,EAAOyR,OAAO3lB,OAAQ,CACvB,IAAMgmB,EAAU,GAChBjH,mBAAQ7K,EAAOyR,OAAOlY,MAAM,MAAM,SAAAyE,GAC7BD,GAAcC,EAAMF,SAASgU,EAAS7jB,KAAK+P,MAG5C8T,EAAShmB,SACXuS,EAAOoT,OAAP,UAAmBK,EAAShY,WAA5B,yBAGFuE,EAAOoT,OAAS,2BAElB,OAAOpT,GAGT7O,SAAW,SAACwQ,GACV0R,EAAU1R,EAAOyR,OAAOlY,MAAM,MAC9BgR,EAAa,CAAElc,UAAU,CAAGojB,OAAQzR,EAAOyR,OAAOlY,MAAM,KAAM8W,UAAW3iB,EAAQtD,SAGlF,gBAAG2W,EAAH,EAAGA,aAAH,OAEC,kBAAC/N,GAAA,EAAD,CACEjB,KAAOA,EACPwO,eAAgB,EAChBC,oBAAoB,GAEpB,kBAACxN,GAAA,EAAM/D,OAAP,+BACA,kBAAC+D,GAAA,EAAMG,QAAP,KACE,kBAAC7D,EAAA,EAAD,KACE,kBAAC,GAAD,CAAYiB,KAAK,SAASN,MAAM,SAAS/F,KAAK,OAAOiB,MAAM,IAAIyF,YAAY,oCAG/E,kBAACoC,GAAA,EAAM+W,QAAP,KACE,kBAAChZ,EAAA,EAAD,CAAQ7G,KAAK,SAASwZ,UAAQ,EAAC5S,QAAW,SAACwB,GACzCA,EAAElE,iBACF2S,MAFF,SAKA,kBAAChQ,EAAA,EAAD,CAAQ7G,KAAK,SAAS0Z,UAAQ,EAAC9S,QAAW,kBAAMoC,GAAQ,KAAxD,kB,uOCrFZ,IAsJe6e,GAtJQ,SAAC,GAAgC,IAA9BhgB,EAA6B,EAA7BA,KAAMmB,EAAuB,EAAvBA,QAASxF,EAAc,EAAdA,QAAc,EAClC7C,qBAAWC,GAAvBjB,EAD8C,sBAEjCwD,sBAAa9D,EAAW,CAC1CsK,OAAO,SAAC8R,EAAD,GAAoC,IAAnBqM,EAAkB,EAA1B5kB,KAAQ4kB,UACtBrM,EAAM6E,OAAO,CACXpgB,GAAG,WAAD,OAAasD,EAAQtD,IACvBqgB,OAAO,CACLnE,OADK,SACE2L,EADF,GACsC,IAAdtH,EAAa,EAAbA,UACvBuH,EAAc,GAgBlB,OAdArH,mBAAQmH,GAAU,SAAChb,GACbib,EAAmB1K,MAAK,SAAAuD,GAAG,OAAIH,EAAU,KAAKG,KAAS9T,EAAM5M,OAC/D8nB,EAAajkB,KAAK0X,EAAMoF,cAAc,CACpC3d,KAAK4J,EACLgU,SAAU/hB,cAAF,YAUR,GAAN,mBAAWgpB,GAAuBC,QAK1ChM,YAAa,WACXrc,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,wBAAyBT,KAAM,aACvFgJ,GAAQ,IAGV+X,QAAS,SAACC,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,8BAA8B,6BAAjC,IAAwCugB,EAAI3d,SAAarD,KAAM,WACvHgJ,GAAQ,MAlCL8e,EAF8C,oBAyCrD,OAEE,kBAAC,KAAD,CACErR,cAAgB,CACd2F,OAAQ,CAAC,CAAE/V,KAAK,GAAG2F,UAAU,MAG/B4K,SAAa,SAACd,GAEZ,IAAM3B,EAAS,GA6Bf,OA5BG2B,EAAOsG,OAAOxa,QACf+e,mBAAQ7K,EAAOsG,QAAQ,SAACtP,EAAMuK,GACxBvK,EAAMzG,OACH8N,EAAOiI,SAAQjI,EAAOiI,OAAO,IAC7BjI,EAAOiI,OAAO/E,KAASlD,EAAOiI,OAAO/E,GAAS,IACnDlD,EAAOiI,OAAO/E,GAAOhR,KAAO,6BAG1ByG,EAAMd,YACHmI,EAAOiI,SAAQjI,EAAOiI,OAAO,IAC7BjI,EAAOiI,OAAO/E,KAASlD,EAAOiI,OAAO/E,GAAS,IAEnDlD,EAAOiI,OAAO/E,GAAOrL,UAAY,gCAGhCc,EAAMd,YACHc,EAAMd,UAAUmD,MAAM,yCACnBgF,EAAOiI,SAAQjI,EAAOiI,OAAO,IAC7BjI,EAAOiI,OAAO/E,KAASlD,EAAOiI,OAAO/E,GAAS,IAEnDlD,EAAOiI,OAAO/E,GAAOrL,UAAY,6CAQlCmI,GAGT7O,SAAW,SAACwQ,GAEVgS,EAAU,CAAE3jB,UAAU,2BAAK2R,GAAN,IAAcqQ,UAAW3iB,EAAQtD,UAGvD,gBAAG2W,EAAH,EAAGA,aAAcf,EAAjB,EAAiBA,OAAjB,OAEC,kBAAChN,GAAA,EAAD,CACEjB,KAAOA,EACPwO,eAAgB,EAChBC,oBAAoB,GAEpB,kBAACxN,GAAA,EAAM/D,OAAP,+BACA,kBAAC+D,GAAA,EAAMG,QAAP,KACE,kBAAC7D,EAAA,EAAD,KACE,kBAAC,KAAD,CAAaiB,KAAM,WAChB,gBAAGtC,EAAH,EAAGA,KAAKuT,EAAR,EAAQA,OAAR,OAAsB,oCACnBxB,EAAOsG,OAAOxa,OAAS,GAAKkU,EAAOsG,OAAO/a,KAAI,SAACyL,EAAMuK,GAAP,OAC9C,kBAAC,WAAD,CAAU/V,IAAM+V,GACd,kBAACjS,EAAA,EAAK+D,MAAN,CAAYnI,MAAO,CAAEqY,OAAO,GAAKsI,OAAO,MACtC,kBAAC,GAAD,CAAYtb,KAAI,iBAAYgR,EAAZ,UAA2B3Q,YAAY,eACvD,kBAAC,GAAD,CAAgBL,KAAI,iBAAYgR,EAAZ,eAAgCtR,OAAK,EAACW,YAAY,eAE3D,IAAV2Q,GACJ,kBAAC5M,GAAA,EAAD,CACE8O,MAAI,EACJlT,KAAM,SACNpB,MAAM,MACN2B,QAAU,kBAAM0Q,EAAOD,WAK5B,kBAACxQ,EAAA,EAAD,CACE7F,MAAQ,CAAE4gB,UAAU,QACpB5hB,KAAK,SACL0X,UAAQ,EACRlR,MAAI,EACJnB,KAAM,OACNqD,SAAO,EACP9B,QAAU,kBAAM7C,EAAM,CAAEsC,KAAK,GAAG2F,UAAU,OAE1C,kBAACvB,GAAA,EAAD,CAAMpE,KAAK,gBAMrB,kBAACyC,GAAA,EAAM+W,QAAP,KACE,kBAAChZ,EAAA,EAAD,CAAQ7G,KAAK,SAASwZ,UAAQ,EAAC5S,QAAW,SAACwB,GACzCA,EAAElE,iBACF2S,MAFF,SAKA,kBAAChQ,EAAA,EAAD,CAAQ7G,KAAK,SAAS0Z,UAAQ,EAAC9S,QAAW,kBAAMoC,GAAQ,KAAxD,kB,oBCrDGif,GApFc,SAACjmB,GAAW,IAAD,EAElBrB,qBAAWC,GAAvBjB,EAF8B,sBAGNwD,sBAAY5D,EAAmB,CAC7Dyc,YAAa,WACXrc,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,sBAAuBT,KAAM,aACrFgC,EAAMgH,SAAQ,IAGhB5F,QAAS,SAAC4d,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,8BAA8B,6BAAjC,IAAwCugB,EAAI3d,SAAarD,KAAM,WACvHgC,EAAMgH,SAAQ,MAXoB,mBAG/Bkf,EAH+B,KAGnBjlB,EAHmB,KAGnBA,QAkBnB,OACE,kBAAC6F,GAAA,EAAD,CACEsN,WAAS,EACTC,eAAe,EACfC,oBAAoB,EACpBzO,KAAQ7F,EAAM6F,KACdkB,QAAU,kBAAO/G,EAAMgH,SAAQ,IAC/BuN,OAAS,kBAAMvU,EAAMgH,SAAS,KAE9B,kBAACmf,GAAA,EAAD,yBACA,kBAACC,GAAA,EAAD,KAEGnlB,GACG,kBAACiT,GAAA,EAAD,CAAQzN,QAAM,GAAd,eAEE,kBAAC0N,GAAA,EAAD,OAIN,kBAAC,KAAD,CACEM,cAzBQ,CACd4R,OAAO,GACPC,WAAW,IAwBL1R,SAAW,SAACd,GAEV,IAAM3B,EAAS,GAWf,OARI2B,EAAOuS,SACTlU,EAAOkU,OAAS,2BAGfvS,EAAOuS,SAAWvS,EAAOwS,aAC1BnU,EAAOmU,WAAa,sCAGfnU,GAIT7O,SAAW,SAACwQ,GACVoS,EAAU,CAAE/jB,UAAU,CAAEgiB,UAAUnkB,EAAMwB,QAAQtD,GAAIyC,WAAYmT,EAAOuS,aAIxE,gBAAGxR,EAAH,EAAGA,aAAa2M,EAAhB,EAAgBA,MAAOrP,EAAvB,EAAuBA,OAAvB,OAAoC,kBAAC/O,EAAA,EAAD,CAAMpE,MAAO,CAAE8X,aAAa,QAAUxT,SAAWuR,GACpF,kBAACpS,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKiH,IAAN,KACE,kBAAC,GAAD,CAAYrF,KAAK,SAASN,MAAM,UAAU/F,KAAK,cAEjD,kBAACyE,EAAA,EAAKiH,IAAN,KACE,kBAAC,GAAD,CAAarF,KAAK,aAAaN,MAAM,cAAc/F,KAAK,eAG3DwjB,GAASlZ,KAAEkT,QAAQrJ,IACpB,kBAACtN,EAAA,EAAD,CAAQ7G,KAAK,SAASgB,MAAO,CAAE4gB,UAAW,QAAUpI,UAAQ,GAA5D,qBCoGG+O,GA1KE,SAACvmB,GAChB,IAAMwmB,EAAgB5kB,KAAKU,MAAOZ,eAAea,QAAQ,aAD/B,EAEN5D,qBAAWC,GAAvBjB,EAFkB,sBAGqB6C,oBAAS,GAH9B,mBAGpBkjB,EAHoB,KAGFC,EAHE,OAIwBnjB,oBAAS,GAJjC,mBAIpBimB,EAJoB,KAIDC,EAJC,OAKkClmB,oBAAS,GAL3C,mBAKpBmmB,EALoB,KAKIC,EALJ,OAMoCpmB,oBAAS,GAN7C,mBAMpBqmB,EANoB,KAMKC,EANL,OAQGtmB,mBAAS,CAAEod,MAAM,GAAGE,GAAG,eAR1B,mBAQnBH,EARmB,KAQX8F,EARW,OASYjjB,mBAASR,EAAMkB,MAT3B,mBASnBggB,EATmB,KASP6F,EATO,KAUpBzmB,EAAUC,cACZ4jB,EAAY3B,cAAY2B,UAEpBjjB,EAASH,mBAAS/D,EAAY,CACpCmF,UAAU,CAAEjE,GAAGimB,GACfpF,QAAS,SAACC,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,mCAAmC,6BAAtC,IAA6CugB,EAAI3d,SAAarD,KAAM,cAHxHkD,KAMRrD,qBAAU,WACLqD,GAAQA,EAAK8lB,YACdD,EAAe7lB,EAAK8lB,cAErB,CAAC9lB,IAvBsB,MA0BFC,sBAAY3D,EAAe,CACjD2E,UAAU,CAAEgiB,UAAWA,GACvBxc,OAAQ,SAAC8R,GACPA,EAAMqJ,MAAM,CACV5kB,GAAG,WAAD,OAAaimB,MAGnBnK,YAAa,YAAoB,EAAjBoF,WACdzhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,kBAAmBT,KAAM,aACjFsC,EAAQyB,KAAK,wBAEfgd,QAAS,SAACC,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,kCAAkC,6BAArC,IAA4CugB,EAAI3d,SAAarD,KAAM,cAZxHipB,EA1BmB,sBA4CM9lB,sBAAY/D,GAArC8pB,EA5CmB,sBAoEJ/lB,sBAAY7D,GAA3B6pB,EApEmB,oBAoF1B,OACE,oCACE,kBAAC1kB,EAAA,EAAD,CAAMohB,QAAM,GACV,kBAACphB,EAAA,EAAKiH,IAAN,KACE,kBAAC5K,EAAA,EAAD,CAASC,OAAK,EAACR,UAAQ,GACrB,kBAACwE,EAAA,EAAD,CAAQC,GAAI,MAAZ,eACE,kBAACD,EAAA,EAAOqE,UAAR,gEACF,kBAACoC,GAAA,EAAD,CAAOjL,UAAQ,EAAEmK,SAAO,EAAC0e,YAAU,EAACvD,QAAM,GACxC,kBAACra,GAAA,EAAMI,KAAP,KACGsX,GAAeA,EAAYuE,YAAYpmB,KAAI,SAACyS,EAAMlK,GAAP,OAC1C,kBAAC4B,GAAA,EAAME,IAAP,CAAWpK,IAAKsI,GACd,kBAAC4B,GAAA,EAAMM,KAAP,KAAagI,GACb,kBAACtI,GAAA,EAAMM,KAAP,KAAY,kBAACrB,GAAA,EAAD,CAAM8O,MAAI,EAAClT,KAAK,QAC1BO,QACE,WACE+e,GAAoB,GACpBF,EAAW,CAAE7F,MAAM,8CAAgDE,GAAI,kBAvD7D,SAAChM,GACjCoV,EAAsB,CACpB/kB,UAAU,CAAE2P,MAAOA,EAAOqS,UAAWA,GACrCxc,OAAO,SAAC8R,GACNA,EAAM6E,OAAO,CACXpgB,GAAG,WAAD,OAAaimB,GACf5F,OAAO,CACLkH,YADK,SACO4B,GACV,OAAO,YAAIA,EAAexnB,QAAO,SAAAynB,GAAI,OAAIA,IAASxV,aAMzDyR,MACD,SAAAC,GAAG,OAAI7lB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAQ,YAAD,OAAcqT,EAAd,+BAAmD9T,KAAM,gBACtH,SAAAghB,GAAG,OAAIrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,iCAAkCT,KAAM,cAuCNupB,CAA0BzV,gBAMrH,kBAAC1O,EAAA,EAAKyB,OAAN,CAAa7F,MAAO,CAAE4gB,UAAU,UAAWlZ,SAAO,EAACrD,KAAK,OAAOuB,QAAS,kBAAMgiB,GAA2B,KAAzG,eAEF,kBAAC9nB,EAAA,EAAD,CAASC,OAAK,EAACR,UAAQ,GACrB,kBAACwE,EAAA,EAAD,CAAQC,GAAI,MAAZ,SACE,kBAACD,EAAA,EAAOqE,UAAR,yDACF,kBAACoC,GAAA,EAAD,CAAOjL,UAAQ,EAAEmK,SAAO,EAAC0e,YAAU,EAACvD,QAAM,GACxC,kBAACra,GAAA,EAAMI,KAAP,KACGsX,GAAeA,EAAY9G,OAAO/a,KAAI,SAACyL,EAAMlD,GAAP,OACrC,kBAAC4B,GAAA,EAAME,IAAP,CAAWpK,IAAKsI,GACd,kBAAC4B,GAAA,EAAMM,KAAP,KAAagB,EAAMzG,KAAnB,IAA0B,6CAA1B,IAAsDyG,EAAMd,WAC5D,kBAACR,GAAA,EAAMM,KAAP,KAAY,kBAACrB,GAAA,EAAD,CAAM8O,MAAI,EAAClT,KAAK,QAC1BO,QACE,WACE+e,GAAoB,GACpBF,EAAW,CAAE7F,MAAM,8CAAgDE,GAAI,kBAnD1E5f,EAmD4F4M,EAAM5M,GAnD/FspB,EAmDmG1c,EAAMzG,UAlD/H8iB,EAAY,CACVhlB,UAAU,CAAEjE,GAAIA,EAAIimB,UAAWA,GAC/Bxc,OAAO,SAAC8R,GACNA,EAAMqJ,MAAM,CACV5kB,GAAG,aAAD,OAAeA,QAGpBqlB,MACD,SAAAC,GAAG,OAAI7lB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAQ,YAAD,OAAc+oB,EAAd,gCAAwDxpB,KAAM,gBAC3H,SAAAghB,GAAG,OAAIrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,iCAAkCT,KAAM,cAVvF,IAACE,EAAGspB,eAwDd,kBAACpkB,EAAA,EAAKyB,OAAN,CAAa7F,MAAO,CAAE4gB,UAAU,UAAWlZ,SAAO,EAACrD,KAAK,OAAOuB,QAAU,kBAAM8hB,GAAsB,KAArG,eAEF,kBAAC5nB,EAAA,EAAD,CAASP,UAAQ,GACf,kBAACwE,EAAA,EAAD,CAAQC,GAAI,MAAZ,wBACE,kBAACD,EAAA,EAAOqE,UAAR,0EACF,sHAEF,kBAACtI,EAAA,EAAD,CAASP,UAAQ,GACf,kBAACsG,EAAA,EAAD,CACE6B,SAAO,EACP9B,QACE,WACEkiB,GAA4B,KAJlC,0BAWJN,EAAc1C,WAAWC,OAAS,kBAAClf,EAAA,EAAD,CAChC6S,UAAQ,EACR9S,QACE,WACE+e,GAAoB,GACpBF,EAAW,CAAE7F,MAAM,gDAAkDE,GAAI,kBAAMmJ,SALnD,oBAMnCvD,GACC,kBAAC,GAAD,CAAc7d,KAAO6d,EAAkB/F,QAAUA,EAAS3W,QAAU2c,IAGrE8C,GACC,kBAAC,GAAD,CAAgBjlB,QAAU0f,EAAarb,KAAO4gB,EAAoBzf,QAAU0f,IAG7EC,GACC,kBAAC,GAAD,CAAqBnlB,QAAU0f,EAAarb,KAAO8gB,EAAyB3f,QAAU4f,IAGvFC,GACC,kBAAC,GAAD,CAAsBrlB,QAAU0f,EAAarb,KAAOghB,EAA0B7f,QAAU8f,MC9GjFW,GA7DK,SAAC,GAA+D,IAA7DjmB,EAA4D,EAA5DA,QAAS6D,EAAmD,EAAnDA,WAAYC,EAAuC,EAAvCA,cAAeoiB,EAAwB,EAAxBA,kBACnDpnB,EAAUC,cACVwJ,EAAQnI,KAAKU,MAAOZ,eAAea,QAAQ,aAC3CyB,EAAW2jB,cAgBXxhB,EAAkB,SAACC,EAAD,GAAkB,IAAZ/B,EAAW,EAAXA,KAC5BiB,EAAcjB,GAEdqjB,EAAkB,IAEfriB,IAAehB,GAAQ0F,GACxBzJ,EAAQyB,KApBS,SAAC6lB,GACpB,IAAMC,EAAM7jB,EAAS8jB,SAASza,MAAM,KAAKxN,QAAO,SAAAkoB,GAAI,MAAa,KAATA,KAUxD,OARgBF,EAAIxN,QAAO,SAACC,EAAEC,EAAE3S,GAC9B,OAAG2S,IAAMlV,GAAcwiB,EAAIjoB,OAAQ,IAAMgI,GACvCigB,EAAIG,OAAO,GACJ1N,GAEFA,EAAE,IAAIC,IACb,IAEa,IAAIqN,EASJK,CAAa5jB,KAI9B,OACE,kBAACgC,GAAA,EAAD,CAAM6F,UAAQ,EAACgc,WAAS,GACtB,kBAAC7hB,GAAA,EAAKG,KAAN,CAAWR,QAAM,GAAExE,EAAQwC,UAC3B,kBAACqC,GAAA,EAAKG,KAAN,CACEtH,SAAS,QACTmF,KAAK,YACLoC,OAAyB,cAAfpB,EACVT,QAASuB,IAGX,kBAACE,GAAA,EAAKG,KAAN,CACEnC,KAAK,aACLoC,OAAyB,eAAfpB,EACVT,QAASuB,IAGX,kBAACE,GAAA,EAAKG,KAAN,CACEnC,KAAK,YACLoC,OAAyB,cAAfpB,EACVT,QAASuB,IAGV4D,IAAUA,EAAM+Z,WAAWC,OAASha,EAAM+Z,WAAWtiB,QAAQ0iB,KAAK7kB,KAAI,SAAAmC,GAAO,OAAIA,EAAQmjB,OAAKnc,SAAShH,EAAQtD,MAChH,kBAACmI,GAAA,EAAKG,KAAN,CACEnC,KAAK,WACLoC,OAAyB,aAAfpB,EACVT,QAASuB,MC8JFgiB,GA9MK,SAACnoB,GAAW,IAAD,EACSQ,mBAAS,IADlB,mBACtB0gB,EADsB,KACT6F,EADS,OAEMvmB,mBAAS,aAFf,mBAEtB6E,EAFsB,KAEXC,EAFW,OAGc9E,mBAAS,IAHvB,mBAGtB4nB,EAHsB,KAGPV,EAHO,OAIiClnB,oBAAS,GAJ1C,mBAItB6nB,EAJsB,KAIGC,EAJH,KAKvBhoB,EAAUC,cACVyD,EAAW2jB,cACXY,EAAgBvkB,EAAS8jB,UAAY9jB,EAAS8jB,SAASza,MAAM,KAAKxN,QAAO,SAAAkoB,GAAI,OAAIA,KAEjFxF,EAASC,cAEf3kB,qBAAU,WACL0kB,EAAOqF,MACRtiB,EAAcid,EAAOqF,QAEvB,CAACrF,IAEH,IAAI4B,EAAY3B,cAAY2B,UAGzBnkB,EAAMmkB,YACPA,EAAYnkB,EAAMmkB,WAGpB,IAAMqC,EAAgB5kB,KAAKU,MAAOZ,eAAea,QAAQ,aAxB5B,EA0BJxB,mBAAS/D,EAAa,CAC7CmF,UAAW,CAAEjE,GAAIimB,GACjB1B,MAAO0B,IAFDljB,EA1BqB,EA0BrBA,QAAQC,EA1Ba,EA0BbA,KAKhBrD,qBAAW,WACNqD,GACD6lB,EAAe7lB,EAAK8lB,cAEtB,CAAC9lB,IAKH,IAAMsnB,EAAoB,SAACnT,GACzB,IAAMoT,EAAG,YAAOF,GAShB,OARaE,EAAIpO,QAAO,SAACC,EAAEC,EAAE3S,GAC3B,OAAGA,EAAIyN,GACLoT,EAAIT,OAAO,GACJ1N,GAEFA,EAAE,IAAIC,IACb,KAMJ,OAAI4J,GAAcjD,IAAejgB,EAU/B,oCACIulB,GACA,kBAACkC,GAAA,EAAD,KACGH,EAAclpB,KAAI,SAAC0oB,EAAK1S,GACvB,OAAa,IAAVA,EACM,GAGP,kBAAC,WAAD,CAAU/V,IAAK+V,GACb,kBAACsT,GAAA,EAAD,CACEliB,OAAS4O,IAAUkT,EAAc3oB,OAAO,EACxCoD,GAAIqS,EAAQkT,EAAc3oB,OAAO,EAAEgpB,IAAK,GACxCC,GAAML,EAAkBnT,IAEf,IAARA,GAAa6L,EAAYld,SACjB,IAARqR,GAAsD,cAAzCkT,EAAclT,EAAM,GAAGqP,eACtCxD,EAAYhJ,UAAUrY,QAAO,SAAA0H,GAAQ,OAAIA,EAASrJ,KAAO6pB,KAAM,IAAM7G,EAAYhJ,UAAUrY,QAAO,SAAA0H,GAAQ,OAAIA,EAASrJ,KAAO6pB,KAAM,GAAG1jB,KAG1H,IAAVgR,GAAyB,IAAVA,GACjB0S,GAIA1S,EAAQkT,EAAc3oB,OAAO,GACjC,kBAACkpB,GAAA,EAAD,WAOR,kBAAC,GAAD,CAAatnB,QAAU0f,EAAa7b,WAAaA,EAAYC,cAAgBA,EAAeoiB,kBAAoBA,GAAhH,KACgB,cAAfriB,GACC,kBAAC5C,EAAA,EAAD,CAAMohB,QAAM,GACV,kBAACphB,EAAA,EAAKiH,IAAN,CAAUwL,QAAQ,KAChB,kBAACzS,EAAA,EAAKI,OAAN,KACE,kBAACE,EAAA,EAAD,CAAQC,GAAI,MAAZ,WACE,kBAACD,EAAA,EAAOqE,UAAR,KAAmB8Z,EAAYoD,QAAQyE,OAAQ,6BAC5C7H,EAAYoD,QAAQ0E,SAAW9H,EAAYoD,QAAQC,KAAK,6BACxDrD,EAAYoD,QAAQE,QAFvB,IAEgC,kBAACC,GAAA,EAAD,CAAMpgB,KAAM6c,EAAYoD,QAAQE,QAAQE,mBAG5E,kBAACjiB,EAAA,EAAKI,OAAN,KACE,kBAACE,EAAA,EAAD,CAAQC,GAAI,MAAZ,WACE,kBAACD,EAAA,EAAOqE,UAAR,KAAkB,2CAAlB,IAA4C8Z,EAAYpP,MAAM,6BAC5D,2CACCoP,EAAYxB,MAAMrF,QAAO,SAACC,EAAEC,GAAH,OAASD,EAAI,MAAQC,QAGrD,kBAAC9X,EAAA,EAAKI,OAAN,KACE,kBAACE,EAAA,EAAD,CAAQC,GAAI,MAAZ,UACGke,EAAY9G,OAAO/a,KAAI,SAACyL,EAAMlD,GAAP,OAAa,kBAAC7E,EAAA,EAAOqE,UAAR,CAAkB9H,IAAKsI,GAAvB,IAA4BkD,EAAMzG,KAAlC,IAAwC,gDAAxC,IAAuEyG,EAAMd,UAAU,oCAIlI,kBAACvH,EAAA,EAAKiH,IAAN,KACE,kBAACjH,EAAA,EAAKI,OAAN,KACE,kBAACE,EAAA,EAAD,CAAQC,GAAI,MAAZ,mBACA,kBAACwG,GAAA,EAAD,CAAO4d,YAAU,GACf,kBAAC5d,GAAA,EAAMzG,OAAP,KACE,kBAACyG,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMG,WAAP,eACA,kBAACH,GAAA,EAAMG,WAAP,6BAGJ,kBAACH,GAAA,EAAMI,KAAP,KACGsX,EAAY+H,UAAUrpB,OAAS,GAAKshB,EAAY+H,UAAU5pB,KAAI,SAAC0K,EAAMnC,GAAP,OAAc,kBAAC4B,GAAA,EAAME,IAAP,CAAWpK,IAAKsI,GAC3F,kBAAC4B,GAAA,EAAMM,KAAP,KAEI0c,GAAiBA,EAAc1C,WAAW/Z,MAAMmf,KAC9C,kBAAC,IAAD,CAAML,GAAE,4BAAuB9e,EAAM7L,GAA7B,aAA4C6L,EAAM1F,MAAc0F,EAAM1F,MAGpF,kBAACmF,GAAA,EAAMM,KAAP,KAAagD,GAAW/C,EAAMof,WAAWC,oBAUvC,eAAf/jB,GACD,kBAACtC,EAAA,EAAD,CAAQC,GAAG,MAAX,uFACE,kBAACD,EAAA,EAAOqE,UAAR,gMAKc,cAAf/B,KAAiCkd,EAAOR,YAAcqG,IACvD,oCACE,kBAACiB,GAAA,EAAKliB,MAAN,KACG+Z,EAAYhJ,WAAagJ,EAAYhJ,UAAU7Y,KAAI,SAAAkI,GAAQ,OAC1D,kBAAC8hB,GAAA,EAAD,CAAM/pB,IAAKiI,EAASrJ,GAAIqZ,MAAI,EAAC+R,QAAM,EACjC1kB,QAAW,WACN4hB,EACDlmB,EAAQyB,KAAR,UAAgBiC,EAAS8jB,SAAzB,YAAqCvgB,EAASrJ,KAE9CwpB,EAAkBngB,EAASrJ,MAI/B,kBAACmrB,GAAA,EAAKpiB,QAAN,CAAcvE,UAAU,SAASsD,OAAUuB,EAASlD,OACpD,kBAACglB,GAAA,EAAKpiB,QAAN,CAAcvE,UAAU,UAAW6E,EAASgiB,SAAUhiB,EAASgiB,SAAW,YAAY,IACtF,kBAACF,GAAA,EAAKpiB,QAAN,CAAcvE,UAAU,SAAS8mB,OAAK,GACpC,kBAACzmB,EAAA,EAAD,CAAQC,GAAI,MAAZ,IAAkB,kBAACyF,GAAA,EAAD,CAAMpE,KAAK,UAA7B,qBAAyDkD,EAAS2B,UAAUtJ,cAInF4mB,IAAkBA,EAAc1C,WAAWC,OAASyC,EAAc1C,WAAWtiB,QAAQ0iB,KAAK7kB,KAAI,SAAAmC,GAAO,OAAIA,EAAQmjB,OAAKnc,SAAS2b,KAChI,kBAACrlB,EAAA,EAAD,CAASC,OAAK,EAAC2J,SAAO,GACpB,kBAAC7D,EAAA,EAAD,CAAQ6B,SAAO,EAAClC,MAAI,EAACI,QAAW,kBAAM0jB,GAA2B,KAC/D,kBAAC7f,GAAA,EAAD,CAAMpE,KAAK,eADb,aAGCgkB,GACD,kBAAC,GAAD,CAAsBxiB,KAAMwiB,EAAyBrhB,QAASshB,EAA4B9mB,QAAS0f,MASvF,cAAf7b,IAA+Bkd,EAAOR,YAAcqG,IACpD,kBAAC,GAAD,CAAcrG,WAAcqG,IAGb,aAAf/iB,GACD,kBAAC,GAAD,CAAUnE,KAAMggB,KA3IhB,kBAACpiB,EAAA,EAAD,CAASC,OAAK,GACZ,kBAACoV,GAAA,EAAD,CAAQ1N,QAAM,GAAd,qBCyBOgjB,GArFW,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACrB/Y,EAAQ,IAAKjD,KACb8Y,EAAgB5kB,KAAKU,MAAOZ,eAAea,QAAQ,aACnDonB,EAAkB/nB,KAAKU,MAAMZ,eAAea,QAAQ,eAHf,EAIb/B,mBAAS,QAJI,mBAIrC2Q,EAJqC,KAI5ByY,EAJ4B,OAKjBppB,mBAASqO,GAAc8B,IALN,mBAKrCS,EALqC,KAK9ByY,EAL8B,OAMZrpB,mBAASmpB,EAAgB,CAACA,EAAgBzrB,IAAK,IANnC,mBAMpCkjB,EANoC,KAM3B0I,EAN2B,OAOAtpB,mBAASgmB,GAAiBA,EAAc1C,WAAWtiB,QAAQ0iB,KAAK7kB,KAAI,SAACmC,EAAQ6T,GACtH,MAAO,CAAE/V,IAAK+V,EAAOlV,MAAMqB,EAAQmjB,IAAKlU,KAAMjP,EAAQwC,cARb,mBAOpC8c,EAPoC,KAOrBC,EAPqB,OAYahgB,mBAASjE,EAAY,CAAE2lB,OAAQ+D,GAAiBA,EAAc1C,WAAWC,SAAhH9C,EAZ0B,EAYnChgB,QAA+BigB,EAZI,EAYVhgB,KAkBjC,OAfArD,qBAAU,WACR,GAAGqjB,GAAeA,EAAYzd,YAAY,CACxC,IAAMsmB,EAAQ7I,EAAYzd,YAAYpE,KAAI,SAACmC,EAAQoG,GACjD,MAAO,CAAEtI,IAAKsI,EAAGzH,MAAMqB,EAAQtD,GAAIuS,KAAMjP,EAAQwC,aAEnD+c,EAAkBgJ,MAEnB,CAAC7I,IAEJrjB,qBAAU,WACR6rB,EAAU,CAAEtI,WAAUjQ,WAAUC,aAEhC,CAACD,EAAUC,EAAQgQ,IAInB,kBAAChe,EAAA,EAAD,KAGE,kBAACA,EAAA,EAAK+D,MAAN,KAEIqf,IAAkBA,EAAc1C,WAAWtiB,QAAQ0iB,KAAKtkB,QAAU4mB,EAAc1C,WAAWC,QAC3F,kBAAC3gB,EAAA,EAAKM,MAAN,KACE,kBAACgd,GAAA,EAAD,CACEzf,QAAUggB,EACVS,WAAS,EACTC,UAAQ,EACR5Q,QAAY+P,EACZ5c,SAAW,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACd2pB,EAAY3pB,IAEduE,YAAa,iBACbvE,MAASihB,KAKf,kBAAChe,EAAA,EAAKM,MAAN,KACE,kBAACgd,GAAA,EAAD,CACEgB,WAAS,EACT3Q,QAAW,CAAE,CAAEzR,IAAI,EAAGmR,KAAM,QAAUtQ,MAAO,SAAW,CAAEb,IAAI,EAAGmR,KAAM,OAAStQ,MAAO,SACvF+D,SAAY,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACfypB,EAAYzpB,GAEV0pB,EADS,UAAR1pB,EACUwQ,EAAM7C,WAENe,GAAc8B,KAK7BxQ,MAASgR,KAEb,kBAAC/N,EAAA,EAAKM,MAAN,KACE,kBAACgd,GAAA,EAAD,CACEhY,QAAyB,UAAbyI,EACZuQ,WAAS,EACT3Q,QAAyB,UAAbI,EAAqBd,GAAgB,GAAGK,GAAe,GACnExM,SAAW,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACd0pB,EAAU1pB,IAEZA,MAASiR,QCnCN4Y,GAzCS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,WAAWC,EAAoB,EAApBA,cAAoB,EACblM,uBAAa/Y,IADA,mBACjDklB,EADiD,YACrC7rB,EADqC,EACrCA,MAAM2C,EAD+B,EAC/BA,QAAQC,EADuB,EACvBA,KAYjC,OACE,kBAAC4F,GAAA,EAAD,CACEC,QAAS,kBAAMmjB,EAAc,CAAEhsB,GAAG,GAAG2H,MAAK,KAC1CukB,QAAS,WAZRH,EAAW/rB,GACZisB,EAAU,CAAEhoB,UAAU,CAAEjE,GAAI+rB,EAAW/rB,MAEvCgsB,EAAc,2BAAKD,GAAN,IAAiB/rB,GAAG,GAAI2H,MAAM,MAU3CA,KAAOokB,EAAWpkB,MAEhBvH,GACF,oCACE,kBAACwI,GAAA,EAAMG,QAAP,SAAgB,kBAAClE,EAAA,EAAD,CAAQC,GAAI,MAAZ,kDAAhB,MAGA/B,GACF,kBAACkT,GAAA,EAAD,CAAQ1N,QAAM,GAAd,oBAICvF,GAAQA,EAAKyY,gBACd,oCACE,kBAAC7S,GAAA,EAAM/D,OAAP,sBAA6B7B,EAAKyY,eAAe3P,UAAUqD,MAAM,KAAK,GAAtE,IAA2EnM,EAAKyY,eAAenY,QAAQwC,SAAvG,IAAkH9C,EAAKyY,eAAe7O,MAAtI,UACA,kBAAChE,GAAA,EAAMG,QAAP,KACE,kBAAC,GAAD,CAAamD,WAAclJ,EAAKyY,gBAAhC,SCkDK0Q,GAjFM,SAAC,GAAgB,IAAdxqB,EAAa,EAAbA,OAAa,EAEYW,qBAFZ,mBAE5B8pB,EAF4B,KAEXC,EAFW,OAGD/pB,mBAAS,CAAEtC,GAAG,GAAI2H,MAAM,IAHvB,mBAG5BokB,EAH4B,KAGjBC,EAHiB,KAM7B/nB,EAAS,eAAQtC,GAEvBsC,EAAUkP,KAAOH,GAAcrR,EAAOsR,SAAUtR,EAAOuR,QARpB,MASHrQ,mBAASmE,GAAgB,CAAE/C,UAAWA,EAAWsgB,OAAStgB,EAAUif,SAASxhB,QAAUuC,EAAUkP,OAASrE,MAAM7K,EAAUiP,WAAlJ9S,EAT2B,EAS3BA,MAAM4C,EATqB,EASrBA,KAAMD,EATe,EASfA,QAapB,OAXApD,qBAAU,WAEN,IAAI2sB,EADHtpB,IAEDspB,EAAgB,eAAQtpB,EAAKupB,eAC7BD,EAAmBliB,KAAEgC,QAAQkgB,GAAkB,SAAAE,GAAM,OAAIA,EAAO1gB,UAAUqD,MAAM,KAAK,MACrFmd,EAAmBliB,KAAEiC,UAAUigB,GAAkB,SAAAld,GAAI,OAAIhF,KAAEgC,QAAQgD,GAAK,SAAAod,GAAM,OAAIA,EAAOlpB,QAAQwC,eACjGumB,EAAmBC,MAGpB,CAACtpB,IAEA5C,EAEA,kBAACF,EAAA,EAAD,CAASE,OAAK,GACZ,kBAACyE,EAAA,EAAD,CAAQC,GAAI,MAAZ,2CAIF/B,EAEA,kBAACkT,GAAA,EAAD,CAAQ1N,QAAM,GAAd,oBAIDvF,IAASA,EAAKupB,cAAc7qB,OACtB,kBAACmD,EAAA,EAAD,CAAQC,GAAG,MAAX,qBAGLb,EAAUif,SAASxhB,OAOrB,oCACI0qB,GACD,kBAAC9gB,GAAA,EAAD,CAAQd,SAAO,EAACe,QAAM,EAACkhB,SAAO,EAACC,YAAU,GACvC,kBAACphB,GAAA,EAAMzG,OAAP,KACE,kBAACyG,GAAA,EAAME,IAAP,KAAW,kBAACF,GAAA,EAAMG,WAAP,eAA2C,kBAACH,GAAA,EAAMG,WAAP,CAAkBjH,UAAU,UAA5B,aAAiE,kBAAC8G,GAAA,EAAMG,WAAP,kBAEzH,kBAACH,GAAA,EAAMI,KAAP,KACG0gB,GAAmBhiB,KAAEjJ,IAAIirB,GAAgB,SAAClJ,EAAS9T,GAAV,OACxC,kBAAC,WAAD,CAAUhO,IAAOgO,GACdiP,OAAOsO,QAAQzJ,GAAU/hB,KAAI,WAAmBgW,GAAnB,uBAAE7T,EAAF,KAAUspB,EAAV,YAC5B,kBAACthB,GAAA,EAAME,IAAP,CAAYpK,IAAOkC,GACN,IAAV6T,GAAe,kBAAC7L,GAAA,EAAMM,KAAP,CAAYsd,YAAU,EAAC2D,QAASxO,OAAOC,KAAK8N,EAAgBhd,IAAO1N,QAAS0N,GAC5F,kBAAC9D,GAAA,EAAMM,KAAP,CAAYpH,UAAU,UAAWlB,GACjC,kBAACgI,GAAA,EAAMM,KAAP,KACE,kBAACqW,GAAA,EAAD,CAAMnb,YAAU,GACbsD,KAAEjJ,IAAIyrB,GAAS,SAAAJ,GAAM,OACpB,kBAACvK,GAAA,EAAK3Z,KAAN,CAAWxD,GAAK,IAAI1D,IAAKorB,EAAOxsB,GAC9B0G,QAAW,WACTslB,EAAc,CAAEhsB,GAAIwsB,EAAOxsB,GAAG2H,MAAK,MACjC6kB,EAAO5f,sBAWhC,kBAAC,GAAD,CAAiBof,cAAgBA,EAAeD,WAAYA,KApCvD,kBAAC7rB,EAAA,EAAD,KAAU,kBAAC2E,EAAA,EAAD,CAAQL,UAAU,SAASM,GAAG,MAA9B,mDC7BNgoB,GAjBU,WAAO,IAAD,EAEFxqB,mBAAS,CAClCyqB,QAAQ,GACR7Z,OAAO,GACPgQ,SAAS,KALkB,mBAEtBvhB,EAFsB,KAEf6pB,EAFe,KAS7B,OACE,oCACE,kBAAC,GAAD,CAAmBA,UAAWA,IAC9B,kBAAC,GAAD,CAAc7pB,OAAQA,MCqFbqrB,GArFW,WACxB,IAAM5qB,EAAUC,cAEVf,EAAeb,qBAAWuM,IAHF,EAILjL,qBAAWmL,GAAS5L,GAJf,mBAIvBE,EAJuB,KAIjB/B,EAJiB,OAMEgB,qBAAWC,GAAnCusB,EANsB,oBAQ1BvpB,KAAKU,MAAOZ,eAAea,QAAQ,gBACrCjC,EAAQyB,KAAK,KAGf,IAMIqpB,EANE7I,EAASC,cACTtkB,EAAIqkB,EAAOrkB,GACXsD,EAAU+gB,EAAO/gB,QAdO,EAgBMhB,mBAAS,mBAhBf,mBAgBvB6E,EAhBuB,KAgBXC,EAhBW,KAoB1B9D,GAAWtD,IACbktB,EAAc,CACZ5pB,QAAStD,EACT6b,KAAK,4BAIT,IA3B8B,EAgCrB,CAJMhZ,mBAASkE,GAAiB,CACrC9C,UAAUipB,EACVhqB,QAAS,SAAC4d,GAAD,OAASmM,EAAqB,CAAEntB,KAAK,mBAAqBC,QAAQ,CAAEQ,QAASugB,EAAI3d,QAASrD,KAAM,cAC9F+C,mBAAS/D,EAAY,CAAEmF,UAAU,CAAEjE,GAAIA,MA/BxB,0BAoClBmtB,EApCkB,EAoC1BpqB,QAA6BqqB,EApCH,EAoCHpqB,KAChBqqB,EArCmB,KAqCzBrqB,KAeL,OAZArD,qBAAU,WACL0tB,GAAa5tB,EAAS,CAAEK,KAAK,eAAeC,QAAQstB,EAAYvE,eACnE,CAACuE,IAEH1tB,qBAAU,WACLytB,GAAY3tB,EAAS,CAAEK,KAAK,sBAAsBC,QAAQqtB,EAAW3R,mBACxE,CAAC2R,IAMCD,EAEA,kBAAClX,GAAA,EAAD,CAAQ1N,QAAM,GAAd,iBAKF,oCACE,kBAAC,GAAQvG,SAAT,CAAkBC,MAAO,CAAET,QAAO/B,aAEhC,kBAAC,GAAD,CAAS0H,WAAaA,EAAYC,cAAeA,IAEhC,oBAAfD,GACA,kBAAC,GAAD,CAAa+E,WAAakhB,GAAcA,EAAW3R,iBAEpC,qBAAftU,GACA,kBAAC,GAAD,MAGc,mBAAfA,GAEC,kBAAC,GAAD,CAAgBC,cAAeA,IAGjB,gBAAfD,GAEC,kBAAC,GAAD,CAAa8e,UAAWjmB,O,qwFC7F3B,IAAMstB,GAAczuB,cAAH,MAMX0uB,GAAiB1uB,cAAH,MAWd2uB,GAAsB3uB,cAAH,MAUnB4uB,GAAqB5uB,cAAH,MAUlB6uB,GAAkB7uB,cAAH,MAYf8uB,GAAa9uB,cAAH,MAmBV+uB,GAAY/uB,cAAH,MAkBTgvB,GAAkBhvB,cAAF,MAahBivB,GAAcjvB,cAAF,MAWZkvB,GAAwBlvB,cAAH,MClBnBmvB,GArFQ,WAAO,IAAD,EACPvtB,qBAAWC,GAAvBjB,EADmB,oBAErB2C,EAAUC,cAFW,EAGKC,mBAAS,IAHd,mBAGpB6S,EAHoB,KAGVC,EAHU,OAIK9S,mBAAS,IAJd,mBAIpB4B,EAJoB,KAIVmR,EAJU,OASFpS,sBAAYqqB,GAAY,CAC/CpqB,QAAS,SAAC4d,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,sBAAsB,6BAAzB,IAAgCugB,EAAI3d,SAAarD,KAAM,cAXxF,mBASpBmuB,EAToB,KASZjrB,EATY,KASZA,KASfrD,qBAAU,WACR,GAAKqD,EAAO,CACV,IAAM6I,EAAQ7I,EAAKkrB,WACnB1qB,eAAeC,QAAQ,WAAWC,KAAKC,UAAUkI,IACjDzJ,EAAQyB,KAAR,iBAAuBgI,EAAM7L,QAG9B,CAACgD,IAMJ,IAAMmrB,EAAW,uCAAG,WAAOrqB,GAAP,SAAAC,EAAA,sDAClBD,EAAME,iBACNiqB,EAAM,CAAEhqB,UAAU,CAAEkR,SAASA,EAAUjR,SAAUA,KAF/B,2CAAH,sDASbkqB,EAAiB1qB,KAAKU,MAAMZ,eAAea,QAAQ,aAKvD,OAJG+pB,GACDhsB,EAAQyB,KAAR,iBAAuBuqB,EAAepuB,KAKtC,kBAACuE,EAAA,EAAD,CAAMC,UAAU,SAAS1D,MAAO,CAAE2D,OAAQ,SAAWC,cAAc,UACjE,kBAACH,EAAA,EAAKI,OAAN,CAAa7D,MAAO,CAAE8D,SAAU,MAC9B,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAAM,OAAOP,UAAU,UACrC,kBAACQ,EAAA,EAAD,CAAOC,IAAI,iBADb,4BAGA,kBAACC,EAAA,EAAD,CAAMC,KAAK,QAAQrE,MAAO,CAAE0D,UAAU,QAAWY,SAAU+oB,GACzD,kBAACvtB,EAAA,EAAD,CAAS0E,SAAO,GACd,kBAACJ,EAAA,EAAKgB,MAAN,CAAYG,OAAK,EAACC,KAAK,OAAOC,aAAa,OAAOC,YAAY,WAAWR,SAAY,SAACkC,EAAD,OAAKjG,EAAL,EAAKA,MAAL,OAAiBmT,EAAYnT,MAClH,kBAACiD,EAAA,EAAKgB,MAAN,CACEG,OAAK,EACLC,KAAK,OACLC,aAAa,OACbC,YAAY,WACZ1G,KAAK,WACLkG,SAAY,SAACkC,EAAD,OAAKjG,EAAL,EAAKA,MAAL,OAAiBoT,EAAYpT,MAE3C,kBAAC0E,EAAA,EAAD,CAAQ7G,KAAO,SAASiF,MAAM,OAAOsB,OAAK,EAAClB,KAAK,SAAhD,WAMJ,kBAAC0B,EAAA,EAAD,CAASC,YAAU,GAAnB,MACA,kBAAClG,EAAA,EAAD,CAAU0E,SAAO,GACf,kBAACqB,EAAA,EAAD,CAAQ7G,KAAO,SAASS,QAAQ,oBAAmB4E,KAAK,QAAQJ,MAAM,OAAOsB,OAAK,EAChFK,QAAW,kBAAMtE,EAAQyB,KAAK,wB,w4CC/EnC,IAAMwqB,GACbxvB,cAD2B,MAkDdyvB,GAAqBzvB,cAAH,MC4ahB0vB,GAhda,SAACzsB,GAAW,IAAD,EAClBrB,qBAAWC,GAAvBjB,EAD8B,oBAE/B4kB,EAAQC,cACRkK,EAAO9qB,KAAKU,MAAOZ,eAAea,QAAQ,aAHX,EAIZxB,mBAASjE,EAAY,CAAE2lB,MAAoB,IAAdziB,EAAM2sB,MAApD1rB,EAJ6B,EAI7BA,QAAQC,EAJqB,EAIrBA,KAJqB,EAKyC8c,uBAAa7Y,IALtD,mBAK9BwU,EAL8B,YAKLiT,EALK,EAKb3rB,QAAiC4rB,EALpB,EAKe3rB,KALf,EAMyBC,sBAAYkR,GAAiB,CACzFjR,QAAS,SAAC9C,GACRX,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,+DAAuBuB,EAAM2sB,IAAI,MAAM,SAAvC,sBAAqE,6BAAMruB,EAAM+C,SAAarD,KAAM,WAC5J8uB,OATiC,mBAM9BC,EAN8B,KAMHC,EANG,KAMZ/rB,QANY,EAaOT,mBAAS,IAbhB,mBAa9BsgB,EAb8B,KAadC,EAbc,OAcMvgB,oBAAS,GAdf,mBAc9BysB,EAd8B,KAcfC,EAde,KAiB/BC,EAA8B,SAAC3rB,GACnC,SAAGkrB,EAAK5I,WAAWC,QACjB2I,EAAK5I,WAAWja,UAAUujB,KAAK/tB,KAAI,SAAAmC,GAAO,OAAIA,EAAQmjB,OAAKnc,SAAShH,GAAWA,EAAQtD,KACvFwuB,EAAKxuB,KAAO8B,EAAMqtB,UAQtBxvB,qBAAU,WACR,GAAGqD,GAAQA,EAAKuC,YAAY,CAC1B,IAEMqd,EAFW5f,EAAKuC,YACc5D,QAAS,SAAA2B,GAAO,OAAI2rB,EAA4B3rB,MAC3CnC,KAAI,SAACmC,EAAQ6T,GACpD,MAAO,CAAE/V,IAAI+V,EAAOlV,MAAOqB,EAAQtD,GAAIuS,KAAMjP,EAAQwC,aAGvD+c,EAAkBD,MAGpB,CAAC5f,IAGH,IAAMosB,EAAc,SAACnJ,GACnB,GAAGjjB,EAAK,CACN,IAAMM,EAAUN,EAAKuC,YAAY5D,QAAO,SAAA2B,GAAO,OAAIA,EAAQtD,KAAOimB,KAElE,GAAG3iB,GAAWA,EAAQ,GAAG4Y,OAOvB,OALkB5Y,EAAQ,GAAG4Y,OAAO/a,KAAI,SAACyL,EAAMuK,GAE7C,MAAM,CAAE/V,IAAI+V,EAAOlV,MAAO2K,EAAMzG,KAAMoM,KAAM3F,EAAMzG,WAyCpDkpB,EAAoB,SAACvjB,EAAUc,EAAMtJ,GACzC,IAAMiZ,EAAK,IAAI/M,KAAKiB,GAAO3E,IACrBwjB,EAAU,IAAI9f,KAAOA,KAAKkC,IAAI6K,EAAG1M,cAAgB0M,EAAG3M,WAAa2M,EAAG9M,YAAY8f,cAEtF9T,EAAe,CAAExX,UADJ,CAAEmL,KAAKkgB,EAAS1iB,MAAOA,EAAOtJ,QAAQA,MAI/CqS,EAAM,uCAAG,WAAOC,GAAP,eAAA7R,EAAA,sDACPyrB,EADO,2BACK5Z,GADL,IACYE,MAAO5D,SAAS0D,EAAOE,SAC7C6Y,GAAmBA,EAAgBc,uBAA0Bd,EAAgBc,sBAAsBzvB,KACpGwvB,EAAKE,SAAWf,EAAgBc,sBAAsBzvB,IAGpD8B,EAAM2sB,MACRe,EAAKxvB,GAAK8B,EAAM9B,IAIf4V,EAAO+Z,QAAQjuB,QAAUI,EAAM6tB,QAAQjuB,QACxC8tB,EAAKG,QAAQ7F,OAAO,EAAEhoB,EAAM6tB,QAAQjuB,QAEtCmtB,EACE,CACE5qB,UAAWurB,EACX/lB,OAAO,SAAC8R,EAAM2L,GAETplB,EAAM2sB,KACPlT,EAAM6E,OAAQ,CACZC,OAAO,CACLuP,mBADK,SACcC,EADd,GACqD,IAAbtP,EAAY,EAAZA,UACrCuP,EAAe5I,EAASlkB,KAAK+sB,eAEnC,OAAGF,EAAsB1S,MAAK,SAAAuD,GAAG,OAAIH,EAAU,KAAKG,KAASoP,EAAa9vB,MACjE6vB,EAGH,GAAN,mBAAWA,GAAX,CAAiCC,KAInCE,iBAZK,SAYYH,GACf,IAAMI,EAAS5L,EAAO4L,OACtB,IAAIA,EACF,OAAOJ,EAET,IAAMC,EAAe5I,EAASlkB,KAAK+sB,eAC7B3P,EAAShW,KAAE8lB,UAAUL,GAErBM,IAAc1f,GAAOqf,EAAa9jB,SAAWyE,GAAOqf,EAAahkB,YAApD,MAAmFgkB,EAAaha,OAAS,GAAG,IAAIsa,QAAQ,GAK3I,GAJIhQ,EAAO6P,KACT7P,EAAO6P,GAAU,KAGf7P,EAAO6P,GAAQH,EAAajkB,MAAM1F,MAMpC,OALAia,EAAO6P,GAAQH,EAAajkB,MAAM1F,MAAO,GACzCia,EAAO6P,GAAQH,EAAajkB,MAAM1F,MAAM7C,QAAxC,gBAAqDwsB,EAAaxsB,QAAQwC,SAAU,GACpFsa,EAAO6P,GAAQH,EAAajkB,MAAM1F,MAAMkqB,aAAe,EACvDjQ,EAAO6P,GAAQH,EAAajkB,MAAM1F,MAAMgqB,SAAWA,EAE5C/P,EAGT,IAAM8C,EAAW9C,EAAO6P,GAAQH,EAAajkB,MAAM1F,MAAM7C,QAQzD,OAPA8c,EAAO6P,GAAQH,EAAajkB,MAAM1F,MAAlC,2BACKia,EAAO6P,GAAQH,EAAajkB,MAAM1F,OADvC,IAEEkqB,aAAajQ,EAAO6P,GAAQH,EAAajkB,MAAM1F,MAAMkqB,aAAa,EAClEF,UAAWG,WAAWlQ,EAAO6P,GAAQH,EAAajkB,MAAM1F,MAAMgqB,UAAYG,WAAWH,IAAWC,QAAQ,GACxG9sB,QAAQ,2BAAO4f,GAAR,mBAAkB4M,EAAaxsB,QAAQwC,SAAWod,EAAS4M,EAAaxsB,QAAQwC,UAAU,MAG5Fsa,IAIXmQ,WAAW,IAGf9wB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,uDAAeuB,EAAM2sB,IAAI,QAAQ,UAAjC,iCAAoEe,EAAK1jB,UAAUqD,MAAM,KAAK,KAAUrP,KAAM,aACtK8uB,OAvEO,2CAAH,sDA4ENA,EAAa,WACjB9sB,EAAMgH,SAAQ,GACdkmB,GAAkB,IAoEdwB,EAAc1uB,EAAM2sB,IAAN,0CAA8C7f,GAAYY,KAAKpL,MAAMtC,EAAMsN,OAAOD,MAAM,KAAK,IAA7F,2CAAuIP,GAAYY,KAAKpL,MAAMtC,EAAMsN,OAAOD,MAAM,KAAK,IAC1M,OACE,kBAACvG,GAAA,EAAD,CACEsN,WAAS,EACTC,eAAe,EACfC,oBAAoB,EACpBzO,KAAQ7F,EAAM6F,KACdkB,QAAU,kBAAM+lB,KAChBvY,OAAS,kBAAMvU,EAAMgH,SAAS,KAE9B,kBAACF,GAAA,EAAM/D,OAAP,KAAe2rB,EAAf,KACA,kBAAC5nB,GAAA,EAAMG,QAAP,KAIG+lB,GACG,kBAAC9Y,GAAA,EAAD,CAAQzN,QAAM,GACZ,kBAAC0N,GAAA,EAAD,OAGN,kBAAC,KAAD,CAEEM,cAtFc,WACpB,IAAMka,EAAO,CACX3kB,UAAWhK,EAAMgK,UACjBE,QAASlK,EAAMkK,QACf8J,MAAOhU,EAAMgU,OAAS,GACtB6Z,QAAS7tB,EAAM6tB,SAAW,IAc5B,OAVG7tB,EAAM2sB,MACPgC,EAAK5kB,MAAQ/J,EAAMqtB,QACnBsB,EAAK3kB,UAAY8C,GAAY,IAAIY,KAAK1N,EAAMsN,MAAMoN,SAAS,IAC3DiU,EAAKzkB,QAAU,IAAIwD,KAAK1N,EAAMsN,MAAMoN,SAAS,GAAMhN,KAAKgE,MAAQ5E,GAAW6B,GAAOjB,KAAKgE,QAAU5E,GAAY,IAAIY,KAAK1N,EAAMsN,MAAMoN,SAAS,IAC3IiU,EAAKntB,QAAU,GACfmtB,EAAK7jB,MAAQ,GACb6jB,EAAKd,QAAU,CAAC,CAAEjQ,MAAM,gCAAkCtQ,KAAMR,GAAWY,KAAKgE,OAAQkd,GAAIlC,EAAKroB,QAI5FsqB,EAmEgBE,GACjBja,SAAY,SAAAd,GAEV,IAAI3B,EAAS,GAMb,OALAA,EAAM,2BAAQA,GAAUX,GAAqBsC,EAAO9J,UAAU8J,EAAO5J,QAAQlK,EAAMsN,OAChFhF,KAAEkT,QAAQrJ,IApEA,SAAC2B,GAEtB,IAAK9T,EAAM2sB,IAAK,CACd,IAAMmC,EAAoC,IAAzB9uB,EAAM6tB,QAAQjuB,OAAe,EAAII,EAAM6tB,QAAQjuB,OAC5DmvB,EAAU,YAAOjb,EAAO+Z,SAExB/Z,EAAO9J,YAAchK,EAAMgK,WAAa8J,EAAO5J,UAAYlK,EAAMkK,YAE/D6kB,EAAWD,IAAcC,EAAWD,IAA2C,WAA9BC,EAAWD,GAAUlR,QACxEmR,EAAW/G,OAAO8G,EAAS,EAAE,CAAElR,MAAM,SAAStQ,KAAMR,GAAWY,KAAKgE,OAAOkd,GAAGlC,EAAKroB,KAAM6f,KAAK,KAG7FpQ,EAAO9J,YAAchK,EAAMgK,YAC5B+kB,EAAWD,GAAU5K,KAAKla,UAA1B,UAAyChK,EAAMgK,UAA/C,gBAAgE8J,EAAO9J,YAEtE8J,EAAO5J,UAAYlK,EAAMkK,UAC1B6kB,EAAWD,GAAU5K,KAAKha,QAA1B,UAAsClK,EAAMkK,QAA5C,gBAA2D4J,EAAO5J,UAEpE4J,EAAO+Z,QAASkB,GAGfjb,EAAO9J,YAAchK,EAAMgK,WAEzB+kB,EAAWD,IAAahb,EAAO+Z,QAAQiB,GAAU5K,aAC3C6K,EAAWD,GAAU5K,KAAKla,UAIlC8J,EAAO5J,UAAYlK,EAAMkK,SACvB6kB,EAAWD,IAAahb,EAAO+Z,QAAQiB,GAAU5K,aAC3C6K,EAAWD,GAAU5K,KAAKha,QAIlC6kB,EAAWD,IAAaC,EAAWD,GAAU5K,MAAQ5b,KAAEkT,QAAQuT,EAAWD,GAAU5K,OACrF6K,EAAW/G,OAAO8G,EAAS,GAE7Bhb,EAAO+Z,QAASkB,GAgCRC,CAAelb,GAGV3B,GAKT7O,SAAY,SAACwQ,GAKX,GAAGA,EAAO+Z,QAAQjuB,SAAYkU,EAAO+Z,QAAQ/Z,EAAO+Z,QAAQjuB,OAAO,GAAGge,QAAY9J,EAAO+Z,QAAQ/Z,EAAO+Z,QAAQjuB,OAAO,GAAG6Q,KAAM,CAE9H,IAAMse,EAAU,YAAOjb,EAAO+Z,SAC9BkB,EAAW/G,OAAOlU,EAAO+Z,QAAQjuB,OAAO,EAAE,GAC1CkU,EAAO+Z,QAAUkB,EAGhBjb,EAAO+Z,QAAQjuB,SAAakU,EAAO+Z,QAAQ/Z,EAAO+Z,QAAQjuB,OAAO,GAAGge,OAAU9J,EAAO+Z,QAAQ/Z,EAAO+Z,QAAQjuB,OAAO,GAAG6Q,OACvHqD,EAAO+Z,QAAQ/Z,EAAO+Z,QAAQjuB,OAAO,GAAGge,MAAQ,gBAGlD/J,EAAOC,MAOR,gBAAGA,EAAH,EAAGA,OAAOe,EAAV,EAAUA,aAAatJ,EAAvB,EAAuBA,cAAciW,EAArC,EAAqCA,MAArC,OAEC,kBAACpe,EAAA,EAAD,CAAMC,KAAK,QAAQrE,MAAO,CAAE8X,aAAa,QAAUxT,SAAauR,GAE9D,kBAACzR,EAAA,EAAK+D,MAAN,KAEE,kBAAE,GAAF,CACEpD,MAAO,aACPyR,UAAaxV,EAAM2sB,MAAyB,aAAjB3sB,EAAMwH,SAA0B2lB,EAA2BntB,EAAMwB,UAC5FsK,eAAiB,mBACjBzH,KAAM,YACNyQ,QAAW5G,GAAYR,KAAKgE,MAAM,GAAG,IAAI,OACzCqD,QAAUjI,GAAYY,KAAKpL,MAAMtC,EAAMsN,SAKzC,kBAAE,GAAF,CACEvJ,MAAQ,WACRyR,UAAaxV,EAAM2sB,MAAyB,aAAjB3sB,EAAMwH,SAA0B2lB,EAA2BntB,EAAMwB,UAC5FsK,eAAiB,mBACjBzH,KAAK,UACLyQ,QACEpH,KAAKgE,MAAQ/C,GAAOmF,EAAO5J,SAAU4C,GAAWY,KAAKgE,OAASxD,GAAY4F,EAAO9J,UAAU,GAAG,IAAI,OAEpG+K,QAAU7G,GAAY4F,EAAO9J,UAAU,GAAG,IAAI,SAIhD,kBAAC,GAAD,CACEsC,WAAY,QACZkJ,UAAaxV,EAAM2sB,MAAyB,aAAjB3sB,EAAMwH,SAA0B2lB,EAA2BntB,EAAMwB,UAC5FuC,MAAQ,WACRiR,cAAc,eACd3Q,KAAM,QACNrG,KAAK,SACLiX,IAAI,OAQNjV,EAAM2sB,KACN,kBAACvpB,EAAA,EAAK+D,MAAN,KAEE,kBAAC,GAAD,CACEpD,MAAO,kBACP9C,QAAUA,EACVoD,KAAO,UACP4qB,WAAY,iBACZxN,QAAM,EACNC,WAAS,EACT3Q,QAAU+P,EACV5c,SAAc,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACjBoL,EAAc,UAAUpL,GACxB,IAAM2K,EA5SO,SAACd,EAAUma,GAC1C,GAAGjjB,EAAK,CACN,IAAMM,EAAUN,EAAKuC,YAAY5D,QAAO,SAAA2B,GAAO,OAAIA,EAAQtD,KAAOimB,KAClE,GAAG3iB,GAAWA,EAAQ,GAAG4Y,OAAQ,CAC/B,IAAMD,EAAM,IAAIzM,KAAKiB,GAAO3E,IAmB5B,OAlBkBxI,EAAQ,GAAG4Y,OAAOC,QAAO,SAACC,EAAEC,GAE5C,IAAMC,EAAUD,EAAEvQ,UAAUqD,MAAM,KAC5BoN,EAAK,IAAI/M,KAAKyM,GACpBM,EAAGC,SAASF,EAAQ,IACpBC,EAAGE,WAAWH,EAAQ,IAEtB,IAAMI,GAAQT,EAAIM,GAAL,KAGb,OAAIG,EAAON,EAAEM,MAAQN,EAAEM,KAAO,GAG3BA,EAAO,GAAKA,EAAMN,EAAEM,KAFd,CAAEvW,KAAMkW,EAAElW,KAAMuW,KAAMA,GAKxBN,IACP,CAAEjW,KAAK,GAAGuW,MAAM,KACDvW,OAqRW6qB,CAAyBpb,EAAO9J,UAAU7J,GACxDoL,EAAc,QAAQT,GACtByiB,EAAkBzZ,EAAO9J,UAAUc,EAAM3K,MAK7C,kBAAC,GAAD,CACE4D,MAAO,gBAEPkS,UAAanC,EAAOtS,QACpB6C,KAAO,QACP4qB,WAAY,eACZxN,QAAM,EACNC,WAAS,EACT3Q,QAAU+C,EAAOtS,QAAS8rB,EAAaxZ,EAAOtS,SAAS,GACvD0C,SAAY,SAACkC,EAAD,GAAmB,IAAdjG,EAAa,EAAbA,MACfoL,EAAc,QAAQpL,GACtBotB,EAAkBzZ,EAAO9J,UAAU7J,EAAM2T,EAAOtS,aAStDorB,GACE,kBAAC9tB,EAAA,EAAD,CAASopB,WAAS,EAACjnB,SAAO,GAA1B,aACa6S,EAAOhJ,MADpB,UAMFgJ,EAAOhJ,OAAS+hB,GAAmBA,EAAgBc,uBACjD,kBAAC7uB,EAAA,EAAD,CAASyE,UAAQ,EAAC2kB,WAAS,GACzB,kBAACnlB,EAAA,EAAD,CAAQC,GAAG,MAAK,kBAACyF,GAAA,EAAD,CAAMpE,KAAK,eAAepB,MAAM,UAAhD,aACA,kBAACF,EAAA,EAAD,CAAQ8H,QAAQ,OAAO7H,GAAG,MAAM6pB,EAAgBc,sBAAsBnsB,QAAQwC,SAA9E,IAAyF8P,EAAOhJ,MAAhG,UAA8G+hB,EAAgBc,sBAAsB3jB,UAAUqD,MAAM,KAAK,GACvK,kBAACtK,EAAA,EAAOqE,UAAR,KAAkB,mDAAlB,IAAoDylB,EAAgBc,sBAAsB3jB,UAAU,iDAApG,IAAoI6iB,EAAgBc,sBAAsBzjB,QAA1K,MAEF,kBAACrF,EAAA,EAAD,CAAQ7G,KAAK,SAAQ6M,QAAQ,QAAQjG,QAAS,kBAAM5E,EAAMiqB,WAAW,CAAE/rB,GAAI2uB,EAAgBc,sBAAsBzvB,GAAI2H,MAAK,MAA1H,uBAOJiO,EAAOhJ,OAAS+hB,IAAoBA,EAAgBc,uBACpD,kBAACvvB,EAAA,EAAD,CAAS0a,SAAO,EAACC,SAAO,EACtB/S,OAAO,iCACPvH,QAAQ,6JAIZ,+BAAQ,4CACR,kBAAC,KAAD,CAAY4F,KAAK,YACd,gBAAGtC,EAAH,EAAGA,KAAKuT,EAAR,EAAQA,OAAR,OAAqB,oCAEnBxB,EAAO+Z,SAAW/Z,EAAO+Z,QAAQjuB,OAAS,GAAKkU,EAAO+Z,QAAQxuB,KAAI,SAAC8vB,EAAO9Z,GAAR,OACjE,kBAAC,GAAD,CAAa/V,IAAM+V,EAAOhR,KAAI,kBAAagR,GAASlV,MAAOgvB,OAI1C,aAAjBnvB,EAAMwH,SAA0BxH,EAAM2sB,KAAOQ,EAA4BntB,EAAMwB,WAC/E,kBAAC4B,EAAA,EAAKyB,OAAN,CAAa7G,KAAK,SAChB4G,QAAU,SAACwB,GACTA,EAAElE,iBACC+qB,GACD3X,EAAOxB,EAAO+Z,QAAQjuB,OAAO,GAC7BstB,GAAkB,KAEfpZ,EAAO+Z,QAAQjuB,OAAS,GAAuD,6BAAlDkU,EAAO+Z,QAAQ/Z,EAAO+Z,QAAQjuB,OAAO,GAAGge,MACtE7b,EAAK,CAAE6b,MAAM,qBAAqBtQ,KAAMR,GAAWY,KAAKgE,OAAOkd,GAAGlC,EAAKroB,KAAKoM,KAAK,KAEjF1O,EAAK,CAAE6b,MAAM,GAAGtQ,KAAMR,GAAWY,KAAKgE,OAAOkd,GAAGlC,EAAKroB,KAAKoM,KAAK,KAEjEyc,GAAkB,OAGpBD,GAAkBnZ,EAAO+Z,QAAQjuB,OAAS,GAAuD,6BAAlDkU,EAAO+Z,QAAQ/Z,EAAO+Z,QAAQjuB,OAAO,GAAGge,MACvF,qBACAqP,EAAe,gBACb,kBAKO,aAAjBjtB,EAAMwH,QAAyBga,GAAS2L,EAA2BntB,EAAMwB,UAC3E,kBAACqD,EAAA,EAAD,CAAQ7G,KAAK,SAAS6M,QAAQ,QAAQ2M,UAAQ,GAA9C,QAEA,kBAAC3S,EAAA,EAAD,CAAQ7G,KAAK,SAAS6M,QAAQ,QAAQ6M,UAAQ,EAAC9S,QAAS,kBAAMkoB,MAA9D,iBCtICsC,GAnUM,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,UAAWtE,EAAgD,EAAhDA,QAASd,EAAuC,EAAvCA,WAAY5U,EAA2B,EAA3BA,MAAO/H,EAAoB,EAApBA,KAAM+f,EAAc,EAAdA,QAC7DtjB,EAAQnI,KAAKU,MAAOZ,eAAea,QAAQ,aAE3CggB,EAAQC,cAERsB,EAAa/Z,EAAM+Z,YAAc/Z,EAAM+Z,WAAWja,UAClDG,EAAYqlB,EAAUrlB,UACtBE,EAAUmlB,EAAUnlB,QACpB1I,EAAW6tB,EAAUC,aAAeD,EAAUC,YAAY9tB,QAAQwC,UAAeqrB,EAAU7tB,SAAW6tB,EAAU7tB,QAAQwC,SACxH8G,EAASukB,EAAUC,aAAeD,EAAUC,YAAYxkB,OAAUukB,EAAUvkB,MAC3E4I,EAAS2b,EAAUrb,MACpBub,EAAaF,EAAUG,MACvBC,EAAKJ,EAAUK,SACf7B,EAAUwB,EAAUxB,SAAW,GAb4C,EAc1DrtB,oBAAS,GAdiD,mBAc1EqF,EAd0E,KAcrEmB,EAdqE,OAe5DxG,oBAAS,GAfmD,mBAe1EmsB,EAf0E,KAetEgD,EAfsE,OAgB9CnvB,oBAAS,GAhBqC,mBAgB1EovB,EAhB0E,KAgB/DC,EAhB+D,OAiB5CrvB,oBAAS,GAjBmC,mBAiB1EsvB,EAjB0E,KAiB9DC,EAjB8D,OAmB5CvvB,mBAAS,IAnBmC,mBAmB1EwvB,EAnB0E,KAmB9DC,EAnB8D,OAqBrB9uB,sBAAYmR,IArBS,mBAqB1E4d,EArB0E,KAqB/CC,EArB+C,KAqBvDlvB,QArBuD,EAsBvBE,sBAAYoR,IAtBW,oBAsB1E6d,GAtB0E,MAsB1CC,GAtB0C,MAsBlDpvB,QAtBkD,GAuBvBE,sBAAYqR,IAvBW,qBAuB1E8d,GAvB0E,MAuB3CC,GAvB2C,MAuBnDtvB,QAGzBosB,IACHA,EAAUtjB,EAAM7L,IAGlB,IAoGMsyB,IAAanB,EAAUnxB,GAAG0P,WAAWT,MAAM,qBAEjD,OACE,kBAAC3D,GAAA,EAAME,IAAP,CAAYpK,IAAO+vB,EAAUnxB,GAAIwZ,UAXjB,WAChB,IAAM/G,EAAQ,IAAIjD,KAAKJ,GAAM4B,SAC7B,OAAc,IAAVyB,GAAwB,IAATA,EAS0B8f,IAChC,IAAVpb,GAAe,kBAAC7L,GAAA,EAAMM,KAAP,CAAYsd,YAAU,EAAC2D,QAASA,GAAWzd,EAAKD,MAAM,KAAK,IAC3E,kBAAC7D,GAAA,EAAMM,KAAP,SAActI,EAAd,KACA,kBAACgI,GAAA,EAAMM,KAAP,CAAYlF,QAAU,SAACwB,GACrBA,EAAElE,iBACF+nB,EAAW,CAAE/rB,GAAImxB,EAAUC,aAAeD,EAAUC,YAAYpxB,GAAI2H,MAAK,MAGvEwpB,EAAUC,aAAeD,EAAUC,YAAYpxB,GAAK,uBAAGwyB,KAAM,IAAT,IAAc5lB,EAAd,KAA4BA,EAAM,GAAD,OAAIA,EAAJ,KAAa,GALtG,MAOA,kBAACtB,GAAA,EAAMM,KAAP,KAAeE,GAAaA,EAAUqD,MAAM,KAAK,IACjD,kBAAC7D,GAAA,EAAMM,KAAP,SAAcI,GAAUA,EAAQmD,MAAM,KAAK,GAA3C,KACA,kBAAC7D,GAAA,EAAMM,KAAP,SAAc4J,EAAd,KACA,kBAAClK,GAAA,EAAMM,KAAP,SAAcylB,GAAsB,GAApC,KACW,IAAVla,GAAgB,kBAAC7L,GAAA,EAAMM,KAAP,CAAaihB,QAASA,GAAtB,IAAkC0E,GAAM,GAAxC,KACjB,kBAACjmB,GAAA,EAAMM,KAAP,SAAmC,qBAArBulB,EAAU7nB,OAA+B,KAA4B,aAArB6nB,EAAU7nB,OAAuB,MAAQ6nB,EAAU7nB,OAAjH,KACA,kBAACgC,GAAA,EAAMM,KAAP,KACG+jB,GAAWA,EAAQjuB,OAAO,GAC3B,8CAAMiuB,EAAQA,EAAQjuB,OAAO,GAAGge,MAAhC,YAAyCiQ,EAAQA,EAAQjuB,OAAO,GAAG0N,KAAKD,MAAM,KAAK,IAAnF,KAA2F,6BAA3F,KAAmGwgB,EAAQA,EAAQjuB,OAAO,GAAG6Q,KAA7H,MAAqI,6BAEjI,uBAAGigB,KAAK,IACN9rB,QAAW,SAACwB,GACVA,EAAElE,iBACF8E,GAAQ,KAHZ,aAUN,kBAACwC,GAAA,EAAMM,KAAP,KAEE,kBAAChL,EAAA,EAAD,CAASmC,QAASkvB,GAAwBE,IAAiBE,GAAgBta,SAAUka,GAAwBE,IAAiBE,GAAgBltB,KAAK,OAAOtE,OAAK,EAAEC,MAAO,CAAEC,MAAM,cAAeuN,QAAQ,iBAQnMgkB,IAAe1M,IAAiB/Z,EAAM+Z,WAAWC,OAASD,EAAWsJ,KAAKxtB,OAAQ,GAAKmK,EAAM7L,KAAOmvB,IAClG,kBAACxoB,EAAA,EAAD,CAAQL,KAAK,MAAMnB,KAAK,OAAOqS,UAAQ,EAAC9Q,QAAW,WACjD+qB,GAAO,GACP3oB,GAAQ,OASXwpB,IACD,oCAcyB,aAArBnB,EAAU7nB,SAA2BuC,EAAM+Z,WAAWC,OAAmH,IAAzGD,EAAWsJ,KAAKvtB,QAAO,SAAA2B,GAAO,OAAI6tB,EAAU7tB,SAAWA,EAAQmjB,MAAQ0K,EAAU7tB,QAAQtD,MAAK0B,QAAgBmK,EAAM7L,KAAOmvB,IACzL,kBAACsD,GAAA,EAAD,CACEC,QAAW,kBAAC/rB,EAAA,EAAD,CAAQL,KAAK,OAAOnB,KAAK,OAAOqS,UAAQ,EAAC9Q,QAAW,WAC7D+qB,GAAO,GACP3oB,GAAQ,MAEVvI,QAAQ,iBACRS,SAAS,mBAaV6K,EAAM+Z,WAAWC,OAAkH,IAAzGD,EAAWsJ,KAAKvtB,QAAO,SAAA2B,GAAO,OAAI6tB,EAAU7tB,SAAWA,EAAQmjB,MAAQ0K,EAAU7tB,QAAQtD,MAAK0B,SAAmBmK,EAAM7L,KAAOmvB,GACzJ,oCACE,kBAACsD,GAAA,EAAD,CACEC,QAAY,kBAAC/rB,EAAA,EAAD,CAAS5B,MAA6B,aAArBosB,EAAU7nB,OAAsB,QAAQ,OAAQhD,KAAK,QAAQnB,KAAK,OAAOqS,UAAQ,EAAC9Q,QAAW,WApI5IsrB,EAAiB,CACf/tB,UAAU,CAAEjE,GAAGmxB,EAAUnxB,GAAKsJ,OAA0B,aAAnB6nB,EAAU7nB,OAAoB,GAAG,YACtEG,OAAQ,SAAC8R,EAAM2L,GACb3L,EAAM6E,OAAO,CACXC,OAAQ,CACN2P,iBADM,SACWH,EADX,GACiD,EAAZtP,UAAa,IAChD0P,EAAS5L,EAAO4L,OACtB,IAAIA,EACF,OAAOJ,EAGT,IAAM8C,EAAWzL,EAASlkB,KAAK4vB,iBAAiBtpB,OAC1C8W,EAAShW,KAAE8lB,UAAUL,GAO3B,OANGzP,EAAOyS,QACRzS,EAAO6P,GAAQkB,EAAUtlB,MAAM7L,IAAIqwB,aAA0B,aAAXsC,EAAuBvS,EAAO6P,GAAQkB,EAAUtlB,MAAM7L,IAAIqwB,aAAa,EAAIjQ,EAAO6P,GAAQkB,EAAUtlB,MAAM7L,IAAIqwB,aAAc,GAKzKjQ,YAoHC7f,QAA8B,aAArB4wB,EAAU7nB,OAAuB,eAAgB,UAC1DtI,SAAS,kBAUY,aAArBmwB,EAAU7nB,QACV,kBAACmpB,GAAA,EAAD,CAAOttB,KAAK,OAAO2tB,KAAK,OAAOhyB,MAAO,CAAEC,MAAM,QAC5C2xB,QAAY,kBAAC/rB,EAAA,EAAD,CAAQ5B,MAAM,OAAOuB,KAAK,OAAOnB,KAAK,OAAOqS,UAAQ,IACjEnB,OAAS,kBAAMwb,GAAe,IAC9BhpB,QAAU,kBAAMgpB,GAAe,IAC/BlqB,KAAQiqB,EACRrxB,QACE,kBAAC2E,EAAA,EAAD,CAAME,SAAY,YAvKrB,WACnB,IAAMoqB,EAAO,CACXxvB,GAAImxB,EAAUnxB,GACd+yB,SAAUjB,GAGZM,GAAqB,CAAEnuB,UAAWurB,IAkKVwD,GACAnB,GAAe,KAEf,kBAAChtB,EAAA,EAAD,CAAQC,GAAI,MAAZ,2BACA,kBAACI,EAAA,EAAKyJ,SAAN,CACE1M,MAAQ6vB,EACR9rB,SACE,SAACkC,EAAD,OAAKjG,EAAL,EAAKA,MAAL,OAAiB8vB,EAAe9vB,MAIpC,kBAACiD,EAAA,EAAKyB,OAAN,CAAagG,QAAQ,QAAQ7M,KAAM,SAAS0I,SAAO,GAAnD,UAGJyqB,GAAG,QACHjyB,SAAS,kBAiBI,aAArBmwB,EAAU7nB,SAA0BuC,EAAM+Z,WAAWC,OAAkH,IAAzGD,EAAWsJ,KAAKvtB,QAAO,SAAA2B,GAAO,OAAI6tB,EAAU7tB,SAAWA,EAAQmjB,MAAQ0K,EAAU7tB,QAAQtD,MAAK0B,QAAmBmK,EAAM7L,KAAOmvB,IAC5L,kBAACsD,GAAA,EAAD,CAAO3tB,GAAI5E,IAAS0a,SAAO,EACzB8X,QAAY,kBAAC/rB,EAAA,EAAD,CAAS5B,MAAQ,MAAMuB,KAAK,QAAQnB,KAAK,OAAOqS,UAAQ,IACpEjX,QACE,oCAEE,kBAACL,EAAA,EAAQ2E,OAAT,sDACA,0HAEA,kBAAC8B,EAAA,EAAD,CAAQN,OAAK,EAACtB,MAAM,MAAMuB,KAAK,QAAQ/F,QAAQ,UAAUmG,QAAW,WAClDyqB,EAAUnxB,GAhQ9CkyB,GACE,CAAEjuB,UAAU,CAAEjE,GAAImxB,EAAUnxB,IAC1ByJ,OAAQ,SAAC8R,EAAM2L,GACVA,EAASlkB,KAAKkwB,iBAA4D,YAAzChM,EAASlkB,KAAKkwB,gBAAgB5pB,SAChEiS,EAAMqJ,MAAM,CACV5kB,GAAG,aAAD,OAAemxB,EAAUnxB,MAE7Bub,EAAM6E,OAAO,CACXC,OAAO,CACL2P,iBADK,SACYH,EADZ,GACiD,EAAZtP,UAAa,IAC/C0P,EAAS5L,EAAO4L,OACtB,IAAIA,EACF,OAAOJ,EAGT,IAAMzP,EAAShW,KAAE8lB,UAAUL,GAGrBM,EAAW/P,EAAO6P,GAAQkB,EAAUtlB,MAAM1F,MAAMgqB,SAASkB,EAC/D,GAAiB,IAAblB,EAEF,cADQ/P,EAAO6P,GACR7P,EAGT,IAAM8C,EAAW9C,EAAO6P,GAAQkB,EAAUtlB,MAAM1F,MAAM7C,QAStD,OARA8c,EAAO6P,GAAQkB,EAAUtlB,MAAM1F,MAA/B,2BACKia,EAAO6P,GAAQkB,EAAUtlB,MAAM1F,OADpC,IAEEkqB,aAAajQ,EAAO6P,GAAQkB,EAAUtlB,MAAM1F,MAAMkqB,aAAa,EAC/DF,SAAUA,EACV7sB,QAAQ,2BAAO4f,GAAR,mBAAkBiO,EAAU7tB,QAAQwC,SAAWod,EAASiO,EAAU7tB,QAAQwC,UAAU,MAItFsa,UAgODuR,GAAc,OAGpBsB,GAAG,QACH5c,OAAS,kBAAMsb,GAAc,IAC7B9oB,QAAU,kBAAM8oB,GAAc,IAC9BhqB,KAAM+pB,EACN1wB,SAAS,qBAQnB2G,GACD,kBAAC,GAAD,CACEwnB,QAAWA,EACXnvB,GAAKmxB,EAAUnxB,GACf+rB,WAAYA,EACZ3c,KAAQA,EACRzH,KAAMA,EACNrE,QAAW6tB,EAAU7tB,QACrBgG,OAAS6nB,EAAU7nB,OACnBR,QAAUA,EACVgD,UAAYA,EACZE,QAAUA,EACV8J,MAAQN,EACRiZ,IAAMA,EACNkB,QAAUA,MCpMJwD,GAzHU,SAAC,GAAiD,IAerEC,EAfsB7f,EAA8C,EAA9CA,UAAU8f,EAAoC,EAApCA,QAAQrwB,EAA4B,EAA5BA,KAAMmsB,EAAsB,EAAtBA,QAASzP,EAAa,EAAbA,MAAa,EACtCpd,mBAAS,CAAEtC,GAAG,GAAI2H,MAAM,IADc,mBACjEokB,EADiE,KACtDC,EADsD,KAIlEsH,EAAe,YAAI,IAAIjhB,MAAOjB,KAAKC,MAAMgiB,EAAU9f,GAAX,OAAwC,IAAKpS,KAAI,SAACS,EAAEuV,GAChG,IAAMoc,EAAMpc,EAEZ,OADa,IAAI3H,KAAOA,KAAKkC,IAAI6B,EAAU1D,cAAgB0D,EAAU3D,WAAa2D,EAAU9D,UAAU8jB,IAAMhE,iBAKxGiE,EAAiBppB,KAAEqpB,UAAUH,EAAcA,EAAcnyB,KAAI,SAAC+gB,EAAI/K,GAAL,MAAe,CAAC,CAAEnX,GAAGmX,QACpFuc,EAAU,EACVC,EAAQ,EAGZ,GAAG3wB,EAAM,CAKP,IAAM4wB,GAFNR,EAAYhpB,KAAEgC,QAAQpJ,EAAK4sB,mBAAoB,UAEfxlB,KAAEiC,UAAU+mB,GAAU,SAACS,EAAWzkB,GAChE,IAAI0kB,EAAa,EACbvC,EAAK,EAqCT,OApCAsC,EAAaA,EAAW1yB,KAAI,SAACwK,EAAUwL,GACrC,IAAM3B,EAA0B,GAAhB7J,EAAUmK,MAAS,IAC7Bwb,IAAW7gB,GAAO9E,EAAUK,SAAWyE,GAAO9E,EAAUG,WAAa0J,GAA3D,MAAkF4a,QAAQ,GA6B1G,OA3BAzkB,EAAS,2BAAQA,GAAR,IAAkB2lB,MAAMhB,WAAWgB,KAE5CwC,GAA0BxD,WAAWgB,GAwBrCC,GAAOuC,EAAanoB,EAAUE,MAAMkoB,UAAU3D,QAAQ,GAC/CzkB,MAEE,GAAX,2BAAqBkoB,EAAW,IAAhC,IAAmCrC,SAASD,IAC5CoC,GAAgBrD,WAAWiB,GAC3BmC,GAAsBI,EACfD,KAGTT,EAAS,2BAAUI,GAAkBI,GAIvC,IAAMI,EAAW,CACfhzB,SAAU,SACVizB,IAAM,IACNhzB,OAAQ,GAKV,OACE,oCACGye,GACF,kBAAC7a,EAAA,EAAD,CAAQC,GAAK,KAAK6H,QAAQ,SAAS+S,GAElC,kBAACpU,GAAA,EAAD,CAAOC,QAAM,EAACkhB,SAAO,EAACC,YAAU,EAACloB,UAAU,UACzC,kBAAC8G,GAAA,EAAMzG,OAAP,KACE,kBAACyG,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMG,WAAP,CAAkB3K,MAAQkzB,GAA1B,UACA,kBAAC1oB,GAAA,EAAMG,WAAP,CAAkB3K,MAAQkzB,GAA1B,aACA,kBAAC1oB,GAAA,EAAMG,WAAP,CAAkB3K,MAAQkzB,GAA1B,WACA,kBAAC1oB,GAAA,EAAMG,WAAP,CAAkB3K,MAAQkzB,GAA1B,gBACA,kBAAC1oB,GAAA,EAAMG,WAAP,CAAkB3K,MAAQkzB,GAA1B,cACA,kBAAC1oB,GAAA,EAAMG,WAAP,CAAkB3K,MAAQkzB,GAA1B,kBACA,kBAAC1oB,GAAA,EAAMG,WAAP,CAAkB3K,MAAQkzB,GAA1B,iBACA,kBAAC1oB,GAAA,EAAMG,WAAP,CAAkB3K,MAAQkzB,GAA1B,cACA,kBAAC1oB,GAAA,EAAMG,WAAP,CAAkB3K,MAAQkzB,GAA1B,cACA,kBAAC1oB,GAAA,EAAMG,WAAP,CAAkB3K,MAAQkzB,GAA1B,aACA,kBAAC1oB,GAAA,EAAMG,WAAP,CAAkB3K,MAAQkzB,GAA1B,cAGJ,kBAAC1oB,GAAA,EAAMI,KAAP,KACG0nB,GAAahpB,KAAEjJ,IAAIiyB,GAAU,SAACS,EAAWzkB,GAAZ,OAC5B,kBAAC,WAAD,CAAUhO,IAAOgO,GACdykB,EAAW1yB,KAAK,SAACgwB,EAAUha,GAAX,OACf,kBAAC,GAAD,CAAegY,QAAUA,EAAS/f,KAAQA,EAAM+H,MAASA,EAAO/V,IAAO+vB,EAAUnxB,GAAI+rB,WAAaC,EAAemF,UAAWA,EAAWtE,QAASgH,EAAWnyB,iBAOnK,kBAAC4J,GAAA,EAAM6a,OAAP,KACE,kBAAC7a,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMG,WAAP,CAAmByoB,QAAQ,KAA3B,SACA,kBAAC5oB,GAAA,EAAMG,WAAP,SAAoBioB,EAAStD,QAAQ,GAArC,KACA,kBAAC9kB,GAAA,EAAMG,WAAP,SAAoBkoB,EAAMvD,QAAQ,GAAlC,KACA,kBAAC9kB,GAAA,EAAMG,WAAP,CAAkByoB,QAAQ,SAKhC,kBAAC,GAAD,CAAiBlI,cAAgBA,EAAeD,WAAYA,MCgBnDoI,GArIG,SAAC,GAA6E,IAA3EhF,EAA0E,EAA1EA,QAAQiF,EAAkE,EAAlEA,aAAcnE,EAAoD,EAApDA,OAAQoE,EAA4C,EAA5CA,SAAwBC,GAAoB,EAAlCC,aAAkC,EAApBD,eACnEzoB,EAAQnI,KAAKU,MAAOZ,eAAea,QAAQ,aAD4C,EAE9D/B,mBAAU2tB,GAAU,QAF0C,mBAEtFuE,EAFsF,KAE7EC,EAF6E,KAGvFhiB,EAAQ,IAAIjD,KAH2E,EAIlElN,mBAAWwM,MAAMulB,GAAmB1jB,GAAc8B,GAAvB4hB,GAJuC,mBAItFnhB,EAJsF,KAI/EyY,EAJ+E,KAMvFuB,EAAc,CAAErhB,MAAOsjB,GAAWtjB,EAAM7L,GAAK00B,eAAgBF,EAAYthB,OAAOA,EAAQC,KAAMH,GAAcwhB,EAASthB,IAN9B,EAQ9DrQ,mBAASwrB,GAAgB,CAAEpqB,UAAUipB,IAA5D9sB,EARqF,EAQrFA,MAAM2C,EAR+E,EAQ/EA,QAAQC,EARuE,EAQvEA,KAEtBrD,qBAAU,WACJqD,GACFoxB,EAAapxB,EAAK2xB,gBAGpB,CAAC3xB,IAIH,IA6BM4xB,EA7BoB,WACxB,IAAIC,EACE1hB,EAAOH,GAAcwhB,EAASthB,GAQpC,OANE2hB,EADY,UAAXL,EACO,IAAIhlB,KAAK2D,EAAKD,EAAO,GAEpB5B,GAAgB4B,EAAOC,GAGlC0hB,EAAQ,IAAIrlB,KAAKA,KAAKkC,IAAKmjB,EAAMhlB,cAAeglB,EAAMjlB,WAAYilB,EAAMplB,YAoB5DqlB,GACRC,EAhBkB,WACtB,IAAIC,EACE7hB,EAAOH,GAAcwhB,EAASthB,GACpC,GAAc,UAAXshB,EACDQ,EAAK,IAAIxlB,KAAK2D,EAAKD,EAAO,EAAE,OACvB,CACL,IAAM+hB,EAAM3jB,GAAgB4B,EAAOC,GACnC6hB,EAAK,IAAIxlB,KAAKA,KAAKkC,IAAKujB,EAAGplB,cAAeolB,EAAGrlB,WAAYqlB,EAAGxlB,UAAU,IAKxE,OAHGulB,GAAMviB,IACPuiB,EAAK,IAAIxlB,KAAKA,KAAKkC,IAAIe,EAAM5C,cAAc4C,EAAM7C,WAAW6C,EAAMhD,aAE5DulB,EAIEE,GAIZ,GAAInyB,EACF,OACE,kBAACkT,GAAA,EAAD,CAAQ1N,QAAM,GAAd,uBAIJ,GAAInI,EACF,OACE,kBAACyE,EAAA,EAAD,CAAQC,GAAI,MAAZ,0CAIJ,IAAMqwB,EAAgB,WACpB,IAAIxC,GAAW,EAKf,OAJG3vB,GAAQA,EAAK4sB,oBAAsB5sB,EAAK4sB,mBAAmBluB,OAAS,IACrEixB,GAAY3vB,EAAK4sB,mBAAmBzS,MAAK,SAAAgU,GAAS,MAAyB,aAArBA,EAAU7nB,WAG3DqpB,GAGT,OACE,oCACE,kBAAC/xB,EAAA,EAAD,CAASC,OAAK,EAACC,MAAQ,CAAE8X,aAAa,SACpC,kBAAC1T,EAAA,EAAD,MACIovB,GACA,oCAAE,+CACA,kBAACpvB,EAAA,EAAK+D,MAAN,KACE,kBAAC/D,EAAA,EAAKM,MAAN,KACE,kBAACgd,GAAA,EAAD,CACEgB,WAAS,EACT3Q,QAAW,CAAE,CAAEzR,IAAI,EAAGmR,KAAM,QAAUtQ,MAAO,SAAW,CAAEb,IAAI,EAAGmR,KAAM,OAAStQ,MAAO,SACvF+D,SAAY,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACfwyB,EAAYxyB,GAEV0pB,EADS,UAAR1pB,EACUwQ,EAAM7C,WAENe,GAAc8B,KAK7BxQ,MAASuyB,KAEb,kBAACtvB,EAAA,EAAKM,MAAN,KACE,kBAACgd,GAAA,EAAD,CACEhY,QAAyB,UAAbgqB,EACZhR,WAAS,EACT3Q,QAAyB,UAAb2hB,EAAqBriB,GAAgB,GAAGK,GAAe,GACnExM,SAAW,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACd0pB,EAAU1pB,IAEZA,MAASiR,OAInB,kBAAC,GAAD,CAAkBic,QAASA,EAAS5b,UAAWqhB,EAAOvB,QAAU0B,EAAK/xB,KAAMA,EAAM0c,MAAK,oBAA8B,UAAb8U,EAAsB3iB,GAAaqB,GAAnC,eAAqDA,EAArD,KAAjB,YAAoFF,GAAcwhB,EAASthB,GAA3G,OAGpFic,IAAYtjB,EAAM7L,IAClB,kBAACY,EAAA,EAAD,CAAUC,OAAK,EAACwE,UAAQ,GACtB,kBAACotB,GAAA,EAAD,CACEC,QAAW,0BAAO/lB,QAAQ,SAAS,kBAAChG,EAAA,EAAD,CAASgG,QAAQ,QAAQoL,UAAYod,IAAiBr1B,KAAK,SAASiF,MAAM,QAA1E,uBACnCgT,SAAWod,IACX50B,QAAS,wD,m9CC5HlB,IAAM60B,GAAYv2B,cAAH,MAoCTw2B,GAAgBx2B,cAAH,MAUby2B,GAAwBz2B,cAAH,MAQrB02B,GAAgB12B,cAAH,MAiBb22B,GAAkB32B,cAAH,MC4Gb42B,GA1KU,SAAC,GAAmB,IAAjBjK,EAAgB,EAAhBA,UACpBlD,EAAgB5kB,KAAKU,MAAOZ,eAAea,QAAQ,aACnDggB,EAASC,cACT7R,EAAQ,IAAIjD,KAHwB,EAIjBlN,mBAAS,IAJQ,mBAInCuJ,EAJmC,KAI7B6pB,EAJ6B,OAKfpzB,mBAAS,QALM,mBAKnC2tB,EALmC,KAK5B0F,EAL4B,OAMXrzB,mBAAU,IANC,mBAMnC4gB,EANmC,KAM1B0I,EAN0B,OAObtpB,mBAAS,QAPI,mBAOnC8J,EAPmC,KAO3BwpB,EAP2B,OAQnBtzB,mBAASsM,GAAW,IAAIY,KAAKiD,EAAM5C,cAAe4C,EAAM7C,WAAY,EAAG,IAAKT,MAAM,KAAK,IARpE,mBAQnC0mB,EARmC,KAQ9BC,EAR8B,OASvBxzB,mBAASsM,GAAW6D,GAAOtD,MAAM,KAAK,IATf,mBASnCwb,EATmC,KAShCoL,EATgC,OAUfzzB,mBAASqO,GAAc8B,IAVR,mBAUnCS,EAVmC,KAU5ByY,EAV4B,KAapCqK,EADWvM,cACUG,SAASza,MAAM,KAAK,GAbL,EAgBH7M,mBAAS,IAhBN,mBAgBnC2zB,EAhBmC,KAgBtBC,EAhBsB,OAkBH5zB,mBAAS,IAlBN,mBAkBnC6zB,EAlBmC,KAkBtBC,EAlBsB,OAoBC9zB,mBAASgmB,EAAc1C,WAAWja,UAAUqf,KAAK7pB,KAAI,SAACmC,EAAQ6T,GACvG,MAAO,CAAE/V,IAAK+V,EAAOlV,MAAMqB,EAAQmjB,IAAKlU,KAAMjP,EAAQwC,cArBd,mBAoBnC8c,EApBmC,KAoBpBC,EApBoB,QAyB+B/C,uBAAalhB,GAzB5C,qBAyBnCy3B,GAzBmC,eAyBTtT,GAzBS,GAyBlBhgB,QAA+BigB,GAzBb,GAyBOhgB,KACjDrD,qBAAU,WACR,GAAGqjB,IAAeA,GAAYzd,YAAY,CACxC,IAAMsmB,EAAQ7I,GAAYzd,YAAYpE,KAAI,SAACmC,EAAQoG,GACjD,MAAO,CAAEtI,IAAKsI,EAAGzH,MAAMqB,EAAQtD,GAAIuS,KAAMjP,EAAQwC,aAEnD+c,EAAkBgJ,MAInB,CAAC7I,KAnCsC,OAqCwBlD,uBAAawV,IArCrC,qBAqCnCgB,GArCmC,eAqCXC,GArCW,GAqCpBxzB,QAA6ByzB,GArCT,GAqCGxzB,KA8B7C,OA5BArD,qBAAU,WACR,GAAG62B,GAAU,CACX,IAAMC,EAAWD,GAAUE,SAASv1B,KAAI,SAAC0K,EAAMsL,GAC7C,MAAO,CAAE/V,IAAI+V,EAAOlV,MAAM4J,EAAM7L,GAAIuS,KAAM1G,EAAM1F,SAElDiwB,EAAgBK,MAIjB,CAACD,KAGJ72B,qBAAU,WACR6rB,EAAU,CAAE3f,QAAOokB,SAAQ/M,WAAU9W,UAASypB,OAAMlL,KAAKzX,SAAS+iB,mBAClE,CAACpqB,EAAOokB,EAAQ/M,EAAU9W,EAASypB,EAAMlL,EAAIzX,EAAQ+iB,EAAczK,IAErE7rB,qBAAU,WACL0kB,EAAO8K,QACRuG,EAAS,CAACrR,EAAO8K,UAEjBuG,EAAS,IAEmB,WAA3BM,EAASxP,eACVkP,EAAS,CAACpN,EAActoB,OAE1B,CAACg2B,EAAU1N,EAActoB,GAAIqkB,IAK7B,oCAEE,kBAACzjB,EAAA,EAAD,CAASuE,KAAK,OAAOE,UAAQ,GAC3B,kBAACyE,GAAA,EAAD,CAAO3E,KAAK,OAAO9E,SAAS,YAA5B,WACA,kBAAC6E,EAAA,EAAD,CAAMC,KAAK,QACT,kBAAC2V,GAAA,EAAD,CAAW2G,OAAO,UAEb4C,EAAO8K,SAAsC,WAA3B6G,EAASxP,eAC5B,kBAACthB,EAAA,EAAKsd,SAAN,CACE3c,MAAM,QACN5D,MAAQ4J,EACR9I,QAASwzB,GACT1jB,QAASsjB,EACT3S,WAAS,EAACC,UAAQ,EAACkT,WAAS,EAC5BnwB,YAAY,MACZkd,QAAU,kBAAM4S,MAChBtwB,SAAW,SAACkC,EAAD,OAAKjG,EAAL,EAAKA,MAAL,OAAiByzB,EAASzzB,MAEzC,kBAACiD,EAAA,EAAKsd,SAAN,CAAe3c,MAAM,SACnB5D,MAAQguB,EACRpd,QAAU,CAAC,CAAEzR,IAAI,EAAGa,MAAM,OAAQsQ,KAAK,QAAS,CAAEnR,IAAI,EAAGa,MAAM,OAAQsQ,KAAK,QAAS,CAAEnR,IAAI,EAAGa,MAAM,QAASsQ,KAAK,UAClH/L,YAAY,MAAMgd,WAAS,EAACmT,WAAS,EAACnsB,SAAO,EAC7CxE,SAAW,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACF,SAATA,GACD0pB,EAAUhb,GAAc8B,IAEb,UAAVxQ,GACD0pB,EAAUlZ,EAAM7C,YAElB+lB,EAAU1zB,MAIF,SAAXguB,GAAqB,oCACpB,kBAAC,aAAD,CAAWhuB,MAAO4zB,EAAOhwB,MAAM,OAC7B+wB,WAAW,aACX5wB,SAAY,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACf6zB,EAAQ7zB,MAEZ,kBAAC,aAAD,CAAWA,MAAO0oB,EAAI9kB,MAAM,KAAK+wB,WAAW,aAC1C5wB,SAAY,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACf8zB,EAAM9zB,QAKE,SAAXguB,GAAgC,UAAXA,IAAuB,oCAC3C,kBAAC/qB,EAAA,EAAKsd,SAAN,CACEvgB,MAAOiR,EACPrN,MAAK,iBAAYoqB,GACjBpd,QAAkB,SAATod,EAAgBzd,KAAiBL,KAC1CqR,WAAS,EAAChZ,SAAO,EACjBxE,SAAW,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACd0pB,EAAU1pB,OAIlB,kBAACiD,EAAA,EAAKsd,SAAN,CAAe3c,MAAO,WACpB5D,MAAQmK,EACRyG,QAAU,CAAC,CAAEzR,IAAI,EAAEa,MAAM,OAAOsQ,KAAK,QAAU,CAAEnR,IAAI,EAAEa,MAAM,QAAQsQ,KAAK,UAC1EvM,SAAY,SAACkC,EAAD,OAAKjG,EAAL,EAAKA,MAAL,OAAiB2zB,EAAW3zB,IACxCuhB,WAAS,EACThZ,SAAO,IAGT,kBAACtF,EAAA,EAAKsd,SAAN,CACE3c,MAAO,UACP9C,QAAUggB,GACVlQ,QAAS+P,EACT3gB,MAAQihB,EACRM,WAAS,EAACC,UAAQ,EAACkT,WAAS,EAC5BnwB,YAAY,MACZkd,QAAU,WACL4E,EAAc1C,WAAWC,OAC1BwQ,MAIJrwB,SAAY,SAACkC,EAAD,OAAKjG,EAAL,EAAKA,MAAL,OAAiB2pB,EAAY3pB,MAE3C,kBAACiD,EAAA,EAAKsd,SAAN,CAAe3c,MAAO,SACpB5D,MAAQg0B,EACRpjB,QAAU,CAAC,CAAEzR,IAAI,EAAEa,MAAM,WAAWsQ,KAAK,YAAc,CAAEnR,IAAI,EAAEa,MAAM,UAAUsQ,KAAK,YACpFvM,SAAY,SAACkC,EAAD,OAAKjG,EAAL,EAAKA,MAAL,OAAiBi0B,EAAgBj0B,IAC7CuE,YAAY,MACZmwB,WAAS,EACTnT,WAAS,EACThZ,SAAO,SC5CNqsB,GAhHY,SAAC,GAAuB,IAArBzC,EAAoB,EAApBA,aACtB3hB,EAAQ,IAAIjD,KACZ6U,EAASC,cACTxe,EAAW2jB,cACXuM,EAAYlwB,EAAS8jB,SAASza,MAAM,KAAK,GAJC,EAMrB7M,mBAAS,CAClCuJ,MAAM,GACNokB,OAAO,OACP4F,KAAKjnB,GAAW,IAAIY,KAAKiD,EAAM5C,cAAe4C,EAAM7C,WAAY,EAAG,IAAKT,MAAM,KAAK,GACnFwb,GAAG/b,GAAW6D,GAAOtD,MAAM,KAAK,GAChC+D,OAAOvC,GAAc8B,GACrBrG,QAAQ,OACR8W,SAAS,GACT+S,aAAc,KAdgC,mBAMzCt0B,EANyC,KAMlC6pB,EANkC,KAgB1CvnB,EAAS,eAAStC,GAEG,IAAxBA,EAAOkK,MAAMnK,SACduC,EAAUkrB,QAAUxtB,EAAOkK,MAAM,IAGnC5H,EAAUkP,KAAOH,GAAcrR,EAAOsuB,OAAQtuB,EAAOuR,QAtBL,I1CoIvB/M,E0CpIuB,EAwBvBtD,mBAASyrB,GAAmB,CAAErqB,UAAWA,EAAUsgB,KAAMF,EAAO4L,SAAjFltB,EAxBwC,EAwBxCA,QAAQC,EAxBgC,EAwBhCA,KAShB,GAPArD,qBAAW,WACNqD,GACDoxB,EAAapxB,EAAK2xB,gBAEpB,CAAC3xB,EAAMoxB,IAGN/P,EAAO4L,OAAQ,CAChB,IACIA,EACAoE,EACAE,EAHEuC,EAAczS,EAAO4L,OAAO9gB,MAAM,KAexC,MAXsB,SAAnB2nB,EAAY,IACb7G,EAAO,OACPoE,EAAWyC,EAAY,GACvBvC,EAAeuC,EAAY,KAG3B7G,EAAO,Q1CwFc9pB,E0CvFE2wB,EAAY,GAAnCzC,E1CwFW,CAAC,UAAU,WAAW,QAAQ,QAAQ,MAAM,OAAO,OAAO,SAAS,YAAY,UAAU,WAAW,YAChGtlB,WAAU,SAACgoB,GAC5B,OAAOA,IAAU5wB,EAAKqgB,iB0CzFpB+N,EAAeuC,EAAY,IAGtB,kBAAC,GAAD,CAAW7G,OAASA,EAAQoE,SAAUniB,SAASmiB,GAAWE,aAAcriB,SAASqiB,GAAgBpF,QAAS9K,EAAO8K,QAAUiF,aAAcA,EAAcE,eAAa,IAG7K,OAEE,oCACE,kBAAC,GAAD,CAAkB9I,UAAYA,IAE9B,kBAACvV,GAAA,EAAD,CAAQ1N,OAAQxF,GAAhB,+BAEA,kBAACuI,GAAA,EAAD,KACE,kBAAC0rB,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,MACI5S,EAAO8K,SAAsC,WAA3B6G,EAASxP,eAC7B,kBAAC0Q,GAAA,EAAD,mBAEA,kBAACA,GAAA,EAAD,eACA,kBAACA,GAAA,EAAD,kBACA,kBAACA,GAAA,EAAD,qBACA,kBAACA,GAAA,EAAD,kBAGJ,kBAACC,GAAA,EAAD,KACGn0B,GAAQA,EAAKgtB,kBAAoB5lB,KAAEjJ,IAAI6B,EAAKgtB,kBAAkB,SAACvY,EAAOwY,GAAR,OAC7D7lB,KAAEjJ,IAAIsW,GAAO,SAAC5L,EAAM7L,GAAP,OACX,kBAACi3B,GAAA,EAAD,CAAU71B,IAAKpB,EAAIsZ,UAAWzN,EAAMwkB,aAAyB7W,WAAW3N,EAAMwkB,eAC1EhM,EAAO8K,SAAwC,WAA3B6G,EAASxP,eAC/B,kBAAC4Q,GAAA,EAAD,KAAW,kBAAC,IAAD,CAAMzM,GAAE,mCAA8B3qB,GAAM0G,QAAS,cAArD,IAENmF,EAAM1F,OACX,kBAACixB,GAAA,EAAD,KAAYnH,GACZ,kBAACmH,GAAA,EAAD,KACEhtB,KAAE+R,OAAOtQ,EAAMvI,SAAQ,SAAC8Y,EAAEC,EAAEjb,GAC1B,OAAS,IAANib,GACSD,EAAEA,EAAE,IAAI,IAAIhb,EAEjBgb,IAEP,KAEJ,kBAACgb,GAAA,EAAD,KAAYvrB,EAAMskB,UAClB,kBAACiH,GAAA,EAAD,KAAW,kBAAC,IAAD,CAAMzM,GAAE,UAAK7kB,EAAS8jB,SAAd,YAA0BvF,EAAO8K,QAAQ,GAAf,UAAqBnvB,EAArB,MAA1B,OAAuDiwB,GACxEvpB,QAAS,cAELmF,EAAMwkB,aAAN,UAAyBxkB,EAAMwkB,aAA/B,mBAA8D,eAHzD,iBClEZgH,GA7BU,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,QACpBjT,EAASC,cAD2B,EAEPhiB,mBAAS,IAFF,mBAEnCi1B,EAFmC,KAExBnD,EAFwB,KAI1C,OAAO,sCAED/P,EAAOqF,MAAsC,uBAA9BrF,EAAOqF,KAAKlD,gBAC7B,oCACE,kBAACgE,GAAA,EAAD,KAEKnG,EAAO8K,SACR,oCACE,kBAAC3E,GAAA,EAAWgN,QAAZ,CAAoBne,MAAI,EAACvU,GAAM4lB,IAAMC,GAAM,4BAA3C,uBACA,kBAACH,GAAA,EAAW3jB,QAAZ,MACA,kBAAC2jB,GAAA,EAAWgN,QAAZ,CAAoBjvB,QAAU8b,EAAO4L,OAAsBnrB,GAAIuf,EAAO4L,OAASvF,IAAM,GAAIC,GAAE,mCAA8BtG,EAAO8K,UAAhI,IAA6IoI,EAA7I,MAGHlT,EAAO4L,QAAU,oCAChB,kBAACzF,GAAA,EAAW3jB,QAAZ,CAAoBP,KAAK,kBACzB,kBAACkkB,GAAA,EAAWgN,QAAZ,CAAoBjvB,QAAM,GAAE8b,EAAO4L,OAAOrY,QAAQ,IAAI,SAM9D,kBAAC,GAAD,CAAoBwc,aAAgBkD,GAAWlD,MCkDpCqD,GAvEW,WAAO,IAAD,EACXh3B,qBAAWC,GAAvBjB,EADuB,oBAExB4kB,EAAQC,cACRliB,EAAUC,cAEhBmB,eAAeiF,WAAW,YALI,MAOMxF,sBAAYsqB,GAAe,CAC7DzR,YAAa,WACXrc,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAQ,6CAA6CT,KAAM,aAC1GsC,EAAQyB,KAAK,gBAGfX,QAAS,SAAC4d,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,gCAAgC,6BAAnC,IAA0CugB,EAAI3d,SAAarD,KAAM,cAd/F,mBAOvB43B,EAPuB,KAOP30B,EAPO,KAOPA,QAWvB,IAAIshB,EAAOsT,UACT,OAAO,kBAAC9yB,EAAA,EAAD,qCAQT,OACE,kBAACjE,EAAA,EAAD,CAASC,OAAK,EAACkC,QAAUA,GACvB,kBAAC,KAAD,CACEwT,cARU,CACdrS,SAAS,GACT0zB,gBAAgB,IAOZlhB,SAAW,SAACd,GAEV,IAAM3B,EAAS,GASf,OARI2B,EAAO1R,UAAuC,KAA3B0R,EAAO1R,SAASwP,SACrCO,EAAO/P,SAAW,wBAGjB0R,EAAO1R,WAAa0R,EAAOgiB,kBAC5B3jB,EAAO2jB,gBAAkB,gDAGpB3jB,GAIT7O,SAAW,SAACwQ,GAEV8hB,EAAc,CAAEzzB,UAAU,CAAE0zB,UAAWtT,EAAOsT,UAAWzzB,SAAU0R,EAAO1R,eAK3E,gBAAGyS,EAAH,EAAGA,aAAa2M,EAAhB,EAAgBA,MAAOrP,EAAvB,EAAuBA,OAAvB,OAAoC,kBAAC/O,EAAA,EAAD,CAAMpE,MAAO,CAAE8X,aAAa,QAAUxT,SAAWuR,GACpF,kBAAC/V,EAAA,EAAD,KACE,kBAAC,GAAD,CAAYuF,KAAK,WAAWN,MAAM,eAAe/F,KAAK,WAAWiB,MAAM,MAEvE,kBAAC,GAAD,CAAYoF,KAAK,kBAAkBN,MAAM,mBAAmB/F,KAAK,WAAWiB,MAAM,MAElF,kBAAC4F,EAAA,EAAD,CAAQoR,WAAeuL,GAASlZ,KAAEkT,QAAQrJ,IAAWnU,KAAK,SAASgB,MAAO,CAAE4gB,UAAW,QAAUpI,UAAQ,GAAzG,gB,oZClEL,IAAMue,GAAoBh5B,cAAH,MC6Vfi5B,GApVW,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACzBt3B,qBAAWC,GAAvBjB,EADqC,sBAEhB6C,mBAAS,IAFO,mBAEtCuQ,EAFsC,KAE9BmlB,EAF8B,KAGvCnsB,EAASnI,KAAKU,MAAMZ,eAAea,QAAQ,aAHJ,EAIN/B,mBAAUy1B,GAAeA,EAAYlS,QAAU,GAJzC,mBAItCoS,EAJsC,KAIzBC,EAJyB,KAMvCC,EAAqBtsB,EAAM+Z,WAAWC,MANC,EASI5iB,sBAAY40B,GAAkB,CAC7E/b,YAAa,WACXrc,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,8BAA+BT,KAAM,cAG/FoD,QAAS,SAAC4d,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,qCAAqC,6BAAxC,IAA+CugB,EAAI3d,SAAarD,KAAM,cAfrF,mBAStCs4B,EATsC,KASVC,EATU,KASnBt1B,QAUpBu1B,EAAgB,SAACC,GAAD,OAAmBA,GAAiBA,EAAcp3B,KAAI,SAAAmR,GAC1E,OAAIA,EACGA,EAAEmU,IADK,SAQV+R,EAAgB,SAACT,GACrB,GAAGI,EACD,OAAO,EAET,GAA2B,kBAAhBJ,GACT,IAAI3tB,KAAEkT,QAAQya,GACZ,OAAO,OAEH,GAAGA,EACT,OAAO,EAET,OAAO,GAGHnS,EAAaxb,KAAEiC,UAAU0rB,GAAY,SAACzlB,EAAE/F,GAC5C,GAAgB,kBAAN+F,EAAe,CACvB,IAAMmmB,EAAG,eAAQnmB,GAWjB,MAVO,YAAJ/F,IACDksB,EAAIzS,KAAOsS,EAAeG,EAAIzS,OAIzB,cAAJzZ,IACDksB,EAAIzN,KAAOsN,EAAeG,EAAIzN,MAC9ByN,EAAIvJ,KAAOoJ,EAAeG,EAAIvJ,OAGzBuJ,EAGJ,OAAOnmB,KA1D+B,EA8DpBzP,mBAASjE,EAAY,CAAE2lB,MAAO4T,IAA/Cp1B,EA9DqC,EA8DrCA,QAAQC,EA9D6B,EA8D7BA,KAChBrD,qBAAU,WACR,GAAGqD,EAAK,CACN,IACM4f,EADW5f,EAAKuC,YACUpE,KAAI,SAACmC,EAAQ6T,GAC3C,MAAO,CAAE/V,IAAI+V,EAAOlV,MAAOqB,EAAQtD,GAAIuS,KAAMjP,EAAQwC,aAEvDkyB,EAAWpV,MAEb,CAAC5f,IAIH,IAAM01B,EAAoB,SAAClkB,GACzB,GAAI2jB,EACF,OAAOtlB,EAGT,IAAI8lB,EAAW,GACf,OAAQnkB,GACR,IAAK,eAOH,OANG3I,EAAM+Z,WAAWtiB,QAAQ0iB,KAAKtkB,SAC/Bi3B,EAAU9sB,EAAM+Z,WAAWtiB,QAAQ0iB,KAAK7kB,KAAI,SAACmR,EAAE5I,GAC7C,MAAO,CAAEtI,IAAIsI,EAAGzH,MAAOqQ,EAAEmU,IAAKlU,KAAMD,EAAExM,cAInC6yB,EAET,IAAK,iBAOH,OANG9sB,EAAM+Z,WAAWja,UAAUqf,KAAKtpB,SACjCi3B,EAAW9sB,EAAM+Z,WAAWja,UAAUqf,KAAK7pB,KAAI,SAACmR,EAAE5I,GAChD,MAAO,CAAEtI,IAAIsI,EAAGzH,MAAOqQ,EAAEmU,IAAKlU,KAAMD,EAAExM,cAIlC6yB,EACV,IAAK,iBAMH,OALG9sB,EAAM+Z,WAAWja,UAAUujB,KAAKxtB,SACjCi3B,EAAY9sB,EAAM+Z,WAAWja,UAAUujB,KAAK/tB,KAAI,SAACmR,EAAE5I,GACjD,MAAO,CAAEtI,IAAIsI,EAAGzH,MAAOqQ,EAAEmU,IAAKlU,KAAMD,EAAExM,cAGnC6yB,EAET,QACE,OAAOA,IAMLC,EAAiB/lB,EAAQ1R,KAAI,SAAAmC,GAAO,OAAIA,EAAQrB,SAEtD,OACE,kBAAC,KAAD,CACEqU,oBAAkB,EAClBC,cAAa,eAASqP,GACtBxgB,SAAY,SAACwQ,GACX,IAAMijB,EAAU,eAAQjjB,GAEpBijB,EAAWhT,MAoBbuS,EAAiB,CAAEn0B,UAAW,CAAE4hB,OAAM,EAAK7lB,GAAI+3B,EAAY/3B,OAnB3DoK,KAAE+R,OAAOvG,GAAO,SAACkjB,EAAKC,EAAIC,GAErBpT,EAAWoT,IAAU5uB,KAAE6uB,QAAQrT,EAAWoT,GAASH,EAAWG,YACxDH,EAAWG,GAGjBpT,EAAWoT,KAAW5uB,KAAE6uB,QAASrT,EAAWoT,GAAQH,EAAWG,KAChE5uB,KAAE+R,OAAO0c,EAAWG,IAAO,SAACF,EAAKC,EAAIG,GAC/B9uB,KAAE6uB,QAAQlB,EAAYiB,GAAOE,GAAOL,EAAWG,GAAOE,YACjDL,EAAWG,GAAOE,KAE3B,MAGJ,IACFd,EAAiB,CAAEn0B,UAAU,2BAAM40B,GAAP,IAAkB74B,GAAI+3B,EAAY/3B,WAajE,gBAAGqN,EAAH,EAAGA,cAAcuI,EAAjB,EAAiBA,OAAOe,EAAxB,EAAwBA,aAAa2M,EAArC,EAAqCA,MAAM6V,EAA3C,EAA2CA,UAA3C,OAA2D,oCAC1D,kBAACt0B,EAAA,EAAD,CAAQC,GAAI,MAAZ,cACA,kBAAC2B,GAAA,EAAD,CACEZ,MAAQ,mDACRkS,UAAcogB,EACd5pB,QAAM,EACNpI,KAAM,QACNJ,QAAW6P,EAAOiQ,MAClB7f,SAAW,SAACkC,EAAD,GAAoB,IAAfnC,EAAc,EAAdA,QACdsH,EAAc,QAAQtH,GACtBmyB,EAAgBnyB,GAGbA,IACDsH,EAAc,eAAeurB,GAC7BvrB,EAAc,eAAc,GAC5BA,EAAc,iBAAiBurB,GAC/BvrB,EAAc,iBAAiBurB,GAC/BvrB,EAAc,cAAa,GAC3BA,EAAc,aAAY,GAC1BA,EAAc,cAAa,OAM/BiW,GAAS,kBAACpjB,EAAA,EAAD,CAAS0a,SAAO,GAAhB,4DAKX,kBAAC1V,EAAA,EAAD,CAAMJ,GAAG,QAAQ/B,QAASA,GAAWs1B,EAAUe,UAAU,yBAAyBh0B,SAAUuR,GAC1F,kBAACrL,GAAA,EAAMzG,OAAP,KACE,kBAACyG,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMG,WAAP,cAGA,kBAACH,GAAA,EAAMG,WAAP,aAGA,kBAACH,GAAA,EAAMG,WAAP,YAGA,kBAACH,GAAA,EAAMG,WAAP,aAGA,kBAACH,GAAA,EAAMG,WAAP,eAKJ,kBAAC0rB,GAAA,EAAD,KAEG/sB,KAAEjJ,IAAI42B,GAAY,SAAC7V,EAAI9gB,GAAL,OAAa,kBAAC,WAAD,CAAUA,IAAKA,GACpC,eAARA,GAAgC,OAARA,GAAyB,UAARA,GAC1C,kBAAC,KAAD,MACG,kBAAM,kBAACkK,GAAA,EAAME,IAAP,CAAWpK,IAAKA,GACrB,kBAACkK,GAAA,EAAMM,KAAP,KACGxK,EAAIqN,eAGP,kBAACnD,GAAA,EAAMM,KAAP,KACW,YAAPxK,GACF,kBAAC,GAAD,CACEqiB,UAAQ,EACRD,WAAS,EACT3Q,QAAU6lB,EAAkB,GAAD,OAAIt3B,EAAJ,UAC3BoF,YAAc,eACduR,SAAYhV,IAAYy1B,EAAc3sB,EAAM+Z,WAAWxkB,GAAK4kB,OAASiS,EACrEl1B,QAAUA,EACVoD,KAAI,UAAK/E,EAAL,WAGG,UAARA,EACC,kBAACqF,GAAA,EAAD,CACEsR,UAAeygB,EAAc3sB,EAAM+Z,WAAWxkB,GAAK4kB,OAASiS,EAC5D1pB,QAAM,EAACpI,KAAI,UAAK/E,EAAL,SACX2E,QAAW6P,EAAO,GAAD,OAAIxU,IAAO4kB,KAC5BhgB,SAAW,SAACkC,EAAD,GAAoB,IAAfnC,EAAc,EAAdA,QACdsH,EAAc,GAAD,OAAIjM,EAAJ,SAAe2E,GAGzBA,GACDsH,EAAc,GAAD,OAAIjM,EAAJ,SAAe2E,MAGzB,IAKZ,kBAACuF,GAAA,EAAMM,KAAP,KACS,cAAPxK,GACD,kBAACqF,GAAA,EAAD,CACE8H,QAAM,EACNwJ,UAAeygB,EAAc3sB,EAAM+Z,WAAWxkB,GAAKqtB,MAAQwJ,EAC3D9xB,KAAI,UAAK/E,EAAL,QACJ2E,QAAW6P,EAAO,GAAD,OAAIxU,IAAOqtB,IAC5BzoB,SAAW,SAACkC,EAAD,GAAoB,IAAfnC,EAAc,EAAdA,QACdsH,EAAc,GAAD,OAAIjM,EAAJ,QAAc2E,GAChB,UAAR3E,GAAmB2E,GAEpBsH,EAAc,GAAD,OAAIjM,EAAJ,UAAe,OAOpC,kBAACkK,GAAA,EAAMM,KAAP,KACW,UAARxK,GACA,kBAACqF,GAAA,EAAD,CACEsR,UAAeygB,EAAc3sB,EAAM+Z,WAAWxkB,GAAK4pB,OAASiN,EAC5D1pB,QAAM,EACNpI,KAAI,UAAK/E,EAAL,SACJ2E,QAAW6P,EAAO,GAAD,OAAIxU,IAAO4pB,KAC5BhlB,SAAW,SAACkC,EAAD,GAAoB,IAAfnC,EAAc,EAAdA,QAEX6P,EAAO/J,MAAMma,MAAQpQ,EAAO/J,MAAM4iB,IACnCphB,EAAc,GAAD,OAAIjM,EAAJ,UAAe,GAE5BiM,EAAc,GAAD,OAAIjM,EAAJ,SAAe2E,MAK1B,cAAR3E,GACA,kBAAC,GAAD,CACEqiB,UAAQ,EACRD,WAAS,EACT3Q,QAAS6lB,EAAkB,GAAD,OAAIt3B,EAAJ,UAC1BoF,YAAc,eACduR,SAAYhV,IAAcy1B,EAAc3sB,EAAM+Z,WAAWxkB,GAAK4pB,OAASiN,EACvEl1B,QAAUA,EACVoD,KAAI,UAAK/E,EAAL,SACJ4E,SAAY,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MAETo3B,EAAa,YAAQ,IAAIC,IAAJ,sBAAY1jB,EAAOjK,UAAUujB,MAA7B,YAAsCjtB,MACjEoL,EAAc,GAAD,OAAIjM,EAAJ,SAAei4B,OAQnC,kBAAC/tB,GAAA,EAAMM,KAAP,CAAYmM,SAAoB,cAAR3W,GACb,cAARA,GACD,kBAAC,GAAD,CACEqiB,UAAQ,EACRD,WAAS,EACTrd,KAAI,UAAK/E,EAAL,SACJyR,QAAS6lB,EAAkB,GAAD,OAAIt3B,EAAJ,UAC1BoF,YAAc,eACduR,SAAYhV,IAAay1B,EAAc3sB,EAAM+Z,WAAWxkB,GAAK8tB,OAAS+I,EACtEjyB,SAAY,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACfoL,EAAc,GAAD,OAAIjM,EAAJ,SAAea,GAE5B,IAAMo3B,EAAa,YAAQ,IAAIC,IAAJ,sBAAY1jB,EAAOjK,UAAUqf,MAA7B,YAAsC/oB,MACjEoL,EAAc,GAAD,OAAIjM,EAAJ,SAAei4B,IAE9Bt2B,QAAUA,eAcvBugB,GACD,oCACE,kBAAC3c,EAAA,EAAD,CAAQ2S,UAAQ,EAAC5S,QAAW,kBAAMiQ,MAAlC,iBACA,kBAAChQ,EAAA,EAAD,CAAS6S,UAAQ,EAAC9S,QAAW,kBAAMyyB,MAAnC,0BCpOK5kB,GAvGQ,SAACzS,GAAW,IAAD,EACZrB,qBAAWC,GAAvBjB,EADwB,sBAGsBwD,sBAAY0qB,GAAW,CAC3E7R,YAAa,WACXrc,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,mCAAoCT,KAAM,aAClGgC,EAAMgH,SAAQ,IAGhB5F,QAAS,SAAC4d,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,2CAA2C,6BAA9C,IAAqDugB,EAAI3d,SAAarD,KAAM,WACpIgC,EAAMgH,SAAQ,MAXc,mBAGzBywB,EAHyB,KAGFC,EAHE,KAGXz2B,QAaf02B,EAAU,CAAE7lB,MAAO9R,EAAM8R,MAC7B4N,MAAO1f,EAAM0f,OAAS,GACtBkY,aAAc53B,EAAM43B,aACpBC,cAAe73B,EAAMiyB,SACrB/yB,SAAUc,EAAMd,UAAY,IAE9B,OACE,kBAAC4H,GAAA,EAAD,CACEsN,WAAS,EACTC,eAAe,EACfC,oBAAoB,EACpBzO,KAAQ7F,EAAM6F,KACdkB,QAAU,kBAAO/G,EAAMgH,SAAQ,IAC/BuN,OAAS,kBAAMvU,EAAMgH,SAAS,KAE9B,kBAACmf,GAAA,EAAD,sBAA4BnmB,EAAMqE,KAAlC,KACA,kBAAC+hB,GAAA,EAAD,KAEGsR,GACG,kBAACxjB,GAAA,EAAD,CAAQzN,QAAM,GACZ,kBAAC0N,GAAA,EAAD,OAIN,kBAAC,KAAD,CACEM,cAAkBkjB,EAClB/iB,SAAW,SAACd,GAEV,IAAM3B,EAAS,GAaf,MAZG,SAAS2lB,KAAKhkB,EAAO4L,SACtBvN,EAAOuN,MAAM,0CAEZ5L,EAAO4L,OAAS5L,EAAO4L,MAAM9f,OAAS,IACvCuS,EAAOuN,MAAM,mDAEZ7N,GAAciC,EAAOhC,SACtBK,EAAOL,MAAO,iBAEb9E,MAAM8G,EAAO+jB,iBACd1lB,EAAO0lB,cAAe,iCAEjB1lB,GAGT7O,SAAW,SAACwQ,GACV,IAAMikB,EAAgBzvB,KAAE0vB,OAAOlkB,GAAQ,SAACtD,EAAE/F,GAAH,OAASktB,EAAQltB,KAAO+F,KAE/DinB,EAAY,CAAEt1B,UAAU,2BAAK41B,GAAN,IAAoB75B,GAAG8B,EAAM9B,UAGrD,cAAG4V,OAAH,IAAUe,EAAV,EAAUA,aAA2B2M,GAArC,EAAuBjW,cAAvB,EAAqCiW,OAArC,EAA2CrP,OAA3C,OAAwD,kBAAC/O,EAAA,EAAD,CAAMpE,MAAO,CAAE8X,aAAa,QAAUxT,SAAWuR,GACxG,kBAACpS,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKiH,IAAN,KACE,kBAAC,GAAD,CAAYrF,KAAK,QAAQN,MAAM,QAAQ/F,KAAK,WAE9C,kBAACyE,EAAA,EAAKiH,IAAN,KACE,kBAAC,GAAD,CAAYrF,KAAK,QAAQN,MAAM,QAAQ/F,KAAK,SAG9C,kBAACyE,EAAA,EAAKiH,IAAN,KACE,kBAAC,GAAD,CAAgBrF,KAAK,eAAemc,SAAO,EAACzc,MAAM,WAChD2d,WAAS,EACT3Q,QAAU,CAAC,CACTzR,IAAI,EAAGa,MAAM,aAAcsQ,KAAM,cACnC,CAAEnR,IAAI,EAAGa,MAAM,WAAYsQ,KAAM,gBAIrC,kBAAChO,EAAA,EAAKiH,IAAN,KACE,kBAAC,GAAD,CAAYrF,KAAK,gBAAgBN,MAAM,4BAGzC,kBAACtB,EAAA,EAAKiH,IAAN,KACE,kBAAC,GAAD,CAAYrF,KAAK,WAAWN,MAAM,eAGrCyd,GACD,kBAAC3c,EAAA,EAAD,CAAQ7G,KAAK,SAAS6M,QAAQ,QAAQ2M,UAAQ,GAA9C,eCDGygB,GA9Fa,SAACj4B,GAAW,IAAD,EAEjBrB,qBAAWC,GAAvBjB,EAF6B,sBAGAwD,sBAAYyqB,GAAgB,CAC/D5R,YAAa,WACXrc,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,6BAA8BT,KAAM,aAC5FgC,EAAMgH,SAAQ,IAGhB5F,QAAS,SAAC4d,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,mCAAmC,6BAAtC,IAA6CugB,EAAI3d,SAAarD,KAAM,WAC5HgC,EAAMgH,SAAQ,MAXmB,mBAG9BkxB,EAH8B,KAGbj3B,EAHa,KAGbA,QAmBxB,OACE,kBAAC6F,GAAA,EAAD,CACEsN,WAAS,EACTC,eAAe,EACfC,oBAAoB,EACpBzO,KAAQ7F,EAAM6F,KACdkB,QAAU,kBAAO/G,EAAMgH,SAAQ,IAC/BuN,OAAS,kBAAMvU,EAAMgH,SAAS,KAE9B,kBAACmf,GAAA,EAAD,wBACA,kBAACC,GAAA,EAAD,KAEGnlB,GACG,kBAACiT,GAAA,EAAD,CAAQzN,QAAM,GAAd,oBAEE,kBAAC0N,GAAA,EAAD,OAIN,kBAAC,KAAD,CACEM,cA1BQ,CACdrS,SAAS,GACT+1B,YAAY,GACZrC,gBAAgB,IAwBVlhB,SAAW,SAACd,GAEV,IAAM3B,EAAS,GAgBf,OAfI2B,EAAO1R,WACT+P,EAAO/P,SAAW,4BAGjB0R,EAAOqkB,cAAgBrkB,EAAO1R,WAC/B+P,EAAOgmB,YAAc,+CAGnBrkB,EAAOqkB,cACThmB,EAAOgmB,YAAc,gCAGpBrkB,EAAOqkB,cAAgBrkB,EAAOgiB,kBAC/B3jB,EAAO2jB,gBAAkB,gDAEpB3jB,GAIT7O,SAAW,SAACwQ,GACVokB,EAAe,CAAE/1B,UAAU,CAAEjE,GAAG8B,EAAM9B,GAAGkE,SAAU0R,EAAO1R,SAAU+1B,YAAarkB,EAAOqkB,kBAIzF,gBAAGtjB,EAAH,EAAGA,aAAa2M,EAAhB,EAAgBA,MAAOrP,EAAvB,EAAuBA,OAAvB,OAAoC,kBAAC/O,EAAA,EAAD,CAAMpE,MAAO,CAAE8X,aAAa,QAAUxT,SAAWuR,GACpF,kBAACpS,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKiH,IAAN,KACE,kBAAC,GAAD,CAAYrF,KAAK,WAAWN,MAAM,eAAe/F,KAAK,cAExD,kBAACyE,EAAA,EAAKiH,IAAN,KACE,kBAAC,GAAD,CAAYrF,KAAK,cAAcN,MAAM,eAAe/F,KAAK,cAG3D,kBAACyE,EAAA,EAAKiH,IAAN,KACE,kBAAC,GAAD,CAAYrF,KAAK,kBAAkBN,MAAM,mBAAmB/F,KAAK,eAGpEwjB,GAASlZ,KAAEkT,QAAQrJ,IACpB,kBAACtN,EAAA,EAAD,CAAQ7G,KAAK,SAASgB,MAAO,CAAE4gB,UAAW,QAAUpI,UAAQ,GAA5D,0BCkLG4gB,GAjQC,SAACp4B,GAAW,IAAD,EACPrB,qBAAWC,GAAtBjB,EADkB,oBAEnB4kB,EAASC,cAFU,EAIIhiB,mBAAS,CAAEqF,MAAK,EAAOwyB,aAAa,aAAUC,cAAc,eAJhE,mBAIlB3a,EAJkB,KAIV8F,EAJU,OAM0BjjB,oBAAS,GANnC,mBAMlB+3B,EANkB,KAMCC,EAND,KAOnBzuB,EAASnI,KAAKU,MAAMZ,eAAea,QAAQ,aAG7C8qB,EAAUtjB,EAAM7L,GAGlBmvB,EADCrtB,EAAM9B,GACE8B,EAAM9B,GACPqkB,EAAO8K,QACN9K,EAAO8K,QAEPtjB,EAAM7L,GAjBQ,MAqBM6C,mBAASuyB,GAAU,CAAEnxB,UAAU,CAAEjE,GAAGmvB,EAASoL,eAAgBz4B,EAAM04B,eAAgB,KAA1Gz3B,EArBiB,EAqBjBA,QAAQ3C,EArBS,EAqBTA,MAAM4C,EArBG,EAqBHA,KArBG,EAyBsBC,sBAAYwqB,GAAmB,CAC5E3R,YAAa,WACXrc,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,mDAAoDT,KAAM,cAGpHoD,QAAS,SAAC4d,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,yBAAyB,6BAA5B,IAAmCugB,EAAI3d,SAAarD,KAAM,cA/B7F,mBAyBlB43B,EAzBkB,KAyBO+C,EAzBP,KAyBF13B,QAzBE,EAkC0BE,sBAAYuqB,GAAoB,CACjF1R,YAAa,WACXrc,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,iDAAkDT,KAAM,cAGlHoD,QAAS,SAAC4d,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,0CAA0C,6BAA7C,IAAoDugB,EAAI3d,SAAarD,KAAM,cAxC9G,mBAkClB46B,EAlCkB,KAkCWC,EAlCX,KAkCE53B,QAWrB63B,EAAe,WACnBrV,EAAY,CAAE5d,MAAK,EAAOwyB,aAAa,aAAUC,cAAc,gBAUjE,GAPAz6B,qBAAU,WACLqD,GAAQlB,EAAMsyB,cACftyB,EAAMsyB,aAAapxB,EAAK63B,SAAS10B,QAEnC,CAACnD,EAAMlB,IAGLiB,EACF,OACE,kBAACkT,GAAA,EAAD,CAAQ1N,QAAM,GAAd,yBAIJ,GAAInI,EACF,OACE,kBAACyE,EAAA,EAAD,CAAQC,GAAI,MAAZ,0CAQJ,IAAMg2B,GAAc93B,IAAQA,EAAK63B,SAASE,aAE1C,OAAQ,oCAEN,kBAACx2B,EAAA,EAAD,CAAMyS,QAAQ,IAAIlW,MAAO,CAAE4gB,UAAU,SACnC,kBAACnd,EAAA,EAAKiH,IAAN,CAAUwvB,UAAQ,EAAEx2B,UAAU,UAC5B,kBAACD,EAAA,EAAKI,OAAN,KACE,kBAACE,EAAA,EAAD,CAAQC,GAAI,MAAZ,cACA,kBAACwG,GAAA,EAAD,CAAOd,SAAO,GACZ,kBAAC2sB,GAAA,EAAD,KACE,kBAAC7rB,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMM,KAAP,CAAY7K,MAAM,KAAlB,IAAuB,mDAAvB,KACA,kBAACuK,GAAA,EAAMM,KAAP,CAAY7K,MAAM,KAAKiC,EAAK63B,SAASI,WACnC,kBAAC1wB,GAAA,EAAD,CAAMpE,KAAK,YAAYpB,MAAM,UAAkB,kBAACwF,GAAA,EAAD,CAAMpE,KAAK,SAASpB,MAAM,UAE7E,kBAACuG,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMM,KAAP,CAAY7K,MAAM,KAAlB,IAAuB,0DAAvB,KACA,kBAACuK,GAAA,EAAMM,KAAP,CAAY7K,MAAM,KAAK+5B,EACrB,kBAACvwB,GAAA,EAAD,CAAMpE,KAAK,YAAYpB,MAAM,UAAkB,kBAACwF,GAAA,EAAD,CAAMpE,KAAK,SAASpB,MAAM,UAE7E,kBAACuG,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMM,KAAP,SAAa,2CAAb,KACA,kBAACN,GAAA,EAAMM,KAAP,SAAe5I,EAAK63B,SAASjnB,QAE/B,kBAACtI,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMM,KAAP,SAAa,2CAAb,KACA,kBAACN,GAAA,EAAMM,KAAP,SAAe5I,EAAK63B,SAASrZ,QAE7BsZ,GACF,kBAACxvB,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMM,KAAP,SAAa,8CAAb,KACA,kBAACN,GAAA,EAAMM,KAAP,SAAc5I,EAAK63B,SAAS1lB,YAGhC,kBAAC7J,GAAA,EAAM6a,OAAP,MACIrkB,EAAM04B,cAAgB3uB,EAAM7L,KAAOgD,EAAK63B,SAAS76B,KACnD,kBAACsL,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMG,WAAP,KACE,kBAAC9E,EAAA,EAAD,CACE6B,SAAO,EACPrD,KAAK,SAFP,iBAOF,kBAACmG,GAAA,EAAMG,WAAP,KACE,kBAAC9E,EAAA,EAAD,CACE5D,QAAW03B,GAAaE,EACxB5iB,SAAa0iB,GAAaE,EAC1BnyB,SAAO,EACPrD,KAAK,QACLuB,QAAY,SAACwB,EAAD,GAEV,OAF8B,EAAfhG,UAGf,IAAK,kBACHo4B,GAAsB,GACtB,MACF,IAAK,iBACH/U,EAAW,CACT5d,MAAK,EACLyyB,cAAe,WACb1C,EAAc,CAAEzzB,UAAU,CAAEjE,GAAGgD,EAAK63B,SAAS76B,MAC7C46B,KAEFT,aAAa,WACXS,KAEFr6B,QAAS,yBACTuH,OAAO,YAET,MACF,IAAK,uBACHyd,EAAW,CACT5d,MAAK,EACLyyB,cAAe,WACbM,EAAkB,CAAEz2B,UAAU,CAAEjE,GAAGgD,EAAK63B,SAAS76B,MACjD46B,KAEFT,aAAa,WACXS,KAEFr6B,QAAS,kCACTuH,OAAO,eAUZgzB,EACEjvB,EAAM7L,KAAOgD,EAAK63B,SAAS76B,GACxB,kBACA8B,EAAM04B,aAAe,iBAAiB,GACzC,6BAQf,kBAACj2B,EAAA,EAAKI,OAAN,KACE,kBAACE,EAAA,EAAD,CAAQC,GAAI,MAAZ,YACA,kBAACwG,GAAA,EAAD,CAAOd,SAAO,GACZ,kBAAC2sB,GAAA,EAAD,KACE,kBAAC7rB,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMM,KAAP,SAAa,0CAAb,KACA,kBAACN,GAAA,EAAMM,KAAP,KAAa5I,GAAQA,EAAK63B,SAASnB,eAErC,kBAACpuB,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMM,KAAP,SAAa,sDAAb,KACA,kBAACN,GAAA,EAAMM,KAAP,SAAe5I,GAAQA,EAAK63B,SAAS9G,WAEvC,kBAACzoB,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMM,KAAP,SAAa,8CAAb,KACA,kBAACN,GAAA,EAAMM,KAAP,SAAc5I,GAAQA,EAAK63B,SAAS75B,cAO5C,kBAACuD,EAAA,EAAKI,OAAN,KACE,kBAACE,EAAA,EAAD,CAAQC,GAAI,MAAZ,eACA,kBAACwG,GAAA,EAAD,CAAOd,SAAO,GACZ,kBAAC2sB,GAAA,EAAD,KACE,kBAAC7rB,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMM,KAAP,SAAa,6CAAb,KACA,kBAACN,GAAA,EAAMM,KAAP,KAAc5I,GAAQA,EAAK63B,SAAS5P,YAAejoB,EAAK63B,SAAS5P,WAAW3nB,SAAWN,EAAK63B,SAAS5P,WAAW3nB,QAAQwC,WAE1H,kBAACwF,GAAA,EAAME,IAAP,KACE,kBAACF,GAAA,EAAMM,KAAP,SAAa,+CAAb,KACA,kBAACN,GAAA,EAAMM,KAAP,SAAe5I,GAAQA,EAAK63B,SAAS5P,YAAcrc,GAAW5L,EAAK63B,SAAS5P,WAAWC,gBAQhGppB,EAAM04B,cACP,kBAACj2B,EAAA,EAAKiH,IAAN,SAAY,kBAACjH,EAAA,EAAKI,OAAN,KAAa,kBAAC,GAAD,CAAmBozB,YAAc/0B,EAAK63B,SAASjV,aAA5D,KAAZ,MAEA,kBAAC,GAAD,CACEje,KAAM7F,EAAMo5B,cACZpyB,QAAUhH,EAAMq5B,iBAChBvnB,MAAS5Q,EAAK63B,SAASjnB,MACvB4N,MAAUxe,EAAK63B,SAASrZ,MACxBkY,aAAe12B,EAAK63B,SAASnB,aAC7B3F,SAAa/wB,EAAK63B,SAAS9G,SAC3B/yB,SAAYgC,EAAK63B,SAAS75B,SAC1BhB,GAAKgD,EAAK63B,SAAS76B,KAGrB,kBAAC,GAAD,CACE2H,KAAQ0yB,EACRvxB,QAAWwxB,EACXt6B,GAAKgD,EAAK63B,SAAS76B,KAIrB,kBAAC0H,GAAA,EAAD,CACEC,KAAM8X,EAAQ9X,KACdpH,QAAWkf,EAAQlf,QACnBuH,OAAU2X,EAAQ3X,OAClBC,SAAU0X,EAAQ0a,aAClBnyB,UAAWyX,EAAQ2a,mBClHZgB,GAlIM,SAAC,GAAiB,IAAf9D,EAAc,EAAdA,QAAc,EAChB72B,qBAAWC,GAAvBjB,EAD4B,oBAE9B4kB,EAAQC,cACRliB,EAAUC,cAHoB,EAKLQ,mBAASwyB,GAAe,CAAEpxB,UAAW,CAAE82B,aAAc1W,EAAO0W,cAAgBxW,MAAOF,EAAO0W,eAAjHh4B,EAL4B,EAK5BA,QAAQ3C,EALoB,EAKpBA,MAAM4C,EALc,EAKdA,KALc,EAMgDC,sBAAY8qB,GAAsB,CACpH7qB,QAAS,SAAC4d,GACRrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oCAAG,4BAA4B,6BAA/B,IAAsCugB,EAAI3d,SAAarD,KAAM,cARrF,mBAM7Bu7B,EAN6B,YAMEC,EANF,EAMNv4B,QAAgCw4B,EAN1B,EAMqBv4B,KANrB,EAW0C8c,uBAAa0V,IAXvD,mBAW7BgG,EAX6B,YAWGC,EAXH,EAWL14B,QAA6B24B,EAXxB,EAWmB14B,KAXnB,EAYWV,mBAAS,CAAEq5B,UAAS,IAZ/B,mBAY7BC,EAZ6B,KAYZC,EAZY,KAwBpC,GATAl8B,qBAAU,WACL+7B,GAEDG,EAAoB,CAAEF,UAAS,EAAKryB,OAAOoyB,EAAaI,eAAexyB,WAIxE,CAACoyB,KAEArX,EAAO0W,aACT,OAAO,kBAACl2B,EAAA,EAAD,4CAGT,GAAG02B,GAA8D,YAA1CA,EAAiBQ,cAAczyB,OAEpD,OADAlH,EAAQyB,KAAK,UACN,KAGNb,GAAQA,EAAK63B,UACdvD,EAAQt0B,EAAK63B,SAAS10B,MAgBxB,OACE,kBAACvF,EAAA,EAAD,CAASC,OAAK,EAACkC,QAAUA,GAAWu4B,GAClC,kBAACp7B,EAAA,EAAD,CAASC,QAAS6C,GAAQA,EAAK63B,SAAUz6B,QAAOA,GAC9C,kBAACF,EAAA,EAAQ2E,OAAT,KACG7B,GAAQA,EAAK63B,UAAY,sEACzBz6B,GAASA,EAAM+C,QACdH,IAASA,EAAK63B,UAAa,8BAI/B73B,GAAQA,EAAK63B,UACf,kBAAC,KAAD,CACEtkB,cAxBU,CACdrS,SAAS,GACTiR,SAAS,GACTyiB,gBAAgB,IAsBZlhB,SAAW,SAACd,GAEV,IAAM3B,EAAS,GAiBf,OAfI2B,EAAOT,UAAuC,KAA3BS,EAAOT,SAASzB,SACrCO,EAAOkB,SAAW,wBAGjBS,EAAOT,UAAYS,EAAOT,SAASzT,OAAS,IAC7CuS,EAAOkB,SAAW,gDAEhBS,EAAO1R,UAAuC,KAA3B0R,EAAO1R,SAASwP,SACrCO,EAAO/P,SAAW,wBAGjB0R,EAAO1R,WAAa0R,EAAOgiB,kBAC5B3jB,EAAO2jB,gBAAkB,gDAGpB3jB,GAIT7O,SAAW,SAACwQ,GAEVylB,EAAqB,CAAEp3B,UAAU,CAAE82B,aAAc1W,EAAO0W,aAAc72B,SAAU0R,EAAO1R,SAAUiR,SAAUS,EAAOT,eAKnH,cAAGS,OAAH,IAAUomB,EAAV,EAAUA,aAAcrlB,EAAxB,EAAwBA,aAAa2M,EAArC,EAAqCA,MAAOrP,EAA5C,EAA4CA,OAAQgoB,EAApD,EAAoDA,WAAYvuB,EAAhE,EAAgEA,QAAhE,OAA8E,kBAACxI,EAAA,EAAD,CAAMpE,MAAO,CAAE8X,aAAa,QAAUxT,SAAWuR,GAE9H,kBAACzR,EAAA,EAAKM,MAAN,CAAYzE,MAAM,KAChB,kBAACmF,GAAA,EAAD,CACEnD,QAAS04B,EACTn1B,KAAO,kBAACiE,GAAA,EAAD,CAAMpE,UAA2B+1B,IAApBjoB,EAAOkB,UAA0BymB,EAAiBD,SAAoC,YAA1BC,EAAiBtyB,OAAmB,eAAe,SAAU,GAAIvE,MAAO62B,EAAiBD,UAAmC,YAA1BC,EAAiBtyB,OAAmB,QAAc,QACpOwE,OAASmuB,EACT91B,KAAK,WAAWN,MAAM,WAAW9E,MAAM,IAAIiF,SAAY,SAAAkC,GAErD8zB,EAAa9zB,GACb,IAAIiN,EAAWjN,EAAEi0B,cAAcl6B,MA1D3Cu5B,EAAsB,CAAEv3B,UAAU,CAAEkR,SA2DPA,SAGjBlB,EAAOkB,UAAYzH,EAAQyH,eAAmC+mB,IAApBjoB,EAAOkB,UAA0BymB,EAAiBD,UAAsC,YAA1BC,EAAiBtyB,SAC9H,kBAACQ,GAAA,EAAD,CAAOkE,UAAQ,EAACC,QAAM,GAClBgG,EAAOkB,UAAY,gEAOxB,kBAAC,GAAD,CAAYhP,KAAK,WAAWN,MAAM,WAAW/F,KAAK,WAAWiB,MAAM,MAEnE,kBAAC,GAAD,CAAYoF,KAAK,kBAAkBN,MAAM,mBAAmB/F,KAAK,WAAWiB,MAAM,MAGlF,kBAAC4F,EAAA,EAAD,CAAQoR,WAAeuL,GAASlZ,KAAEkT,QAAQrJ,IAAW2nB,EAAiBD,UAAuC,YAA3BC,EAAiBtyB,QAAsBxJ,KAAK,SAASgB,MAAO,CAAE4gB,UAAW,QAAUpI,UAAQ,GAA7K,kBC/CK8iB,GA/EM,SAAC,GAA8C,IAA5C7E,EAA2C,EAA3CA,UAAWpwB,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACvCyE,EAAQnI,KAAKU,MAAOZ,eAAea,QAAQ,aAC3CjC,EAAUC,cAIhB,GAAqD,aAFpConB,cAELG,SAASza,MAAM,KAAK,GAAGqX,cACjC,OAEE,kBAACre,GAAA,EAAD,CAAMC,UAAQ,EAACrD,MAAM,OAAOsD,WAAS,GACnC,kBAACF,GAAA,EAAKG,KAAN,CAAWtH,SAAS,SAApB,WACWu2B,IAQjB,IAAMtvB,EAAkB,SAACC,EAAD,GAAkB,IAAZ/B,EAAW,EAAXA,KAC5BiB,EAAejB,GACX,CAAC,UAAU,aAAa,sBAAsBmE,SAASnE,GACzD/D,EAAQyB,KAAR,iBAAuBgI,EAAM7L,GAA7B,YAAmCmG,IAEnC/D,EAAQyB,KAAR,WAAiBsC,KASfk2B,EAAY,GAcO,IAArBA,EAAU36B,SACZ26B,EAAUx4B,KAAK,cACfw4B,EAAUx4B,KAAK,sBACfw4B,EAAUx4B,KAAK,YAYjB,OACE,kBAACsE,GAAA,EAAD,CAAMC,UAAQ,EAACrD,MAAM,OAAOsD,WAAS,GAR9Bg0B,EAAUl7B,KAAI,SAAAioB,GAAI,OACvB,kBAACjhB,GAAA,EAAKG,KAAN,CAAYlH,IAAMgoB,EAAMjjB,KAAQijB,EAAM7gB,OAAUpB,IAAgBiiB,EAC9D1iB,QAAWuB,OASb,kBAACE,GAAA,EAAKA,KAAN,CAAWnH,SAAS,SA5BpB,kBAACwhB,GAAA,EAAD,CAAU4G,MAAI,EAAC7W,KAAI,kBAAe1G,EAAM1F,OACtC,kBAACqc,GAAA,EAASra,KAAV,KACE,kBAACqa,GAAA,EAASla,KAAV,CAAeiK,KAAK,SAAS7L,QAAS,kBAX5ClD,eAAeiF,WAAW,iBAC1BrG,EAAQyB,KAAK,uBC4BFy4B,GA3DM,SAAC,GAAwF,IAArFn1B,EAAoF,EAApFA,WAAYC,EAAwE,EAAxEA,cAAemwB,EAAyD,EAAzDA,UAAWpI,EAA8C,EAA9CA,QAASqL,EAAqC,EAArCA,aAAcW,EAAuB,EAAvBA,iBAC9EoB,EAA2B74B,KAAKU,MAAOZ,eAAea,QAAQ,aAAauhB,WAC3ExjB,EAAUC,cAKhB,OAJA1C,qBAAU,WAER,OADAyH,EAAc,IACP,kBAAMA,EAAc,OAC3B,CAACA,IAED,kBAACe,GAAA,EAAD,CAAM6F,UAAQ,EAACgc,WAAS,GACtB,kBAAC7hB,GAAA,EAAKG,KAAN,CAAWR,QAAM,GAAEyvB,GACnB,kBAACpvB,GAAA,EAAKG,KAAN,CACEtH,SAAS,QACTmF,KAAK,UACLoC,OAAyB,YAAfpB,EACVT,QAAS,WACPU,EAAc,WACdhF,EAAQyB,KAAR,4BAAkCsrB,EAAlC,iBAIsI,KAAxIoN,EAAyB1W,OAAS0W,EAAyB5wB,UAAUqf,KAAKtpB,QAAU66B,EAAyB5wB,UAAUujB,KAAKxtB,SAC5H,oCACE,kBAACyG,GAAA,EAAKG,KAAN,CACEnC,KAAK,aACLoC,OAAyB,eAAfpB,EACVT,QAAS,WACPU,EAAc,cACdhF,EAAQyB,KAAR,4BAAkCsrB,EAAlC,mBAKJ,kBAAChnB,GAAA,EAAKG,KAAN,CACEnC,KAAK,qBACLoC,OAAyB,uBAAfpB,EACVT,QAAS,WACPU,EAAc,sBACdhF,EAAQyB,KAAR,4BAAkCsrB,EAAlC,4BAMPqL,GAAe,kBAACryB,GAAA,EAAKG,KAAN,CACdtH,SAAS,QACTmF,KAAK,cACLG,KAAO,OACPI,QAAS,SAACwB,GACRA,EAAElE,iBACF5B,EAAQyB,KAAK,WACbuD,EAAc,WACd+zB,GAAiB,QC2HZqB,GAnKG,SAAC,GAAkB,IAAhBr2B,EAAe,EAAfA,KAAMnG,EAAS,EAATA,GAEnBqkB,EAASC,cAEX6K,EAAU9K,GAAUA,EAAO8K,QAC3BzF,EAAOrF,GAAUA,EAAOqF,KACtB5jB,EAAW2jB,cACXrnB,EAAUC,cAPkB,EAQAC,mBAAS6D,GART,mBAQ3BoxB,EAR2B,KAQhBnD,EARgB,OAUO9xB,oBAAS,GAVhB,mBAU3B44B,EAV2B,KAUbC,EAVa,OAWE74B,mBAASonB,GAXX,mBAW3BviB,EAX2B,KAWfC,EAXe,OAYgB9E,mBAASonB,GAAQ,WAZjC,mBAY3B+S,EAZ2B,KAYRC,EAZQ,KAc5B7wB,EAAQnI,KAAKU,MAAOZ,eAAea,QAAQ,aAdf,EAgBgB/B,mBAASuJ,GAASA,EAAM1F,MAhBxC,mBAgB3Bw2B,EAhB2B,KAgBRC,EAhBQ,KAkB5BvS,EAAgBvkB,EAAS8jB,SAASza,MAAM,KAQ9C,GANAxP,qBAAU,WACRyH,EAAcsiB,GACdgT,EAAqBhT,KACrB,CAACA,IAGmC,aAAnCW,EAAc,GAAG7D,cAElB,OADAkD,EAAO,WACD,oCACJ,kBAAC,GAAD,CAAc6N,UAAaoF,EAAmBx1B,WAAaA,EAAYC,cAAeA,IACtF,kBAAC,GAAD,CAAckwB,QAASsF,KAG3B,GAAsC,mBAAnCvS,EAAc,GAAG7D,cAElB,OADAkD,EAAO,iBACD,oCACJ,kBAAC,GAAD,OAKJ,IAAI7d,GAAqB,aAAT6d,GAAgC,mBAATA,EAErC,OADAtnB,EAAQyB,KAAK,eACN,KAIT,IAAM22B,EAAiB3uB,EAAM7L,KAAOmvB,QAAuB+M,IAAZ/M,IAA6BtjB,EAAM+Z,YAAc/Z,EAAM+Z,WAAW/Z,MAAMma,MAAUna,EAAM+Z,WAAWC,QAAS,GACrJgX,EAAuBhxB,EAAM+Z,aACjC/Z,EAAM+Z,WAAWC,OACjBha,EAAM+Z,WAAWtiB,QAAQ0iB,KAAKtkB,OAAS,GACrCmK,EAAM+Z,WAAWtiB,QAAQmrB,KACzB5iB,EAAM+Z,WAAW/Z,MAAMmf,MACvBnf,EAAM+Z,WAAW/Z,MAAM4iB,KACvB5iB,EAAM+Z,WAAW/Z,MAAMma,MACvBna,EAAM+Z,WAAWja,UAAUqf,KAAKtpB,OAAS,GAK3CytB,EADCnvB,IAIKqkB,EAAO8K,QACJ9K,EAAO8K,QAIPtjB,EAAM7L,IAGjB,IAAMg2B,EAAY3L,EAAc,GAC7Bxe,EAAM7L,KAAOmvB,GAA4C,UAAjC6G,EAAS8G,qBAClC16B,EAAQyB,KAAR,4BAAkCsrB,EAAlC,YAA6ChoB,IAG5C01B,GAAkD,WAA3B7G,EAASxP,eACjCpkB,EAAQyB,KAAK,0BAmDf,OACE,qCACIg5B,GAAwB,kBAAC,GAAD,CAActF,UAAaoF,EAAmBx1B,WAAaA,EAAYC,cAAeA,IA3ChH,oCACE,kBAACojB,GAAA,EAAD,KACI3e,EAAM7L,KAAOmvB,GACb,oCACE,kBAAC1E,GAAA,EAAD,kBACA,kBAACG,GAAA,EAAD,OAIF/e,EAAM7L,KAAOmvB,GACb,oCACE,kBAAC1E,GAAA,EAAD,CAAmBpR,MAAI,EAACvU,GAAM4lB,IAAMC,GAAE,WAAQqL,EAAR,YAAoB3L,EAAc,KAAxE,IAAgFA,EAAc,GAA9F,KACA,kBAACO,GAAA,EAAD,MACA,kBAACH,GAAA,EAAD,CAAmBpR,MAAI,EAACvU,GAAI4lB,IAAMC,GAAE,WAAMqL,EAAN,YAAkB3L,EAAc,GAAhC,YAAsCA,EAAc,GAApD,aAApC,IAAwGkN,GAAapI,EAArH,KACA,kBAACvE,GAAA,EAAD,OAKFlB,GAA8B,uBAAtBA,EAAKlD,eAA0CnC,EAAO4L,OAC5D,oCACE,kBAACxF,GAAA,EAAD,CAAmBpR,MAAI,EAACvU,GAAI4lB,IAC1BC,GACEN,EAAclO,QAAQ,SAACC,EAAEC,EAAE3S,GACzB,OAAGA,IAAM2gB,EAAc3oB,OAAQ,GAAW,KAAN2a,EAC3BD,EAEFA,EAAE,IAAIC,KAEjB9T,QAAM,GARR,IAQWk0B,EARX,KASA,kBAAC7R,GAAA,EAAD,CAAmBtkB,KAAK,kBACxB,kBAACmkB,GAAA,EAAD,CAAmBliB,QAAM,GAAE8b,EAAO4L,OAAOrY,QAAQ,IAAI,OAEvD,kBAAC6S,GAAA,EAAD,CAAmBliB,QAAM,GAAzB,IAA4Bk0B,EAA5B,OAaPtN,IAAYtjB,EAAM7L,IACnB,kBAAC,GAAD,CACEmH,WAAas1B,EACbr1B,cAAiBs1B,EACjBnF,UAAYA,EAAWpI,QAASA,EAChCqL,aAAcA,EACdW,iBAAoBA,KAIlBsB,GAA8D,eAA1CA,EAAkBK,qBAA0C31B,GAA2C,eAA7BA,EAAWqf,gBAAoC,oCAC7I,kBAAC,GAAD,CAAW2I,QAAUA,EAASiF,aAAcA,MAI5CqI,GAA+D,YAA1CA,EAAkBK,qBAAyC31B,GAA2C,YAA7BA,EAAWqf,gBAC3G,oCACE,kBAAC,GAAD,CAASxmB,GAAImvB,EAASqL,aAAcA,EAAcW,iBAAkBA,EAAkBD,cAAeA,EAAe9G,aAAcA,MAIlIqI,GAA+D,uBAA1CA,EAAkBK,qBAAmD31B,GAA6C,uBAA7BA,EAAWqf,gBACvH,oCACE,kBAAC,GAAD,CAAkB8Q,QAASlD,OCxBtB2I,GAzIO,SAACj7B,GAAW,IAAD,EACZrB,qBAAWC,GAAtBjB,EADuB,sBAGQwD,sBAAY2qB,IAHpB,mBAGxBoP,EAHwB,KAGLj6B,EAHK,KAGLA,QAmC1B,OACE,kBAAC,KAAD,CACEwT,cAVY,CACdpQ,KAAM,GACNyN,MAAO,GACP4N,MAAO,GACPkY,aAAc,GACdC,cAAe,GACf34B,SAAU,IAKRoE,SAAW,SAACwQ,IApCC,SAACA,GAChBonB,EAAiB,CACf/4B,UAAW2R,EACXnM,OAAQ,SAAC8R,EAAM2L,GACb3L,EAAM6E,OAAO,CACXC,OAAO,CACLqW,SADK,SACIuG,EADJ,GACuC,IAAb1c,EAAY,EAAZA,UACvB2c,EAAWhW,EAASlkB,KAAKm6B,SAC/B,OAAGF,EAAkB9f,MAAK,SAAAuD,GAAG,OAAIH,EAAU,KAAKG,KAASwc,EAASl9B,MACzDi9B,EAEH,GAAN,mBAAWA,GAAX,CAA6BC,WAOpC7X,MACD,kBAAO5lB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAQ,sBAAD,OAAwBqV,EAAOzP,KAA/B,YAA+CrG,KAAM,gBAClH,SAAAghB,GAAG,OAAKrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,oFAA4CqV,EAAOzP,MAAO,6BAA1D,IAAiE2a,EAAI3d,SAAarD,KAAM,aACxJgC,EAAMgH,SAAQ,IAgBZq0B,CAASvnB,IAEXc,SAAY,SAACd,GACX,IAAI3B,EAAS,GAgBb,OAdAA,EAAO9N,KAAO0N,GAAa+B,EAAOzP,MAClC8N,EAAOL,MAAQD,GAAciC,EAAOhC,OAEjCxJ,KAAEkT,QAAQrJ,EAAO9N,cAAc8N,EAAO9N,KACtCiE,KAAEkT,QAAQrJ,EAAOL,eAAeK,EAAOL,MAEtCgC,EAAO8jB,eACTzlB,EAAOylB,aAAe,+BAGpB9jB,EAAO+jB,eAAkBrJ,WAAW1a,EAAO+jB,iBAC7C1lB,EAAO0lB,cAAgB,0BAGlB1lB,KAIR,gBAAG0C,EAAH,EAAGA,aAAatJ,EAAhB,EAAgBA,cAAciW,EAA9B,EAA8BA,MAA9B,OACC,kBAAC1a,GAAA,EAAD,CACEsN,WAAS,EACTC,eAAe,EACfC,oBAAoB,EACpBzO,KAAQ7F,EAAM6F,KACdkB,QAAU,kBAAO/G,EAAMgH,SAAQ,IAC/BuN,OAAS,kBAAMvU,EAAMgH,SAAS,KAE9B,kBAACmf,GAAA,EAAD,kBAAwBnmB,EAAMqE,KAA9B,KACA,kBAAC+hB,GAAA,EAAD,KAEInlB,GACF,kBAACiT,GAAA,EAAD,CAAQzN,QAAM,GACZ,kBAAC0N,GAAA,EAAD,OAKF,kBAAC/Q,EAAA,EAAD,CAAMpE,MAAO,CAAE8X,aAAa,SAC1B,kBAACrU,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKiH,IAAN,KACE,kBAAC,GAAD,CAAYrF,KAAK,OAAON,MAAM,OAAO/F,KAAK,OAAOiB,MAAM,OAEzD,kBAACwD,EAAA,EAAKiH,IAAN,KACE,kBAAC,GAAD,CAAYrF,KAAK,QAAQN,MAAM,QAAQ/F,KAAK,QAASiB,MAAM,OAE7D,kBAACwD,EAAA,EAAKiH,IAAN,KACE,kBAAC,GAAD,CAAYrF,KAAK,QAAQN,MAAM,QAAQ/F,KAAK,MAAOiB,MAAM,OAG3D,kBAACwD,EAAA,EAAKiH,IAAN,KACE,kBAAC,GAAD,CAAgBrF,KAAK,eAAemc,SAAO,EAACzc,MAAM,WAChD2d,WAAS,EACTziB,MAAM,IACN8R,QAAU,CAAC,CACTzR,IAAI,EAAGa,MAAM,aAAcsQ,KAAM,cACnC,CAAEnR,IAAI,EAAGa,MAAM,WAAYsQ,KAAM,aACjCvM,SAAc,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACjBoL,EAAc,eAAepL,OAQnC,kBAACsC,EAAA,EAAKiH,IAAN,KACE,kBAAC,GAAD,CAAYrF,KAAK,gBAAgBN,MAAM,yBAAyB/F,KAAK,SAAUiB,MAAM,OAGvF,kBAACwD,EAAA,EAAKiH,IAAN,KACE,kBAAC,GAAD,CAAYrF,KAAK,WAAWN,MAAM,WAAW9E,MAAM,OAErD,kBAACwD,EAAA,EAAKiH,IAAN,KACE,kBAACtG,EAAA,EAAKyB,OAAN,CAAaL,MAAI,EAACxG,KAAK,SAAUgX,cAAc,QAAQtO,SAAO,GAAC,kBAAC+B,GAAA,EAAD,CAAMpF,KAAK,MAAMgB,KAAK,YAArF,oBAKR,kBAACyC,GAAA,EAAM+W,QAAP,KACE,kBAAChZ,EAAA,EAAD,CAAU6S,UAAQ,EAAC9S,QAAS,kBAAM5E,EAAMgH,SAAS,KAAjD,UACCwa,GACD,kBAAC3c,EAAA,EAAD,CAAS2S,UAAQ,EAAC5S,QAAU,kBAAMiQ,MAAlC,cCOGymB,GArIG,WAAO,IAAD,EACH38B,qBAAWC,GAAvBjB,EADe,sBAESoD,mBAAS0yB,IAAhCxyB,EAFc,EAEdA,QAAQ3C,EAFM,EAENA,MAAM4C,EAFA,EAEAA,KAFA,EAGeV,mBAAS,IAHxB,mBAGd+6B,EAHc,KAGHC,EAHG,OAIiBh7B,oBAAS,GAJ1B,mBAIfi7B,EAJe,KAIFC,EAJE,OAK0Bl7B,oBAAS,GALnC,mBAKfkjB,EALe,KAKGC,EALH,OAMOnjB,mBAAS,CAAEod,MAAM,GAAIE,GAAG,eAN/B,mBAMfH,EANe,KAMP8F,EANO,KAQhBkY,EAAgB/5B,KAAKU,MAAOZ,eAAea,QAAQ,aARnC,EASApB,sBAAY6qB,IAA3B4P,EATe,sBAUMz6B,sBAAc4qB,IAAnC8P,EAVe,oBAqDtB,OANAh+B,qBAAY,WACPqD,GAASA,EAAK0zB,UACf4G,EAAct6B,EAAK0zB,YAEpB,CAAC1zB,IAEDD,EAEC,kBAACkT,GAAA,EAAD,CAAQ1N,QAAM,GAAd,mBAIDnI,EACM,kBAACQ,EAAA,EAAD,8BAOP,qCAC8E,KAA1E68B,EAAc7X,WAAW/Z,MAAM4iB,KAAOgP,EAAc7X,WAAWC,QACjE,kBAAClf,EAAA,EAAD,CAAQ6B,SAAO,EAAClC,MAAI,EAACI,QAAU,kBAAM82B,GAAgB,KAArD,iBAA0E,kBAACjzB,GAAA,EAAD,CAAMpE,KAAO,OAAb,MAExEk3B,GACF,kBAACn3B,GAAA,EAAD,CAAOI,KAAK,SAASE,YAAY,YAC/BR,SAAY,SAAClC,EAAD,GAAsB,IAAb7B,EAAY,EAAZA,MACnB,GAAIA,GAA0B,KAAjBA,EAAMyR,OAEd,CACH,IAAMkqB,EAAaP,EAAW17B,QAAO,SAAAkK,GAAK,OAAIA,EAAM1F,KAAKmE,SAASrI,MAClEq7B,EAAcM,QAHdN,EAAct6B,EAAK0zB,aASzB,kBAACprB,GAAA,EAAD,KACE,kBAACA,GAAA,EAAMzG,OAAP,KACE,kBAACoyB,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,eACA,kBAACA,GAAA,EAAD,gBACA,kBAACA,GAAA,EAAD,gBACA,kBAACA,GAAA,EAAD,sBACA,kBAACA,GAAA,EAAD,yBACA,kBAACA,GAAA,EAAD,yBACA,kBAACA,GAAA,EAAD,YAGJ,kBAAC5rB,GAAA,EAAMI,KAAP,KACG2xB,GAAcA,EAAWl8B,KAAK,SAAA0K,GAAK,OAClC,kBAACP,GAAA,EAAME,IAAP,CAAWpK,IAAMyK,EAAM7L,IACrB,kBAACo3B,GAAA,EAAD,KAAW,kBAAC,IAAD,CAAMzM,GAAE,4BAAuB9e,EAAM7L,GAA7B,aAA4C6L,EAAM1F,OACrE,kBAACixB,GAAA,EAAD,KAAYvrB,EAAM+H,OAClB,kBAACwjB,GAAA,EAAD,KAAYvrB,EAAM2V,OAClB,kBAAC4V,GAAA,EAAD,KAAYvrB,EAAMof,YAAcrc,GAAW/C,EAAMof,WAAWC,WAC5D,kBAACkM,GAAA,EAAD,KAAYvrB,EAAMof,YAAcpf,EAAMof,WAAW3nB,SAAWuI,EAAMof,WAAW3nB,QAAQwC,UACrF,kBAACsxB,GAAA,EAAD,KAAYvrB,EAAMgyB,cAAc,kBAAC34B,EAAA,EAAKM,MAAN,KAE9B,kBAACiB,GAAA,EAAD,CAAUV,SAAU8F,EAAMkM,SAAWxJ,QAAM,EAAC1I,MAAOgG,EAAMkM,SAAU,WAAY,SAAUA,SAAYlM,EAAM7L,KAAOy9B,EAAcz9B,MAAQy9B,EAAc7X,WAAW/Z,MAAMma,MAAQyX,EAAc7X,WAAWC,OACtM7f,SAAW,SAACkC,EAAD,GAAoB,IAhF1BlI,EAAImG,EAAMoI,EAgFCxI,EAAc,EAAdA,QAhFX/F,EAiFU6L,EAAM7L,GAjFZmG,EAiFe0F,EAAM1F,KAhF5Cw3B,EAAkB,CAChB15B,UAAW,CAAEjE,GAAGA,EAAK+X,WAFMxJ,EAiFoBxI,IA9E/C0D,OAAQ,SAAC8R,GACPA,EAAM6E,OAAO,CACXpgB,GAAG,SAAD,OAAWA,GACbqgB,OAAO,CACLtI,SADK,WAEH,OAAQxJ,SAKf8W,MACD,kBAAO5lB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAQ,kBAAD,OAAoB4F,EAApB,gBAAgCoI,EAAO,SAAS,YAAczO,KAAM,gBACjI,SAAAghB,GAAG,OAAKrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,qFAA6C4F,GAAO,6BAApD,IAA2D2a,EAAI3d,SAAarD,KAAM,mBAqE1I,kBAACs3B,GAAA,EAAD,KACGvrB,EAAM7L,KAAOy9B,EAAcz9B,KAAOy9B,EAAc7X,WAAW/Z,MAAMma,MAAQyX,EAAc7X,WAAWC,QACnG,kBAAClf,EAAA,EAAD,CAAQ6Q,UAAQ,EAACrS,KAAM,OAAOmB,KAAM,QAAQkT,UAAQ,EAACzB,SAAYlM,EAAM7L,KAAOy9B,EAAcz9B,GAC1F0G,QAAS,WACP+e,GAAoB,GACpBF,EAAW,CAAE7F,MAAM,oCAAqC7T,EAAM1F,KAAM,IAAKyZ,GAAI,kBAvG1E5f,EAuG4F6L,EAAM7L,GAvG/FmG,EAuGkG0F,EAAM1F,UAtG9Hu3B,EAAY,CACVz5B,UAAW,CAAEjE,GAAIA,GACjByJ,OAAQ,SAAC8R,GACPA,EAAMqJ,MAAM,CACV5kB,GAAG,SAAD,OAAWA,QAGhBqlB,MACD,kBAAO5lB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAQ,kBAAD,OAAoB4F,EAApB,YAAoCrG,KAAM,gBACvG,SAAAghB,GAAG,OAAKrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,yEAAiC4F,GAAO,6BAAxC,IAA+C2a,EAAI3d,SAAarD,KAAM,cAVtH,IAACE,EAAGmG,eA+GpB,kBAAC,GAAD,CAAewB,KAAM41B,EAAcz0B,QAAU00B,IAC5ChY,GACC,kBAAC,GAAD,CAAc7d,KAAO6d,EAAkB/F,QAAUA,EAAS3W,QAAU2c,MC+J7DqY,GA9RS,SAACh8B,GAAW,IAAD,EAEbrB,qBAAWC,GAAvBjB,EAFyB,sBAGQwD,sBAAYjE,GAHpB,mBAG1B++B,EAH0B,KAGLh7B,EAHK,KAGLA,QAHK,EAIIT,mBAAS,IAJb,mBAI1B07B,EAJ0B,KAIdC,EAJc,OAKM37B,mBAAS,IALf,mBAK1Bua,EAL0B,KAKb8J,EALa,KAOhBnC,EAAoB3hB,mBAASwc,GAAe,CAAEvD,YAAc,SAAC9Y,GAC5E,GAAGA,EAAK6jB,aAAa,CACnB,IAAME,EAAiB/jB,EAAK6jB,aAAa1lB,KAAI,SAACkI,EAAS8N,GACrD,MAAO,CAAE/V,IAAI+V,EAAOlV,MAAOoH,EAASrJ,GAAIuS,KAAMlJ,EAASlD,SAEzDwgB,EAAgBI,OALZhkB,QASRpD,qBAAU,YACY,uCAAG,gCAAAoE,EAAA,sEACEm6B,MAAM,6DADR,cACfhX,EADe,gBAEGA,EAASiX,OAFZ,OAEfC,EAFe,OAGfC,EAAeD,EAAUj9B,KAAI,SAACmlB,EAAQnP,GAE1C,MADgB,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MACxD7M,SAASgc,EAAQgY,WAAW9X,eAC9B,CAAEplB,IAAI+V,EAAOlV,MAAOqkB,EAAQngB,KAAMoM,KAAO+T,EAAQngB,MAEnD,CAAE/E,IAAI+V,EAAOlV,MAAOqkB,EAAQngB,KAAMoM,KAAO+T,EAAQngB,KAAM0V,KAAMyK,EAAQgY,WAAW9X,kBAEzFyX,EAAeI,GAVM,2CAAH,qDAapBE,KACA,IA4DF,OACE,kBAAC,KAAD,CACEhoB,cAjBY,CACdzQ,SAAU,GACVsgB,QAAQ,CACNyE,OAAO,GACPC,SAAS,GACTzE,KAAK,GACLC,QAAQ,IAEV1S,MAAO,GACP4N,MAAO,GACPxH,UAAU,GACVkC,OAAO,CAAC,CAAE/V,KAAK,GAAG2F,UAAU,KAC5BrJ,WAAW,GACX+7B,kBAAkB,IAKhBp5B,SAAW,SAACwQ,IA7DG,SAACA,GAClBmoB,EAAmB,CACjB95B,UAAW2R,EACXnM,OAAQ,SAAC8R,EAAD,GAAoC,IAApB8H,EAAmB,EAA1BrgB,KAAOqgB,WACtB9H,EAAM6E,OAAO,CACXC,OAAO,CACL9a,YADK,SACO4f,EADP,GAC4C,IAAb5E,EAAY,EAAZA,UAC5Bke,EAAapb,EACnB,GAAG8B,EAAoBhI,MAAK,SAAAuD,GAAG,OAAIH,EAAU,KAAKG,KAAS+d,EAAWz+B,MACpE,OAAOmlB,EAET,IAAM1b,EAAM,2BAAQmM,GAAR,IAAe5V,GAAIy+B,EAAWz+B,KAC1C,MAAM,GAAN,mBAAWmlB,GAAX,CAA+B1b,QAOrCgX,mBAAQ7K,EAAOoE,WAAW,SAAA3Q,GACxBkS,EAAM6E,OAAO,CACXpgB,GAAG,YAAD,OAAcqJ,GAChBgX,OAAO,CACL6C,SADK,SACIiC,EADJ,GACyC,IAAd5E,EAAa,EAAbA,UAC9B,OAAG4E,EAAoBhI,MAAK,SAAAuD,GAAG,OAAIH,EAAU,KAAKG,KAAS2C,EAAWrjB,MAC7DmlB,EAEH,GAAN,mBAAWA,GAAX,CAAgC,CAAE,MAAQ,WAAR,OAAmB9B,EAAWrjB,iBAQzEqlB,MACD,kBAAO5lB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAQ,YAAD,OAAcqV,EAAO9P,SAArB,0BAAuDhG,KAAM,gBAC1H,SAAAghB,GAAG,OAAKrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,qDAAaqV,EAAO9P,SAApB,oCAA+D,6BAA/D,IAAsEgb,EAAI3d,SAAarD,KAAM,aAC7JgC,EAAMgH,SAAQ,IAwBZua,CAAWzN,IAEbc,SAAY,SAACd,GACX,IAAI3B,EAAS,GA0Db,QAxDI2B,EAAO9P,UAAa8P,EAAO9P,UAAY8P,EAAO9P,SAASpE,OAAS,KAClEuS,EAAOnO,SAAU,+DAGd8P,EAAOwQ,QAAQyE,QAAWjV,EAAOwQ,QAAQyE,QAAUjV,EAAOwQ,QAAQyE,OAAOnpB,OAAS,KAErFuS,EAAOmS,QAAP,2BAAsBnS,EAAOmS,SAA7B,IAAsCyE,OAAQ,6DAG3CjV,EAAOwQ,QAAQC,OAClBpS,EAAOmS,QAAP,2BAAqBnS,EAAOmS,SAA5B,IAAqCC,KAAM,2DAGxCzQ,EAAOwQ,QAAQE,UAClBrS,EAAOmS,QAAP,2BAAsBnS,EAAOmS,SAA7B,IAAqCE,QAAQ,yBAE1C1Q,EAAOhC,QAAUD,GAAciC,EAAOhC,SACzCK,EAAOL,MAAQ,uCAGdgC,EAAOsG,OAAOxa,QACf+e,mBAAQ7K,EAAOsG,QAAQ,SAACtP,EAAMuK,GACxBvK,EAAMzG,OACH8N,EAAOiI,SAAQjI,EAAOiI,OAAO,IAC7BjI,EAAOiI,OAAO/E,KAASlD,EAAOiI,OAAO/E,GAAS,IACnDlD,EAAOiI,OAAO/E,GAAOhR,KAAO,6BAG1ByG,EAAMd,YACHmI,EAAOiI,SAAQjI,EAAOiI,OAAO,IAC7BjI,EAAOiI,OAAO/E,KAASlD,EAAOiI,OAAO/E,GAAS,IAEnDlD,EAAOiI,OAAO/E,GAAOrL,UAAY,gCAGhCc,EAAMd,YACHc,EAAMd,UAAUmD,MAAM,yCACnBgF,EAAOiI,SAAQjI,EAAOiI,OAAO,IAC7BjI,EAAOiI,OAAO/E,KAASlD,EAAOiI,OAAO/E,GAAS,IAEnDlD,EAAOiI,OAAO/E,GAAOrL,UAAY,+CASpC8J,EAAOnT,YAAemT,EAAOnT,YAAcmT,EAAOnT,WAAWf,OAAS,KACzEuS,EAAOxR,WAAa,iEAElBmT,EAAO4oB,oBAAsB5oB,EAAOnT,aACtCwR,EAAOuqB,kBAAoB,gCAGtBvqB,KAIR,gBAAG2B,EAAH,EAAGA,OAAOe,EAAV,EAAUA,aAAatJ,EAAvB,EAAuBA,cAAciW,EAArC,EAAqCA,MAArC,OACC,kBAAC1a,GAAA,EAAD,CACEsN,WAAS,EACTC,eAAe,EACfC,oBAAoB,EACpBzO,KAAQ7F,EAAM6F,KACdkB,QAAU,kBAAO/G,EAAMgH,SAAQ,IAC/BuN,OAAS,kBAAMvU,EAAMgH,SAAS,KAE9B,kBAACmf,GAAA,EAAD,oBAA0BnmB,EAAMqE,KAAhC,KACA,kBAAC+hB,GAAA,EAAD,KAEInlB,GACF,kBAACiT,GAAA,EAAD,CAAQzN,QAAM,GACZ,kBAAC0N,GAAA,EAAD,OAKF,kBAAC/Q,EAAA,EAAD,CAAMpE,MAAO,CAAE8X,aAAa,QAAU8lB,aAAa,OACjD,kBAACn6B,EAAA,EAAD,CAAMohB,QAAM,GACV,kBAACphB,EAAA,EAAKiH,IAAN,CAAU1K,MAAO,CAAEI,QAAQ,IACzB,kBAAC,GAAD,CAAYiF,KAAK,WAAWN,MAAM,WAAW/F,KAAK,OAAOiB,MAAM,IAAIyF,YAAY,0CAEjF,kBAACjC,EAAA,EAAKiH,IAAN,CAAU1K,MAAO,CAAE69B,WAAW,IAC5B,kBAAC,GAAD,CAAgBx4B,KAAK,kBAAkBmc,SAAO,EAACzc,MAAM,UACnDW,YAAY,iBACZ+c,QAAM,EACNC,WAAS,EACTziB,MAAM,IACN8R,QAAUmrB,EACVh4B,SAAc,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACjBoL,EAAc,kBAAkBpL,OAOtC,kBAACsC,EAAA,EAAKiH,IAAN,KAAU,kBAAC3G,EAAA,EAAD,CAAQC,GAAI,MAAZ,YACV,kBAACP,EAAA,EAAKiH,IAAN,CAAU1K,MAAO,CAAEI,QAAQ,IACzB,kBAAC,GAAD,CAAYiF,KAAK,iBAAiBN,MAAM,SAAS/F,KAAK,OAAOiB,MAAM,OAErE,kBAACwD,EAAA,EAAKiH,IAAN,CAAU1K,MAAO,CAAEI,QAAQ,IACzB,kBAAC,GAAD,CAAYiF,KAAK,mBAAmBN,MAAM,WAAW/F,KAAK,OAAOiB,MAAM,OAEzE,kBAACwD,EAAA,EAAKiH,IAAN,CAAU1K,MAAO,CAAE69B,WAAW,IAC5B,kBAAC,GAAD,CAAYx4B,KAAK,eAAeN,MAAM,OAAO/F,KAAK,OAAOiB,MAAM,OAGjE,kBAACwD,EAAA,EAAKiH,IAAN,KAAU,kBAAC3G,EAAA,EAAD,CAAQC,GAAI,MAAZ,wBACV,kBAACP,EAAA,EAAKiH,IAAN,CAAU1K,MAAO,CAAEI,QAAQ,IACzB,kBAAC,GAAD,CAAYiF,KAAK,QAAQN,MAAM,QAAQ/F,KAAK,QAASiB,MAAM,OAE7D,kBAACwD,EAAA,EAAKiH,IAAN,CAAU1K,MAAO,CAAE69B,WAAW,IAC5B,kBAAC,GAAD,CAAYx4B,KAAK,QAAQN,MAAM,QAAQ/F,KAAK,MAAOiB,MAAM,OAG3D,kBAACwD,EAAA,EAAKiH,IAAN,KAAW,kBAAC3G,EAAA,EAAD,CAAQC,GAAI,MAAZ,kBACX,kBAAC,KAAD,CAAaqB,KAAM,WAChB,gBAAGtC,EAAH,EAAGA,KAAKuT,EAAR,EAAQA,OAAR,OAAsB,oCACnBxB,EAAOsG,OAAOxa,OAAS,GAAKkU,EAAOsG,OAAO/a,KAAI,SAACyL,EAAMuK,GAAP,OAC9C,kBAAC5S,EAAA,EAAKiH,IAAN,CAAUwL,QAAQ,IAAI5V,IAAM+V,EAAOrW,MAAO,CAAEI,QAAQ,IAElD,kBAAC,GAAD,CAAYiF,KAAI,iBAAYgR,EAAZ,UAA2BtR,MAAM,OAAO9E,MAAM,MAC9D,kBAAC,GAAD,CAAgBoF,KAAI,iBAAYgR,EAAZ,eAAgCtR,OAAK,EAACW,YAAY,eAC3D,IAAV2Q,GACD,kBAAC5M,GAAA,EAAD,CACE8O,MAAI,EACJlT,KAAM,SACNpB,MAAM,MACN2B,QAAU,kBAAM0Q,EAAOD,UAK7B,kBAACxQ,EAAA,EAAD,CACE7G,KAAK,SACLwG,MAAI,EACJnB,KAAM,OACNqD,SAAO,EACP9B,QAAU,kBAAM7C,EAAM,CAAEsC,KAAK,GAAI2F,UAAU,OAE3C,kBAACvB,GAAA,EAAD,CAAMpE,KAAK,gBAPb,YAeJ,kBAAC5B,EAAA,EAAKiH,IAAN,KAAU,kBAAC3G,EAAA,EAAD,CAAQC,GAAI,MAAZ,cACV,kBAAC,GAAD,CAAgBqB,KAAK,YACnBK,YAAY,mBACZid,UAAQ,EACRF,QAAM,EACNC,WAAS,EACTziB,MAAM,IACNgC,QAAUyhB,EACV3R,QAAUgK,EACV7W,SAAc,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACjBoL,EAAc,YAAYpL,MAK9B,kBAACsC,EAAA,EAAKiH,IAAN,KAAU,kBAAC3G,EAAA,EAAD,CAAQC,GAAI,MAAZ,gBACV,kBAACP,EAAA,EAAKiH,IAAN,CAAU1K,MAAO,CAAEI,QAAQ,IAA3B,IAAiC,kBAAC,GAAD,CAAYiF,KAAK,aAAarG,KAAK,WAAWiB,MAAM,IAAIyF,YAAY,eAArG,KACA,kBAACjC,EAAA,EAAKiH,IAAN,CAAU1K,MAAO,CAAEI,QAAQ,IAA3B,IAAiC,kBAAC,GAAD,CAAYiF,KAAK,oBAAoBrG,KAAK,WAAWiB,MAAM,IAAIyF,YAAY,uBAA5G,QAMN,kBAACoC,GAAA,EAAM+W,QAAP,KACE,kBAAChZ,EAAA,EAAD,CAAU6S,UAAQ,EAAC9S,QAAS,kBAAM5E,EAAMgH,SAAS,KAAjD,UACCwa,GACD,kBAAC3c,EAAA,EAAD,CAAS2S,UAAQ,EAAC5S,QAAU,kBAAMiQ,MAAlC,cClNGioB,GAtEK,WAAO,IAAD,EACO/7B,mBAASjE,EAAc,CAAEqF,UAAU,CAAE46B,UAAS,KAArE97B,EADgB,EAChBA,QAAQ3C,EADQ,EACRA,MAAM4C,EADE,EACFA,KADE,EAEiBV,mBAAS,IAF1B,mBAEhBw8B,EAFgB,KAEHC,EAFG,OAGmBz8B,oBAAS,GAH5B,mBAGjB08B,EAHiB,KAGFC,EAHE,KAWxB,OANAt/B,qBAAY,WACPqD,GAASA,EAAKuC,aACfw5B,EAAgB/7B,EAAKuC,eAEtB,CAACvC,IAEDD,EAEC,kBAACkT,GAAA,EAAD,CAAQ1N,QAAM,GAAd,mBAIDnI,EACM,kBAACQ,EAAA,EAAD,8BAOP,oCACE,kBAAC+F,EAAA,EAAD,CAAQ6B,SAAO,EAAClC,MAAI,EAACI,QAAU,kBAAMu4B,GAAkB,KAAvD,mBAA8E,kBAAC10B,GAAA,EAAD,CAAMpE,KAAO,OAAb,MAE5E24B,GACF,kBAAC54B,GAAA,EAAD,CAAOI,KAAK,SAAUE,YAAY,0BAChCR,SAAY,SAAClC,EAAD,GAAsB,IAAb7B,EAAY,EAAZA,MACnB,GAAIA,GAA0B,KAAjBA,EAAMyR,OAEd,CACH,IAAMkqB,EAAakB,EAAan9B,QAAO,SAAA2B,GAAO,OAAIA,EAAQwC,SAAS0gB,cAAclc,SAASrI,EAAMukB,gBAAmBljB,EAAQ8iB,QAAQE,QAAQE,cAAclc,SAASrI,EAAMukB,kBACxKuY,EAAgBnB,QAHhBmB,EAAgB/7B,EAAKuC,gBAO3B,kBAAC+F,GAAA,EAAD,CAAO9G,UAAU,UACf,kBAAC8G,GAAA,EAAMzG,OAAP,KACE,kBAACoyB,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,mBACA,kBAACA,GAAA,EAAD,oCACA,kBAACA,GAAA,EAAD,kBACA,kBAACA,GAAA,EAAD,oBACA,kBAACA,GAAA,EAAD,kBAGJ,kBAAC5rB,GAAA,EAAMI,KAAP,KACGozB,GAAgBA,EAAa39B,KAAK,SAAAmC,GAAO,OACxC,kBAACgI,GAAA,EAAME,IAAP,CAAWpK,IAAMkC,EAAQtD,IACvB,kBAACo3B,GAAA,EAAD,KAAW,kBAAC,IAAD,CAAMzM,GAAE,8BAAyBrnB,EAAQtD,KAAOsD,EAAQwC,WACnE,kBAACsxB,GAAA,EAAD,KAAY9zB,EAAQ47B,cACpB,kBAAC9H,GAAA,EAAD,KAAY,wCAAI9zB,EAAQ8iB,QAAQyE,OAApB,IAA4B,6BAA5B,MAAqCvnB,EAAQ8iB,QAAQ0E,SAArD,IAAgExnB,EAAQ8iB,QAAQC,KAAhF,IAAsF,6BAAtF,KAA8F/iB,EAAQ8iB,QAAQE,QAA9G,OAA0H,kBAACC,GAAA,EAAD,CAAMpgB,KAAM7C,EAAQ8iB,SAAW9iB,EAAQ8iB,QAAQE,SAAWhjB,EAAQ8iB,QAAQE,QAAQE,gBAA5M,MACZ,kBAAC4Q,GAAA,EAAD,KAAY9zB,EAAQke,OAASle,EAAQke,MAAMrF,QAAO,SAACC,EAAEC,GAAH,OAAS,oCAAGA,EAAH,KAAO,6BAAP,IAAcD,KAAQ,IAAjF,KACA,kBAACgb,GAAA,EAAD,KAAY9zB,EAAQsQ,aAK3BorB,GACC,kBAAC,GAAD,CAAiBr3B,KAAMq3B,EAAgBl2B,QAAUm2B,MCS1CE,GA1EM,SAAC,GAAoC,IAAjCh4B,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAC7ByE,EAAQnI,KAAKU,MAAOZ,eAAea,QAAQ,aAC3CjC,EAAUC,cACV4F,EAAkB,SAACC,EAAD,GAAkB,IAAZ/B,EAAW,EAAXA,KAC5BiB,EAAejB,GAEX,CAAC,UAAU,aAAa,sBAAsBmE,SAASnE,GACzD/D,EAAQyB,KAAR,yBAA+BsC,IAE/B/D,EAAQyB,KAAR,kBAAwBsC,KAStBk2B,EAAY,IAGfxwB,EAAM+Z,WAAWC,OAASha,EAAM+Z,WAAWtiB,QAAQ0iB,KAAKtkB,OAAS,GAAKmK,EAAM+Z,WAAWtiB,QAAQmrB,MAChG4N,EAAUx4B,KAAM,gBAGfgI,EAAM+Z,WAAWC,OAASha,EAAM+Z,WAAW/Z,MAAMmf,MAAQnf,EAAM+Z,WAAW/Z,MAAM4iB,KAAQ5iB,EAAM+Z,WAAW/Z,MAAMmf,MAAQnf,EAAM+Z,WAAW/Z,MAAMma,OAC/IqW,EAAUx4B,KAAM,cAGfgI,EAAM+Z,WAAWC,OAASha,EAAM+Z,WAAWja,UAAUqf,KAAKtpB,OAAS,IACpE26B,EAAUx4B,KAAM,oBAGfgI,EAAM+Z,WAAWC,OAClBwW,EAAUx4B,KAAM,cAGfgI,EAAM+Z,WAAWC,OAASha,EAAM+Z,WAAWtiB,QAAQ0iB,KAAKtkB,SACzD26B,EAAUx4B,KAAM,gBAUlB,OACE,kBAACsE,GAAA,EAAD,CAAMC,UAAQ,EAACrD,MAAM,OAAOsD,WAAS,GAP9Bg0B,EAAUl7B,KAAI,SAAAioB,GAAI,OACvB,kBAACjhB,GAAA,EAAKG,KAAN,CAAYlH,IAAMgoB,EAAMjjB,KAAQijB,EAAM7gB,OAAUpB,IAAgBiiB,EAC9D1iB,QAAWuB,OAOb,kBAACE,GAAA,EAAKA,KAAN,CAAWnH,SAAS,SAClB,kBAACwhB,GAAA,EAAD,CAAU4G,MAAI,EAAC7W,KAAI,kBAAe1G,EAAM1F,OACtC,kBAACqc,GAAA,EAASra,KAAV,KACGk0B,EAAU36B,OAAS,GAAK,oCACvB,kBAAC8gB,GAAA,EAASla,KAAV,CAAeyP,UAAQ,EAACxF,KAAK,WAAY7L,QAAYuB,IACrD,kBAACua,GAAA,EAASla,KAAV,CAAenC,KAAM,UAAUoM,KAAK,UAAW7L,QAAYuB,IAC3D,kBAACua,GAAA,EAASla,KAAV,CAAenC,KAAM,aAAaoM,KAAK,aAAc7L,QAAYuB,IACjE,kBAACua,GAAA,EAASla,KAAV,CAAenC,KAAO,qBAAqBoM,KAAK,qBAAsB7L,QAAYuB,IAClF,kBAACua,GAAA,EAAS3b,QAAV,OAGF,kBAAC2b,GAAA,EAASla,KAAV,CAAeiK,KAAK,SAAS7L,QAAS,kBAhD9ClD,eAAeiF,WAAW,iBAC1BrG,EAAQyB,KAAK,uB,8bCRjB,IA4Qeu7B,GA5QU,SAACt9B,GAAW,IAAD,EACdrB,qBAAWC,GAAvBjB,EAD0B,sBAES6C,mBAAS,IAFlB,mBAE3BsgB,EAF2B,KAEZC,EAFY,OAIQ5f,sBAAY4b,IAJpB,mBAI5BwgB,EAJ4B,KAILt8B,EAJK,KAILA,QAJK,EAMoC+c,uBAAalhB,GANjD,mBAM3BkkB,EAN2B,YAMHC,EANG,EAMXhgB,QAA8BigB,EANnB,EAMahgB,KANb,EAQ0D8c,uBAAaR,IARvE,mBAQ3BS,EAR2B,YAQSuf,EART,EAQCv8B,QAAkCw8B,EARnC,EAQ8Bv8B,KAR9B,EASyBV,mBAAS,IATlC,mBAS3Bk9B,EAT2B,KASJC,EATI,KAUlC9/B,qBAAU,WACL4/B,GACDE,EAA0BF,EAAkBrf,8BAE7C,CAACqf,IAGJ5/B,qBAAU,WACR,GAAGqjB,GAAeA,EAAYzd,YAAY,CACxC,IAAM2d,EAAUF,EAAYzd,YAAYpE,KAAI,SAACmC,EAAQ6T,GACnD,MAAO,CAAE/V,IAAI+V,EAAOlV,MAAOqB,EAAQtD,GAAIuS,KAAKjP,EAAQwC,aAEtD+c,EAAkBK,MAGpB,CAACF,IAsEH,OACE,kBAAC,KAAD,CACEzM,cAVY,CACdpQ,KAAM,GACNklB,SAAS,GACTlK,YAAa,GACb+B,SAAS,GACTlY,UAAU,IAMR5F,SAAW,SAACwQ,IAtEI,SAACA,GACnBypB,EAAoB,CAClBp7B,UAAW2R,EACXnM,OAAQ,SAAC8R,EAAD,GAAsC,IAArBmkB,EAAoB,EAA5B18B,KAAQ08B,YAEvBjf,mBAASif,EAAYxc,UAAU,SAAA5f,GAC7BiY,EAAM6E,OAAO,CACXpgB,GAAG,WAAD,OAAasD,EAAQtD,IACvBqgB,OAAO,CACLrG,UADK,SACKoJ,EADL,GAC2C,IAAd7C,EAAa,EAAbA,UAChC,OAAG6C,EAAqBjG,MAAK,SAAAuD,GAAG,OAAIH,EAAU,KAAKG,KAASgf,EAAY1/B,MAC/DojB,EAEH,GAAN,mBAAWA,GAAX,CAAiC,CAAE,MAAQ,WAAR,OAAmBsc,EAAY1/B,cAQ1Eub,EAAM6E,OAAO,CACXC,OAAO,CACLwG,aADK,WACoD,IAA5C8Y,EAA2C,uDAAnB,GAAmB,yCAAZpf,EAAY,EAAZA,UACpCqf,EAAkBrkB,EAAMoF,cAAc,CAC1C3d,KAAM08B,EACN9e,SAAW/hB,cAAH,QAiBV,OAAG8gC,EAAsBxiB,MAAK,SAAAuD,GAAG,OAAIH,EAAU,KAAKG,KAASgf,EAAY1/B,MAChE2/B,EAEH,GAAN,mBAAWA,GAAX,CAAiCC,WAMxCva,MACD,kBAAO5lB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAQ,qBAAD,OAAuBqV,EAAOzP,KAA9B,UAA4CrG,KAAM,gBAC/G,SAAAghB,GAAG,OAAKrhB,EAAS,CAAEK,KAAK,mBAAqBC,QAAQ,CAAEQ,QAAS,yEAAiCqV,EAAOzP,MAAO,6BAA/C,IAAsD2a,EAAI3d,SAAarD,KAAM,aAC7IgC,EAAMgH,SAAQ,IAkBZ42B,CADqB,2BAAQ9pB,GAAR,IAAiB5K,UAAW4K,EAAO5K,UAAY4K,EAAO5K,UAAUyD,cAAcU,MAAM,KAAK,OAGhHuH,SAAY,SAACd,GACX,IAAI3B,EAAS,GAUb,KARI2B,EAAOzP,MAASyP,EAAOzP,MAAQyP,EAAOzP,KAAKzE,OAAS,KACtDuS,EAAO9N,KAAM,kEAGVyP,EAAOyV,WACVpX,EAAOoX,SAAW,qEAGhBzV,EAAO5K,UAAUtJ,OAAQ,CACvBkU,EAAO5K,UAAUiE,MAAM,mBACzBgF,EAAOjJ,UAAY,2CAGrB,IAAM+V,EAAa,GACnBN,mBAAQ7K,EAAO5K,UAAUmE,MAAM,MAAM,SAAAhG,GAChCA,EAASuK,OAAOhS,OAAS,GAAGqf,EAAYld,KAAKsF,EAASuK,OAAOjF,kBAE9DsS,EAAYrf,SACduS,EAAOjJ,UAAP,UAAsB+V,EAAYrR,WAAlC,iEAIEuE,EAAOjJ,YACT+U,EAA0B,CAAE9b,UAAU,CAAE+c,cAAepL,EAAO5K,aAC3Dw0B,EAAuB99B,SACxBuS,EAAOjJ,UAAP,uBAAmCw0B,EAAuB9vB,WAA1D,2BAKJuE,EAAOjJ,UAAY,8BA+BrB,OA5BG4K,EAAOuL,YAAYzf,QACpB+e,mBAAQ7K,EAAOuL,aAAa,SAACG,EAAQnK,GAC/BmK,EAAQ/X,cACL0K,EAAOkN,cAAalN,EAAOkN,YAAY,IACvClN,EAAOkN,YAAYhK,KAASlD,EAAOkN,YAAYhK,GAAS,IAC7DlD,EAAOkN,YAAYhK,GAAO5N,YAAc,sCAGtC+X,EAAQE,OAAUF,EAAQ1N,QACvBK,EAAOkN,cAAalN,EAAOkN,YAAY,IACvClN,EAAOkN,YAAYhK,KAASlD,EAAOkN,YAAYhK,GAAS,IAE7DlD,EAAOkN,YAAYhK,GAAOqK,MAAQ,0CAClCvN,EAAOkN,YAAYhK,GAAOvD,MAAQ,2CAGjC0N,EAAQ1N,OACND,GAAc2N,EAAQ1N,SAClBK,EAAOkN,cAAalN,EAAOkN,YAAY,IACvClN,EAAOkN,YAAYhK,KAASlD,EAAOkN,YAAYhK,GAAS,IAC7DlD,EAAOkN,YAAYhK,GAAOvD,MAAQ,oBAQnCK,KAIR,gBAAG2B,EAAH,EAAGA,OAAOe,EAAV,EAAUA,aAAatJ,EAAvB,EAAuBA,cAAciW,EAArC,EAAqCA,MAArC,OACC,kBAAC1a,GAAA,EAAD,CACEsN,WAAS,EACTC,eAAe,EACfC,oBAAoB,EACpBzO,KAAQ7F,EAAM6F,KACdkB,QAAU,kBAAO/G,EAAMgH,SAAQ,IAC/BuN,OAAS,kBAAMvU,EAAMgH,SAAS,KAE9B,kBAACmf,GAAA,EAAD,sBACA,kBAACC,GAAA,EAAD,KAEInlB,GACF,kBAACiT,GAAA,EAAD,CAAQzN,QAAM,GACZ,kBAAC0N,GAAA,EAAD,OAKF,kBAAC/Q,EAAA,EAAD,CAAMpE,MAAO,CAAE8X,aAAa,QAAU8lB,aAAa,MACjDt5B,SAAU,SAAC8C,GACTA,EAAElE,iBACF2S,MAGF,kBAACpS,EAAA,EAAD,CAAMohB,QAAM,GACV,kBAACphB,EAAA,EAAKiH,IAAN,CAAU1K,MAAO,CAAEI,QAAQ,IACzB,kBAAC,GAAD,CAAYiF,KAAK,OAAON,MAAM,OAAO/F,KAAK,OAAOiB,MAAM,IAAIyF,YAAY,mBAEzE,kBAACjC,EAAA,EAAKiH,IAAN,CAAU1K,MAAO,CAAEI,QAAQ,IACzB,kBAAC,GAAD,CAAYiF,KAAK,WAAWN,MAAM,WAAW/F,KAAK,OAAOiB,MAAM,IAAIyF,YAAY,kDAEjF,kBAACjC,EAAA,EAAKiH,IAAN,CAAU1K,MAAO,CAAEI,QAAQ,IACzB,kBAAC,GAAD,CAAYiF,KAAK,YAAYN,MAAM,YAAY/F,KAAK,OAAOiB,MAAM,IAAIyF,YAAY,mDAEnF,kBAACjC,EAAA,EAAKiH,IAAN,CAAU1K,MAAO,CAAE69B,WAAW,IAC5B,kBAAC,GAAD,CAAgBx4B,KAAK,WAAWmc,SAAO,EAACzc,MAAM,UAC5CW,YAAY,kBACZ+c,QAAM,EACNxgB,QAASggB,EACTS,WAAS,EACTC,UAAQ,EACR1iB,MAAM,IACN8R,QAAU+P,EACVc,QAAW,kBAAMZ,KACjB9c,SAAc,SAACkC,EAAD,GAAkB,IAAbjG,EAAY,EAAZA,MACjBoL,EAAc,WAAWpL,OAO/B,kBAACsC,EAAA,EAAKiH,IAAN,KAAU,kBAAC3G,EAAA,EAAD,CAAQC,GAAI,MAAZ,iBACV,kBAAC,KAAD,CAAaqB,KAAM,gBAChB,gBAAGtC,EAAH,EAAGA,KAAKuT,EAAR,EAAQA,OAAR,OAAsB,oCACnBxB,EAAOuL,YAAYzf,OAAS,GAAKkU,EAAOuL,YAAYhgB,KAAI,SAACmgB,EAAQnK,GAAT,OAAmB,kBAAC5S,EAAA,EAAKiH,IAAN,CAAUpK,IAAM+V,EAAOrW,MAAO,CAAEI,QAAQ,IACnH,kBAACgE,EAAA,EAAK+D,MAAN,CAAYnI,MAAO,CAAEqY,OAAO,GAAKsI,OAAO,MAAK,kBAAC,GAAD,CAAYtb,KAAI,sBAAiBgR,EAAjB,iBAAuCtR,MAAM,gBAAgB,kBAAC,GAAD,CAAYM,KAAI,sBAAiBgR,EAAjB,WAAiCtR,MAAM,UAAU,kBAAC,GAAD,CAAYM,KAAI,sBAAiBgR,EAAjB,WAAiCtR,MAAM,UAChP,kBAAC0E,GAAA,EAAD,CACE8O,MAAI,EACJlT,KAAM,SACNpB,MAAM,MACN2B,QAAU,kBAAM0Q,EAAOD,WAK7B,kBAACxQ,EAAA,EAAD,CACE7F,MAAQ,CAAE4gB,UAAU,QACpB5hB,KAAK,SACLwG,MAAI,EACJnB,KAAM,OACNqD,SAAO,EACP9B,QAAU,kBAAM7C,EAAM,CAAE0F,YAAY,GAAGiY,MAAM,GAAI5N,MAAM,OAEvD,kBAACrJ,GAAA,EAAD,CAAMpE,KAAK,gBARb,eAeV,kBAACyC,GAAA,EAAM+W,QAAP,KACE,kBAAChZ,EAAA,EAAD,CAAU6S,UAAQ,EAAC9S,QAAS,kBAAM5E,EAAMgH,SAAS,KAAjD,UACCwa,GACD,kBAAC3c,EAAA,EAAD,CAAS5D,QAAWu8B,EAAsBvnB,SAAUunB,EAAsBhmB,UAAQ,EAAC5S,QAAU,SAACwB,GAC5FA,EAAElE,iBACF2S,MAFF,cC/MGkpB,GArDG,WAAO,IAAD,EAEuBv9B,oBAAS,GAFhC,mBAEfw9B,EAFe,KAECC,EAFD,OAGSl9B,mBAASwc,GAAc,CAAEpb,UAAW,CAAE46B,UAAU,KAAvE97B,EAHc,EAGdA,QAAQ3C,EAHM,EAGNA,MAAM4C,EAHA,EAGAA,KAEhB8C,EAAW2jB,cAEjB,OAAIzmB,GAASD,EAIVA,EACM,kBAACnC,EAAA,EAAD,CAASC,OAAK,GAAE,kBAACoV,GAAA,EAAD,CAAQ1N,QAAM,GAAd,2BAGtBnI,EACM,kBAACyE,EAAA,EAAD,CAAQC,GAAG,MAAX,wBAIP,oCACE,kBAAC6B,EAAA,EAAD,CAAQ6B,SAAO,EAAClC,MAAI,EAACxF,MAAO,CAAE8X,aAAc,QAAUlS,QAAU,kBAAMq5B,GAAmB,KAAO,kBAACx1B,GAAA,EAAD,CAAMpE,KAAK,eAA3G,oBAEEnD,GAAQA,EAAK6jB,aAAanlB,OAAQ,GACtC,kBAACypB,GAAA,EAAKliB,MAAN,KAEIjG,EAAK6jB,aAAa1lB,KAAI,SAAAkI,GAAQ,OAC5B,kBAAC8hB,GAAA,EAAD,CAAM/pB,IAAKiI,EAASrJ,GAAIqZ,MAAI,EAAC+R,QAAM,EAACtmB,GAAI4lB,IAAMC,GAAE,UAAK7kB,EAAS8jB,SAAd,YAA0BvgB,EAASrJ,KACjF,kBAACmrB,GAAA,EAAKpiB,QAAN,CAAcvE,UAAU,SAASsD,OAAUuB,EAASlD,OACpD,kBAACglB,GAAA,EAAKpiB,QAAN,CAAcvE,UAAU,UAAW6E,EAASgiB,SAAUhiB,EAASgiB,SAAW,YAAY,IACtF,kBAACF,GAAA,EAAKpiB,QAAN,CAAcvE,UAAU,SAAS8mB,OAAK,GACpC,kBAACzmB,EAAA,EAAD,CAAQC,GAAI,MAAZ,IAAkB,kBAACyF,GAAA,EAAD,CAAMpE,KAAK,UAA7B,qBAAyDkD,EAAS2B,WAAa3B,EAAS2B,UAAUtJ,eAQvGsB,EAAK6jB,cACV,kBAAChiB,EAAA,EAAD,CAAQC,GAAG,MAAX,oBAGGg7B,GACC,kBAAC,GAAD,CAAkBn4B,KAAMm4B,EAAiBh3B,QAAUi3B,KApChD,MC2EIC,GA1EI,WACjB,IAAM3b,EAASC,cACTxe,EAAW2jB,cAEXuM,EAAYlwB,EAAS8jB,SAASza,MAAM,KAAK,GAJxB,EAMa7M,mBAAS0zB,GANtB,mBAMhB7uB,EANgB,KAMJC,EANI,KAavB,OALAzH,qBAAU,WACRyH,EAAc4uB,KACf,CAACA,EAAUlwB,EAAUue,IAIpB,oCACE,kBAAC,GAAD,CAAcld,WAAYA,EAAYC,cAAgBA,IAEpDD,GAA2C,qBAA7BA,EAAWqf,eACzB,kBAAC,GAAD,MAI6B,iBAA7Brf,EAAWqf,eACb,oCACE,kBAAC,GAAD,OAK6B,WAA7Brf,EAAWqf,eACb,oCACE,kBAAC,GAAD,OAI6B,cAA7Brf,EAAWqf,gBAAkCnC,EAAO8K,SACtD,oCACE,kBAAC,GAAD,OAI6B,cAA7BhoB,EAAWqf,eAAiCnC,EAAO8K,SACrD,oCACE,kBAAC,GAAD,CAAWnvB,GAAIqkB,EAAO8K,WAItBhoB,GAA2C,gBAA7BA,EAAWqf,gBAAoCnC,EAAO4B,WACtE,oCACE,kBAAC,GAAD,OAIA9e,GAA2C,gBAA7BA,EAAWqf,eAAmCnC,EAAO4B,WACrE,oCACE,kBAAC,GAAD,OAIA9e,GAA2C,cAA7BA,EAAWqf,gBAAkCnC,EAAOR,YACpE,oCACE,kBAAC,GAAD,OAIA1c,GAA2C,cAA7BA,EAAWqf,eAAiCnC,EAAOR,YACnE,oCACE,kBAAC,GAAD,SCYOoc,GAtFI,WACjB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOpW,KAAQ,CAAC,4BAA4B,qBAC1C,kBAAC,GAAD,OAGF,kBAAC,IAAD,CAAOA,KAAO,iBACZ,kBAAC,GAAD,OAGF,kBAAC,IAAD,CAAOA,KAAO,eACZ,kBAAC,GAAD,OAIF,kBAAC,IAAD,CAAOA,KAAO,CAAE,gCAAgC,0BAC9C,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAUgM,KAAK,kBAAkBlL,GAAG,4BACpC,kBAAC,IAAD,CAAOd,KAAO,UACZ,kBAAC,GAAD,OAIF,kBAAC,IAAD,CAAUgM,KAAK,mCAAmClL,GAAG,iCAGrD,kBAAC,IAAD,CAAOd,KAAQ,CAAC,2CAA2C,oCAAqC,+BAA+B,0BAC7H,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAUgM,KAAK,6BAA6BlL,GAAG,uCAC/C,kBAAC,IAAD,CAAOd,KAAO,qBACZ,kBAAC,GAAD,OAIF,kBAAC,IAAD,CAAOA,KAAQ,CAAC,4CAA4C,oCAAoC,6BAC9F,kBAAC,GAAD,OAKF,kBAAC,IAAD,CAAOA,KAAQ,CAAC,mDAAmD,yCACjE,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAUgM,KAAK,iCAAiClL,GAAG,6CACnD,kBAAC,IAAD,CAAOd,KAAO,uBACZ,kBAAC,GAAD,OAIF,kBAAC,IAAD,CAAOA,KAAQ,CAAC,gCAAiC,sBAC/C,kBAAC,GAAD,OAIF,kBAAC,IAAD,CAAOA,KAAQ,CAAC,yBACd,kBAAC,GAAD,OAIF,kBAAC,IAAD,CAAUgM,KAAK,UAAUlL,GAAG,2BAC5B,kBAAC,IAAD,CAAOd,KAAO,WACZ,kBAAC,GAAD,OAGF,kBAAC,IAAD,CAAOA,KAAO,2BACZ,kBAAC,GAAD,OAGF,kBAAC,IAAD,CAAOA,KAAO,8BACZ,kBAAC,GAAD,OAGF,kBAAC,IAAD,CAAOA,KAAO,KACZ,kBAAC,GAAD,UCzEKqW,GARF,WACX,OACE,kBAAC,EAAD,KACE,kBAAC,GAAD,Q,6BCCAC,GAAWC,cAAW,SAACh2B,EAAD,GAAqB,IAAfi2B,EAAc,EAAdA,QAI5Bj/B,EAAMsC,KAAKU,MAAMZ,eAAea,QAAQ,aAGxCjD,IAEFA,EAAOsC,KAAKU,MAAMR,aAAaS,QAAQ,kBAErCjD,EAAMsC,KAAKU,MAAMZ,eAAea,QAAQ,gBAI5C,IAAMi8B,EAAQl/B,EAAKA,EAAIa,MAAM,KAE7B,MAAO,CACLo+B,QAAQ,2BACHA,GADE,IAELE,cAAeD,EAAK,iBAAaA,GAAU,WAK3CE,GAAW,IAAIC,WAAS,CAAEC,IAAKC,OAAO76B,SAAS0sB,OAE/CoO,GAAS,IAAIC,eAAa,CAC9BC,MAAO,IAAIC,gBACX1nB,KAAO8mB,GAASa,OAAOR,MAGzBS,IAASC,OACP,kBAAC,iBAAD,CAAgBN,OAAQA,IACtB,kBAACO,GAAA,EAAD,KAAW,kBAAC,GAAD,QAEbC,SAASC,eAAe,W","file":"static/js/main.d0eba484.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\nexport const ALL_STATION = gql`\n query ($detailed: Boolean = false ){\n  allStations (detailed: $detailed){\n    id\n    location\n    shifts @skip(if: $detailed){\n      name\n      startTime\n    }\n    address @include(if: $detailed){\n      country\n      postcode\n      city\n      street\n    }\n    phone @include(if: $detailed)\n    email @include(if: $detailed)\n    activeStaffs @include(if: $detailed)\n    \n  }\n}`\n\nexport const GET_STATION = gql`\n  query fetchStation($id: String!){\n    getStation(id: $id) {\n      costumers {\n        contract\n        aircrafts {\n          id\n          registration\n        }\n        name\n        id\n      }\n      shifts {\n        id\n        name\n        startTime\n      }\n      location\n      id\n      address {\n        country\n        postcode\n        city\n        street\n      }\n      phone\n      email\n      staffList{\n        id\n        name\n        lastActive{\n          activeAt\n        }\n      }\n      procedures{\n        title\n        description\n      }\n      mailingList\n\n    }\n  }\n\n`","import { gql } from '@apollo/client'\nexport const LOGIN_TO_STATION = gql`\n  mutation stationLogin($id: String!, $password:String!){\n    loginToStation(id: $id, password: $password) \n  }\n`\n\nexport const ADD_STATION = gql`\n  mutation addStation ($location:String! , $address: AddressInput! , $phone: String! ,$email: String!, $shifts: [ShiftInfoInput!]!, $costumers: [String], $stationKey:String! ){\n    addStation(\n      location:$location\n      address:$address\n      phone:$phone\n      email:$email\n      shifts:$shifts\n      costumers:$costumers\n      stationKey: $stationKey\n    ){\n      id\n    }\n  }`\n\nexport const ADD_TO_MAILINGLIST = gql` mutation addToMailingList($emails:[String!]! , $stationId: String!){\n    addToMailingList(\n      email: $emails\n      stationId: $stationId\n    ){\n      status\n      message\n    }\n  }\n\n  `\n\nexport const REMOVE_FROM_MAILINGLIST = gql`mutation removeFromMailingList($email:String! , $stationId: String!){\n    removeFromMailingList(\n      email: $email\n      stationId: $stationId\n    ){\n      status\n      message\n    }\n  }`\nexport const ADD_SHIFTS= gql`mutation addShifts($shifts:[ShiftInfoInput!]!, $stationId: String!){\n    addShifts(\n      shifts:$shifts\n      stationId: $stationId\n    ) {\n      id\n      name\n      startTime\n    }\n  }`\n\nexport const REMOVE_SHIFTS = gql` mutation removeShift( $id:String! ,$stationId: String!){\n    removeShift(\n      id:$id\n      stationId: $stationId\n    ){\n      status\n      message\n    }\n  }\n  `\n\nexport const CHANGE_STATION_KEY = gql`mutation changeStationKey(\n    $stationKey:String!\n    $stationId: String!\n  ){\n    changeStationKey(\n      stationKey: $stationKey\n      stationId: $stationId\n    ){\n     status\n      message\n    }\n  }\n\n  `\n\nexport const DELETE_STATION = gql`mutation deleteStation ( $stationId: String!){\n    deleteStation( stationId: $stationId){\n      status\n      message\n    }\n\n  }\n\n  `\n\nexport const ASSIGN_COSTUMERS = gql`mutation  assignCostumers( $stationId: String! $costumers:[String!]!){\n    assignCostumers(\n      stationId: $stationId,\n      costumers: $costumers\n    ){\n      id\n      costumers {\n        id\n        name\n        contract\n        aircrafts{\n        id\n      }\n    }\n    }\n  }\n\n \n`","import React, { useEffect } from 'react'\nimport { Message } from 'semantic-ui-react'\n\nconst Notification  = ({ dispatch , notification }) => {\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      dispatch({ type: 'REMOVE_NOTIFICATION' , payload: { id: notification.id } })\n    },5000)\n    return () => {\n      clearTimeout(timeout)}\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[])\n\n  return (\n    <Message\n      success = {notification.type === 'SUCCESS'}\n      error={notification.type === 'ERROR'}\n      attached\n      onDismiss = {() => dispatch({ type: 'REMOVE_NOTIFICATION' , payload: { id: notification.id } })}\n    >\n      {notification.content}\n    </Message>\n  )\n}\n\nexport default Notification","import React, { useContext } from 'react'\nimport { Segment } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport Notification from './Notification'\n\nconst Notifications = () => {\n  const [notifications,dispatch] = useContext(NotificationContext)\n  return (\n    <Segment basic  style={{\n      width: 'inherit',\n      position: 'fixed',\n      zIndex: 1000,\n      padding:0\n    }}>\n      {notifications.map(notification =>\n        <Notification key={notification.id} notification= {notification} dispatch= {dispatch} ></Notification>\n      )}\n    </Segment>\n\n  )\n}\n\nexport default Notifications","import React, { createContext, useReducer } from 'react'\nimport Notifications from '../components/Notifications'\n\nexport const NotificationContext = createContext()\n\nconst initialState = []\n\nexport const ADD_NOTIFICATION = 'ADD_NOTIFICATION'\nexport const REMOVE_NOTIFICATION = 'REMOVE_NOTIFICATION'\n\n\nexport const notificationReducer = (state ,action) => {\n  switch (action.type){\n  case ADD_NOTIFICATION:\n    return [\n      ...state, {\n        id: state.length +1,\n        content : action.payload.content,\n        type: action.payload.type\n      }\n    ]\n  case REMOVE_NOTIFICATION:\n\n    return state.filter (n => n.id !== action.payload.id)\n\n  default:\n    return state\n  }\n}\n\nexport const NotificationProvider = props => {\n  const notifications = useReducer (notificationReducer, initialState)\n  return (\n    <NotificationContext.Provider value = {notifications}>\n      <Notifications/>\n      {props.children}\n    </NotificationContext.Provider>\n  )\n}","import React, { useState,useEffect, useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useQuery, useMutation } from '@apollo/client'\nimport { Button, Form, Radio, Grid, Header, Image, Segment, Divider } from 'semantic-ui-react'\nimport { ALL_STATION } from '../queries/stationQuery'\nimport { LOGIN_TO_STATION } from '../mutations/stationMutation'\nimport { NotificationContext } from '../contexts/NotificationContext'\n\n\nconst StationLoginPage = () => {\n  const[,dispatch] = useContext(NotificationContext)\n  const history = useHistory()\n  const [radioButton, setRadioButton] = useState({})\n  const [stationKey,setStationKey]= useState('')\n  const [remember, setRemember] = useState(false)\n  const { loading, data } =  useQuery(ALL_STATION,{ notifyOnNetworkStatusChange: true })\n\n  /**\n   * loginStation mutation hook\n   */\n  const [loginStation,loginToStationResult] = useMutation(LOGIN_TO_STATION,{\n    onError: (error) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, Cannot Login'}<br/> {error.message}</> ,type: 'ERROR' } })\n\n    }\n  })\n\n  /**\n   * side effect when the loginStation mutation is executed and loginToStationResult is set\n   */\n  useEffect(() => {\n    if ( loginToStationResult.data ) {\n      const station = loginToStationResult.data.loginToStation\n      setStationKey(station)\n      sessionStorage.setItem('stationKey',JSON.stringify(station))\n      //If remember button is checked store key in local storage\n      if(remember){\n        localStorage.setItem('stationKey',JSON.stringify(station))\n      }\n      history.push(`/shiftReport/station/${radioButton.value}`)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [loginToStationResult.data])\n\n  /**\n   * function for station loginStation action\n   * @param {event} event submit button event\n   */\n  const loginToStation = async (event) => {\n    event.preventDefault()\n    loginStation({ variables:{ id:radioButton.value, password: stationKey } })\n\n  }\n\n  /**\n   * If stationKey is found on localStorage/sessionStorage skip the loginStation and browse shift report\n   */\n  let storedStationKey = JSON.parse(sessionStorage.getItem('stationKey'))\n  if(!storedStationKey){\n    const key = localStorage.getItem('stationKey')\n    storedStationKey = JSON.parse(key)\n    /**\n     * store the key to session storage*\n     */\n    sessionStorage.setItem('stationKey',JSON.stringify(key))\n  }\n  if(storedStationKey){\n    history.push(`/shiftReport/station/${storedStationKey.id}`)\n  }\n\n  /**\n   * remeber checkbox toggle action\n   */\n  const toggleRemember = () => {\n    if (remember) {\n      setRemember(false)\n    }else {\n      setRemember(true)\n    }\n  }\n\n  /**\n   * Renders station password input filed\n   * @param {radioButton DOM} radioButton\n   * @returns {Component} password input field\n   */\n\n  const renderPasswordInput = (radioButton) => {\n    return (\n      <>\n        <Form.Input\n          name= 'stationKey'\n          value={stationKey}\n          onChange= {({ target }) => setStationKey(target.value)}\n\n          label= {`Enter password for ${radioButton.label}`}\n          fluid\n          icon='lock'\n          iconPosition='left'\n          placeholder='Password'\n          type='password'\n\n\n        />\n        <Form.Checkbox name=\"rememberKey\" label='Remember on this computer' checked={remember} onClick = {toggleRemember}/>\n        <Button fluid size='large' color=\"blue\">Retrieve Shift Report</ Button>\n      </>)\n\n  }\n  /**\n   * Radiobutton change action\n   * @param {event} event\n   * @param {DOM {value, label}} value,label\n   *\n   */\n  const radioButtonChange = (event,{ value,label }) => {\n    setRadioButton({ value,label })\n  }\n\n  /**If Login mutation error\n  if (error) return `Error! ${error}` */\n\n\n  return (\n\n    <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as='h2' color='blue' textAlign='center'>\n          <Image src='/LogoMin.png' /> Please select a station\n        </Header>\n        <Form size='large' style={{ textAlign:'left' } } onSubmit={loginToStation}>\n          <Segment clearing stacked>\n            {  loading &&\n             <Segment loading basic>\n             </Segment>\n            }\n\n            {!loading && data.allStations && data.allStations.map(station =>  <Form.Field style={{ float: 'left', clear:'none',  marginRight:'10px' }} key={station.id}>\n              <Radio  label={station.location} value={station.id} checked={ radioButton.value === station.id} onChange={(event,value) => radioButtonChange(event,value)}>\n              </Radio>\n            </Form.Field>)}\n\n            <div style={{ clear:'both' }}></div>\n\n            {radioButton.value && renderPasswordInput(radioButton)\n            }\n\n\n          </Segment>\n        </Form>\n        <Divider horizontal>Or</Divider>\n        <Segment clearing stacked>\n          <Button content='Log in to personal page' icon='user'  size='large' color=\"teal\" fluid onClick = {() => history.push('/staffLogin')} />\n        </Segment>\n\n      </Grid.Column>\n\n    </Grid>\n\n\n  )\n\n\n}\n\nexport default StationLoginPage","import { gql } from '@apollo/client'\r\n\r\nexport const GET_SHIFT_REPORT = gql `\r\nquery fetchReport($id:String, $station: String, $flag: String){\r\n    getShiftReport(id: $id, station: $station, flag: $flag) {\r\n      endTime\r\n      id\r\n      shift\r\n      staffAndTime {\r\n        id\r\n        staff {\r\n          name\r\n        }\r\n        endTime\r\n        startTime\r\n      }\r\n      startTime\r\n      station {\r\n        location\r\n        id\r\n      }\r\n      tasks {\r\n        id\r\n        aircraft {\r\n          registration\r\n          id\r\n          costumer {\r\n            name\r\n          }\r\n        }\r\n        taskCategory\r\n        description\r\n        status\r\n        updates {\r\n          action\r\n          handoverId \r\n          handoverDetail\r\n          note\r\n        }\r\n        \r\n      }\r\n    } \r\n}\r\n\r\n`\r\n\r\nexport const GET_REPORTLIST = gql ` \r\n  query fetchReportList ( $stations: [String!]!, $filterBy: String!, $year:Int! , $number:Int!  ){\r\n    getReportList (stations: $stations, filterBy: $filterBy, year: $year , number:$number){\r\n      startTime,\r\n      endTime,\r\n      id,\r\n      shift\r\n      station{\r\n        location\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n`\r\n\r\nexport const GET_SHIFTREPORT_ID = gql `\r\n  query fetchReportbyShift($station: String!, $shift: String!, $date: Date!){\r\n    getShiftReportByShift(station: $station, shift: $shift, date: $date) {\r\n      startTime,\r\n      endTime,\r\n      id,\r\n      shift,\r\n      station{\r\n        location\r\n      }\r\n    }\r\n  }\r\n`\r\n/** */","import React, { useState } from 'react'\nimport { Button, Confirm, Menu } from 'semantic-ui-react'\nimport { useHistory } from 'react-router-dom'\n\n\nconst MenuBar = ({ activeItem, setActiveItem }) => {\n  const history = useHistory()\n  const [confirmOpen,setConfirmOpen] = useState(false)\n\n  const [navigatingTo, setNavigatingTo] = useState('')\n\n  const CurrentDataLossWarning = () => {\n    return (\n      <Confirm\n        open = {confirmOpen}\n        cancelButton = 'I understand that all reporting will be lost, Continue'\n        confirmButton ='Cancel and Continue Reporting'\n        header='Are You sure?'\n        content= 'You are navigationg away from from the reporting page, doing so will result in losing all the inputs on the report page. Do you want to continue?'\n        onCancel = {() => {\n          setActiveItem(navigatingTo)\n          setConfirmOpen(false)\n        }}\n\n        onConfirm= {() => {\n          setConfirmOpen(false)\n        }}\n      >\n      </Confirm>\n\n    )\n\n  }\n  const handleMenuClick = (e, { name }) => {\n\n    if(activeItem === 'startNewReport'){\n      setNavigatingTo(name)\n      setConfirmOpen(true)\n      return\n    }\n\n    setActiveItem( name )\n    //history.push(activeItem)\n  }\n\n  const switchStation = () => {\n    localStorage.removeItem('stationKey')\n    sessionStorage.removeItem('stationKey')\n    history.push('/')\n  }\n\n  return (\n    <>\n      <Menu inverted color=\"blue\" stackable >\n        <Menu.Item header>  Shift Reporting System </Menu.Item>\n        <Menu.Item name= \"lastShiftReport\"\n          active = {activeItem === 'lastShiftReport'}\n          onClick = {handleMenuClick}>\n        </Menu.Item>\n\n        <Menu.Item name= \"browseAllReports\"\n          active = {activeItem === 'browseAllReports'}\n          onClick = {handleMenuClick}>\n        </Menu.Item>\n\n        <Menu.Item name= \"startNewReport\"\n          active = {activeItem === 'startNewReport'}\n          onClick = {handleMenuClick}>\n        </Menu.Item>\n\n        <Menu.Item name= \"stationInfo\"\n          active = {activeItem === 'stationInfo'}\n          onClick = {handleMenuClick}>\n        </Menu.Item>\n\n        { /* Will be implemented on future\n       <Menu.Item name= \"allOpenTasks\"\n          active = {activeItem === 'allOpenTasks'}\n          onClick = {handleMenuClick}>\n  </Menu.Item>*/}\n\n        <Menu.Menu position='right'>\n          <Button primary\n            name='Switch Station '\n            active={activeItem === 'logout'}\n            onClick={switchStation}\n          >Switch Station</Button>\n        </Menu.Menu>\n      </Menu>\n      <CurrentDataLossWarning/>\n    </>\n\n\n\n\n  )\n\n\n}\n\nexport default MenuBar","import React from 'react'\r\nimport { Header, Label, Modal, Segment } from 'semantic-ui-react'\r\n\r\nconst TaskModal = (props) => {\r\n  const task = props.task\r\n  return (\r\n    <Modal\r\n      open = {props.open }\r\n      onClose= {() => props.setOpen(false)}\r\n    >\r\n      <Modal.Header> Task Details </Modal.Header>\r\n      <Modal.Content>\r\n        { task.taskCategory ==='AIRCRAFT' &&\r\n          <Segment.Group horizontal>\r\n            <Segment basic attached='top'as ={Header}>Aircraft<Header.Subheader>{task.aircraft.registration}</Header.Subheader></Segment>\r\n            <Segment basic attached='bottom' as ={Header}>Costumer<Header.Subheader>{task.aircraft.costumer.name}</Header.Subheader></Segment>\r\n          </Segment.Group>\r\n        }\r\n\r\n        <Segment >\r\n          <Header as ='h3'>Status</Header>\r\n          <p>{task.status}</p>\r\n        </Segment>\r\n\r\n        <Segment >\r\n          <Header as ='h3'>Description</Header>\r\n          <p>{task.description}</p>\r\n        </Segment>\r\n\r\n\r\n        <Segment >\r\n          <Header as ='h3'>Action History</Header>\r\n          <Segment.Group>\r\n            {task.updates.map((update,i) =>\r\n              <Segment clearing key={i}\r\n                color={update.handoverId === props.viewingOnHanodover || (!props.viewingOnHanodover && task.updates.length-1 === i ) ?'green':'grey'}\r\n              >\r\n                <Header as='h5'>{update.action}<Header.Subheader>{update.handoverDetail}</Header.Subheader></Header>\r\n                {update.handoverId === props.viewingOnHanodover &&\r\n                <Label color='green' attached='top right'> Currently Viewing this Report</Label>}\r\n\r\n                {!props.viewingOnHanodover && task.updates.length-1 === i &&\r\n                 <Label color='green' attached='top right'> Last Action Performed</Label>\r\n                }\r\n\r\n                {update.note}\r\n              </Segment>\r\n\r\n\r\n            )}\r\n          </Segment.Group>\r\n\r\n\r\n        </Segment>\r\n        {/*NOT IMPLEMENTED ON THIS REVISION\r\n        <Segment basic floated='right'>\r\n          <Button primary >Add Notes </Button>\r\n          <Button positive>Close Task </Button>\r\n          <Button negative>Defer Task </Button>\r\n            </Segment>*/}\r\n      </Modal.Content>\r\n    </Modal>\r\n  )\r\n\r\n}\r\n\r\nexport default TaskModal","import React, { useState } from 'react'\r\nimport { Segment,Label,Icon } from 'semantic-ui-react'\r\nimport _ from 'lodash'\r\nimport TaskModal from './TaskModal'\r\n\r\nconst TaskInfo = ({ task , handoverId }) => {\r\n  const [openDetail, setOpenDetail] = useState(false)\r\n  const updateOnthisHandover = _.find(task.updates, { 'handoverId': handoverId } )\r\n  return (<>\r\n    <Segment >\r\n      {\r\n        !updateOnthisHandover.action.includes('TASK_CREATED') &&\r\n        <Label  size='mini' basic>Tasks from previous shifts</Label>\r\n      }\r\n      {/*\r\n        updateOnthisHandover.action.includes('TASK_CREATED') &&\r\n        <Label circular size='mini' color = 'teal' basic>New</Label>*/\r\n      }\r\n\r\n      {\r\n        (updateOnthisHandover.action ==='DEFERRED' ||  updateOnthisHandover.action ==='TASK_CREATED_DEFERRED')&&\r\n        <><Label size='mini' color='red' basic> Deferred </Label>\r\n          <Label color='red'size='mini' basic> Action Required </Label>\r\n        </>\r\n      }\r\n      {\r\n        /**If task is  not created on last report this task is older open task that was completed on last shift */\r\n        updateOnthisHandover.action ==='CLOSED' &&\r\n       <Label color='green' size='mini' basic> Completed </Label>\r\n      }\r\n      {\r\n        /**If open task and some action was performed on the last shift */\r\n        task.status ==='OPEN' && updateOnthisHandover &&\r\n        <>{\r\n          !updateOnthisHandover.action.includes('TASK_CREATED') &&\r\n          <Label size='mini' basic> {updateOnthisHandover.action} </Label>\r\n        }\r\n        <Label color='purple'size='mini' basic> Open </Label></>\r\n      }\r\n\r\n      { /** If task is not new then show toggle update history button */\r\n        !updateOnthisHandover.action.includes('TASK_CREATED') && task.updates.length > 1 &&\r\n      <Label as=\"a\" size='mini' onClick = {() => {\r\n        setOpenDetail(true)\r\n      }}> <Icon name =\"history\"/> Action History   </Label>\r\n      }\r\n\r\n      <Segment style= {{ 'paddingTop': 0,'paddingLeft': 0 }}basic compact>{task.description}   </Segment>\r\n\r\n\r\n    </Segment>\r\n\r\n    <TaskModal open= {openDetail} setOpen = {setOpenDetail} task= {task} viewingOnHanodover = {handoverId}> </TaskModal>\r\n\r\n  </>)\r\n}\r\n\r\nexport default TaskInfo","import React from 'react'\nimport { Segment, Header, SegmentGroup } from 'semantic-ui-react'\nimport TaskInfo from './TaskInfo'\nimport  _ from  'lodash'\n\nconst GenericTaskPanel = ({ genericTasks,handoverId }) => {\n  if(genericTasks.legth === 0){\n    return null\n  }\n  return (\n    <>\n      <Segment stacked>\n\n        <Header color = \"blue\" as=\"h4\" block> {genericTasks[0].taskCategory} </Header>\n\n        <SegmentGroup >\n          { _.map(genericTasks,task =>\n            <TaskInfo key={task.id} task ={task} handoverId = {handoverId}/>\n          )}\n\n        </SegmentGroup>\n      </Segment>\n\n\n    </>\n\n  )\n}\n\nexport default  GenericTaskPanel","import React from 'react'\nimport { Segment, Header, SegmentGroup ,Icon } from 'semantic-ui-react'\nimport TaskInfo from './TaskInfo'\nimport  _ from  'lodash'\n\nconst AircraftTaskPanel = ({ aircraftTasks ,handoverId }) => {\n  if(aircraftTasks.legth === 0){\n    return null\n  }\n  return (\n\n    <Segment stacked>\n      {_.map(aircraftTasks,(aircrafts,key_costumerName) =>\n        <SegmentGroup   key ={key_costumerName}>\n\n          <Header color = \"blue\" as=\"h4\" block  > <Icon name = 'plane'/> Work Performed for {key_costumerName}</Header>\n\n\n          { _.map(aircrafts,((tasks,key_aircraft) =>\n            <SegmentGroup key={key_aircraft}>\n              <Segment  >\n                {key_aircraft}\n              </Segment>\n              {_.map(tasks,task =>\n                <TaskInfo key={task.id} task ={task} handoverId={handoverId}/>\n              )}\n\n            </SegmentGroup>))\n          }\n\n        </SegmentGroup>\n\n\n\n      )\n      }</Segment>\n  )\n}\n\nexport default AircraftTaskPanel","import React from 'react'\nimport { Segment, Table } from 'semantic-ui-react'\n\nconst StaffWorkTime = ({ timesheets }) => {\n  return(\n    <Segment>\n      <Table celled >\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Staff</Table.HeaderCell>\n            <Table.HeaderCell>Start Time</Table.HeaderCell>\n            <Table.HeaderCell>End TIme</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {timesheets.map(timesheet =>\n            <Table.Row key={timesheet.id}>\n              <Table.Cell>{timesheet.staff.name}</Table.Cell>\n              <Table.Cell>{timesheet.startTime.substring(10)}</Table.Cell>\n              <Table.Cell>{timesheet.endTime.substring(10)}</Table.Cell>\n            </Table.Row>\n          )}\n        </Table.Body>\n\n      </Table>\n\n    </Segment>\n\n  )\n\n}\n\nexport default StaffWorkTime","import React from 'react'\nimport GenericTaskPanel from './GenericTasksPanel'\nimport AircraftTaskPanel from './AircraftTasksPanel'\nimport { SegmentGroup, Segment, Header } from 'semantic-ui-react'\nimport _ from 'lodash'\nimport StaffWorkTime from './StaffWorkTime'\n\n\nconst ShiftReport = ({ reportData }) => {\n\n  if(!reportData){\n    return<Segment>No reports found</Segment>\n  }\n  const tasksByCat = _.groupBy(reportData.tasks, task => task.taskCategory)\n  const tasks = _.mapValues(\n    tasksByCat,(cat,k) =>\n      k === 'AIRCRAFT'?\n        _.chain(tasksByCat.AIRCRAFT)\n          .groupBy(taskcat  =>  taskcat.aircraft.costumer.name)\n          .mapValues( costumer => {\n            return(_.groupBy(costumer, task => task.aircraft.registration))\n          })\n          .value()\n        :cat\n  )\n\n\n  return (\n    <SegmentGroup>\n      <Segment basic clearing>\n        <Header floated =\"left\"> Shift Report from {reportData.shift} shift <span><h5>({reportData.startTime.substring(10)} - {reportData.endTime.substring(10)})</h5></span></Header>\n        <Header floated =\"right\" as=\"h5\">  {reportData.startTime.substring(10,0)}<span><br/>{reportData.station.location}</span> </Header>\n      </Segment>\n\n      <StaffWorkTime timesheets = {reportData.staffAndTime} />\n\n      {_.map(tasks, (tasksByType,key_taskType) => {\n        if(key_taskType === 'AIRCRAFT') return (\n          <AircraftTaskPanel key={key_taskType} aircraftTasks={ tasksByType} handoverId= {reportData.id}/>\n\n        )\n\n        return (\n          <GenericTaskPanel key = {key_taskType} genericTasks= {tasksByType} handoverId= {reportData.id}/>\n        )\n      }\n      )}\n\n\n    </SegmentGroup>\n  )\n}\n\nexport default ShiftReport","import { createContext } from 'react'\n\nconst Context = createContext( {\n  lastShiftReport: [],\n  station: []\n})\n\nexport default Context","const reducer = (state,action) => {\n  switch(action.type) {\n  case 'ADD_LASTSHIFTREPORT':\n    return {\n      ...state, lastShiftReport: action.payload\n    }\n  case 'INIT_STATION':\n    return {\n      ...state, station: action.payload\n    }\n  default:\n    return state\n  }\n}\n\nexport default reducer","import React from 'react'\r\nimport { useField, useFormikContext } from 'formik'\r\nimport { DateTimeInput, TimeInput } from 'semantic-ui-calendar-react'\r\nimport { Form, Label, Segment, Checkbox, Input } from 'semantic-ui-react'\r\n\r\n\r\nexport const DateInputField = ({ label,...props }) => {\r\n  const { setFieldValue,setFieldTouched } = useFormikContext()\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <Form.Field width = '4' >\r\n      {label &&\r\n      <label>{label}</label>}\r\n\r\n      <DateTimeInput  error = {meta.touched && meta.error?true:false} popupPosition='right center'  {...field} {...props} dateTimeFormat= 'DD-MM-YYYY HH:mm' closable onBlur= {() => {\r\n        setFieldTouched(field.name,true)\r\n      }} onChange={(event,{ value }) => {\r\n        setFieldValue(field.name, value)\r\n      }}\r\n      preserveViewMode={false}/>\r\n\r\n      {meta.touched && meta.error ?\r\n        <Label pointing prompt>\r\n          {meta.error}\r\n        </Label>:''}\r\n    </Form.Field>\r\n  )\r\n\r\n}\r\n\r\nexport const TimeInputField = ({ label,...props }) => {\r\n  const { setFieldValue,setFieldTouched } = useFormikContext()\r\n  const [field, meta] = useField(props)\r\n\r\n  return (\r\n    <Form.Field width = '4' >\r\n      {label &&\r\n      <label>{label}</label>}\r\n\r\n      <TimeInput error = {meta.touched && meta.error?true:false} popupPosition='right center' {...field} {...props} closable onBlur= {() => {\r\n        setFieldTouched(field.name,true)\r\n      }} onChange={(event,{ value }) => {\r\n        setFieldValue(field.name, value)\r\n      }}\r\n      />\r\n\r\n      {meta.touched && meta.error ?\r\n        <Label pointing prompt>\r\n          {meta.error}\r\n        </Label>:''}\r\n    </Form.Field>\r\n  )\r\n\r\n}\r\n\r\n\r\nexport const InputField = ({ width,...props }) => {\r\n  const [field,meta] = useField(props)\r\n  return (\r\n    <>\r\n      <Form.Field error= { meta.touched && meta.error ? true: false} width={width} >\r\n        <label>{props.inputlabel?props.inputlabel:'' }</label>\r\n        <Input   {...field} {...props} />\r\n        { props.type !== 'hidden' && meta.touched && meta.error &&\r\n        <Label pointing prompt>\r\n          {meta.error}\r\n        </Label>\r\n        }\r\n\r\n      </Form.Field>\r\n\r\n    </>\r\n  )\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport const AircraftCheckBox = ({ label,children,checked,...props }) => {\r\n  return(\r\n    <Segment\r\n      style= {{ display:checked?'block':'inline-block'  }}>\r\n      <Checkbox checked={checked} {...props} toggle/>\r\n      <label style={{ display: 'inline-block' , marginLeft: '5px', verticalAlign: 'super' }}> {label.toUpperCase()} </label>\r\n      {children}\r\n    </Segment>\r\n  )}\r\n\r\nexport const TextAreaField = ({ label,...props }) => {\r\n  const [field,meta] = useField(props)\r\n  return (\r\n    <Form.TextArea  error = { meta.touched && meta.error} {...field} {...props}/>\r\n  )}\r\n","import { isNumber } from 'lodash'\r\n\r\n/**\r\n *\r\n * @param {int OR String } dateToFormat  supported string formats :YYYY-MM-DDTHH:MM:SS.Z\r\n * @returns Date format DD-MM-YYYY HH:MM\r\n */\r\nexport const formatDate = (dateToFormat) => {\r\n  if(!dateToFormat){\r\n    return null\r\n  }\r\n  if(isNaN(dateToFormat)){\r\n    const regexFormats = [\r\n      /^(-?(?:[1-9][0-9]*)?[0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\\.[0-9]+)?(Z)?$/,\r\n    ]\r\n    const dateFormat = regexFormats.findIndex((regex) => {\r\n      if (dateToFormat.match(regex)){\r\n        return true\r\n      }\r\n      return false\r\n    })\r\n\r\n    switch (dateFormat)\r\n    {\r\n    case 0:\r\n    { const splitT = dateToFormat.split('T')\r\n      const date= splitT[0]\r\n      const time= splitT[1]\r\n\r\n      const dateSplit = date.split('-')\r\n      const timeSplit = time.split('.')[0].split(':')\r\n\r\n      return dateSplit[2]+'-'+dateSplit[1]+'-'+dateSplit[0]+ ' '+ timeSplit[0] +':'+ timeSplit[1]\r\n    }\r\n\r\n    default:\r\n      return null\r\n    }\r\n  }\r\n\r\n  const date = new Date(dateToFormat)\r\n  return (`${(date.getDate()).toString().padStart(2,0)}-${(date.getMonth()+1).toString().padStart(2,0)}-${date.getFullYear()} ${(date.getHours()).toString().padStart(2,0)}:${(date.getMinutes()).toString().padStart(2,0)}`)\r\n\r\n}\r\n\r\n/**\r\n *\r\n * @param {int or date format} date javascript date int or DD-MM-YYYY\r\n * @param {Double} duration duration to operate\r\n * @param {String} unit 'd for days, h for hours , m for minutes'\r\n * @param {String} operation 'add or sub'\r\n * @returns {string} Date format DD-MM-YYYY HH:MM\r\n */\r\nexport const operateDate = (date, duration, unit , operation) => {\r\n  if(!date){\r\n    return null\r\n  }\r\n  let ndate\r\n  if(!isNumber(date)){\r\n    const splitDateTime = date.split(' ')\r\n    const splitDate = splitDateTime[0].split('-')\r\n    const newDate =`${splitDate[2]}-${splitDate[1]}-${splitDate[0]} ${splitDateTime[1]}`\r\n\r\n    ndate = Date.parse(newDate)\r\n\r\n  }\r\n  else{\r\n    ndate = new Date(date)\r\n  }\r\n\r\n  switch (unit){\r\n  case 'd':\r\n    if(operation === 'add') return  formatDate((ndate + (duration * 24 * 60 * 60 * 1000)))\r\n    if(operation === 'sub') return  formatDate((ndate - (duration * 24 * 60 * 60 * 1000)))\r\n    break\r\n  case 'h':\r\n    if(operation === 'add') return formatDate((ndate + (duration * 60 * 60 * 1000)))\r\n    if(operation === 'sub') return  formatDate((ndate - (duration * 60 * 60 * 1000)))\r\n    break\r\n  case 'm':\r\n    if(operation === 'add') return formatDate((ndate + (duration * 60 * 1000)))\r\n    if(operation === 'sub') return  formatDate(ndate - (duration * 60 * 1000))\r\n    break\r\n  default:\r\n    return formatDate(ndate)\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param {String} stringDate format DD-MM-YYYY HH:MM\r\n * @returns {Int} Javascript date int\r\n */\r\nexport const toDate = (stringDate) => {\r\n  let ndate\r\n  if(!isNumber(stringDate)){\r\n    const splitDateTime = stringDate.split(' ')\r\n    const splitDate = splitDateTime[0].split('-')\r\n    const newDate =`${splitDate[2]}-${splitDate[1]}-${splitDate[0]} ${splitDateTime[1] || '00' }:${splitDateTime[2] | '00'}`\r\n\r\n    ndate = Date.parse(newDate)\r\n  }\r\n  else{\r\n    ndate = new Date(stringDate)\r\n  }\r\n\r\n  return ndate\r\n\r\n}\r\n\r\nexport const getWeekNumber= (dt) => {\r\n  var tdt = new Date(dt.valueOf())\r\n  var dayn = (dt.getDay() + 6) % 7\r\n  tdt.setDate(tdt.getDate() - dayn + 3)\r\n  var firstThursday = tdt.valueOf()\r\n  tdt.setMonth(0, 1)\r\n  if (tdt.getDay() !== 4)\r\n  {\r\n    tdt.setMonth(0, 1 + ((4 - tdt.getDay()) + 7) % 7)\r\n  }\r\n  return 1 + Math.ceil((firstThursday - tdt) / 604800000)\r\n}\r\n\r\n/**\r\n* Returns the week start date(Monday) for given year and weeknumber\r\n* @param {Int} w between 1-52/53\r\n* @param {Int} y year\r\n* @returns {Date}\r\n*/\r\nexport const getDatefromWeek = (w,y) => {\r\n  const simpleStartDate = new Date(Date.UTC(y,0,1 + (w-1) *7))\r\n  const dayOfWeek = simpleStartDate.getDay()\r\n\r\n  let IsoWeekStart = simpleStartDate\r\n  if(dayOfWeek <=4) {\r\n    IsoWeekStart.setDate(simpleStartDate.getDate() - simpleStartDate.getDay()+1)\r\n  }else {\r\n    IsoWeekStart.setDate(simpleStartDate.getDate()+8 - simpleStartDate.getDay())\r\n  }\r\n  return IsoWeekStart\r\n}\r\n\r\nexport const getMonthInt= (name) => {\r\n  const months = ['january','february','march','april','may','june','july','august','september','october','november','december']\r\n  const ind = months.findIndex((month) => {\r\n    return month === name.toLowerCase()\r\n  })\r\n  return ind\r\n}\r\n\r\n/**\r\n  * Positive prop gets month from  beginning of year\r\n  * Negative index gets month from end  of year\r\n  * @param  {Int} monthInt Month Number\r\n  */\r\nexport const getMonthName = (monthInt) => {\r\n  const months = new Proxy(['January','February','March','April','May','June','July','August','September','October','November','December'], {\r\n    get(target, prop) {\r\n      if (!isNaN(prop)) {\r\n        prop = parseInt(prop, 10)\r\n        if (prop < 0) {\r\n          prop += target.length\r\n        }\r\n      }\r\n      return target[prop]\r\n    }\r\n  })\r\n  return months[monthInt]\r\n}\r\n\r\n/**\r\n * Retrive months form given month duration including current month\r\n *\r\n *  */\r\nexport const getMonthOptions = (duration) => {\r\n  /**Default Duration is 4 months */\r\n  if(!duration ){\r\n    duration = 4\r\n  }\r\n\r\n  const today = new Date()\r\n  const currentMonth = today.getMonth()\r\n\r\n  const options = [...new Array(duration)].map((v,i) => {\r\n    return (\r\n      { key:i ,\r\n        text: getMonthName(currentMonth-i ) ,\r\n        value:  currentMonth -i < 0 ? 12 + currentMonth -i  : currentMonth -i }\r\n    ) })\r\n  return options\r\n}\r\n\r\n/**Retrieve all weeks that falls within given month duration including current month*/\r\nexport const getWeekOptions = (duration) => {\r\n  /**Default Duration is 4 months */\r\n  if(!duration ){\r\n    duration = 4\r\n  }\r\n  const today = new Date()\r\n  const currentMonth = today.getMonth()\r\n  let dYear = today.getFullYear()\r\n  const lastYearWeekNum = getWeekNumber( new Date(dYear-1,11,28))\r\n  const lastRetriveable  = getWeekNumber(new Date(dYear, currentMonth - duration ,1))\r\n  let currentWeek = getWeekNumber(today)\r\n  let options = []\r\n\r\n  let week = currentWeek\r\n  while ( week !== lastRetriveable-1  ){\r\n    const option = { key: week, text: week, value: week }\r\n    options.push (option )\r\n    week = week -1\r\n    if(week === 0) {\r\n      week = lastYearWeekNum\r\n    }\r\n  }\r\n  return options\r\n\r\n}\r\n\r\n/**\r\n *\r\n * @param {String} filterBy filter by week or month accepts string 'week' or 'month'\r\n * @param {Int} number week number or Javascript MonthNumber\r\n * @returns {Int} year\r\n */\r\n\r\nexport const getFilterYear = (filterBy, number) => {\r\n\r\n  let year\r\n  const today = new Date()\r\n\r\n  if(filterBy ==='week' ){\r\n    // eslint-disable-next-line no-console\r\n    const currentWeek = getWeekNumber(today)\r\n    if( number > currentWeek){\r\n      year = today.getFullYear() -1\r\n    }\r\n    if(number <= currentWeek){\r\n      const weekStartDate = new Date((new Date(today)).setDate(today.getDate() - today.getDay() + (today.getDay() === 0 ? -6:1)))\r\n      year = weekStartDate.getFullYear()\r\n    }\r\n\r\n    return year\r\n\r\n  }\r\n\r\n  if(filterBy ==='month' && number > today.getMonth() ){\r\n    year = today.getFullYear() -1\r\n    return year\r\n  }\r\n\r\n  year = today.getFullYear()\r\n  return year\r\n\r\n}\r\n\r\n","import { formatDate, toDate } from '../../../utils/DateHelper'\r\nimport _ from 'lodash'\r\n\r\n\r\nexport const validateStaffsField= (value) => {\r\n  let error\r\n  /**\r\n   * If np staff is set\r\n   */\r\n  if(!value ||  !value.length ){\r\n    error = 'Report must have staff information, please add staff'\r\n    return error\r\n  }\r\n  /**\r\n   * If at least one staff is set\r\n   */\r\n  if (value && value.length){\r\n    error = _.mapValues(value, staff => {\r\n      let errList = validateStaffInputField(staff)\r\n      /**\r\n       * If the staff input fields have error other than signOffKey\r\n       */\r\n      if(!_.isEmpty(errList)){\r\n        errList = { ...errList,  'signOffKey':'Please fix staff inputs' }\r\n        return errList\r\n      }\r\n\r\n      /**\r\n       * If staff is not signed off\r\n       */\r\n      if (!staff.signOffKey ){\r\n        errList = { ...errList,  'signOffKey':'Each staff must sign off' }\r\n      }\r\n\r\n\r\n      return errList\r\n\r\n    }) }\r\n\r\n  /**\r\n     * Removing the empty key value pairs from error\r\n     */\r\n  _.mapKeys(error,(v,k) => {\r\n    if(_.isEmpty(v)) {\r\n      delete error[k]\r\n    }\r\n  })\r\n\r\n  return error\r\n\r\n\r\n}\r\n\r\nexport const validateStaffInputField = (staff) => {\r\n\r\n  let error\r\n  if(!staff) {\r\n    return undefined\r\n  }\r\n  /**\r\n   * If staff name is not set\r\n   */\r\n  if(!staff.name ){\r\n    error = { ...error, 'name':'Staff name is required' }\r\n  }\r\n  /**\r\n   * Validating starttime and endtime\r\n   * */\r\n  error = { ...error,...validateStartEndTime(staff.startTime,staff.endTime) }\r\n\r\n  return error\r\n}\r\n\r\n\r\nexport const validateStartEndTime = (startTime,endTime,startDate)  => {\r\n\r\n  let error\r\n  /**\r\n   * If start time is not set\r\n   */\r\n  if(!startTime){\r\n    error = { ...error, 'startTime':'Start time is required' }\r\n  }\r\n  /**\r\n   * If end time is not set\r\n   */\r\n  if(!endTime){\r\n    error = { ...error,  'endTime':'End time is required' }\r\n  }\r\n\r\n  /**\r\n   * Id starttime is not correct format DD-MM-YYY HH:MM\r\n   */\r\n  if(!startTime.match(/^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-\\d\\d\\d\\d (0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$/)){\r\n    error = { ...error,  'startTime':'Start time should be on format DD-MM-YYYY HH:MM' }\r\n  }\r\n\r\n  /**\r\n   * Id starttime is not correct format DD-MM-YYY HH:MM\r\n   */\r\n  if(!endTime.match(/^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-\\d\\d\\d\\d (0[0-9]|1[0-9]|2[0-3]):([0-9]|[0-5][0-9])$/)){\r\n    error = { ...error,  'endTime':'End time should be on format DD-MM-YYYY HH:MM' }\r\n  }\r\n\r\n  /**\r\n   * If starttime is earlier than 24H\r\n   */\r\n  if( !startDate && toDate(startTime) + (24 *3600 * 1000) <= Date.now()){\r\n    error = { ...error,  'startTime':'Start time should be within last 24 hours' }\r\n  }\r\n\r\n  if(startDate && new Date(startDate).getDate() !== new Date(toDate(startTime)).getDate()){\r\n    error = { ...error,  'startTime':`Start time should be on ${formatDate(new Date(startDate)).split(' ')[0]}` }\r\n  }\r\n\r\n\r\n  /**\r\n   * If starttime isgreater than end time\r\n   */\r\n  if( toDate(startTime) >= toDate(endTime)){\r\n    error = { ...error,  'startTime':'Start time cannot be later than endtime' }\r\n  }\r\n\r\n  /**\r\n   * If starttime is set to end time\r\n   */\r\n\r\n  if( toDate(startTime) > Date.now()){\r\n    error = { ...error,  'startTime':'Start time cannot be on future' }\r\n  }\r\n  /**\r\n   * If endtime is set in future\r\n   */\r\n\r\n  if( toDate(endTime) > Date.now()){\r\n    error = { ...error,  'endTime':'End time cannot be on future' }\r\n  }\r\n\r\n  return error\r\n\r\n}\r\n\r\nexport const validateTasks = (tasks) => {\r\n  if(!tasks) return null\r\n  const error = _.mapValues(tasks,typedTasks => {\r\n    const taskErrors = _.mapValues( typedTasks,task => {\r\n      /**\r\n       * Validating individual tasks\r\n       */\r\n      const taskError = validateTaskField(task)\r\n      return taskError\r\n    })\r\n\r\n    /**\r\n     * Removing empty nested objects\r\n     */\r\n    return(_.pickBy(taskErrors,_.identity))\r\n\r\n\r\n\r\n  })\r\n\r\n\r\n  /**\r\n   * Removing empty key value pair\r\n   */\r\n  _.mapKeys(error,(v,k) => {\r\n    if(_.isEmpty(v)) {\r\n      delete error[k]\r\n    }\r\n    //console.log(k)\r\n  })\r\n\r\n  return error\r\n}\r\n\r\n\r\n\r\n\r\nconst validateTaskField = (task) => {\r\n  let error = null\r\n  /**\r\n   * If task status is open\r\n   */\r\n  if(task.status === 'DEFERRED') {\r\n    /**\r\n     * If there is no action on DEFERRED task\r\n     */\r\n    if(!task.action || task.action === 'NOTES_ADDED'){\r\n      //console.log(task)\r\n      error = { ...error, action:'Action was requested on this task. Please perform a action. ' }\r\n    }\r\n  }\r\n\r\n  if(!task.status && !task.action){\r\n    error = { ...error, action: 'Task must have one of the following status' }\r\n  }\r\n\r\n  /**\r\n   * If task description is empty or spaces\r\n   */\r\n  if((!task.description || task.description.trim() === '')){\r\n    error= { ...error,description:'Please add task description' }\r\n  }\r\n  return error\r\n\r\n\r\n}\r\n\r\nexport const validateEmail = (email) => {\r\n\r\n  if(!email) {\r\n    return 'Email is required'\r\n  }\r\n  if(!email.match(/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/)){\r\n    return 'Incorrect email format'\r\n  }\r\n\r\n}\r\n\r\n\r\nexport const validateName = (name) => {\r\n\r\n  if(!name || name.trim === '') return 'Full name is required'\r\n  if(name.length < 4){\r\n    return 'Name must be at least 4 character long'\r\n  }\r\n\r\n\r\n}","import React from 'react'\r\nimport { Field, getIn } from 'formik'\r\nimport {  Label } from 'semantic-ui-react'\r\n\r\nconst ErrorMessage = ({ name,pointing }) => (\r\n  <Field\r\n    name={name}>\r\n    {({ form }) => {\r\n\r\n      const error = getIn(form.errors, name)\r\n      const touch = getIn(form.touched, name)\r\n      return touch && error && typeof error === 'string' ?\r\n        <Label pointing={pointing} style={{ height:'fit-content' }}color='red'  basic>{error}</Label> : null\r\n    }}\r\n  </Field>\r\n)\r\n\r\nexport default ErrorMessage","import { gql } from '@apollo/client'\nexport const SIGN_OFF_SHIFT = gql`\n  mutation signOff($startTime: String!, $break:Int, $endTime:String!, $username: String, $password:String, $idCardCode: String, $additionalAction: String, $id:String, $email: String, $name: String ){\n    signOffTimeSheet(\n      startTime: $startTime, \n      endTime:$endTime, \n      break: $break,\n      username: $username, \n      password: $password , \n      additionalAction: $additionalAction,\n      email: $email,\n      name: $name,\n      idCardCode: $idCardCode\n      id: $id\n      ) {\n        name,\n        value,\n        break,\n        startTime,\n        endTime,\n        id\n      }\n  }`\nexport const UPDATE_TIMESHEET = gql`\n mutation updateTimeSheet($id: String, $startTime: String , $endTime: String, $station: String, $shift : String, $break: Int, $staff: String, $remarks: [RemarkInput], $handover: String){\n  addToTimeSheet(\n      id: $id\n      startTime: $startTime , \n      endTime: $endTime,\n      station: $station, \n      shift: $shift,  \n      staff: $staff\n      break: $break,\n      remarks:$remarks,\n      handover:$handover,\n  )\n    {\n      id\n      startTime\n      status\n      date\n      endTime\n      break\n      remarks{\n        by\n        date\n        edit\n        text\n        title\n      }\n      staff{\n        id\n        name\n        reqHours\n      }\n      shiftReport {\n        shift\n        id\n        station {\n          id\n          location\n        }\n      }\n\n      shift\n      station{\n        id\n        location\n      }\n\n  } \n  \n\n }\n`\nexport const APPROVE_TIMESHEET = gql`\n mutation approveTimeSheet($id: String!, $status: String!){\n   approveTimeSheet(\n     id: $id,\n     status: $status\n   ){\n     id \n     status \n     remarks{\n      by\n      date\n      edit\n      text\n      title\n    }\n   }\n }\n`\nexport const DELETE_TIMESHEET = gql`\n mutation deleteTimeSheet($id: String!){\n   deleteTimeSheet(\n     id: $id,    \n   ){\n     status\n     message\n   }\n }\n`\nexport const REQUEST_CLARIFICATION = gql`\n mutation requestClarification($id: String!, $clearify: String){\n  requestClarification(\n     id: $id,\n     clearify:$clearify,    \n   ){\n    id\n    remarks{\n      by\n      date\n      edit\n      text\n      title\n    }\n   }\n }\n`","import React, { useState, useEffect } from 'react'\nimport { Modal,Grid,Header,Form ,Divider,Segment ,Icon,Button,Message, Dimmer,Loader } from 'semantic-ui-react'\nimport { DateInputField, InputField } from './FormFields'\nimport { operateDate, formatDate } from '../../../utils/DateHelper'\nimport { useFormikContext, Formik } from 'formik'\nimport { validateStartEndTime } from './validator'\nimport { SIGN_OFF_SHIFT } from '../../../mutations/timeSheetMutation'\nimport { useMutation } from '@apollo/client'\n\n\nconst  StaffEditModel = ({ setOpen,open, fieldName, removeClick ,removeStaff ,setRemoveStaff }) => {\n\n  const{ getFieldMeta,setFieldValue } = useFormikContext()\n\n  const [signOff,{ loading, error, data }] = useMutation(SIGN_OFF_SHIFT)\n\n  const shiftStartTime = getFieldMeta(`${fieldName}.startTime`).value\n  const shiftEndTime = getFieldMeta(`${fieldName}.endTime`).value\n  const ibreakt = getFieldMeta(`${fieldName}.break`).value\n  const [notifyResult,setNotifyResult] = useState('')\n  const [username,setUsername] = useState('')\n  const [password,setPassword] = useState('')\n  const [startTime,setStartTime] = useState(shiftStartTime)\n  const [endTime,setEndTime] = useState(shiftEndTime)\n  const [breakt,setBreakt] = useState(ibreakt)\n\n  useEffect(() => {\n    setStartTime(shiftStartTime)\n    setEndTime(shiftEndTime)\n  },[shiftEndTime, shiftStartTime])\n\n\n  useEffect (() => {\n    /**If the staff sign off is not sucessfull */\n    if(error){\n      setNotifyResult({ type: 'error', message:`Sorry, ${error.message}` })\n    }\n    /**\n     * If the staff signoff is successFull\n     */\n    if(data && data.signOffTimeSheet != null ){\n\n      if(removeStaff) {\n        removeClick()\n        setRemoveStaff(false)\n        setOpen(false)\n\n      }else {\n        setFieldValue(`${fieldName}.startTime`,data.signOffTimeSheet.startTime)\n        setFieldValue(`${fieldName}.endTime`,data.signOffTimeSheet.endTime)\n        setFieldValue(`${fieldName}.signOffKey`,data.signOffTimeSheet.value)\n        setOpen(false)\n\n      }\n\n\n\n\n\n    }\n\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[error, data])\n\n  const submit = async (values) => {\n    let signOffData\n    signOffData = { startTime:values.startTime ,endTime: values.endTime ,break: values.breakt, username: username, password: password, additionalAction: removeStaff?'remove':'update',id:getFieldMeta(`${fieldName}`).value.id }\n    await signOff({ variables:signOffData })\n  }\n\n  const renderAlert = () => {\n    if(!notifyResult) return null\n    return(\n      <Message\n        success = {notifyResult.type === 'success'}\n        error = {notifyResult.type === 'error'}\n        onDismiss = {() => setNotifyResult('')\n        }\n      > {notifyResult.message}\n      </Message>)\n\n\n  }\n\n  if(loading){\n    return<Dimmer active inverted>\n      <Loader active inverted>Verifying</Loader>\n    </Dimmer>\n  }\n\n  return (\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {open}\n      onClose= {() => {\n\n        setNotifyResult(false)\n        setOpen(false)}}\n      onOpen= {() => setOpen (true)}\n    >\n      <Modal.Header>{getFieldMeta(`${fieldName}.name`).value} </Modal.Header>\n      <Modal.Content>\n        {notifyResult &&\n         renderAlert()\n        }\n        <Formik\n          enableReinitialize\n          initialValues = {{\n            startTime: startTime,\n            endTime: endTime,\n            breakt: breakt,\n            username:'',\n            password:'',\n            email:'',\n            fullname:'',\n            resetEmail:''\n          }}\n\n          validate = {values => {\n            let errors = {}\n            errors = { ...errors,...validateStartEndTime(values.startTime,values.endTime)  }\n            return errors\n          } }\n\n          onSubmit = {(values) =>\n          {\n            submit(values)}\n          }\n\n\n        >\n\n\n          {({ handleSubmit }) =>\n\n            <Form size='large' onSubmit = { handleSubmit} >\n              <Form.Group >\n\n                < DateInputField\n                  label= 'Start Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name ='startTime'\n                  maxDate = {operateDate(Date.now(),30,'m','sub')}\n                  minDate= {operateDate(Date.now(),20,'h','sub')}\n                  onChange = {(e,{ value }) => {\n                    setStartTime(value)}\n                  }\n                />\n\n\n                < DateInputField\n                  label = 'End Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name='endTime'\n                  maxDate = {formatDate(Date.now())}\n                  minDate= {operateDate(startTime,20,'m','add')}\n                  onChange = {(e,{ value }) => {\n                    setEndTime(value)}\n                  }/>\n\n                <InputField\n                  inputlabel= 'Break'\n                  label = 'Minutes '\n                  labelPosition='right corner'\n                  name= 'breakt'\n                  type='number'\n                  min='0'\n                  onChange = {(e,{ value }) => {\n                    setBreakt(value)}\n                  }>\n                </InputField>\n\n\n\n              </Form.Group>\n\n              <Header as='h3' color='red' textAlign='center'>\n                {removeStaff?'Enter credentials to confirm remove.' : 'Enter credential to save changes'}\n\n              </Header>\n\n\n              <>\n                <Segment >\n\n                  <Grid columns={2} stackable >\n                    <Divider vertical>Or</Divider>\n                    <Grid.Row verticalAlign='middle'>\n                      <Grid.Column>\n                        <Grid.Row style={{ textAlign:'center' }}>\n                          <Header as ='h5' icon>\n                            <Icon name='sign in alternate' />\n                    Use Credentials\n                          </Header>\n                        </Grid.Row>\n                        <Grid.Row>\n                          <Form.Group>\n                            <Form.Input label='Username' onChange= {(e,{ value }) => setUsername(value)}></Form.Input>\n                            <Form.Input label= 'Password' type='password' onChange= {(e,{ value }) => setPassword(value)}></Form.Input>\n                          </Form.Group>\n                          <Form.Field style={{ textAlign:'center' }}>\n                            <Button type='submit' primary > Sign </Button>\n                          </Form.Field>\n                        </Grid.Row>\n                      </Grid.Column>\n\n                      <Grid.Column textAlign='center'>\n                        <Grid.Row >\n                          <Header icon>\n                            <Icon name='barcode' size='massive' />\n                  Use IdCard\n                          </Header>\n                        </Grid.Row>\n                        <Grid.Row><Button primary>Scan</Button></Grid.Row>\n\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n\n                </Segment>\n\n              </>\n            </Form>}\n        </Formik>\n      </Modal.Content>\n\n    </Modal>\n\n\n  )\n}\n\nexport default StaffEditModel","import React, { useState } from 'react'\nimport { Label, Form, Button, Segment } from 'semantic-ui-react'\nimport { InputField, DateInputField } from './FormFields'\nimport { Field } from 'formik'\nimport { formatDate, operateDate } from '../../../utils/DateHelper'\nimport StaffEditModel from './StaffEditModel'\n\nconst StaffForm = ({ staff,fieldName,values,index,remove }) => {\n  const [open, setOpen] = useState(false)\n  const [removeStaff, setRemoveStaff] = useState(false)\n\n  if(!staff) return null\n  return(\n    <Segment >\n      {staff.signOffKey &&\n      <Label attached='top left' size='mini' basic color=\"grey\" >Signed Off </Label> }\n      <Form.Group  >\n        <InputField  width= {4} readOnly = {staff.signOffKey } name={`${fieldName}.name`}></InputField>\n        < DateInputField\n          readOnly = {(staff.signOffKey && !staff.changing) }\n          maxDate = {operateDate(Date.now(),30,'m','sub')}\n          minDate= {operateDate(Date.now(),20,'h','sub')}\n          name = {`${fieldName}.startTime`}/>\n\n        < DateInputField\n          readOnly= {(staff.signOffKey  && !staff.changing) }\n          maxDate = {formatDate(Date.now())}\n          minDate= {operateDate(values.startTime,20,'m','add')}\n          name = {`${fieldName}.endTime`}/>\n\n        <Field type='hidden' value=\"\" name={`${fieldName}.signOffKey`}></Field>\n        <Field type='hidden' value=\"\" name={`${fieldName}.break`}></Field>\n\n        <Button\n          style={{ height:'fit-content' }}\n          type='button'\n          circular\n          icon='cancel'\n          basic\n          onClick = {() => {\n            setRemoveStaff(true)\n            setOpen(true)\n          }}\n        />\n\n\n        <>\n          <Button\n            style={{ height:'fit-content' }}\n            type='button'\n            inverted\n            color='red'\n            size=\"small\"\n            onClick = {() => {\n              setOpen(true)\n            }\n            }> Change</Button>\n        </>\n\n      </Form.Group>\n\n      <StaffEditModel\n        setOpen={setOpen}\n        open={open}\n        startTime ={values.staffs[index].startTime}\n        endTime ={values.staffs[index].endTime}\n        breakt = {values.staffs[index].break}\n        fieldName = {fieldName}\n        removeStaff = {removeStaff}\n        setRemoveStaff= {setRemoveStaff}\n        removeClick = {() => remove(index)}\n      />\n\n    </Segment>\n  )}\n\nexport default StaffForm","import React, { Fragment } from 'react'\nimport { FieldArray } from 'formik'\nimport ErrorMessage from './ErrorMessage'\nimport { Segment, Button,Icon,Header } from 'semantic-ui-react'\nimport StaffForm from './StaffForm'\n\nconst StaffForms = ({ values ,addStaffOpen }) => {\n\n  return (\n    <>\n      <FieldArray name=\"staffs\">\n        {({ remove, push, replace }) => (\n          <Fragment >\n            <Header as=\"h3\">Staffs</Header>\n            <Segment.Group >\n              { values.staffs.length >0 && values.staffs.map((staff,index) =>\n                <StaffForm\n                  key={index}\n                  index ={index}\n                  staff={staff}\n                  fieldName={`staffs.${index}`}\n                  values= {values}\n                  remove= {remove}\n                ></StaffForm>\n              )\n              }\n            </Segment.Group>\n            <Button type='button' icon\n              primary onClick={ () =>\n                addStaffOpen(true)\n                /*push({ name:'',startTime:'',endTime:'' ,signOffKey:'' })*/}>< Icon name=\"plus circle\"/> Add </Button>  <ErrorMessage name='staffs' pointing='left'/>\n          </Fragment>\n        )}\n\n      </FieldArray>\n\n    </>\n\n  )\n}\n\nexport default StaffForms","import React, { useState } from 'react'\r\nimport { useFormikContext } from 'formik'\r\nimport { Label, Icon, Divider,Form,Button } from 'semantic-ui-react'\r\nimport ErrorMessage from './ErrorMessage'\r\nimport { TextAreaField } from './FormFields'\r\nimport TaskModal from '../../ShiftReport/TaskModal'\r\n\r\n\r\nexport const TaskForm = ({ label,onRemove,disabled,children,name,task }) => {\r\n  const { setFieldValue,getFieldProps,setFieldTouched, getFieldMeta } = useFormikContext()\r\n  const [openDetail, setOpenDetail] = useState(false)\r\n  const removeButtonClick = ( e ) => {\r\n    e.preventDefault()\r\n    onRemove()\r\n  }\r\n\r\n  const [noteFieldVisibile, setNoteFieldVisibile] = useState(false)\r\n\r\n  const taskAction = getFieldProps(`${name}.action`).value\r\n  const taskStatus = getFieldProps(`${name}.status`).value\r\n  const taskNotes =  getFieldProps(`${name}.newNote`).value\r\n\r\n  const actionButtonClick = (e,value) => {\r\n    e.preventDefault()\r\n    setFieldValue(`${name}.action`,value)\r\n    if(noteFieldVisibile && !taskNotes){\r\n      toggleNotes()\r\n    }\r\n  }\r\n\r\n  const actionOpenCheckBoxClick = (e,checked) => {\r\n    setFieldTouched(`${name}.description`,true)\r\n    if(!getFieldMeta(`${name}.description`).error){\r\n\r\n      if(checked){\r\n\r\n        setFieldValue(`${name}.action`,'OPEN')\r\n\r\n      }else{\r\n        setFieldValue(`${name}.action`,'')\r\n      }\r\n    }\r\n    else{\r\n      setFieldTouched(`${name}.description`)\r\n    }\r\n  }\r\n\r\n  const actionCloseCheckBoxClick = (e,checked) => {\r\n    setFieldTouched(`${name}.description`,true)\r\n    if(!getFieldMeta(`${name}.description`).error){\r\n      if(checked){\r\n        setFieldValue(`${name}.action`,'CLOSED')\r\n      }else{\r\n        setFieldValue(`${name}.action`,'')\r\n      }\r\n    }\r\n    else{\r\n      setFieldTouched(`${name}.description`)\r\n    }\r\n\r\n  }\r\n\r\n  const actionDeferCheckBoxClick = (e,checked) => {\r\n    setFieldTouched(`${name}.description`,true)\r\n    if(!getFieldMeta(`${name}.description`).error){\r\n      if(checked){\r\n        setFieldValue(`${name}.action`,'DEFERRED')\r\n      }else{\r\n        setFieldValue(`${name}.action`,'OPEN')\r\n      }\r\n    }\r\n    else{\r\n      setFieldTouched(`${name}.description`)\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const undoButtonClick = () => {\r\n    setFieldValue(`${name}.action`,'')\r\n    if(taskNotes) {\r\n      setNoteFieldVisibile(true)\r\n    }\r\n  }\r\n\r\n  const toggleNotes = () => {\r\n    if(noteFieldVisibile){\r\n      const notes= taskNotes.trim()\r\n      setNoteFieldVisibile(false)\r\n      setFieldValue(`${name}.newNote`,notes)\r\n    }else{\r\n      setNoteFieldVisibile(true)\r\n    }\r\n\r\n  }\r\n\r\n  const TaskStatusBar = () => {\r\n    const prevShiftLabel = <Label  size='mini' basic >Task from previous shifts </Label>\r\n    const notesLabel = taskNotes && taskNotes.trim()?\r\n      <Label size='mini' basic color=\"blue\" as='a' onClick = {() => {\r\n        if(taskAction && taskAction !== 'NOTES_ADDED'){\r\n          toggleNotes()}\r\n      }\r\n      }>Notes Added </Label>:''\r\n\r\n\r\n    return (\r\n      <div style={{ padding:'0.3125em 1.5em' }}>\r\n        {prevShiftLabel}\r\n        {notesLabel}\r\n        {disabled && taskStatus === 'DEFERRED' && !taskAction &&\r\n              <Label size='mini' basic color=\"red\" >Action Required </Label>}\r\n        {taskAction &&\r\n       <>\r\n         <Label size='mini' basic color=\"green\" >{taskAction} </Label>\r\n         <Label as=\"a\" size='mini' basic color='yellow'\r\n           onClick = {(e) => undoButtonClick(e)}> <Icon name='undo'/> Undo Action\r\n         </Label>\r\n       </>\r\n        }\r\n\r\n\r\n      </div>)\r\n  }\r\n\r\n  return(\r\n    <>\r\n      <Divider></Divider>\r\n      {disabled &&\r\n       <TaskStatusBar></TaskStatusBar>\r\n      }\r\n\r\n      <Form.Group style={{ marginBottom:'0px' }}>\r\n\r\n\r\n        <label style={{ display: 'inline-block', padding: '0.9375em 0px 0px 0.3125em', width:'1.5625em' }}>{label+1}</label>\r\n\r\n        <TextAreaField  name= {`${name}.description`} readOnly={disabled} rows ='1' width='16'></TextAreaField>\r\n\r\n        <Button\r\n          type='button'\r\n          circular\r\n          icon='cancel'\r\n          style= {{ visibility: disabled?'hidden':'',height:'fit-content' }}\r\n          basic\r\n          onClick = {(e) => removeButtonClick(e)}/>\r\n\r\n\r\n\r\n      </Form.Group>\r\n\r\n      {!disabled &&\r\n      <div style={{ padding:'0.5em 1.5em' }}>\r\n        <ErrorMessage name = {`${name}.action`} pointing='below' ></ErrorMessage>\r\n        <Form.Group>\r\n          <Form.Checkbox\r\n            checked ={ taskAction === 'CLOSED' }\r\n            label=\"closed\" onChange = {(e,{ checked }) => actionCloseCheckBoxClick(e,checked)}/>\r\n          <Form.Checkbox\r\n            checked ={ taskAction === 'DEFERRED'  || taskAction === 'OPEN'}\r\n            label=\"Is Open Task\" onChange = {(e,{ checked }) => actionOpenCheckBoxClick(e,checked)}/>\r\n          <Form.Checkbox\r\n            label=\"Action Required\"\r\n            checked= {taskAction === 'DEFERRED' }\r\n            onChange = {(e,{ checked }) => actionDeferCheckBoxClick (e,checked) }/>\r\n        </Form.Group>\r\n\r\n      </div> }\r\n\r\n      {disabled &&  taskAction !== 'CLOSED' && taskAction !== 'DEFERRED' &&\r\n\r\n\r\n      <div style={{ margin:'0px 3.125em 0.625em 1.5em' }}>\r\n        <Label style={{ backgroundColor:'transparent',color:'#2185d0' }} as=\"a\" size='medium'  onClick = {() => {\r\n          setOpenDetail(true)\r\n        }}> View Action History   <Icon  link name =\"history\"/> </Label>\r\n\r\n        <TaskModal open= {openDetail} setOpen = {setOpenDetail} task= {task}> </TaskModal>\r\n\r\n        <ErrorMessage name = {`${name}.action`} pointing='below' ></ErrorMessage>\r\n        <div>\r\n          <Button size='mini'\r\n            type='button'\r\n            onClick = {(e) => toggleNotes(e)}> {noteFieldVisibile?'Hide Notes' : taskNotes?'Show Notes':'Add Notes'}</Button>\r\n          <Button.Group size='mini'>\r\n            <Button type='button'\r\n              size='mini' positive\r\n              value= 'CLOSED'\r\n              onClick = {(e,{ value }) => actionButtonClick(e,value)}>Close Task</Button>\r\n\r\n            <Button.Or size='mini' />\r\n            <Button  type='button'\r\n              size='mini' negative\r\n              value= 'DEFERRED'\r\n              onClick = {(e,{ value }) => actionButtonClick(e,value)}> Defer Task to next Shift</Button>\r\n          </Button.Group>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      }\r\n      <TextAreaField rows='1'\r\n        readOnly = {taskAction && taskAction !== 'NOTES_ADDED' ? true:false}\r\n        hidden= {!noteFieldVisibile}\r\n        style= {{ paddingBotton:'0.3125em',margin:'0px 3.125em 0.625em 1.5em'  }}\r\n        name={`${name}.newNote`  }\r\n        width='14'\r\n        onChange= {(e,{ value }) => {\r\n          if(value.trim() !== ''){\r\n            setFieldValue(`${name}.newNote`,value)\r\n            if (!taskAction){\r\n              setFieldValue(`${name}.action`,'NOTES_ADDED')\r\n            }\r\n\r\n          }else{\r\n            setFieldValue(`${name}.newNote`,'')\r\n            if (taskAction  === 'NOTES_ADDED'){\r\n              setFieldValue(`${name}.action`,'')\r\n\r\n            }\r\n\r\n          }\r\n\r\n        }}/>\r\n\r\n\r\n    </>\r\n  )\r\n\r\n}\r\n\r\nexport default TaskForm","import React from 'react'\nimport { FieldArray } from 'formik'\nimport TaskForm from './TaskForm'\nimport { Button, Icon } from 'semantic-ui-react'\n\n\nconst TaskForms = ({ tasksIdentifier,tasks,taskCategory,onRemove,aircraftId }) => {\n\n  const newTaskField = () => {\n    const newTaskField = { description:'',status:'',action:'',taskCategory: tasksIdentifier }\n    if(taskCategory && taskCategory === 'AIRCRAFT'){\n      newTaskField.aircraft = aircraftId\n      newTaskField.taskCategory = taskCategory\n    }\n\n    return newTaskField\n\n  }\n\n  return  <FieldArray name={`tasks.${tasksIdentifier}`}>\n    {({ push,remove }) => (<>\n      {tasks && tasks.map((task,index) =>\n        <TaskForm key={index}\n          label= {index}\n          task = {task}\n          name={`tasks.${tasksIdentifier}.${index}`}\n          //The input Field is disabled if the task is open or deferred from previous shifts implied by task.id field\n          disabled = {task.id && (task.status === 'DEFERRED' || task.status==='OPEN')}\n          onRemove = {\n            () => {\n              if(onRemove) onRemove()\n              remove(index)\n            }\n          }\n        >\n        </TaskForm>\n      )}\n\n      {/**\n       * Add new row button\n       */}\n      <Button\n        type='button'\n        icon\n        style={{ marginLeft:'10px' }}\n        primary\n        onClick={ (e) => push (newTaskField())\n        }>\n        <Icon name=\"plus circle\"/> Add\n      </Button>\n    </>)}\n  </FieldArray>}\n\nexport default TaskForms","import React, { Fragment, useState } from 'react'\nimport { Header, Confirm } from 'semantic-ui-react'\nimport { AircraftCheckBox } from './FormFields'\nimport { useFormikContext } from 'formik'\nimport TaskForms from './TaskForms'\n\nconst AircraftSelectionForm = ({ costumers,setCheckedAircrafts,checkedAircrafts,values }) => {\n  const { setFieldValue } = useFormikContext()\n  const [confirmOpen,setConfirmOpen] = useState ({ open:false,aircraft:'',event:'' })\n\n  return (<>\n    {costumers && costumers.map(costumer =>\n      <Fragment key= {costumer.name }>\n        <Header as=\"h3\">Work Performed for {costumer.name}</Header>\n\n\n        {costumer.aircrafts.map(aircraft =>\n\n          <Fragment key={aircraft.id}>\n            <AircraftCheckBox\n              label = {aircraft.registration}\n\n              // If the aircaft registration is on the checked list the checkbox should be checked\n              checked = {checkedAircrafts[aircraft.registration]&& checkedAircrafts[aircraft.registration]['checked']}\n\n              //If the aircraft reistration is on the checked list and is disabled the checkbox is disabled\n              disabled = {checkedAircrafts[aircraft.registration]&& checkedAircrafts[aircraft.registration]['disbleCheck']}\n\n              onChange={\n                (e,{ checked }) =>  {\n                  e.preventDefault()\n                  //if the aircraft is checked by user it should initalize with a taskarea input\n                  if(checked && (!values.tasks[aircraft.registration] || values.tasks[aircraft.registration].length === 0) ){\n                    setCheckedAircrafts({ ...checkedAircrafts,[aircraft.registration]:{ 'checked':checked } })\n                    setFieldValue(`tasks.${aircraft.registration}`,[{ description:'',status:'' ,action:'',taskCategory:'AIRCRAFT' ,aircraft: aircraft.id }])\n                  }\n                  if(!checked) {\n                    if(values.tasks[aircraft.registration].length >0 ){\n                      setConfirmOpen({ open:true, aircraft:aircraft.registration })\n                    }\n                  }\n                }\n\n              }>\n\n\n              {/**\n              * If Unchecked diaplay all task will be erased warning\n              */}\n              <Confirm\n                open = {confirmOpen.open}\n                header = {`Uncheck Aircraft ${confirmOpen.aircraft}`}\n                content= {'Are you sure you want to uncheck this aircraft? Doing so will remove all the entered tasks for this Aircraft'}\n                onCancel = { () => {\n                  setConfirmOpen({ open:false })\n                }}\n                onConfirm = { () => {\n                  setFieldValue(`tasks.${confirmOpen.aircraft}`,null)\n                  setCheckedAircrafts({ ...checkedAircrafts,[confirmOpen.aircraft]:{ 'checked':false } })\n                  setConfirmOpen({ open:false })\n                }}\n              />\n\n              {checkedAircrafts[aircraft.registration]&& checkedAircrafts[aircraft.registration]['checked'] &&\n              <TaskForms\n                tasksIdentifier={aircraft.registration}\n                tasks={values.tasks[aircraft.registration]}\n                taskCategory= 'AIRCRAFT'\n                aircraftId = {aircraft.id}\n                onRemove = {\n                  () => {\n                    /**\n                     * If the last remaining task is removed then the aircraft chekbox should uncheck\n                     */\n                    if(values.tasks[aircraft.registration].length===1){\n                      setCheckedAircrafts({ ...checkedAircrafts,[aircraft.registration]:{ 'checked':false } })\n                    }\n\n                  }}\n              ></TaskForms>\n              }\n            </AircraftCheckBox>\n\n          </Fragment>\n        )}\n\n\n      </Fragment>)}\n  </>\n\n  )\n}\n\nexport default AircraftSelectionForm","import React, { useState, useEffect } from 'react'\nimport { Modal,Grid,Header,Form ,Divider,Segment ,Icon,Button,Message, FormGroup, FormField, Dimmer,Loader } from 'semantic-ui-react'\nimport { DateInputField, InputField } from './FormFields'\nimport { operateDate, formatDate } from '../../../utils/DateHelper'\nimport { useFormikContext, Formik } from 'formik'\nimport { validateEmail, validateName, validateStartEndTime } from './validator'\nimport { SIGN_OFF_SHIFT } from '../../../mutations/timeSheetMutation'\nimport { useMutation } from '@apollo/client'\nimport _ from 'lodash'\n\n\nconst  StaffAddModel = ({ setOpen,open ,e }) => {\n\n  const{ getFieldMeta,setFieldValue } = useFormikContext()\n\n  const [signOff,{ loading, error, data }] = useMutation(SIGN_OFF_SHIFT)\n\n  const shiftStartTime = getFieldMeta('startTime').value\n  const shiftEndTime = getFieldMeta('endTime').value\n  const [notifyResult,setNotifyResult] = useState('')\n  const [username,setUsername] = useState('')\n  const [password,setPassword] = useState('')\n  const [startTime,setStartTime] = useState(shiftStartTime)\n  const [endTime,setEndTime] = useState(shiftEndTime)\n  const [breakt,setBreakt] = useState('30')\n  const [registerUserOpen,setRegisterUserOpen]= useState(false)\n  const [forgotPasswordOpen,setForgotPasswordOpen] = useState(false)\n\n  useEffect(() => {\n    setStartTime(shiftStartTime)\n    setEndTime(shiftEndTime)\n  },[shiftEndTime, shiftStartTime])\n\n\n  useEffect (() => {\n    /**If the staff sign off is not sucessfull */\n    if(error){\n      if(registerUserOpen){\n        setNotifyResult({ type: 'error', message:`Failed to register user. ${error.message}` })\n      }if(forgotPasswordOpen){\n        setNotifyResult({ type: 'error', message:`Failed to reset password. ${error.message}` })\n      }\n      else{\n        setNotifyResult({ type: 'error', message:`Failed to add user. ${error.message}` })\n      }\n    }\n    /**\n     * If the staff signoff is successFull\n     */\n    if(data && data.signOffTimeSheet != null ){\n      /**\n       * Check if the staff is alrady added if so notify user to remove old entry\n       */\n      const staffs= getFieldMeta('staffs').value\n      if(_.find(staffs,{ id:data.signOffTimeSheet.id })){\n\n        setNotifyResult({ type: 'error', message: `${data.signOffTimeSheet.name} is already exist on report` } )\n\n      }else {\n        const addedStaff = [...staffs,{ name:data.signOffTimeSheet.name, startTime:data.signOffTimeSheet.startTime, endTime: data.signOffTimeSheet.endTime ,signOffKey:data.signOffTimeSheet.value ,id: data.signOffTimeSheet.id, break: data.signOffTimeSheet.break }]\n        setFieldValue('staffs', addedStaff)\n\n        if(registerUserOpen){\n\n          setNotifyResult({ type: 'success', message:`${data.signOffTimeSheet.name} is added to report.<br/> Further registration instruction sent to email. Please complete registration within 48 hours` })\n          setRegisterUserOpen(false)\n\n        }if(forgotPasswordOpen){\n          setNotifyResult({ type: 'success', message:`${data.signOffTimeSheet.name} is added to report <br/> Password reset link sent to email.`  })\n          setForgotPasswordOpen(false)\n        }\n        else{\n          setNotifyResult({ type: 'success', message: `${data.signOffTimeSheet.name} is added to report` } )\n        }\n      }\n\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[error, data])\n\n\n\n\n\n  const submit = async (values) => {\n\n    let signOffData\n\n    if(registerUserOpen){\n      signOffData = {  startTime:values.startTime ,endTime:values.endTime , break:parseInt(breakt), email: values.email, name: values.fullname ,additionalAction:'register' }\n    }\n    else if(forgotPasswordOpen){\n      signOffData = { startTime:values.startTime ,endTime:values.endTime ,break:parseInt(breakt), email:values.resetEmail,additionalAction:'reset' }\n    }else {\n      signOffData = { startTime:values.startTime ,endTime: values.endTime ,break:parseInt(breakt), username: username, password: password }\n    }\n    await signOff({ variables:signOffData })\n  }\n\n  const renderAlert = () => {\n    if(!notifyResult) return null\n    return(\n      <Message\n        success = {notifyResult.type === 'success'}\n        error = {notifyResult.type === 'error'}\n        onDismiss = {() => setNotifyResult('')\n        }\n      > {notifyResult.message}\n      </Message>)\n\n\n  }\n  const renderNewUserInput = (values) => {\n\n    return(\n\n      <Segment basic>\n        <Message positive>\n          <Message.Header>Register info</Message.Header>\n\n            Please enter following information to add yourself to shift . Registraion instruction will be forwarded to you on the provided email.\n            It is important that you register as soon as possible.\n        </Message>\n\n        <Message warning visible>\n          <Message.Header>Attention!!</Message.Header>\n        Your info will be added to report automatically after this step, make sure you enter your name and work time correctly\n        </Message>\n        <Form.Group>\n          <InputField width= '12' name ='fullname' label='Full Name' />\n          <InputField width= '12' name = 'email' label = 'Email Address'/>\n        </Form.Group>\n        <FormGroup>\n          <Button  positive >Register</Button>\n          <Button type='button' negative onClick ={() => setRegisterUserOpen(false)}>Cancel</Button>\n        </FormGroup>\n\n\n      </Segment>\n    )\n  }\n\n  const renderForgotPassword = (values) => {\n    return(\n      <Segment basic>\n        <Message warning visible>\n          <Message.Header>Reset Password</Message.Header>\n            Please enter your email address used while creating account.\n        </Message>\n\n        <Message warning visible>\n          <Message.Header>Attention!!</Message.Header>\n        Your info will be added to report automatically after this step, make sure you <strong>Enter your work time correctly</strong>\n        </Message>\n\n        <InputField width= '12' name = 'resetEmail'label = 'Email Address'/>\n        <FormGroup>\n          <Button  primary >Reset</Button>\n          <Button  negative onClick ={() => setForgotPasswordOpen(false)}>Cancel</Button>\n        </FormGroup>\n      </Segment>\n    )\n  }\n\n\n  if(loading){\n    return<Dimmer active inverted>\n      <Loader active inverted>Veryfing User</Loader>\n    </Dimmer>\n  }\n\n  return (\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {open}\n      onClose= {() => {\n        setForgotPasswordOpen(false)\n        setRegisterUserOpen(false)\n        setNotifyResult(false)\n        setOpen(false)}}\n      onOpen= {() => setOpen (true)}\n    >\n      <Modal.Header>Add User to Shift </Modal.Header>\n      <Modal.Content>\n\n        {notifyResult &&\n         renderAlert()\n        }\n\n        <Formik\n          enableReinitialize\n          initialValues = {{\n            startTime: startTime,\n            endTime: endTime,\n            breakt:breakt,\n            username:'',\n            password:'',\n            email:'',\n            fullname:'',\n            resetEmail:''\n          }}\n\n          validate = {values => {\n            let errors = {}\n            errors = { ...errors,...validateStartEndTime(values.startTime,values.endTime) }\n\n            if(forgotPasswordOpen){\n              let emailError = validateEmail(values.resetEmail)\n              if(emailError) errors.resetEmail = emailError\n            }\n            if(registerUserOpen){\n              let emailError = validateEmail(values.email)\n              if(emailError) errors.email = emailError\n\n              let usernameError = validateName(values.fullname)\n              if(usernameError) errors.fullname = usernameError\n\n            }\n            return errors\n          } }\n\n          onSubmit = {(values) =>\n          {\n            submit(values)}\n          }\n\n\n        >\n\n\n          {({ values,handleSubmit,errors,touched }) =>\n\n            <Form size='large' onSubmit = { handleSubmit} >\n              <Form.Group >\n\n                < DateInputField\n                  label= 'Start Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name ='startTime'\n                  maxDate = {operateDate(Date.now(),30,'m','sub')}\n                  minDate= {operateDate(Date.now(),20,'h','sub')}\n                  onChange = {(e,{ value }) => {\n                    setStartTime(value)}\n                  }\n                />\n\n\n                < DateInputField\n                  label = 'End Time'\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\n                  name='endTime'\n                  maxDate = {formatDate(Date.now())}\n                  minDate= {operateDate(startTime,20,'m','add')}\n                  onChange = {(e,{ value }) => {\n                    setEndTime(value)}\n                  }/>\n\n                <InputField\n                  inputlabel= 'Break'\n                  label = 'Minutes '\n                  labelPosition='right corner'\n                  name= 'breakt'\n                  type='number'\n                  min='0'\n                  onChange = {(e,{ value }) => {\n                    setBreakt(value)}\n                  }>\n                </InputField>\n\n\n\n              </Form.Group>\n\n              <Header as='h5' color='blue' textAlign='center'>\n\n              </Header>\n\n              {!registerUserOpen && !forgotPasswordOpen &&\n\n\n            <>\n              <Segment >\n\n                <Grid columns={2} stackable >\n                  <Divider vertical>Or</Divider>\n                  <Grid.Row verticalAlign='middle'>\n                    <Grid.Column>\n                      <Grid.Row style={{ textAlign:'center' }}>\n                        <Header as ='h5' icon>\n                          <Icon name='sign in alternate' />\n                    Use Credentials\n                        </Header>\n                      </Grid.Row>\n                      <Grid.Row>\n                        <Form.Group>\n                          <Form.Input label='Username' onChange= {(e,{ value }) => setUsername(value)}></Form.Input>\n                          <Form.Input label= 'Password' type='password' onChange= {(e,{ value }) => setPassword(value)}></Form.Input>\n                        </Form.Group>\n                        <Form.Field style={{ textAlign:'center' }}>\n                          <Button type='submit' primary > Sign </Button>\n                        </Form.Field>\n                        <Form.Field style={{ textAlign:'center' }}>\n                          <Button size='tiny' onClick={() => setForgotPasswordOpen(true)}>Forgot Password</Button>\n                        </Form.Field>\n                      </Grid.Row>\n                    </Grid.Column>\n\n                    <Grid.Column textAlign='center'>\n                      <Grid.Row >\n                        <Header icon>\n                          <Icon name='barcode' size='massive' />\n                  Use IdCard\n                        </Header>\n                      </Grid.Row>\n                      <Grid.Row><Button primary>Scan</Button></Grid.Row>\n\n                    </Grid.Column>\n                  </Grid.Row>\n                </Grid>\n\n              </Segment>\n              <FormField style={{ textAlign:'center' }}>\n                <label> If you do not have a account yet, contact your supervisor or click below.</label>\n                <Button type='button' onClick={() => setRegisterUserOpen(true)}> New User </Button>\n              </FormField>\n            </>\n              }\n\n\n              {registerUserOpen && renderNewUserInput( values)}\n              {forgotPasswordOpen && renderForgotPassword(values)}\n            </Form>}\n        </Formik>\n      </Modal.Content>\n\n    </Modal>\n\n\n  )\n}\n\nexport default StaffAddModel","import { gql } from '@apollo/client'\r\nexport const SUBMIT_REPORT = gql`\r\n  mutation submitReport($station: String!, $shift:String! , $startTime: String! ,$endTime: String!, $tasks: [ShiftReportTask]! , $staffs: [ShiftReportStaffs!]! ) { \r\n  submitShiftReport(\r\n    station:$station\r\n    shift:$shift\r\n    startTime: $startTime\r\n    endTime: $endTime\r\n    tasks:$tasks\r\n    staffs: $staffs\r\n  ){\r\n    endTime\r\n    id\r\n    shift\r\n    staffAndTime {\r\n      id\r\n      staff {\r\n        name\r\n      }\r\n      endTime\r\n      startTime\r\n    }\r\n    startTime\r\n    station {\r\n      location\r\n      id\r\n    }\r\n    tasks {\r\n      aircraft {\r\n        registration\r\n        id\r\n        costumer {\r\n          name\r\n        }\r\n      }\r\n      taskCategory\r\n      description\r\n      id\r\n      status\r\n      updates {\r\n        action\r\n        handoverId \r\n        handoverDetail\r\n        note\r\n      }\r\n      \r\n    }\r\n  } \r\n}\r\n`","import React, { useState, useContext, useEffect } from 'react'\r\nimport { Formik } from 'formik'\r\nimport Context from '../Context'\r\nimport { Form, Header, Button, Dimmer, Segment, Loader, Message } from 'semantic-ui-react'\r\nimport { DateInputField } from './FormFields'\r\nimport { validateStaffsField, validateStartEndTime, validateTasks } from './validator'\r\nimport { formatDate, operateDate, toDate } from '../../../utils/DateHelper'\r\nimport _ from 'lodash'\r\nimport StaffForms from './StaffForms'\r\nimport AircraftSelectionForm from './AircraftSelectionForm'\r\nimport TaskForms from './TaskForms'\r\nimport StaffAddModel from './StaffAddModel'\r\nimport { useMutation } from '@apollo/client'\r\nimport { SUBMIT_REPORT } from '../../../mutations/submitShiftReport'\r\nimport { GET_SHIFT_REPORT } from '../../../queries/shiftReportQuery'\r\nimport { NotificationContext } from '../../../contexts/NotificationContext'\r\nimport { Persist } from 'formik-persist'\r\n\r\nconst NewReportForm = ({ setActiveItem }) => {\r\n  const context = useContext(Context)\r\n  const[,dispatch] = useContext(NotificationContext)\r\n  const station = context.state.station\r\n  const reportData = context.state.lastShiftReport\r\n\r\n  const [openAddStaffModel,setOpenAddStaffModel] = useState (false)\r\n\r\n  // costumers assigned to this station\r\n  const [costumers,setCostumers] = useState(station.costumers)\r\n\r\n  const [checkedAircrafts, setCheckedAircrafts] = useState({})\r\n  const init = {\r\n    startTime:'', //default shift starttime\r\n    endTime:'',\r\n    staffs:[],\r\n    tasks:{}\r\n  }\r\n  const [initialFields,setInitialFields] = useState(init)\r\n\r\n  const [submitReport,{ loading ,error }] = useMutation(SUBMIT_REPORT,{\r\n    update(store,result) {\r\n      const data = { getShiftReport: result.data.submitShiftReport }\r\n      store.writeQuery(\r\n        { query: GET_SHIFT_REPORT ,\r\n          variables:{\r\n            station: station.id,\r\n            flag:'MOST_RECENTLY_COMPLETED'\r\n          },\r\n          data\r\n        }\r\n      )\r\n    },\r\n\r\n    onCompleted: () => {\r\n      localStorage.clear(reportData.id) /**Clearing persisted form */\r\n      setActiveItem('lastShiftReport')\r\n    },\r\n\r\n    onError: (error) => {\r\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: error.message ,type: 'ERROR' } })\r\n    }\r\n  })\r\n\r\n  /**Function to get the shift name based on start time */\r\n  const getShiftName = (startTime) => {\r\n    const sdt = new Date(toDate(startTime))\r\n    const shiftName = station.shifts.reduce((p,c) => {\r\n      /**Setting the shiftTime to given startTime for comparision  */\r\n      const splitSt = c.startTime.split(':')\r\n      const st = new Date(sdt)\r\n      st.setHours(splitSt[0])\r\n      st.setMinutes(splitSt[1])\r\n      /** Diffence between given startTIme and shift startttime */\r\n      const diff = (sdt-st)/(60*60*1000)\r\n      /**return the lowest positive diffence if exist or highest negative differnce*/\r\n      if((diff > p.diff && p.diff < 0) ){\r\n        return { name: c.name ,diff: diff }\r\n      }\r\n      if(diff > 0 && diff< p.diff){\r\n        return { name: c.name ,diff: diff }\r\n      }\r\n      return p\r\n    },{ name:'',diff:-24 })\r\n    return shiftName.name\r\n  }\r\n\r\n  useEffect (() => {\r\n    //initial aircraft list from last shift report\r\n    let list = {}\r\n    //initial task list from last shift report\r\n    let taskList = {}\r\n    let costumerList = []\r\n\r\n    // eslint-disable-next-line array-callback-return\r\n    reportData && reportData.tasks && reportData.tasks.map(task =>  {\r\n      if( (task.status==='DEFERRED' || task.status==='OPEN') ){\r\n        // Initial field for deferred or open tasks\r\n        const simplifiedTask = { id:task.id, aircraft:task.aircraft, description:task.description, status:task.status ,updates: task.updates ,action:'', newNote:'',taskCategory:task.taskCategory }\r\n\r\n        //From the last shift report if the task is aircraft tasks aircraft has open tasks it is checked by default and cannot be disabled\r\n        if(task.aircraft) {\r\n          list[task.aircraft.registration] = { checked:true,disbleCheck:true }\r\n        }\r\n\r\n        //arranging tasks based on aircraft registration\r\n        if(task.aircraft && taskList[task.aircraft.registration]){\r\n          taskList[task.aircraft.registration].push( { ...simplifiedTask })\r\n\r\n        }else if (task.aircraft){\r\n          taskList[task.aircraft.registration] = [ { ...simplifiedTask }]\r\n\r\n        }else{\r\n          if(taskList[task.taskCategory]){\r\n            taskList[task.taskCategory].push(simplifiedTask)\r\n          }else{\r\n            taskList[task.taskCategory] = [simplifiedTask]\r\n          }\r\n\r\n\r\n        }\r\n\r\n        //if there is a task from a costumer who is not this station costumer list we add that arcraft & costumer to list\r\n        if(task.aircraft){\r\n          /**Check if there is a match with station costumers */\r\n          if(! _.find( station.costumers,_.matchesProperty('name',task.aircraft.costumer.name))){\r\n            /**Check if the costumer name is already added to the extra costumer list */\r\n            const exisitingItem = _.find( costumerList,_.matchesProperty('name',task.aircraft.costumer.name))\r\n            if( !exisitingItem ){\r\n              costumerList.push({ name:task.aircraft.costumer.name,aircrafts:[{ registration:task.aircraft.registration,id: task.aircraft.id }] })\r\n            }else{\r\n              const aircraftInList= exisitingItem.aircrafts.some(aircraft => aircraft.registration === task.aircraft.registration )\r\n              if(!aircraftInList){\r\n                exisitingItem.aircrafts.push({ registration:task.aircraft.registration , id: task.aircraft.id })\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    )\r\n\r\n    setCostumers([...costumers,...costumerList])\r\n\r\n    //Set initail form values based on shiftreport\r\n    setInitialFields({ ...initialFields,tasks:taskList })\r\n    setCheckedAircrafts(list)\r\n\r\n  }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  ,[])\r\n\r\n  /**Format submit data  before submit*/\r\n  const beforeSubmit = (formdata) => {\r\n    let submitData = { station: station.id , staffs: formdata.staffs, startTime:formdata.startTime, endTime: formdata.endTime, tasks:{} }\r\n\r\n    /**Reduce the tasks to be only array of tasks */\r\n    const updatedTasks =  _.reduce(formdata.tasks, (tasks,tasksByIdentifier,identifier) => {\r\n      let taskList = _.map(tasksByIdentifier, (task,index) => {\r\n        let initialTask\r\n        /**Compare the task with the initial tasks, reduce to only include the changes */\r\n        if(initialFields.tasks[identifier] && initialFields.tasks[identifier][index]){\r\n          initialTask = initialFields.tasks[identifier] && initialFields.tasks[identifier][index]\r\n          const difference = Object.keys(initialTask).filter(k => initialTask[k] !== task[k])\r\n\r\n          /**If no changes return null */\r\n          if(!difference) return null\r\n          const reducedTask = difference.reduce((p,c) => p[c] = { ...p,[c]:task[c] },{})\r\n          task = { id: task.id, ...reducedTask }\r\n\r\n          /**\r\n           * If form is loaded from persist then task is compred against so removing the nonessential fields */\r\n          delete(task.aircraft)\r\n          delete(task.updates)\r\n\r\n        }\r\n\r\n        return task\r\n      })\r\n\r\n      /**remove null tasks */\r\n      taskList = taskList.filter(task => task !== null)\r\n\r\n      return [...tasks,...taskList]\r\n    },[])\r\n\r\n\r\n    /**Only include staff signoff Key and name */\r\n    const staffs = formdata.staffs.map((staff) => {return { signOffKey: staff.signOffKey, name:staff.name }})\r\n\r\n    submitData = { ...submitData,tasks: updatedTasks, staffs: staffs ,shift: getShiftName(formdata.startTime) }\r\n\r\n    return submitData\r\n\r\n  }\r\n\r\n  if(loading) {\r\n    return(\r\n      <Segment style={{ height:'10rem' }} basic size='huge'>\r\n        <Dimmer active inverted>\r\n          <Loader inverted>Submitting Data</Loader>\r\n        </Dimmer>\r\n      </Segment>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues = {initialFields}\r\n        validate = { values => {\r\n          let errors = {}\r\n          errors = { ...errors,...validateStartEndTime(values.startTime,values.endTime) }\r\n          const staffErrors = validateStaffsField(values.staffs)\r\n          const taskErrors = validateTasks(values.tasks)\r\n\r\n          if(!_.isEmpty(taskErrors) ) errors.tasks = taskErrors\r\n          if(!_.isEmpty(staffErrors) ) errors.staffs = staffErrors\r\n\r\n          return errors\r\n\r\n        }}\r\n        onSubmit={(values) => {\r\n          const submitData = beforeSubmit(values)\r\n          submitReport({ variables: submitData })\r\n\r\n        }}\r\n      >\r\n\r\n        {({ values,handleSubmit,errors,touched,submitCount }) =>\r\n          <>\r\n            <Form onSubmit = {(e) => {\r\n              e.preventDefault()\r\n              handleSubmit()\r\n            }}>\r\n              {/*Shift start end times*/}\r\n              <Form.Group >\r\n                <DateInputField\r\n                  label = \"Shift Start Time\"\r\n                  name='startTime'\r\n                  maxDate = {operateDate(Date.now(),30,'m','sub')}\r\n                  minDate= {operateDate(Date.now(),20,'h','sub')}/>\r\n\r\n                <DateInputField\r\n                  label = \"Shift End Time\"\r\n                  name='endTime'\r\n                  maxDate = {formatDate(Date.now())}\r\n                  minDate= {operateDate(values.startTime,20,'m','add')}/>\r\n              </Form.Group>\r\n\r\n              {/*Dynamic Input fields for staff Information*/}\r\n              <StaffForms values={values} touched={touched} errors={errors} addStaffOpen =  {setOpenAddStaffModel}/>\r\n\r\n              {/*Dynamic Input fields for Aircraft Tasks*/}\r\n              <AircraftSelectionForm costumers ={costumers} checkedAircrafts={checkedAircrafts} setCheckedAircrafts= {setCheckedAircrafts} values={values} />\r\n\r\n              {/*Dynamic Input fields for Other Tasks*/}\r\n              <Header as=\"h3\">Other Tasks</Header>\r\n              <TaskForms tasksIdentifier = 'OTHER' tasks = {values.tasks.OTHER}> </TaskForms>\r\n\r\n              {/*Dynamic Input fields for Other Tasks*/}\r\n              <Header as=\"h3\">Logistics Task</Header>\r\n              <TaskForms tasksIdentifier = 'LOGISTICS' tasks = {values.tasks.LOGISTICS}> </TaskForms>\r\n\r\n              <Message\r\n                error\r\n                content={\r\n                  <>\r\n                    <Header as='h5'>There are some errors on the report <Header.Subheader>Please fix the errors before trying again</Header.Subheader></Header>\r\n                    {error &&\r\n                  <p>{error.message}</p>}\r\n                  </>\r\n\r\n                }\r\n                visible ={(!_.isEmpty(errors) && submitCount > 0) || error}\r\n              />\r\n\r\n              <Message\r\n                success\r\n                content={\r\n                  <Header as='h5'>Great! Everything seems to be fixed <Header.Subheader>Please, proceed to submit whenever ready</Header.Subheader></Header>\r\n                }\r\n                visible ={(_.isEmpty(errors) && submitCount > 0 ) && !error}\r\n              />\r\n\r\n              <Segment disabled = {!_.isEmpty(errors) && submitCount > 0} color='blue' inverted tertiary clearing>\r\n                <Button floated='right' type=\"submit\" primary> Submit Report </Button>\r\n              </Segment>\r\n\r\n              <Persist name={reportData.id} />\r\n            </Form>\r\n            <StaffAddModel setOpen= {setOpenAddStaffModel} open= {openAddStaffModel} shiftStartTime = {values.startTime} shiftEndTime={values.endTime}></StaffAddModel></>}\r\n\r\n\r\n      </Formik>\r\n\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default NewReportForm","import { gql } from '@apollo/client'\n\nexport const ADD_COSTUMER = gql`\nmutation addnewCostumer( $name: String! $stations: [String], $keyContacts: [ContactInput], $contract: String! ,$aircrafts: [String]){\n  addCostumer(\n    name: $name\n    stations: $stations\n    keyContacts: $keyContacts\n    aircrafts: $aircrafts\n    contract: $contract){\n      name\n      id\n      contract\n      aircrafts{\n        id\n        registration\n      }\n      stations{\n        id\n      }\n    }\n}`\n\nexport const ADD_AIRCRFAT = gql`\nmutation addAircrafttoCostumer( $registration: [String!]! $costumer: String!){\n  addAircrafts(\n    registration: $registration\n    costumer: $costumer\n    ){\n      id\n      registration\n    }\n}`\n\nexport const ADD_CONTACT = gql`\nmutation addContactCostumer( $keyContacts: [ContactInput!]! , $costumer: String!){\n  addContact(\n    keyContacts: $keyContacts\n    costumer: $costumer\n    ){      \n        id\n        description\n        email\n        phone   \n    }\n}`\n\nexport const ADD_STATION_TO_COSTUMER = gql`\nmutation addStationCostumer( $stations: [String!]! , $costumer: String){\n  addStationsToCostumer(\n    stations: $stations\n    costumer: $costumer\n    ){\n      id\n      stations{\n        id\n        location\n      }\n    }\n}`\n\nexport const REMOVE_AIRCRFAT = gql`\nmutation removeAircraft( $id: String!){\n  removeAircraft(\n    id: $id\n    ){\n      status\n      message\n    }\n}`\n\nexport const REMOVE_CONTACT = gql`\nmutation removeContactCostumer( $id: String! , $costumer: String){\n  removeContact(\n    id: $id\n    costumer: $costumer\n    ){\n      status\n      message\n    }\n}`\n\nexport const REMOVE_COSTUMER_FROM_STATION = gql`\nmutation removeStationCostumer( $station: String! , $costumer: String){\n  removeCostumerStation(\n    station: $station\n    costumer: $costumer\n    ){\n      status\n      message\n    }\n}`\n\nexport const DELETE_COSTUMER = gql`\nmutation deleteCostumer( $costumer: String){\n  deleteCostumer(\n    costumer: $costumer\n    ){\n      status\n      message\n    }\n}`","import { gql } from '@apollo/client'\nexport const ALL_COSTUMERS = gql`\nquery fetchAllCostumers ($detailed: Boolean = false) {\n    allCostumers {\n      name\n      id\n      stations  @include(if: $detailed) {\n        id\n        location\n      }\n      contract @include(if: $detailed)\n      aircrafts @include(if: $detailed) {\n        id\n        registration\n      }\n    }\n  }\n`\n\nexport const VERIFY_REGISTRATION = gql`\nquery verifyReg ($registrations:String!){\n  verifyAircraftRegistration(registrations: $registrations)\n}\n`\n\nexport const GET_COSTUMER = gql ` \nquery getCostumerId ($id:String){\n  getCostumer(\n    id:$id\n  ){\n    name\n    id \n    stations{\n      id\n      location\n      address{\n        street\n        postcode\n        city\n        country\n      }\n    }\n    aircrafts{\n      id\n      registration\n    }\n    contract\n    keyContacts{\n      id\n      phone\n      description\n      email\n    }\n\n\n  }\n}\n\n`","import React from 'react'\nimport { Button, Modal } from 'semantic-ui-react'\n\nconst ConfirmModal = ({ confirm , setOpen , open }) => {\n  return(\n    <Modal\n      open= {open}\n      closeOnEscape= {false}\n      closeOnDimmerClick={false}\n    >\n      <Modal.Header >Confirm</Modal.Header>\n      <Modal.Content>{confirm.title}</Modal.Content>\n      <Modal.Actions>\n        <Button positive onClick= {() => {\n          confirm.fn()\n          setOpen(false)\n        }\n        }>Confirm </Button>\n        <Button negative  onClick= {() => setOpen(false)}>Cancel </Button>\n      </Modal.Actions>\n    </Modal>\n  )\n\n}\n\nexport default ConfirmModal","import { gql, useLazyQuery, useMutation } from '@apollo/client'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { ADD_AIRCRFAT } from '../../mutations/costumerMutation'\nimport { forEach } from 'lodash'\nimport { Button, Form, Modal } from 'semantic-ui-react'\nimport { Formik } from 'formik'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { VERIFY_REGISTRATION } from '../../queries/costumerQuey'\n\nconst AddAircraftModal = ({ open ,setOpen ,costumer }) => {\n  const [,dispatch] = useContext(NotificationContext)\n  const [checkAircraftRegistration,{ loading,data }] = useLazyQuery(VERIFY_REGISTRATION)\n  const [duplicateError,setDuplicateError] = useState([])\n  useEffect(() => {\n    if(data){\n      setDuplicateError(data.verifyAircraftRegistration)\n    }\n  }, [data])\n\n  const [addAircrafts] = useMutation (ADD_AIRCRFAT,{\n    update:(store,{ data: { addAircrafts } }) => {\n\n      store.modify({\n        id: `Costumer:${costumer.id}`,\n        fields:{\n          aircrafts(existingAircraftRefs, { readField }) {\n\n            let newAircraftRefs =[]\n\n            forEach(addAircrafts,( aircrafts,i) => {\n              if(existingAircraftRefs.some(ref => readField('id',ref) !== aircrafts.id)){\n                newAircraftRefs.push(store.writeFragment({\n                  data: addAircrafts[i],\n                  fragment: gql`\n                fragment NewAircraft on Aircraft {\n                  id\n                  registration\n                }\n              `\n                }))\n              }\n            })\n            return [...existingAircraftRefs, ...newAircraftRefs]\n          }\n        }\n      })\n    },\n    onCompleted: ({ addAircrafts }) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, aircrafts ${addAircrafts.reduce((p,c) => p+c.registration+ ', ','')}  added` ,type: 'SUCCESS' } })\n      setOpen(false)\n    },\n\n    onerror: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to add aircrafts'}<br/> {err.message}</> ,type: 'ERROR' } })\n      setOpen(false)\n    }\n  })\n\n\n  return(\n\n    <Formik\n      initialValues= {{\n        aircrafts: []\n      }}\n\n      validate = { (values) => {\n\n        const errors = {}\n        if( values.aircrafts.length ){\n          if(!values.aircrafts.match(/^[a-zA-Z, ]+$/)){\n            errors.aircrafts = 'Invalid character detected, check again'\n          }\n\n          const errAircraft =[]\n          forEach(values.aircrafts.split(','), aircraft => {\n            if(aircraft.trim().length < 3) errAircraft.push(aircraft.trim().toUpperCase())\n          })\n          if (errAircraft.length ){\n            errors.aircrafts = `${errAircraft.toString()} invalid Aircraft Registration, should at least 3 characters`\n          }\n\n          /**If no any error then check if the registration is unique */\n          if(!errors.aircrafts){\n            checkAircraftRegistration({ variables:{ registrations: values.aircrafts } })\n            if(duplicateError.length){\n              errors.aircrafts = `Registration ${duplicateError.toString()} already exists.`\n            }\n          }\n\n        }else{\n          errors.aircrafts = 'Enter at least one Aircraft'\n        }\n\n        return errors\n      }\n      }\n      onSubmit= {(values) => {\n        const aircrafts = values.aircrafts.toUpperCase().split(',')\n        addAircrafts({ variables:{  registration: aircrafts, costumer: costumer.id } })\n      }}>\n\n      {({ handleSubmit }) =>\n\n        <Modal\n          open= {open}\n          closeOnEscape= {false}\n          closeOnDimmerClick={false}\n        >\n          <Modal.Header>Select Stations to Add</Modal.Header>\n          <Modal.Content>\n            <Form>\n              <InputField name='aircrafts' label='Aircrafts' type='text' width='8' placeholder='Aircrfat Registrations separeted by comma \",\"'/>\n            </Form>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button type='submit' loading={loading} disabled={loading} positive onClick= { (e) => {\n              e.preventDefault()\n              handleSubmit()\n            }\n            }> Add </Button>\n            <Button type='button' negative onClick = {() => setOpen(false)}> Cancel </Button>\n          </Modal.Actions>\n        </Modal>}\n\n    </Formik>\n\n\n\n\n  )\n\n\n}\n\nexport default AddAircraftModal","import { gql, useMutation } from '@apollo/client'\nimport React, { Fragment, useContext } from 'react'\nimport { ADD_CONTACT } from '../../mutations/costumerMutation'\nimport { forEach } from 'lodash'\nimport { Button, Form, Icon, Modal } from 'semantic-ui-react'\nimport { FieldArray, Formik } from 'formik'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { validateEmail } from '../StationReportPage/NewReportForm/validator'\nimport { NotificationContext } from '../../contexts/NotificationContext'\n\nconst AddContactModal = ({ open ,setOpen ,costumer }) => {\n  const[,dispatch] = useContext(NotificationContext)\n  const [addContacts] = useMutation (ADD_CONTACT,{\n    update:(store,{ data: { addContact } }) => {\n\n      store.modify({\n        id: `Costumer:${costumer.id}`,\n        fields:{\n          keyContacts(existingContactsRefs, { readField }) {\n\n            let newContactRefs =[]\n\n            forEach(addContact,( contact) => {\n              if(existingContactsRefs.some(ref => readField('id',ref) !== contact.id)){\n                newContactRefs.push(store.writeFragment({\n                  data:contact,\n                  fragment: gql`\n                fragment NewContact on Contact {\n                  id\n                  email\n                  phone\n                  description\n                }\n              `\n                }))\n              }\n            })\n            return [...existingContactsRefs, ...newContactRefs]\n          }\n        }\n      })\n    },\n    onCompleted: ({ addContact }) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, contacts added' ,type: 'SUCCESS' } })\n      setOpen(false)\n    },\n\n    onerror: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to add contacts'}<br/> {err.message}</> ,type: 'ERROR' } })\n      setOpen(false)\n    }\n\n  })\n\n  return(\n\n    <Formik\n      initialValues= {{\n        keyContacts: [{ description:'',phone:'' ,email:'' }]\n      }}\n\n      validate = { (values) => {\n\n        const errors = {}\n        if(values.keyContacts.length){\n          forEach(values.keyContacts, (contact,index) => {\n            if(!contact.description){\n              if (!errors.keyContacts) errors.keyContacts=[]\n              if (!errors.keyContacts[index] ) errors.keyContacts[index] = {}\n              errors.keyContacts[index].description = 'Please provide contact description'\n            }\n\n            if(!contact.phone && !contact.email){\n              if (!errors.keyContacts) errors.keyContacts=[]\n              if (!errors.keyContacts[index] ) errors.keyContacts[index] = {}\n\n              errors.keyContacts[index].phone = 'At least a phone or a email is required'\n              errors.keyContacts[index].email = 'At least a phone or a email is required'\n            }\n\n            if(contact.email){\n              if(validateEmail(contact.email)){\n                if (!errors.keyContacts) errors.keyContacts=[]\n                if (!errors.keyContacts[index] ) errors.keyContacts[index] = {}\n                errors.keyContacts[index].email = 'Invalid Email'\n              }\n            }\n\n          }\n          )\n        }\n\n        return errors\n      }\n      }\n      onSubmit= {(values) => {\n\n        addContacts({ variables:{ ...values, costumer: costumer.id } })\n      }}>\n\n      {({ handleSubmit ,values }) =>\n\n        <Modal\n          open= {open}\n          closeOnEscape= {false}\n          closeOnDimmerClick={false}\n        >\n          <Modal.Header>Select Stations to Add</Modal.Header>\n          <Modal.Content>\n            <Form>\n              <FieldArray  name={'keyContacts'}>\n                {({ push,remove }) => (<>\n                  { values.keyContacts.length > 0 && values.keyContacts.map((contact,index) => <Fragment key ={index}>\n                    <Form.Group style={{ margin:0 }} widths='13' ><InputField name={`keyContacts[${index}].description`} label='Description' /><InputField name={`keyContacts[${index}].phone`} label='Phone' /><InputField name={`keyContacts[${index}].email`} label='Email' />\n                      {index !== 0 &&\n                     <Icon\n                       link\n                       name =\"cancel\"\n                       color='red'\n                       onClick={ () => remove(index)\n                       }/>}\n                    </Form.Group>\n                  </Fragment>\n                  )}\n                  <Button\n                    style= {{ marginTop:'1rem' }}\n                    type='button'\n                    circular\n                    icon\n                    size ='mini'\n                    primary\n                    onClick={ () => push ({ description:'',phone:'' ,email:'' })\n                    }>\n                    <Icon name=\"plus\"/>\n                  </Button>\n                </>)}\n              </FieldArray>\n            </Form>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button type='submit' positive onClick= { (e) => {\n              e.preventDefault()\n              handleSubmit()\n            }\n            }> Add </Button>\n            <Button type='button' negative onClick = {() => setOpen(false)}> Cancel </Button>\n          </Modal.Actions>\n        </Modal>}\n\n    </Formik>\n\n\n\n\n  )\n\n\n}\n\nexport default AddContactModal","import React from 'react'\nimport { Form, Input, Dropdown, Segment, Header, List, Label } from 'semantic-ui-react'\nimport { TextAreaField } from '../StationReportPage/NewReportForm/FormFields'\nimport { useField, useFormikContext } from 'formik'\nimport _ from 'lodash'\n\nexport const InputField = ({ ...props }) => {\n  const [field, meta] = useField(props)\n  return (\n    <Form.Field>\n      <label>{props.inputlabel }</label>\n      <Input  {...field} {...props}  error= {meta.touched && meta.error} />\n    </Form.Field>\n  )\n\n}\n\n\nexport const RemarkField = ({ name }) => {\n  const { getFieldProps } = useFormikContext()\n  const remarkTitle = getFieldProps(`${name}.title`).value\n  const remarkDate = getFieldProps(`${name}.date`).value\n  const remarkBy = getFieldProps(`${name}.by`).value\n  const remarkText = getFieldProps(`${name}.text`).value\n  const remarkEdit = getFieldProps(`${name}.edit`).value\n\n  if (!remarkTitle || remarkTitle === 'Add Clearification')\n  {\n    return (\n      <Segment basic>\n        {remarkTitle &&\n        <Header as ='h5'>\n          {remarkTitle === 'Add Clearification'&& 'Clearification Added' }\n          <Header.Subheader>by {remarkBy} on {remarkDate}</Header.Subheader>\n        </Header>\n        }\n        <TextAreaField name={`${name}.text`}></TextAreaField>\n      </Segment>\n    )\n  }\n\n  return (\n    <Segment>\n      <Header as ='h5'>\n        {remarkTitle}\n        <Header.Subheader>by {remarkBy} on {remarkDate}</Header.Subheader>\n      </Header>\n      {remarkTitle && <p>{remarkText}</p>}\n      {remarkEdit && <List>\n        {_.map(remarkEdit,(val,k) =>\n          <List.Item key={k}>\n            {k[0].toUpperCase() + k.substring(1).replace(/([a-z])([A-Z])/g, '$1 $2')}:\n            <span style={{ color:'red',fontStyle: 'italic', textDecoration: 'line-through' }}> {val.split('to')[0]} </span>\n            to\n            <span style={{ color:'green' }}> {val.split('to')[1]} </span>\n          </List.Item> )}\n\n      </List> }\n\n    </Segment>\n  )\n\n}\n\nexport const DropDownField = ({ label,...props }) => {\n  const{ setFieldValue }= useFormikContext()\n  const [field,meta] = useField(props)\n  return (\n    <Form.Field error= { meta.touched && meta.error?true:false}>\n      {!props.labeled && <label>{label }</label>}\n      <Input\n        label= {props.labeled? label :false}\n        input = {<Dropdown {...field} {...props}\n          style= {\n            props.labeled? { margin: 0,\n              borderTopLeftRadius: 0,\n              borderBottomLeftRadius: 0 }:{}\n          }\n          onChange = {props.onChange? props.onChange: (e,{ value }) => {\n            setFieldValue(props.name,value)\n          }}\n        ></Dropdown>}></Input>\n      {meta.touched && meta.error &&\n      <Label pointing prompt>\n        {meta.error}\n      </Label>}\n    </Form.Field>\n  )\n\n}","import { useLazyQuery, useMutation } from '@apollo/client'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { ADD_STATION_TO_COSTUMER } from '../../mutations/costumerMutation'\nimport { forEach } from 'lodash'\nimport { Button, Form, Modal } from 'semantic-ui-react'\nimport { Formik } from 'formik'\nimport { ALL_STATION } from '../../queries/stationQuery'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nimport { NotificationContext } from '../../contexts/NotificationContext'\n\nconst AddStationModal = ({ open ,setOpen ,costumer }) => {\n  const [,dispatch] = useContext(NotificationContext)\n  const[stationOptions,setStationOptions] = useState([])\n  const [loadStations, { loading:stationLoading, data: stationData }] = useLazyQuery(ALL_STATION)\n\n  useEffect(() => {\n    if(stationData && stationData.allStations){\n\n      const existingStationIds = costumer.stations.map(station => station.id)\n      let options = []\n      /**Set station options, do not display if the station already exists for costumer */\n      stationData.allStations.reduce((p,c,i) => {\n        if(c.id && !existingStationIds.includes(c.id)){\n          options.push( { key:i, value: c.id, text:c.location })\n        }\n        return options\n      },[])\n\n\n      setStationOptions(options)\n    }\n\n  },[costumer.stations, stationData])\n\n  const [addStation] = useMutation (ADD_STATION_TO_COSTUMER,{\n    update: (store,{ data:{ addStationsToCostumer } }) => {\n      /**Add costumer information to each station on cache */\n      forEach(addStationsToCostumer.stations, station => {\n        store.modify({\n          id: `Station:${station.id}`,\n          fields:{\n            costumers(existingCostumerRefs, { readField }) {\n              if(existingCostumerRefs.some(ref => readField('id',ref) === addStationsToCostumer.id)){\n                return existingCostumerRefs\n              }\n              return [...existingCostumerRefs, { '__ref':`Costumer:${addStationsToCostumer.id}` }]\n            }\n          }\n        })\n      })\n    },\n    onCompleted: ({ addStationsToCostumer }) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, stations added' ,type: 'SUCCESS' } })\n      setOpen(false)\n    },\n\n    onerror: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to add stations'}<br/> {err.message}</> ,type: 'ERROR' } })\n      setOpen(false)\n    }\n  })\n\n  return(\n\n    <Formik\n      initialValues= {{\n        stations: []\n      }}\n\n      validate = { (values) => {\n        const errors = {}\n        if(!values.stations.length){\n          errors.stations = 'Please select at least one station'\n        }\n\n        return errors\n      }\n      }\n      onSubmit= {(values) => {\n        addStation({ variables:{ ...values, costumer: costumer.id } })\n      }}>\n\n      {({ handleSubmit,setFieldValue,dirty }) =>\n\n        <Modal\n          open= {open}\n          closeOnEscape= {false}\n          closeOnDimmerClick={false}\n        >\n          <Modal.Header>Select Stations to Add</Modal.Header>\n          <Modal.Content>\n            <Form>\n              <DropDownField name='stations' labeled label='Station'\n                placeholder='Select Stations'\n                search\n                loading={stationLoading}\n                selection\n                multiple\n                width='8'\n                options= {stationOptions}\n                onFocus = {() => loadStations()}\n                onChange = {  (e,{ value }) => {\n                  setFieldValue('stations',value)\n                }}\n              >\n              </DropDownField>\n            </Form>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button type='submit' positive onClick= { (e) => {\n              e.preventDefault()\n              handleSubmit()\n            }\n            }> Add </Button>\n            <Button type='button' negative onClick = {() => setOpen(false)}> Cancel </Button>\n          </Modal.Actions>\n\n\n\n\n        </Modal>}\n\n    </Formik>\n\n\n\n\n  )\n\n\n}\n\nexport default AddStationModal","import { useMutation, useQuery } from '@apollo/client'\r\n\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom'\r\nimport { Button, Flag, Grid, Header, Icon, Label, Loader, Segment, Table } from 'semantic-ui-react'\r\nimport { NotificationContext } from '../../contexts/NotificationContext'\r\nimport {  DELETE_COSTUMER, REMOVE_AIRCRFAT, REMOVE_CONTACT, REMOVE_COSTUMER_FROM_STATION } from '../../mutations/costumerMutation'\r\nimport { GET_COSTUMER } from '../../queries/costumerQuey'\r\nimport ConfirmModal from '../ConfirmModal'\r\nimport AddAircraftModal from './AddAircraftModal'\r\nimport AddContactModal from './AddContactModal'\r\nimport AddStationModal from './AddStationModal'\r\n\r\nconst CostumerInfo = ({ costumerData ,costumerId }) => {\r\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\r\n  const [,dispatch]= useContext(NotificationContext)\r\n  const [data,setData] = useState('')\r\n  const [addStationModalOpen,setAddStationModalOpen] = useState(false)\r\n  const [addAircraftModalOpen,setAddAircraftModalOpen] = useState(false)\r\n  const [addContactModalOpen,setAddContactModalOpen] = useState(false)\r\n\r\n  const params = useParams()\r\n\r\n  const history = useHistory()\r\n  const { loading: costumerLoading ,error: costumerError, data: fetchedData } = useQuery(GET_COSTUMER,{ variables:{ id: params.costumerId ||costumerId }, skip: costumerData })\r\n\r\n  const [removeFromStation] = useMutation(REMOVE_COSTUMER_FROM_STATION )\r\n  const [deleteCostumer] = useMutation(DELETE_COSTUMER, {\r\n    update: (store) => {\r\n      store.evict({ //Remove costumer from all datas\r\n        id: `Costumer:${data.id}`\r\n      })\r\n    },\r\n    onCompleted: () => {\r\n      history.goBack()\r\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, costumer ${data.name} deleted` ,type: 'SUCCESS' } })\r\n\r\n    },\r\n\r\n    onError: (err) => {\r\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, failed to delete  costumer ${data.name}`}<br/> {err.message}</> ,type: 'ERROR' } })\r\n\r\n    },\r\n  })\r\n  const [removeContact] = useMutation( REMOVE_CONTACT )\r\n  const [removeAircraftMut] = useMutation( REMOVE_AIRCRFAT )\r\n\r\n\r\n  const removeContactFromStation = ({ id, description }) => {\r\n    removeContact({\r\n      variables:{ id,costumer: data.id },\r\n      update: (store) => {\r\n\r\n        store.evict({\r\n          id: `Contact:${id}`\r\n        })\r\n      }\r\n    }).then(\r\n      res =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, Contact ${description} removed` ,type: 'SUCCESS' } }),\r\n      err =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, Cannot remove Contact ${description}`}<br/> {err.message}</> ,type: 'ERROR' } }),\r\n    )\r\n  }\r\n\r\n  const removeAircraft = ({ id, registration }) => {\r\n    removeAircraftMut({\r\n      variables:{ id },\r\n      update: (store) => {\r\n        store.evict({\r\n          id: `Aircraft:${id}`\r\n        })\r\n      }\r\n    }).then(\r\n      res =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, Aircraft ${registration} removed` ,type: 'SUCCESS' } }),\r\n      err =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, Cannot remove Aircrfat ${registration}`}<br/> {err.message}</> ,type: 'ERROR' } }),\r\n    )\r\n  }\r\n\r\n  const removeCostumerFromStation = ({ variables ,location  }) => {\r\n    removeFromStation({\r\n      variables: variables,\r\n      update: (store) => {\r\n        store.modify({\r\n          id: `Station:${variables.station}`,\r\n          fields: { // Remove costumer from station\r\n            costumers(existingCostumerRefs, { readField }) {\r\n              return existingCostumerRefs.filter(\r\n                costumersRef =>  data.id !== readField('id', costumersRef)\r\n              )\r\n            }\r\n          },\r\n        },\r\n        )\r\n\r\n        store.modify(\r\n          {\r\n            id: `Costumer:${data.id}`,\r\n            fields: { // Remove station from costumer\r\n              stations(existingStationRefs, { readField }) {\r\n\r\n                return existingStationRefs.filter(\r\n                  stationsRef => {\r\n\r\n                    return variables.station !== readField('id', stationsRef)}\r\n                )\r\n              }\r\n            },\r\n\r\n          }\r\n        )\r\n      } }).then(\r\n      res =>   {\r\n        dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, Station ${location? location:''} deassigned for costumer ${data.name}` ,type: 'SUCCESS' } })\r\n        history.goBack()\r\n      },\r\n      err =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, Cannot deassign costumer ${data.name} ${location?'and '+location : ''}`}<br/> {err.message}</> ,type: 'ERROR' } }),\r\n    )\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  const [confirm,setConfirm] = useState({ title:'',fn: () => {} })\r\n  const [confirmModalOpen, setConfirmModalOpen] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if(costumerData){\r\n      setData(costumerData)\r\n    }\r\n    if(fetchedData){\r\n      setData(fetchedData.getCostumer)\r\n    }\r\n\r\n  },[costumerData, fetchedData, setData])\r\n\r\n\r\n  if(costumerLoading){\r\n    return <Loader active size='medium'>  Fetching Costumer Info...</Loader>\r\n  }\r\n\r\n  if(costumerError){\r\n    return <Header as='h4'>Something went wrong</Header>\r\n  }\r\n\r\n  if(!data){\r\n    return null\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Header as='h3'>{data.name}</Header>\r\n      <Grid padded>\r\n        <Grid.Row columns='3'>\r\n          <Grid.Column>\r\n            <Header as= 'h5'> Aircrafts </Header>\r\n            <Segment>\r\n\r\n              {data.aircrafts && data.aircrafts.map((aircraft,index) =>\r\n                <Segment key={index} compact style={{ display:'inline-flex', margin:'0.1rem' , width:'4.3rem' }}>\r\n                  {  staff && staff.permission.admin  &&\r\n                  <Label floating  size='tiny' style={{ backgroundColor:'transparent' }}>\r\n                    <Icon link  name='cancel' onClick = {() => {\r\n                      setConfirm({ title: `Are you sure you want to  deassign Aircraft ${aircraft.registration} from this Costumer ?`, fn: () => {\r\n                        removeAircraft({ id:aircraft.id, registration: aircraft.registration })\r\n                      } })\r\n                      setConfirmModalOpen(true)\r\n\r\n                    }}></Icon>\r\n                  </Label>}\r\n                  {aircraft.registration}\r\n                </Segment>)}\r\n\r\n              {\r\n                staff && staff.permission.admin  &&\r\n                <Button style={{ marginTop:'1rem', display:'block' }}circular icon primary size='small' onClick= {() => setAddAircraftModalOpen(true)}><Icon name='add'/></Button>\r\n              }\r\n            </Segment>\r\n\r\n\r\n          </Grid.Column>\r\n\r\n          <Grid.Column>\r\n            <Header as= 'h5'> Key Contacts </Header>\r\n            <Table>\r\n              <Table.Header>\r\n                <Table.Row>\r\n                  <Table.HeaderCell> Description </Table.HeaderCell>\r\n                  <Table.HeaderCell> Phone </Table.HeaderCell>\r\n                  <Table.HeaderCell> Email </Table.HeaderCell>\r\n                  <Table.HeaderCell> </Table.HeaderCell>\r\n                </Table.Row>\r\n              </Table.Header>\r\n              <Table.Body>\r\n                {\r\n                  data.keyContacts && data.keyContacts.length > 0 && data.keyContacts.map((contact,index) =>\r\n                    <Table.Row key={index}>\r\n                      <Table.Cell>\r\n                        {contact.description}\r\n                      </Table.Cell>\r\n                      <Table.Cell>\r\n                        {contact.phone}\r\n                      </Table.Cell>\r\n                      <Table.Cell>\r\n                        {contact.email}\r\n                      </Table.Cell>\r\n                      { staff && (staff.permission.admin || staff.permission.station.edit.includes (params.stationId)) &&\r\n                          <Table.Cell>\r\n                            <Icon link name='cancel' onClick ={() => {\r\n                              setConfirm({ title: `Are you sure you want to  remove contact ${contact.description} from this Costumer ?`, fn: () => {\r\n                                removeContactFromStation({ id: contact.id ,description: contact.description })\r\n                              } })\r\n                              setConfirmModalOpen(true)\r\n\r\n                            }}></Icon>\r\n                          </Table.Cell>\r\n                      }\r\n                    </Table.Row>)\r\n                }\r\n              </Table.Body>\r\n              { staff && (staff.permission.admin || staff.permission.station.edit.includes (params.stationId)) &&\r\n              <Table.Footer>\r\n                <Table.Row>\r\n                  <Table.Cell>\r\n                    <Button circular icon primary size='small'  onClick= {() => setAddContactModalOpen(true)} ><Icon name='add'/></Button>\r\n                  </Table.Cell>\r\n                </Table.Row>\r\n              </Table.Footer>\r\n              }\r\n            </Table>\r\n\r\n\r\n          </Grid.Column>\r\n\r\n\r\n          <Grid.Column >\r\n            <Header as= 'h5'> Stations </Header>\r\n            <Table padded>\r\n              <Table.Header>\r\n                <Table.Row>\r\n                  <Table.HeaderCell> Station </Table.HeaderCell>\r\n                  <Table.HeaderCell></Table.HeaderCell>\r\n                  <Table.HeaderCell></Table.HeaderCell>\r\n                </Table.Row>\r\n              </Table.Header>\r\n              <Table.Body>\r\n                {\r\n                  data.stations && data.stations.length > 0 && data.stations.map((station,index) =>\r\n                    <Table.Row key={index}>\r\n                      <Table.Cell>\r\n                        {station.location}\r\n                      </Table.Cell>\r\n                      <Table.Cell>\r\n                        {`${station.address.city} , ${station.address.country}`} <Flag name={station.address.country && station.address.country.toLowerCase()}></Flag>\r\n                      </Table.Cell>\r\n                      {staff && (staff.permission.admin || staff.permission.station.edit.includes (params.stationId)) &&\r\n                        <Table.Cell>\r\n                          { params.stationId !== station.id &&\r\n                          <Icon link   name='cancel' onClick={() => {\r\n                            setConfirm({ title: `Are you sure you want to  remove station ${station.location} from this Costumer ?`, fn: () => {\r\n                              removeCostumerFromStation({ variables:{ station: station.id, costumer: data.id }, location: station.location })\r\n                            } })\r\n                            setConfirmModalOpen(true)\r\n                          }}/>}\r\n                        </Table.Cell>}\r\n                    </Table.Row>)\r\n                }\r\n              </Table.Body>\r\n              { (staff && (staff.permission.admin || staff.permission.station.edit.includes (params.stationId))) &&\r\n             <Table.Footer>\r\n               <Table.Row>\r\n                 <Table.Cell>\r\n                   <Button circular icon primary size='small' onClick= {() => setAddStationModalOpen(true)}><Icon name='add'/></Button>\r\n                 </Table.Cell>\r\n               </Table.Row>\r\n             </Table.Footer>}\r\n            </Table>\r\n\r\n          </Grid.Column>\r\n\r\n        </Grid.Row>\r\n\r\n        <Grid.Row>\r\n          {params.stationId && (staff && (staff.permission.admin || staff.permission.station.edit.map(station => station._id).includes (params.stationId))) &&\r\n          <Button negative\r\n            onClick={() => {\r\n              setConfirm({ title: `Are you sure you want to  remove costumer ${data.name} from this station ?`, fn: () => {\r\n                removeCostumerFromStation({ variables:{ station: params.stationId, costumer: data.id } })\r\n              } })\r\n              setConfirmModalOpen(true)\r\n            }}> Remove from Station </Button>\r\n          }\r\n\r\n          {!params.stationId && staff && staff.permission.admin &&\r\n          <Button icon negative\r\n            onClick={() => {\r\n              setConfirm({ title: `Are you sure you want to  delete costumer ${data.name} ?` , fn: () => {\r\n                deleteCostumer({ variables:{ costumer: data.id } })\r\n\r\n              } })\r\n              setConfirmModalOpen(true)\r\n            }}> <Icon name='trash'/> Delete Costumer </Button>}\r\n        </Grid.Row>\r\n      </Grid>\r\n\r\n\r\n      {confirmModalOpen &&\r\n        <ConfirmModal open= {confirmModalOpen} confirm= {confirm} setOpen= {setConfirmModalOpen} ></ConfirmModal>\r\n      }\r\n\r\n\r\n      {\r\n        addStationModalOpen &&\r\n      <AddStationModal open={addStationModalOpen} setOpen = {setAddStationModalOpen} costumer= {data}></AddStationModal>\r\n      }\r\n\r\n      {\r\n        addAircraftModalOpen &&\r\n      <AddAircraftModal open={addAircraftModalOpen} setOpen = {setAddAircraftModalOpen} costumer= {data}></AddAircraftModal>\r\n      }\r\n\r\n      {\r\n        addContactModalOpen &&\r\n        <AddContactModal open={ addContactModalOpen} setOpen = {setAddContactModalOpen} costumer= {data}></AddContactModal>\r\n      }\r\n\r\n    </>\r\n\r\n\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default CostumerInfo\r\n\r\n","import { useLazyQuery, useMutation } from '@apollo/client'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { forEach } from 'lodash'\nimport { Button, Form, Modal } from 'semantic-ui-react'\nimport { Formik } from 'formik'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { ALL_COSTUMERS } from '../../queries/costumerQuey'\nimport { ASSIGN_COSTUMERS } from '../../mutations/stationMutation'\n\nconst AssignCostumersModal = ({ open ,setOpen ,station }) => {\n  const [,dispatch] = useContext(NotificationContext)\n  const [costumerList,setCostumerList] = useState([])\n\n  const[loadCostumers, { loading: costumerLoading ,data:costumerData }] = useLazyQuery(ALL_COSTUMERS)\n\n  useEffect(() => {\n    if(costumerData && costumerData.allCostumers){\n\n      const currentCostumers = station.costumers.map(costumer => costumer.id)\n\n      const costumerOptions =costumerData.allCostumers.map((costumer,index) => {\n        return { key:index, value: costumer.id, text: costumer.name }\n      } )\n      setCostumerList(costumerOptions.filter( option => !currentCostumers.includes( option.value)))\n    }\n\n\n  },[costumerData, station.costumers])\n\n  const [addCostumers] = useMutation (ASSIGN_COSTUMERS,{\n    update: (store,{ data:{ assignCostumers } }) => {\n      /**Add station information to each selected costumer on cache */\n      forEach(assignCostumers.costumers, costumer => {\n        store.modify({\n          id: `Costumer:${costumer.id}`,\n          fields:{\n            stations(existingStationsRefs, { readField }) {\n              if(existingStationsRefs.some(ref => readField('id',ref) === station.id)){\n                return existingStationsRefs\n              }\n              return [...existingStationsRefs, { '__ref':`Sation:${station.id}` }]\n            }\n          }\n        })\n      },\n      )\n    },\n    onCompleted: ( response) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, costumers assigned to station' ,type: 'SUCCESS' } })\n      setOpen(false)\n    },\n\n    onerror: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to assign costumers'}<br/> {err.message}</> ,type: 'ERROR' } })\n      setOpen(false)\n    }\n  })\n\n  return(\n\n    <Formik\n      initialValues= {{\n        costumers: []\n      }}\n\n      validate = { (values) => {\n        const errors = {}\n        if(!values.costumers.length){\n          errors.costumers = 'Please select at least one costumer'\n        }\n\n        return errors\n      }\n      }\n      onSubmit= {(values) => {\n        addCostumers({ variables:{ ...values, stationId: station.id } })\n      }}>\n\n      {({ handleSubmit,setFieldValue }) =>\n\n        <Modal\n          open= {open}\n          closeOnEscape= {false}\n          closeOnDimmerClick={false}\n        >\n          <Modal.Header>Select costumers to Assign</Modal.Header>\n          <Modal.Content>\n            <Form>\n              <DropDownField name='costumers' labeled label='Costumers'\n                placeholder='Select Costumers'\n                search\n                loading={costumerLoading}\n                selection\n                multiple\n                width='8'\n                options= {costumerList}\n                onFocus = {() => loadCostumers()}\n                onChange = {  (e,{ value }) => {\n                  setFieldValue('costumers',value)\n                }}\n              >\n              </DropDownField>\n            </Form>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button type='submit' positive onClick= { (e) => {\n              e.preventDefault()\n              handleSubmit()\n            }\n            }> Add </Button>\n            <Button type='button' negative onClick = {() => setOpen(false)}> Cancel </Button>\n          </Modal.Actions>\n        </Modal>}\n\n    </Formik>\n\n\n\n\n  )\n\n\n}\n\nexport default AssignCostumersModal","import { useMutation } from '@apollo/client'\nimport React, { useContext, useState } from 'react'\n\nimport { forEach } from 'lodash'\nimport { Button, Form, Modal } from 'semantic-ui-react'\nimport { Formik } from 'formik'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { ADD_TO_MAILINGLIST } from '../../mutations/stationMutation'\nimport { validateEmail } from '../StationReportPage/NewReportForm/validator'\n\nconst AddMailingListModal = ({ open ,setOpen ,station }) => {\n  const [,dispatch] = useContext(NotificationContext)\n  const [emails,setEmails] = useState([])\n  const [addAircrafts] = useMutation (ADD_TO_MAILINGLIST,{\n    update:(store) => {\n      store.modify({\n        id: `Station:${station.id}`,\n        fields:{\n          mailingList(existingAddresses) {\n\n\n            let newEmails =[]\n\n            forEach(emails, email => {\n              if(!existingAddresses.some(ref => {return ref === email})){\n                newEmails.push(email)\n              }\n            })\n            return [...existingAddresses, ...newEmails]\n          }\n        }\n      })\n    },\n    onCompleted: ({ addAircrafts }) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, emails ${emails.toString()}  added` ,type: 'SUCCESS' } })\n      setOpen(false)\n    },\n\n    onerror: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to add emails'}<br/> {err.message}</> ,type: 'ERROR' } })\n      setOpen(false)\n    }\n  })\n\n  return(\n\n    <Formik\n      initialValues= {{\n        emails: ''\n      }}\n\n      validate = { (values) => {\n\n        const errors = {}\n        if(values.emails.length ){\n          const errEmail =[]\n          forEach(values.emails.split(','), email => {\n            if(validateEmail(email.trim())) errEmail.push(email)\n          })\n\n          if (errEmail.length ){\n            errors.emails = `${errEmail.toString()} Invalid emails`\n          }\n        }else{\n          errors.emails = 'Enter at least one Email'\n        }\n        return errors\n      }\n      }\n      onSubmit= {(values) => {\n        setEmails(values.emails.split(','))\n        addAircrafts({ variables:{  emails: values.emails.split(','), stationId: station.id } })\n      }}>\n\n      {({ handleSubmit }) =>\n\n        <Modal\n          open= {open}\n          closeOnEscape= {false}\n          closeOnDimmerClick={false}\n        >\n          <Modal.Header>Select Stations to Add</Modal.Header>\n          <Modal.Content>\n            <Form>\n              <InputField name='emails' label='Emails' type='text' width='8' placeholder='Emails separeted by comma \",\"'/>\n            </Form>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button type='submit' positive onClick= { (e) => {\n              e.preventDefault()\n              handleSubmit()\n            }\n            }> Add </Button>\n            <Button type='button' negative onClick = {() => setOpen(false)}> Cancel </Button>\n          </Modal.Actions>\n        </Modal>}\n\n    </Formik>\n\n\n\n\n  )\n\n\n}\n\nexport default AddMailingListModal","import { gql, useMutation } from '@apollo/client'\nimport React, { Fragment, useContext } from 'react'\nimport { forEach } from 'lodash'\nimport { Button, Form, Icon, Modal } from 'semantic-ui-react'\nimport { FieldArray, Formik } from 'formik'\nimport { InputField, TimeInputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { ADD_SHIFTS } from '../../mutations/stationMutation'\n\nconst AddShiftsModal = ({ open ,setOpen ,station }) => {\n  const[,dispatch] = useContext(NotificationContext)\n  const [addShifts] = useMutation (ADD_SHIFTS,{\n    update:(store,{ data: { addShifts } }) => {\n      store.modify({\n        id: `Station:${station.id}`,\n        fields:{\n          shifts(existingShiftsRefs, { readField }) {\n            let newShiftRefs =[]\n\n            forEach(addShifts,(shift) => {\n              if(!existingShiftsRefs.some(ref => readField('id',ref) === shift.id)){\n                newShiftRefs.push(store.writeFragment({\n                  data:shift,\n                  fragment: gql`\n                fragment NewShift on ShiftInfo {\n                  id\n                  name\n                  startTime\n                }\n              `\n                }))\n              }\n            })\n            return [...existingShiftsRefs, ...newShiftRefs]\n          }\n        }\n      })\n    },\n    onCompleted: () => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, shifts added' ,type: 'SUCCESS' } })\n      setOpen(false)\n    },\n\n    onerror: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to add shifts'}<br/> {err.message}</> ,type: 'ERROR' } })\n      setOpen(false)\n    }\n\n  })\n\n  return(\n\n    <Formik\n      initialValues= {{\n        shifts: [{ name:'',startTime:'' }]\n      }}\n\n      validate = { (values) => {\n\n        const errors = {}\n        if(values.shifts.length){\n          forEach(values.shifts, (shift,index) => {\n            if(!shift.name){\n              if (!errors.shifts) errors.shifts=[]\n              if (!errors.shifts[index] ) errors.shifts[index] = {}\n              errors.shifts[index].name = 'Please provide shift name'\n            }\n\n            if(!shift.startTime){\n              if (!errors.shifts) errors.shifts=[]\n              if (!errors.shifts[index] ) errors.shifts[index] = {}\n\n              errors.shifts[index].startTime = 'Shift start time is required'\n            }\n\n            if(shift.startTime){\n              if(!shift.startTime.match(/^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/)){\n                if (!errors.shifts) errors.shifts=[]\n                if (!errors.shifts[index] ) errors.shifts[index] = {}\n\n                errors.shifts[index].startTime = 'Shift start should be on format HH:mm'\n              }\n            }\n\n          }\n          )\n        }\n\n        return errors\n      }\n      }\n      onSubmit= {(values) => {\n\n        addShifts({ variables:{ ...values, stationId: station.id } })\n      }}>\n\n      {({ handleSubmit ,values }) =>\n\n        <Modal\n          open= {open}\n          closeOnEscape= {false}\n          closeOnDimmerClick={false}\n        >\n          <Modal.Header>Select Stations to Add</Modal.Header>\n          <Modal.Content>\n            <Form>\n              <FieldArray  name={'shifts'}>\n                {({ push,remove }) => (<>\n                  { values.shifts.length > 0 && values.shifts.map((shift,index) =>\n                    <Fragment key ={index}>\n                      <Form.Group style={{ margin:0 }} widths='13' >\n                        <InputField name={`shifts[${index}].name`} placeholder='Shift Name' />\n                        <TimeInputField name={`shifts[${index}].startTime`} label placeholder='Start Time'></TimeInputField>\n\n                        {index !== 0 &&\n                     <Icon\n                       link\n                       name =\"cancel\"\n                       color='red'\n                       onClick={ () => remove(index)\n                       }/>}\n                      </Form.Group>\n                    </Fragment>\n                  )}\n                  <Button\n                    style= {{ marginTop:'1rem' }}\n                    type='button'\n                    circular\n                    icon\n                    size ='mini'\n                    primary\n                    onClick={ () => push ({ name:'',startTime:'' })\n                    }>\n                    <Icon name=\"plus\"/>\n                  </Button>\n                </>)}\n              </FieldArray>\n            </Form>\n          </Modal.Content>\n          <Modal.Actions>\n            <Button type='submit' positive onClick= { (e) => {\n              e.preventDefault()\n              handleSubmit()\n            }\n            }> Add </Button>\n            <Button type='button' negative onClick = {() => setOpen(false)}> Cancel </Button>\n          </Modal.Actions>\n        </Modal>}\n\n    </Formik>\n\n\n\n\n  )\n\n\n}\n\nexport default AddShiftsModal","import { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useContext } from 'react'\nimport { Button, Dimmer, Form, Grid, Loader, Modal,ModalContent, ModalHeader } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { CHANGE_STATION_KEY } from '../../mutations/stationMutation'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nconst ResetStationKeyModal = (props) => {\n\n  const [,dispatch] = useContext(NotificationContext)\n  const [changekey,{ loading }] = useMutation(CHANGE_STATION_KEY,{\n    onCompleted: () => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, key reset ' ,type: 'SUCCESS' } })\n      props.setOpen(false)\n    },\n\n    onError: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to change key'}<br/> {err.message}</> ,type: 'ERROR' } })\n      props.setOpen(false)\n    }\n  })\n\n\n  const initVal = {\n    newKey:'',\n    confirmKey:''\n  }\n\n  return(\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {props.open}\n      onClose= {() =>  props.setOpen(false)}\n      onOpen= {() => props.setOpen (true)}\n    >\n      <ModalHeader>StationKey Reset</ModalHeader>\n      <ModalContent>\n\n        {loading &&\n            <Dimmer active>\n              Updating key\n              <Loader />\n            </Dimmer>\n        }\n\n        <Formik\n          initialValues = { initVal }\n          validate= {(values) =>\n          {\n            const errors = {}\n\n\n            if(!values.newKey ){\n              errors.newKey = 'New key cannot be empty'\n            }\n\n            if(values.newKey !== values.confirmKey){\n              errors.confirmKey = 'New key and confirm key must match'\n            }\n\n            return errors\n          }\n\n          }\n          onSubmit= {(values) => {\n            changekey({ variables:{ stationId:props.station.id, stationKey: values.newKey } })\n\n          }}\n        >\n          {({ handleSubmit,dirty ,errors }) => <Form style={{ marginBottom:'5rem' }} onSubmit= {handleSubmit}>\n            <Grid>\n              <Grid.Row>\n                <InputField name='newKey' label='New key' type='password'/>\n              </Grid.Row>\n              <Grid.Row>\n                <InputField  name='confirmKey' label='Confirm key' type='password'/>\n              </Grid.Row>\n            </Grid>\n            {dirty && _.isEmpty(errors) &&\n            <Button type='submit' style={{ marginTop: '1rem' }} positive>Change key</Button>}\n\n          </Form>\n          }\n        </Formik></ModalContent>\n    </Modal>\n\n  )\n}\n\nexport default ResetStationKeyModal","import { useMutation, useQuery } from '@apollo/client'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { Button, Form, Grid, Header, Icon, Segment, Table } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { DELETE_STATION, REMOVE_FROM_MAILINGLIST, REMOVE_SHIFTS } from '../../mutations/stationMutation'\nimport { GET_STATION } from '../../queries/stationQuery'\nimport ConfirmModal from '../ConfirmModal'\nimport AddMailingListModal from './AddMailingListModal'\nimport AddShiftsModal from './AddShiftsModal'\nimport ResetStationKeyModal from './ResetStationKeyModal'\n\nconst Settings = (props) => {\n  const loggedInStaff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const [,dispatch] = useContext(NotificationContext)\n  const[confirmModalOpen, setConfirmModalOpen] = useState(false)\n  const[addShiftsModalOpen,setAddShiftsModalOpen] = useState(false)\n  const[addMailingListModalOpen,setAddMailingListModalOpen] = useState(false)\n  const[resetStationKeyModalOpen,setResetStationKeyModalOpen] = useState(false)\n\n  const [confirm,setConfirm] = useState({ title:'',fn:() => {} })\n  const [stationData,setStationData ] = useState(props.data)\n  const history = useHistory()\n  let stationId = useParams().stationId\n\n  const { data } = useQuery(GET_STATION,{\n    variables:{ id:stationId },\n    onerror: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, could not retrive Station'}<br/> {err.message}</> ,type: 'ERROR' } })\n    } })\n\n  useEffect(() => {\n    if(data && data.getStation){\n      setStationData(data.getStation)\n    }\n  }, [data])\n\n  /**Delate Station Mutation */\n  const [deleteStation] = useMutation(DELETE_STATION,{\n    variables:{ stationId: stationId },\n    update: (store) => {\n      store.evict({\n        id: `Station:${stationId}`\n      })\n    },\n    onCompleted: ({ addContact }) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Station Deleted' ,type: 'SUCCESS' } })\n      history.push('/Manage/AllStations')\n    },\n    onerror: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to delete Station'}<br/> {err.message}</> ,type: 'ERROR' } })\n    }\n  })\n\n  /**Delete from mailinglist mutaiton */\n\n  const [deleteFromMailingList] = useMutation(REMOVE_FROM_MAILINGLIST)\n  const deleteFromMailingMutation = (email) => {\n    deleteFromMailingList({\n      variables:{ email: email, stationId: stationId },\n      update:(store) => {\n        store.modify({\n          id: `Station:${stationId}`,\n          fields:{\n            mailingList(existingEmails){\n              return [...existingEmails.filter(item => item !== email )]\n            }\n          }\n        })\n      }\n\n    }).then(\n      res => dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, ${email} removed from mailing list `  ,type: 'SUCCESS' } }),\n      err => dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Error, coluld not remove email' ,type: 'ERROR' } })\n\n    )\n  }\n\n  /**Delete shift mutaiton */\n\n  const [deleteShift] = useMutation(REMOVE_SHIFTS)\n  const removeShift = (id,shiftName) => {\n    deleteShift({\n      variables:{ id: id, stationId: stationId },\n      update:(store) => {\n        store.evict({\n          id: `ShiftInfo:${id}`\n        })\n      }\n    }).then(\n      res => dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, ${shiftName} shift removed from station `  ,type: 'SUCCESS' } }),\n      err => dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Error, coluld not remove shift' ,type: 'ERROR' } })\n\n    )\n  }\n\n  return (\n    <>\n      <Grid padded>\n        <Grid.Row>\n          <Segment basic attached>\n            <Header as ='h5'>Mailing List\n              <Header.Subheader>Below emails will receive the shift reports on submit.</Header.Subheader></Header>\n            <Table attached  compact collapsing padded>\n              <Table.Body>\n                {stationData && stationData.mailingList.map((email,i) =>\n                  <Table.Row key={i}>\n                    <Table.Cell>{email}</Table.Cell>\n                    <Table.Cell><Icon link name='trash'\n                      onClick={\n                        () => {\n                          setConfirmModalOpen(true)\n                          setConfirm({ title:' Are you sure you want to delete this email' , fn :() => deleteFromMailingMutation(email) }) }}\n                    ></Icon></Table.Cell>\n                  </Table.Row>\n                )}\n              </Table.Body>\n            </Table>\n            <Form.Button style={{ marginTop:'0.5rem' }}primary size='tiny' onClick={() => setAddMailingListModalOpen(true)}> Add More </Form.Button>\n          </Segment>\n          <Segment basic attached>\n            <Header as ='h5'>Shifts\n              <Header.Subheader>Below are the working shifts for this station. </Header.Subheader></Header>\n            <Table attached  compact collapsing padded>\n              <Table.Body>\n                {stationData && stationData.shifts.map((shift,i) =>\n                  <Table.Row key={i}>\n                    <Table.Cell>{shift.name } <strong>starts at</strong> {shift.startTime}</Table.Cell>\n                    <Table.Cell><Icon link name='trash'\n                      onClick={\n                        () => {\n                          setConfirmModalOpen(true)\n                          setConfirm({ title:' Are you sure you want to remove this shift' , fn :() => removeShift(shift.id, shift.name) }) }}></Icon></Table.Cell>\n                  </Table.Row>\n                )}\n              </Table.Body>\n            </Table>\n            <Form.Button style={{ marginTop:'0.5rem' }}primary size='tiny' onClick= {() => setAddShiftsModalOpen(true)}> Add More </Form.Button>\n          </Segment>\n          <Segment attached>\n            <Header as ='h5'>Staff signing mehtods\n              <Header.Subheader>Staff can sign and report working hours using following Methods </Header.Subheader></Header>\n            <p>This feature is not Implmented yet. By default, user should sign with his credentials.</p>\n          </Segment>\n          <Segment attached>\n            <Button\n              primary\n              onClick={\n                () => {\n                  setResetStationKeyModalOpen(true)}}> Reset station key </Button>\n          </Segment>\n\n        </Grid.Row>\n\n      </Grid>\n      {\n        loggedInStaff.permission.admin && <Button\n          negative\n          onClick={\n            () => {\n              setConfirmModalOpen(true)\n              setConfirm({ title:' Are you sure you want to delete this station' , fn :() => deleteStation() }) }}> DELETE STATION </Button>}\n      {confirmModalOpen &&\n        <ConfirmModal open= {confirmModalOpen} confirm= {confirm} setOpen= {setConfirmModalOpen} ></ConfirmModal>\n      }\n\n      {addShiftsModalOpen &&\n        <AddShiftsModal station= {stationData} open= {addShiftsModalOpen} setOpen= {setAddShiftsModalOpen}></AddShiftsModal>\n      }\n\n      {addMailingListModalOpen &&\n        <AddMailingListModal station= {stationData} open= {addMailingListModalOpen} setOpen= {setAddMailingListModalOpen}></AddMailingListModal>\n      }\n\n      {resetStationKeyModalOpen &&\n        <ResetStationKeyModal station= {stationData} open= {resetStationKeyModalOpen} setOpen= {setResetStationKeyModalOpen}></ResetStationKeyModal>\n      }\n    </>\n  )\n\n\n}\nexport default Settings","import React from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { Menu } from 'semantic-ui-react'\n\nconst StationMenu = ({ station ,activeItem, setActiveItem ,setActiveCostumer }) => {\n  const history = useHistory()\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const location = useLocation()\n\n  const navigatePath = (page) => {\n    const aar = location.pathname.split('/').filter(path => path !== '')\n\n    const navPath = aar.reduce((p,c,i) => {\n      if(c === activeItem || aar.length- 1 === i){ //If the current item on iteration is current page exit reduce\n        aar.splice(1)\n        return p\n      }\n      return p+'/'+c\n    },'')\n\n    return navPath+'/'+page\n  }\n\n  const handleMenuClick = (e, { name }) => {\n    setActiveItem(name)\n    /**Reset the costumer page back to list mode */\n    setActiveCostumer('')\n    /**If the stationInfo is being viewed from shiftRporting page then url navigation is disabled so we don't push aciveitem*/\n    if(activeItem !== name && staff){\n      history.push(navigatePath(name))\n    }\n\n  }\n  return (\n    <Menu pointing secondary >\n      <Menu.Item header>{station.location}</Menu.Item>\n      <Menu.Item\n        position='right'\n        name='BasicInfo'\n        active = {activeItem === 'BasicInfo'}\n        onClick={handleMenuClick}\n      />\n\n      <Menu.Item\n        name='Procedures'\n        active = {activeItem === 'Procedures'}\n        onClick={handleMenuClick}\n      />\n\n      <Menu.Item\n        name='Costumers'\n        active = {activeItem === 'Costumers'}\n        onClick={handleMenuClick}\n      />\n\n      {staff && (staff.permission.admin || staff.permission.station.edit.map(station => station._id).includes(station.id) ) &&\n      <Menu.Item\n        name='Settings'\n        active = {activeItem === 'Settings'}\n        onClick={handleMenuClick}\n      />}\n    </Menu>\n\n  )}\n\nexport default StationMenu","import { useQuery } from '@apollo/client'\nimport React, { Fragment, useEffect, useState } from 'react'\nimport { Link, useHistory, useLocation, useParams } from 'react-router-dom'\nimport { Breadcrumb, BreadcrumbDivider, BreadcrumbSection, Button, Card, Flag, Grid, Header, Icon, Loader, Segment, Table } from 'semantic-ui-react'\nimport { GET_STATION } from '../../queries/stationQuery'\nimport { formatDate } from '../../utils/DateHelper'\nimport CostumerInfo from '../CostumerInfo'\nimport AssignCostumersModal from './AssignCostumersModal'\nimport Settings from './Settings'\nimport StationMenu from './stationMenu'\n\nconst StationInfo = (props) => {\n  const [stationData, setStationData] = useState('')\n  const [activeItem,setActiveItem] = useState('BasicInfo')\n  const [activeCostumer,setActiveCostumer] = useState('')\n  const [assignCostumerModalOpen, setAssignCostumerModalOpen] = useState(false)\n  const history = useHistory()\n  const location = useLocation()\n  const locationPaths = location.pathname && location.pathname.split('/').filter(path => path)\n\n  const params = useParams()\n\n  useEffect(() => {\n    if(params.page){\n      setActiveItem(params.page)\n    }\n  },[params])\n\n  let stationId = useParams().stationId\n\n  /** If stationId is passed as props then passed stationId should have precedence over params */\n  if(props.stationId){\n    stationId = props.stationId\n  }\n\n  const loggedInStaff = JSON.parse( sessionStorage.getItem('staffKey'))\n\n  const { loading,data } = useQuery(GET_STATION, {\n    variables: { id: stationId },\n    skip: !stationId,\n  })\n\n  useEffect (() => {\n    if(data) {\n      setStationData(data.getStation)\n    }\n  },[data])\n\n  /**Gets bredcrumb item link\n   * @param {Int} index - indexNumber of current item on fullpath\n   */\n  const getBreadCrumbLink = (index) => {\n    const arr = [...locationPaths]\n    const link = arr.reduce((p,c,i) => {\n      if(i > index){ // stop at current page\n        arr.splice(1)\n        return p\n      }\n      return p+'/'+c\n    },'')\n\n    return link\n\n  }\n\n  if(!stationId || !stationData || loading ){\n    return(\n      <Segment basic>\n        <Loader active>Loading Station</Loader>\n      </Segment>\n    )\n\n  }\n\n  return (\n    <>\n      { loggedInStaff &&\n        <Breadcrumb>\n          {locationPaths.map((path,index) => {\n            if(index === 0) { //Skip for base page\n              return ''\n            }\n            return (\n              <Fragment key={index}>\n                <BreadcrumbSection\n                  active= {index === locationPaths.length-1  }\n                  as={index < locationPaths.length-1?Link:''} //as Link previous Page\n                  to ={ getBreadCrumbLink(index)}\n                >\n                  {index===2 && stationData.location}\n                  {index===4 && locationPaths[index-1].toLowerCase() === 'costumers' && //If the path is costumerId then display costumer name else it must be procedure, display procdure id\n                 stationData.costumers.filter(costumer => costumer.id === path)[0] && stationData.costumers.filter(costumer => costumer.id === path)[0].name\n                  }\n                  {\n                    index !== 2 && index !== 4 &&\n                  path\n                  }\n\n                </BreadcrumbSection>\n                { index < locationPaths.length-1 &&\n              <BreadcrumbDivider></BreadcrumbDivider>}\n              </Fragment>\n            )\n          })}\n        </Breadcrumb>\n      }\n\n      <StationMenu station= {stationData} activeItem ={activeItem} setActiveItem= {setActiveItem} setActiveCostumer ={setActiveCostumer}> </StationMenu>\n      {activeItem === 'BasicInfo' &&\n        <Grid padded>\n          <Grid.Row columns='4'>\n            <Grid.Column >\n              <Header as ='h4' >Address:\n                <Header.Subheader>{stationData.address.street }<br/>\n                  {stationData.address.postcode }{stationData.address.city}<br/>\n                  {stationData.address.country} <Flag name={stationData.address.country.toLowerCase()}></Flag></Header.Subheader>\n              </Header>\n            </Grid.Column>\n            <Grid.Column>\n              <Header as ='h4' >Contact:\n                <Header.Subheader><strong>Email: </strong> {stationData.email}<br/>\n                  <strong>Phone: </strong>\n                  {stationData.phone.reduce((p,c) => p + ' / ' + c)}</Header.Subheader>\n              </Header>\n            </Grid.Column>\n            <Grid.Column>\n              <Header as ='h4' >Shifts:\n                {stationData.shifts.map((shift,i) => <Header.Subheader key={i}> {shift.name} <strong> Starts at: </strong> {shift.startTime}<br/></Header.Subheader> )}\n              </Header>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row>\n            <Grid.Column>\n              <Header as ='h4'>Current Staffs:</Header>\n              <Table collapsing>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell > Name </Table.HeaderCell>\n                    <Table.HeaderCell> Last Active At:  </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {stationData.staffList.length > 0 && stationData.staffList.map((staff,i ) => <Table.Row key={i}>\n                    <Table.Cell>\n                      {\n                        loggedInStaff && loggedInStaff.permission.staff.view?\n                          <Link to={`/Manage/AllStaffs/${staff.id}/Profile`}>{staff.name}</Link>: staff.name\n                      }\n                    </Table.Cell>\n                    <Table.Cell>{formatDate(staff.lastActive.activeAt)}</Table.Cell>\n                  </Table.Row>\n                  )}\n                </Table.Body>\n              </Table>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      }\n\n      {activeItem === 'Procedures' &&\n      <Header as='h5'> This Station Procedure feature is not Implemented yet, will be implemanted soon ...\n        <Header.Subheader>\n          After this implemetation, one will be able to add/ view / search all the station related procedure such as 'Garbage Disposal , Hanger Booking , Supplies Delivery ...' on this section\n        </Header.Subheader>\n      </Header>}\n\n      {activeItem === 'Costumers' && ! (params.costumerId || activeCostumer) &&\n      <>\n        <Card.Group>\n          {stationData.costumers && stationData.costumers.map(costumer =>\n            <Card key={costumer.id} link raised\n              onClick = {() => {\n                if(loggedInStaff){\n                  history.push(`${location.pathname}/${costumer.id}`)\n                }else{\n                  setActiveCostumer(costumer.id)\n                }\n\n              }}>\n              <Card.Content textAlign='center' header = {costumer.name} />\n              <Card.Content textAlign='center' >{costumer.contract? costumer.contract + ' Contract':''}</Card.Content>\n              <Card.Content textAlign='center' extra>\n                <Header as ='h5'> <Icon name='plane'/> Total Aircrafts: {costumer.aircrafts.length}</Header>\n              </Card.Content>\n            </Card>)}\n        </Card.Group>\n        {loggedInStaff && (loggedInStaff.permission.admin || loggedInStaff.permission.station.edit.map(station => station._id).includes(stationId)) &&\n        <Segment basic compact>\n          <Button primary icon onClick = {() => setAssignCostumerModalOpen(true)}>\n            <Icon name='add circle' /> Add More\n          </Button>\n          {assignCostumerModalOpen &&\n          <AssignCostumersModal open={assignCostumerModalOpen} setOpen={setAssignCostumerModalOpen} station={stationData}></AssignCostumersModal>\n          }\n\n\n        </Segment>}\n      </>\n\n      }\n\n      {activeItem === 'Costumers' && (params.costumerId || activeCostumer) &&\n       <CostumerInfo costumerId = {activeCostumer}></CostumerInfo>\n      }\n\n      {activeItem === 'Settings' &&\n      <Settings data={stationData}></Settings>\n      /**<Header as='h5'> This Station Settings feature is not Implemented yet, will be implemanted soon ...\n        <Header.Subheader>\n          After this implemetation, one will be able to change station settings such as 'SignIn/Off Work Methods', 'Add Remove Shifts', 'Number of active reporting', 'Change Station Key'\n        </Header.Subheader>\n      </Header>*/}\n    </>\n  )\n\n\n}\nexport default StationInfo","import {  useQuery } from '@apollo/client'\nimport React from 'react'\nimport { useEffect } from 'react'\nimport { useState } from 'react'\nimport { Dropdown,Form } from 'semantic-ui-react'\nimport { ALL_STATION } from '../../queries/stationQuery'\nimport { getMonthOptions, getWeekNumber, getWeekOptions } from '../../utils/DateHelper'\n\nconst ShiftReportFilter = ({ setFilter }) => {\n  const today = new  Date()\n  const loggedInStaff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const loggedInStation = JSON.parse(sessionStorage.getItem('stationKey'))\n  const[filterBy,setFilterBy] = useState('week')\n  const[number,setNumber] = useState(getWeekNumber(today))\n  const [stations,setStations] = useState(loggedInStation?[loggedInStation.id]: [])\n  const [stationOptions,setStationOptions] = useState(loggedInStaff && loggedInStaff.permission.station.edit.map((station,index ) => {\n    return { key: index, value:station._id, text: station.location }})\n  ) //Setting the permitted station list\n\n  /**If staff has admin rights then all station should be displayed in options */\n  const { loading: stationLoading, data: stationData  } = useQuery(ALL_STATION,{ skip: !(loggedInStaff && loggedInStaff.permission.admin) })\n\n\n  useEffect(() => {\n    if(stationData && stationData.allStations){\n      const stOpt=  stationData.allStations.map((station,i) => {\n        return { key: i, value:station.id, text: station.location }\n      })\n      setStationOptions(stOpt)\n    }\n  }, [stationData])\n\n  useEffect(() => {\n    setFilter({ stations, filterBy, number })\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[filterBy, number, stations])\n\n\n  return(\n    <Form>\n\n\n      <Form.Group>\n        { /**Sttion options isonly visible if staff has peemission to edit that station or is admin  */\n          loggedInStaff && (loggedInStaff.permission.station.edit.length || loggedInStaff.permission.admin ) &&\n          <Form.Field>\n            <Dropdown\n              loading= {stationLoading}\n              selection\n              multiple\n              options = { stationOptions}\n              onChange ={(e,{ value }) => {\n                setStations(value)\n              }}\n              placeholder= 'Select Station'\n              value = {stations}/>\n          </Form.Field>\n        }\n\n\n        <Form.Field>\n          <Dropdown\n            selection\n            options = {[ { key:1 ,text: 'Month' , value: 'month' }, { key:2 ,text: 'Week' , value: 'week' }]}\n            onChange = {(e,{ value }) => {\n              setFilterBy(value)\n              if(value==='month') {\n                setNumber (today.getMonth())\n              }else {\n                setNumber (getWeekNumber(today))\n              }\n\n            }\n            }\n            value = {filterBy}/>\n        </Form.Field>\n        <Form.Field>\n          <Dropdown\n            compact = { filterBy === 'month'? false:true }\n            selection\n            options = { filterBy === 'month'?getMonthOptions(4):getWeekOptions(4)}\n            onChange ={(e,{ value }) => {\n              setNumber(value)\n            }}\n            value = {number}/>\n        </Form.Field>\n      </Form.Group>\n    </Form>\n\n  )\n\n\n}\nexport default ShiftReportFilter","import { useLazyQuery } from '@apollo/client'\nimport React ,{  } from 'react'\nimport { Loader, Header, Modal } from 'semantic-ui-react'\nimport { GET_SHIFT_REPORT } from '../../queries/shiftReportQuery'\n\nimport ShiftReport from '.'\n\n\nconst ReportViewModal = ({ openReport,setOpenReport }) => {\n  const [getReport,{ error,loading,data }] = useLazyQuery(GET_SHIFT_REPORT)\n\n  const onMount = () => {\n    if(openReport.id) {\n      getReport({ variables:{ id: openReport.id } })\n    } else{\n      setOpenReport({ ...openReport,id:'', open: false })\n    }\n\n\n  }\n\n  return (\n    <Modal\n      onClose={() => setOpenReport({ id:'',open:false })}\n      onMount={() => onMount()}\n      open= {openReport.open}\n    >\n      { error &&\n      <>\n        <Modal.Content> <Header as ='h5'>Oouch...Something Went Wrong, Please try again</Header> </Modal.Content>\n      </>\n      }\n      { loading &&\n      <Loader active>Retriving Report</Loader>\n\n      }\n\n      {data && data.getShiftReport &&\n      <>\n        <Modal.Header>Shift Report: {data.getShiftReport.startTime.split(' ')[0]} {data.getShiftReport.station.location} {data.getShiftReport.shift} shift</Modal.Header>\n        <Modal.Content>\n          <ShiftReport reportData = {data.getShiftReport}> </ShiftReport>\n        </Modal.Content></>\n      }\n    </Modal>\n  )\n\n}\n\nexport default ReportViewModal","import React ,{ Fragment, useEffect, useState } from 'react'\nimport { Table,Loader, List, Header, Message } from 'semantic-ui-react'\nimport _ from 'lodash'\n\nimport ReportViewModal from '../ShiftReport/ReportViewModal'\nimport { useQuery } from '@apollo/client'\nimport { GET_REPORTLIST } from '../../queries/shiftReportQuery'\nimport { getFilterYear } from '../../utils/DateHelper'\n\n\nconst ReportsTable = ({ filter }) => {\n\n  const [transformedData, setTransformedData ] = useState()\n  const [openReport,setOpenReport]= useState({ id:'', open: false })\n\n\n  const variables = { ...filter }\n\n  variables.year = getFilterYear(filter.filterBy, filter.number)\n  const { error,data, loading } = useQuery(GET_REPORTLIST, { variables: variables, skip : !(variables.stations.length && variables.year && !isNaN(variables.number)) })\n\n  useEffect(() => {\n    if(data) {\n      let transformingData\n      transformingData = { ...data.getReportList }\n      transformingData = _.groupBy(transformingData, report => report.startTime.split(' ')[0] )\n      transformingData = _.mapValues(transformingData, date => _.groupBy(date,report => report.station.location))\n      setTransformedData(transformingData)\n    }\n\n  }, [data])\n\n  if (error) {\n    return (\n      <Message error>\n        <Header as ='h5'>Something Went Wrong, Please try again</Header>\n      </Message>\n    )\n  }\n  if (loading ) {\n    return (\n      <Loader active>Fetching Reports</Loader>\n    )\n  }\n\n  if(data && !data.getReportList.length){\n    return <Header as='h5'> No reports found</Header>\n  }\n\n  if(!variables.stations.length){\n    return <Message ><Header textAlign='center' as='h5'> No station selected. Please select a station</Header></Message>\n  }\n\n\n  return (\n\n    <>\n      { transformedData &&\n       <Table  compact celled striped structured>\n         <Table.Header>\n           <Table.Row><Table.HeaderCell> Date </Table.HeaderCell><Table.HeaderCell textAlign='center'> Station </Table.HeaderCell><Table.HeaderCell> Shift </Table.HeaderCell></Table.Row>\n         </Table.Header>\n         <Table.Body>\n           {transformedData && _.map(transformedData,(stations,date) =>\n             <Fragment key = {date}>\n               {Object.entries(stations).map(([station,reports],index) =>\n                 <Table.Row  key = {station}>\n                   {index === 0 && <Table.Cell collapsing rowSpan={Object.keys(transformedData[date]).length}>{date}</Table.Cell>}\n                   <Table.Cell textAlign='center' >{station}</Table.Cell>\n                   <Table.Cell>\n                     <List horizontal>\n                       {_.map(reports, report =>\n                         <List.Item as = 'a' key={report.id}\n                           onClick = {() => {\n                             setOpenReport({ id: report.id,open:true })\n                           }}>{report.shift}\n                         </List.Item>)}\n                     </List>\n                   </Table.Cell>\n                 </Table.Row>\n               )\n               }</Fragment>\n           )\n           }\n         </Table.Body>\n       </Table>}\n      <ReportViewModal setOpenReport= {setOpenReport} openReport={openReport}></ReportViewModal>\n    </>\n  )\n}\n\nexport default ReportsTable","import React ,{ useState } from 'react'\nimport ShiftReportFilter from './ShiftReportFilter'\nimport ReportsTable from './ReportsTable'\n\nconst ShiftReportsList = () => {\n\n  const [filter,setFilter] = useState({\n    slectBy:'',\n    number:'',\n    stations:[],\n  })\n\n\n  return (\n    <>\n      <ShiftReportFilter setFilter={setFilter}></ShiftReportFilter>\n      <ReportsTable filter={filter}></ReportsTable>\n    </>\n  )\n}\n\nexport default ShiftReportsList","import React,{ useState, useContext, useReducer, useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { GET_SHIFT_REPORT } from '../../queries/shiftReportQuery'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { Loader } from 'semantic-ui-react'\nimport MenuBar from './MenuBar'\nimport ShiftReport from '../ShiftReport'\nimport Context from './Context'\nimport reducer from './stationReducer'\nimport { GET_STATION } from '../../queries/stationQuery'\nimport NewReportForm from './NewReportForm'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport StationInfo from '../StationInfo/Index'\nimport ShiftReportsList from '../ShiftReportsList'\n\n\nconst StationReportPage = () => {\n  const history = useHistory()\n\n  const initialState = useContext(Context)\n  const [state,dispatch] = useReducer(reducer, initialState)\n\n  const [,notificationDispatch] = useContext(NotificationContext)\n\n  if(!JSON.parse( sessionStorage.getItem('stationKey'))){\n    history.push('/')\n  }\n\n  const params = useParams()\n  const id =params.id\n  const station = params.station\n\n  const [activeItem, setActiveItem] = useState('lastShiftReport')\n\n  let queryParams\n\n  if (station && id ){\n    queryParams = {\n      station: id,\n      flag:'MOST_RECENTLY_COMPLETED'\n    }\n  }\n\n  const useMultipleQuery = () => {\n    const res1 = useQuery(GET_SHIFT_REPORT,{\n      variables:queryParams,\n      onError: (err) => notificationDispatch({ type:'ADD_NOTIFICATION',  payload:{ content: err.message ,type: 'ERROR' } }) })\n    const res2 = useQuery(GET_STATION,{ variables:{ id: id } })\n    return [res1, res2]\n  }\n\n  const [\n    { loading:loadingReport, data: dataReport },\n    {  data: dataStation }\n  ] = useMultipleQuery()\n\n  useEffect(() => {\n    if(dataStation) dispatch({ type:'INIT_STATION',payload:dataStation.getStation })\n  },[dataStation])\n\n  useEffect(() => {\n    if(dataReport) dispatch({ type:'ADD_LASTSHIFTREPORT',payload:dataReport.getShiftReport })\n  },[dataReport])\n\n  //const { loading:loadingReport, error:errorReport, data: dataReport } = useQuery(GET_SHIFT_REPORT,{ variables:queryParams })\n\n\n\n  if (loadingReport) {\n    return (\n      <Loader active>Fetching Data</Loader>\n    )\n  }\n\n  return (\n    <>\n      <Context.Provider value={{ state, dispatch }}>\n\n        <MenuBar activeItem= {activeItem} setActiveItem={setActiveItem}/>\n\n        { activeItem === 'lastShiftReport' &&\n          <ShiftReport reportData= {dataReport && dataReport.getShiftReport}  />\n        }\n        { activeItem === 'browseAllReports' &&\n          <ShiftReportsList  />\n        }\n\n        {activeItem === 'startNewReport'&&\n          //<NewReportShiftSelectModel  stationId={id} ></NewReportShiftSelectModel>\n          <NewReportForm  setActiveItem={setActiveItem}></NewReportForm>\n        }\n\n        {activeItem === 'stationInfo'&&\n          //<NewReportShiftSelectModel  stationId={id} ></NewReportShiftSelectModel>\n          <StationInfo stationId={id}></StationInfo>\n        }\n      </Context.Provider>\n    </>\n  )\n}\n\nexport default StationReportPage\n\n","import { gql } from '@apollo/client'\nexport const LOGIN_STAFF = gql`\n  mutation staffLogin($username: String!, $password:String!){\n    staffLogin(username: $username, password: $password) \n  }\n`\n\nexport const RESET_PASSWORD = gql`\nmutation resetPassword ($resetCode: String!, $password: String!){\n  resetPassword(\n    password: $password,\n    resetCode: $resetCode\n  ){\n    status\n    message\n  }\n}`\n\nexport const RESET_REGISTER_CODE = gql`\nmutation resetRegisterCode ($id: String!){\n  resetRegisterCode(\n    id: $id,\n  ){\n    status\n    message\n  }\n}`\n\nexport const RESET_PASSWORD_REQ = gql`\nmutation resetPasswordReq ($id: String!){\n  resetPasswordReq(\n    id: $id,\n  ){\n    status\n    message\n  }\n}`\n\nexport const CHANGE_PASSWORD = gql`\nmutation changePassword ( $id: String!, $password: String!, $newPassword: String! ){\n  changePassword ( \n    id: $id,\n    password: $password,\n    newPassword: $newPassword\n    ){\n      status\n      message\n    }\n}`\n\nexport const STAFF_EDIT = gql`\nmutation staffEdit($id:String! $email:String, $phone: String , $contractType: String , $reqHours: Float , $position :String){\n  staffEdit(\n    id: $id,\n    email:$email,\n    phone:$phone,\n    contractType: $contractType,\n    reqHours: $reqHours,\n    position: $position\n  ){\n    id\n    email\n    phone\n    contractType\n    reqHours\n    position\n  }\n}`\n\nexport const STAFF_ADD = gql`\n  mutation addStaff( $name: String!, $email: String!, $contractType: String! , $ contractHours: Int!, $position: String, $idCardCode: String){\n    addStaff(\n      name: $name,\n      email:$email,\n      contractType: $contractType,\n      contractHours: $contractHours,\n      position: $position\n      idCardCode: $idCardCode\n    ){\n      id,\n      name,\n      email,\n      phone\n    }\n  }\n`\n\nexport const SET_STAFF_STATUS= gql`\n  mutation toggleleStaffStatus( $id: String!, $disabled: Boolean! ){\n    setStaffStatus(\n      id: $id,\n      disabled: $disabled\n      )\n      {\n      status\n      message\n    }\n  }\n`\n\nexport const DELETE_STAFF= gql`\n  mutation deleteStaff( $id: String!){\n    staffDelete(\n      id: $id,\n    ){\n      status\n      message\n    }\n  }\n`\n\nexport const COMPLETE_REGISTRATION = gql`\n  mutation registerStaff( $registerCode:String!, $username: String!, $password: String!){\n    registerStaff(\n      registerCode: $registerCode\n      username: $username,\n      password:$password,\n    ){\n      status,\n      message\n    }\n  }`\n","import React, { useState,useEffect, useContext } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useMutation } from '@apollo/client'\nimport { Button, Form, Grid, Header, Image, Segment, Divider } from 'semantic-ui-react'\nimport { LOGIN_STAFF } from '../mutations/staffMutation'\nimport { NotificationContext } from '../contexts/NotificationContext'\n\n\nconst StaffLoginPage = () => {\n  const [,dispatch] = useContext(NotificationContext)\n  const history = useHistory()\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  /**\n   * staff Login mutation hook\n   */\n  const [login,{ data }] = useMutation(LOGIN_STAFF,{\n    onError: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, Cannot Login'}<br/> {err.message}</> ,type: 'ERROR' } })\n    }\n  })\n\n  /**\n   * side effect when the staff login mutation is executed and loginToStationResult is set\n   */\n  useEffect(() => {\n    if ( data ) {\n      const staff = data.staffLogin\n      sessionStorage.setItem('staffKey',JSON.stringify(staff))\n      history.push(`/staff/${staff.id}`)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data])\n\n  /**\n   * function for station loginStation action\n   * @param {event} event submit button event\n   */\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    login({ variables:{ username:username, password: password } })\n\n  }\n\n  /**\n   * If stationKey is found on localStorage/sessionStorage skip the loginStation and browse shift report\n   */\n  let storedStaffKey = JSON.parse(sessionStorage.getItem('staffKey'))\n  if(storedStaffKey){\n    history.push(`/staff/${storedStaffKey.id}`)\n  }\n\n  return (\n\n    <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n      <Grid.Column style={{ maxWidth: 450 }}>\n        <Header as='h2' color='blue' textAlign='center'>\n          <Image src='/LogoMin.png' />  Log-in to your account\n        </Header>\n        <Form size='large' style={{ textAlign:'left' } } onSubmit={handleLogin}>\n          <Segment stacked>\n            <Form.Input fluid icon='user' iconPosition='left' placeholder='username' onChange = {(e,{ value }) => setUsername(value) }/>\n            <Form.Input\n              fluid\n              icon='lock'\n              iconPosition='left'\n              placeholder='Password'\n              type='password'\n              onChange = {(e,{ value }) => setPassword(value) }\n            />\n            <Button type = 'submit' color='blue' fluid size='large' >\n            Login\n            </Button>\n\n          </Segment>\n        </Form>\n        <Divider horizontal>Or</Divider>\n        <Segment  stacked>\n          <Button type = 'button' content='Log in to station'size='large' color=\"teal\" fluid\n            onClick = {() => history.push('/stationLogin')}/>\n        </Segment>\n\n      </Grid.Column>\n\n    </Grid>\n\n\n  )\n\n\n}\n\nexport default StaffLoginPage","import { gql } from '@apollo/client'\r\nexport const GET_TIMESHEETS =\r\ngql `query getTimesheetByUser($staff: String!, $filterDuration: String! ,$number: Int!, $year: Int!){\r\n  getTimeSheetByUser(\r\n    staff: $staff,\r\n     filterDuration: $filterDuration, \r\n     number: $number, \r\n     year: $year\r\n    ) {\r\n      id\r\n      startTime\r\n      status\r\n      date\r\n      endTime\r\n      break\r\n      remarks{\r\n        by\r\n        date\r\n        edit\r\n        text\r\n        title\r\n      }\r\n      staff{\r\n        id\r\n        name\r\n        reqHours\r\n        contractType\r\n      }\r\n      shiftReport {\r\n        shift\r\n        id\r\n        station {\r\n          id\r\n          location\r\n        }\r\n      }\r\n\r\n      shift\r\n      station{\r\n        id\r\n        location\r\n      }\r\n\r\n  },\r\n\r\n  getStaffName(\r\n    id: $staff\r\n    )\r\n\r\n}`\r\n\r\nexport const GET_ALL_TIMESHEETS = gql`\r\nquery getAllTimeSheets(\r\n  $staffId: String, $staff: [String] ,$period: String, $from: String , $to: String, $number: Int, $groupBy: String , $year: Int, $stations: [String], $filterStatus: String\r\n){\r\n  getAllTimeSheets(\r\n    staff:$staff,\r\n    period:$period,\r\n    from: $from,\r\n    to:$to ,\r\n    number:$number ,\r\n    groupBy:$groupBy,\r\n    year:$year ,\r\n    stations:$stations\r\n    filterStatus: $filterStatus\r\n    )\r\n  getStaffName(\r\n      id: $staffId\r\n      )\r\n   \r\n}`","import React, { useContext, useEffect, useState } from 'react'\r\nimport { Modal,Form, Button, Message, Segment, Header, Icon, Dimmer, Loader } from 'semantic-ui-react'\r\nimport { DateInputField } from '../StationReportPage/NewReportForm/FormFields'\r\nimport { operateDate, formatDate, toDate } from '../../utils/DateHelper'\r\nimport { FieldArray, Formik } from 'formik'\r\nimport { validateStartEndTime } from '../StationReportPage/NewReportForm/validator'\r\nimport _ from 'lodash'\r\nimport { ALL_STATION } from '../../queries/stationQuery'\r\nimport { GET_SHIFTREPORT_ID } from '../../queries/shiftReportQuery'\r\nimport { UPDATE_TIMESHEET } from '../../mutations/timeSheetMutation'\r\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client'\r\nimport { DropDownField, InputField, RemarkField } from './TimeSheetEditFields'\r\nimport { useParams } from 'react-router-dom'\r\nimport { NotificationContext } from '../../contexts/NotificationContext'\r\n\r\nconst  TimeSheetEditModel = (props) => {\r\n  const[,dispatch] = useContext(NotificationContext)\r\n  const params= useParams()\r\n  const self=  JSON.parse( sessionStorage.getItem('staffKey'))\r\n  const { loading,data } = useQuery(ALL_STATION,{ skip: props.add === false  }) //Station list is required only when adding new record\r\n  const [getShiftReport,{ loading:shiftReportLoading, data:shiftReportData }] = useLazyQuery(GET_SHIFTREPORT_ID)\r\n  const [updateTimeSheet,{ loading: updateTimeSheetLoading }] = useMutation(UPDATE_TIMESHEET,{\r\n    onError: (error) => {\r\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, Failed to ${props.add?'Add':'Update' } timesheet record `}<br/>{error.message}</> ,type: 'ERROR' } })\r\n      closeModel()\r\n    }\r\n  })\r\n\r\n  const [stationOptions, setStationOptions] = useState([])\r\n  const [newRemarkField,setNewRemarkField] = useState(false)\r\n\r\n\r\n  const selfHasPermissionToAddEdit  = (station) => {\r\n    if(self.permission.admin ||\r\n      self.permission.timesheet.sign.map(station => station._id).includes(station && station.id) ||\r\n      self.id === props.staffId){ // If viewing own timesheet or station is on timeshitsignpermission list or user is admin\r\n      return true\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    if(data && data.allStations){\r\n      const stations = data.allStations\r\n      const permittedStations =  stations.filter ( station => selfHasPermissionToAddEdit (station))\r\n      const stationOptions = permittedStations.map((station,index) => {\r\n        return { key:index, value: station.id, text: station.location }\r\n      })\r\n\r\n      setStationOptions(stationOptions)\r\n    }\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  },[data])\r\n\r\n\r\n  const getShiftList= (stationId) => {\r\n    if(data){\r\n      const station = data.allStations.filter(station => station.id === stationId)\r\n\r\n      if(station && station[0].shifts) {\r\n\r\n        const shiftList = station[0].shifts.map((shift,index) => {\r\n\r\n          return{ key:index, value: shift.name, text: shift.name }\r\n        })\r\n\r\n        return shiftList\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  /**returns approprite shift selection value to appropite shift based on starttime for choosen station  */\r\n  const getRecomendedShiftOption = (startTime,stationId) => {\r\n    if(data){\r\n      const station = data.allStations.filter(station => station.id === stationId)\r\n      if(station && station[0].shifts) {\r\n        const sdt = new Date(toDate(startTime))\r\n        const shiftName = station[0].shifts.reduce((p,c) => {\r\n          /**Setting the shiftTime to given startTime for comparision  */\r\n          const splitSt = c.startTime.split(':')\r\n          const st = new Date(sdt)\r\n          st.setHours(splitSt[0])\r\n          st.setMinutes(splitSt[1])\r\n          /** Diffence between given startTIme and shift startttime */\r\n          const diff = (sdt-st)/(60*60*1000)\r\n\r\n          /**return the lowest positive diffence if exist or highest negative differnce*/\r\n          if((diff > p.diff && p.diff < 0) ){\r\n            return { name: c.name ,diff: diff }\r\n          }\r\n          if(diff > 0 && diff< p.diff){\r\n            return { name: c.name ,diff: diff }\r\n          }\r\n          return p\r\n        },{ name:'',diff:-24 })\r\n        return shiftName.name\r\n\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n\r\n  const handleShiftChange = (startTime,shift,station) => {\r\n    const st = new Date(toDate(startTime))\r\n    const ISODate = new Date ( Date.UTC(st.getFullYear() , st.getMonth() , st.getDate())).toISOString()\r\n    const vars = { date:ISODate ,shift: shift, station:station }\r\n    getShiftReport({ variables: vars })\r\n  }\r\n\r\n  const submit = async (values) => {\r\n    const vars = { ...values,break: parseInt(values.break) }\r\n    if(shiftReportData && shiftReportData.getShiftReportByShift &&  shiftReportData.getShiftReportByShift.id){\r\n      vars.handover = shiftReportData.getShiftReportByShift.id\r\n    }\r\n\r\n    if(!props.add){\r\n      vars.id = props.id\r\n    }\r\n\r\n    /**If new remarks is added only update added remarks */\r\n    if(values.remarks.length >= props.remarks.length){\r\n      vars.remarks.splice(0,props.remarks.length)\r\n    }\r\n    updateTimeSheet(\r\n      {\r\n        variables: vars,\r\n        update:(store,response) => {\r\n        /** Need to update cache only if add , graphql auto updates timesheet on update */\r\n          if(props.add){\r\n            store.modify ({\r\n              fields:{\r\n                getTimeSheetByUser(existingTimeSheetRefs , { readField }){\r\n                  const newTimeSheet = response.data.addToTimeSheet\r\n\r\n                  if(existingTimeSheetRefs.some(ref => readField('id',ref) === newTimeSheet.id)){\r\n                    return existingTimeSheetRefs\r\n                  }\r\n\r\n                  return [...existingTimeSheetRefs,newTimeSheet]\r\n\r\n                },\r\n\r\n                getAllTimeSheets(existingTimeSheetRefs){\r\n                  const period = params.period\r\n                  if(!period){\r\n                    return existingTimeSheetRefs\r\n                  }\r\n                  const newTimeSheet = response.data.addToTimeSheet\r\n                  const modify = _.cloneDeep(existingTimeSheetRefs)\r\n\r\n                  const totHours = (((toDate(newTimeSheet.endTime) - toDate(newTimeSheet.startTime) )/ (60*1000*60)) - (newTimeSheet.break || 0)/60).toFixed(1)\r\n                  if(!modify[period]){\r\n                    modify[period] = {}\r\n                  }\r\n\r\n                  if(!modify[period][newTimeSheet.staff.name]){\r\n                    modify[period][newTimeSheet.staff.name]= {}\r\n                    modify[period][newTimeSheet.staff.name].station = { [newTimeSheet.station.location]:1 }\r\n                    modify[period][newTimeSheet.staff.name].itemsPending = 1\r\n                    modify[period][newTimeSheet.staff.name].totHours = totHours\r\n\r\n                    return modify\r\n                  }\r\n\r\n                  const stations = modify[period][newTimeSheet.staff.name].station\r\n                  modify[period][newTimeSheet.staff.name] = {\r\n                    ...modify[period][newTimeSheet.staff.name],\r\n                    itemsPending:modify[period][newTimeSheet.staff.name].itemsPending+1,\r\n                    totHours: (parseFloat(modify[period][newTimeSheet.staff.name].totHours) + parseFloat(totHours)).toFixed(1),\r\n                    station:  { ...stations,[newTimeSheet.station.location]: stations[newTimeSheet.station.location]+1 }\r\n                  }\r\n\r\n                  return modify\r\n\r\n                }\r\n              },\r\n              broadcast: false\r\n            })\r\n          }\r\n          dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Success, ${props.add?'Added':'Updated' } timesheet record for ${vars.startTime.split(' ')[0]}`}</> ,type: 'SUCCESS' } })\r\n          closeModel()\r\n        }\r\n      })\r\n  }\r\n\r\n  const closeModel = () => {\r\n    props.setOpen(false)\r\n    setNewRemarkField(false)\r\n\r\n  }\r\n\r\n  const getInitValues = () => {\r\n    const init = {\r\n      startTime: props.startTime ,\r\n      endTime: props.endTime ,\r\n      break: props.break || 30,\r\n      remarks: props.remarks || [],\r\n\r\n    }\r\n\r\n    if(props.add){\r\n      init.staff = props.staffId\r\n      init.startTime = formatDate((new Date(props.date).setHours(0)))\r\n      init.endTime= (new Date(props.date).setHours(8)) > Date.now() ? formatDate(toDate(Date.now())) : formatDate((new Date(props.date).setHours(8)))\r\n      init.station = ''\r\n      init.shift = ''\r\n      init.remarks = [{ title:'Manually Entered to TimeSheet' , date: formatDate(Date.now()), by: self.name }]\r\n\r\n    }\r\n    /**/\r\n    return init\r\n  }\r\n\r\n  /**Function to auto generate remarks field based on user actions */\r\n  const autoAddRemarks = (values) => {\r\n    /**If the user is not making a new entry */\r\n    if (!props.add) {\r\n      const insertAt = props.remarks.length === 0 ? 0 : props.remarks.length\r\n      let newRemarks = [...values.remarks]\r\n      /**If start time and end time is modified from the original  */\r\n      if((values.startTime !== props.startTime || values.endTime !== props.endTime)){\r\n        /**Adding Filed Edited remarks to the last index of original remarks field, user entered remark should appear after this if there is any */\r\n        if(!newRemarks[insertAt] || (newRemarks[insertAt] && newRemarks[insertAt].title!== 'Edited')){\r\n          newRemarks.splice(insertAt,0,{ title:'Edited',date: formatDate(Date.now()),by:self.name, edit:{} })\r\n        }\r\n\r\n        if(values.startTime !== props.startTime){\r\n          newRemarks[insertAt].edit.startTime = `${props.startTime} to  ${values.startTime}`\r\n        }\r\n        if(values.endTime !== props.endTime){\r\n          newRemarks[insertAt].edit.endTime= `${props.endTime} to  ${values.endTime}`\r\n        }\r\n        values.remarks= newRemarks\r\n      }\r\n      /**If startTime is not modified or restored to original Value */\r\n      if(values.startTime === props.startTime){\r\n\r\n        if(newRemarks[insertAt] && values.remarks[insertAt].edit){\r\n          delete newRemarks[insertAt].edit.startTime\r\n        }\r\n      }\r\n      /**If startTime is not modified or restored to original Value */\r\n      if(values.endTime === props.endTime){\r\n        if(newRemarks[insertAt] && values.remarks[insertAt].edit){\r\n          delete newRemarks[insertAt].edit.endTime\r\n        }\r\n      }\r\n      /*If everything was restored to original value then remove the edited remarks */\r\n      if(newRemarks[insertAt] && newRemarks[insertAt].edit && _.isEmpty(newRemarks[insertAt].edit)){\r\n        newRemarks.splice(insertAt,1)\r\n      }\r\n      values.remarks= newRemarks\r\n    }\r\n  }\r\n\r\n  const modalHeader = props.add? `Adding Work Time Record to Date ${formatDate (Date.parse(props.date)).split(' ')[0]}`: `Editing Work Time Record to Date ${formatDate (Date.parse(props.date)).split(' ')[0]}`\r\n  return (\r\n    <Modal\r\n      closeIcon\r\n      closeOnEscape={false}\r\n      closeOnDimmerClick={false}\r\n      open = {props.open}\r\n      onClose= {() => closeModel()}\r\n      onOpen= {() => props.setOpen (true)}\r\n    >\r\n      <Modal.Header>{modalHeader} </Modal.Header>\r\n      <Modal.Content>\r\n\r\n\r\n\r\n        {updateTimeSheetLoading &&\r\n            <Dimmer active>\r\n              <Loader />\r\n            </Dimmer>\r\n        }\r\n        <Formik\r\n\r\n          initialValues = {getInitValues()}\r\n          validate = {values => {\r\n\r\n            let errors = {}\r\n            errors = { ...errors,...validateStartEndTime(values.startTime,values.endTime,props.date) }\r\n            if(_.isEmpty(errors)){\r\n              autoAddRemarks(values)\r\n            }\r\n\r\n            return errors\r\n\r\n\r\n          } }\r\n\r\n          onSubmit = {(values) =>\r\n          {\r\n            /**If last added remark is empty remark then remove from values\r\n             * Retrived Remarks from database will have a title, new remark will always be at the end of array and may not have either title or text\r\n             */\r\n            if(values.remarks.length &&  !values.remarks[values.remarks.length-1].title  &&  !values.remarks[values.remarks.length-1].text ){\r\n\r\n              const newRemarks = [...values.remarks]\r\n              newRemarks.splice(values.remarks.length-1,1)\r\n              values.remarks = newRemarks\r\n            }\r\n            /**If last added remark has text but no title then set title */\r\n            if(values.remarks.length &&  ! values.remarks[values.remarks.length-1].title &&  values.remarks[values.remarks.length-1].text){\r\n              values.remarks[values.remarks.length-1].title = 'Remark Added'\r\n            }\r\n\r\n            submit(values)}\r\n          }\r\n\r\n\r\n        >\r\n\r\n\r\n          {({ values,handleSubmit,setFieldValue,dirty }) =>\r\n\r\n            <Form size='large' style={{ marginBottom:'5rem' }} onSubmit = { handleSubmit} >\r\n\r\n              <Form.Group >\r\n\r\n                < DateInputField\r\n                  label= 'Start Time'\r\n                  readOnly = {!props.add && (props.status === 'APPROVED' || !selfHasPermissionToAddEdit(props.station))}\r\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\r\n                  name ='startTime'\r\n                  maxDate = {operateDate(Date.now(),30,'m','sub')}\r\n                  minDate= {formatDate (Date.parse(props.date))}\r\n\r\n                />\r\n\r\n\r\n                < DateInputField\r\n                  label = 'End Time'\r\n                  readOnly = {!props.add && (props.status === 'APPROVED' || !selfHasPermissionToAddEdit(props.station))}\r\n                  dateTimeFormat = 'DD-MM-YYYY HH:mm'\r\n                  name='endTime'\r\n                  maxDate = {\r\n                    Date.now() < toDate(values.endTime)? formatDate(Date.now()) : operateDate(values.startTime,20,'h','add')\r\n                  }\r\n                  minDate= {operateDate(values.startTime,20,'m','add')}\r\n\r\n                />\r\n\r\n                <InputField\r\n                  inputlabel= 'Break'\r\n                  readOnly = {!props.add && (props.status === 'APPROVED' || !selfHasPermissionToAddEdit(props.station))}\r\n                  label = 'Minutes '\r\n                  labelPosition='right corner'\r\n                  name= 'break'\r\n                  type='number'\r\n                  min='0'>\r\n                </InputField>\r\n\r\n              </Form.Group>\r\n\r\n\r\n              {\r\n                /** If the user is inserting new timesheet  */\r\n                props.add &&\r\n                <Form.Group>\r\n\r\n                  <DropDownField\r\n                    label =' Select Station'\r\n                    loading= {loading}\r\n                    name = 'station'\r\n                    placholder= 'Select Station'\r\n                    search\r\n                    selection\r\n                    options= {stationOptions}\r\n                    onChange = {  (e,{ value }) => {\r\n                      setFieldValue('station',value)\r\n                      const shift = getRecomendedShiftOption(values.startTime,value)\r\n                      setFieldValue('shift',shift)\r\n                      handleShiftChange(values.startTime,shift,value)\r\n\r\n                    }}\r\n                  ></DropDownField>\r\n\r\n                  <DropDownField\r\n                    label =' Select Shift'\r\n\r\n                    disabled = {!values.station}\r\n                    name = 'shift'\r\n                    placholder= 'Select Shift'\r\n                    search\r\n                    selection\r\n                    options= {values.station? getShiftList(values.station):[]}\r\n                    onChange = {(e,{ value } ) => {\r\n                      setFieldValue('shift',value)\r\n                      handleShiftChange(values.startTime,value,values.station)\r\n                    }}\r\n                  ></DropDownField>\r\n\r\n\r\n                </Form.Group>\r\n              }\r\n\r\n              { /**While Loading Data */\r\n                shiftReportLoading &&\r\n                  <Segment secondary loading>\r\n                    Verifying {values.shift} Shift\r\n                  </Segment>\r\n              }\r\n\r\n              { /**If the shift is set and shift report exist for the corresponding shift */\r\n                values.shift && shiftReportData && shiftReportData.getShiftReportByShift &&\r\n                  <Segment clearing secondary>\r\n                    <Header as='h3'><Icon name='check circle' color='green'></Icon> Verified</Header>\r\n                    <Header floated='left' as='h5'>{shiftReportData.getShiftReportByShift.station.location} {values.shift} Shift {shiftReportData.getShiftReportByShift.startTime.split(' ')[0]}\r\n                      <Header.Subheader><strong> Shift Start : </strong> {shiftReportData.getShiftReportByShift.startTime}<strong> Shift End : </strong> {shiftReportData.getShiftReportByShift.endTime} </Header.Subheader>\r\n                    </Header>\r\n                    <Button type='button'floated='right' onClick={() => props.openReport({ id: shiftReportData.getShiftReportByShift.id, open:true })} > View Shift Report</Button>\r\n\r\n                  </Segment>\r\n              }\r\n\r\n              {\r\n                /**If the shift is set and the shift report doesnot exist for corresponding shift */\r\n                values.shift && shiftReportData && !shiftReportData.getShiftReportByShift &&\r\n                <Message warning visible\r\n                  header='Selected shift is not reported'\r\n                  content='Adding to record to unreported shift will not be reflected on any shift reports thus cannot be verified. This may result on work time not being approved'\r\n                />\r\n              }\r\n\r\n              <label ><strong>Remarks</strong></label>\r\n              <FieldArray name='remarks'>\r\n                {({ push,remove }) => <>\r\n\r\n                  {values.remarks && values.remarks.length > 0 && values.remarks.map((remark,index) =>\r\n                    <RemarkField key= {index} name={`remarks.${index}`} value={remark}></RemarkField>\r\n                  )}\r\n\r\n                  { /**If TImesheet is approved or user doesnot have permission , it cannot be modified */\r\n                    props.status !== 'APPROVED' && (props.add || selfHasPermissionToAddEdit (props.station) )  &&\r\n                    <Form.Button type='button'\r\n                      onClick= {(e) => {\r\n                        e.preventDefault()\r\n                        if(newRemarkField){\r\n                          remove(values.remarks.length-1)\r\n                          setNewRemarkField(false)\r\n                        } else{\r\n                          if(values.remarks.length > 0 && values.remarks[values.remarks.length-1].title === 'Clearification Requested'){\r\n                            push({ title:'Add Clearification',date: formatDate(Date.now()),by:self.name,text:'' })\r\n                          } else {\r\n                            push({ title:'',date: formatDate(Date.now()),by:self.name,text:'' })\r\n                          }\r\n                          setNewRemarkField(true)\r\n                        }\r\n                      }}>\r\n                      {!newRemarkField && values.remarks.length > 0 && values.remarks[values.remarks.length-1].title === 'Clearification Requested' ?\r\n                        'Add Clearification' :\r\n                        newRemarkField?'Remove Remark':\r\n                          'Add Remark'}\r\n                    </Form.Button>}\r\n                </>\r\n                }\r\n              </FieldArray>\r\n              { props.status !== 'APPROVED' && dirty && selfHasPermissionToAddEdit(props.station) &&\r\n              <Button type='submit' floated='right' positive>Save</Button>\r\n              }\r\n              <Button type='button' floated='right' negative onClick={() => closeModel()}>Cancel</Button>\r\n            </Form>}\r\n        </Formik>\r\n\r\n\r\n\r\n      </Modal.Content>\r\n\r\n    </Modal>\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default TimeSheetEditModel","import {  useMutation } from '@apollo/client'\nimport React, { useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { Table,Button, Popup, Header, Message,  Segment,Form } from 'semantic-ui-react'\nimport { APPROVE_TIMESHEET, DELETE_TIMESHEET, REQUEST_CLARIFICATION } from '../../mutations/timeSheetMutation'\nimport TimeSheetEditModel from './TimeSheetEditModel'\nimport _ from 'lodash'\n\nconst TimeSheetRow = ({ timeSheet, rowSpan ,openReport ,index ,date ,staffId }) => {\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\n\n  const params= useParams()\n\n  const permission = staff.permission && staff.permission.timesheet\n  const startTime = timeSheet.startTime\n  const endTime = timeSheet.endTime\n  const station = (timeSheet.shiftReport && timeSheet.shiftReport.station.location) ||  (timeSheet.station && timeSheet.station.location)\n  const shift = (timeSheet.shiftReport && timeSheet.shiftReport.shift) || timeSheet.shift\n  const  breakt = timeSheet.break\n  const totalHours = timeSheet.total\n  const ot = timeSheet.overTime\n  const remarks = timeSheet.remarks || []\n  const [open,setOpen] = useState(false)\n  const [add,setAdd] = useState(false)\n  const [deleteOpen,setDeleteOpen]=  useState(false)\n  const [clarifyOpen,setClarifyOpen]=  useState(false)\n\n  const [clarifyText,setClarifyText] = useState('')\n\n  const [approveTimesheet,{ loading:timesheetSignLoading }] = useMutation(APPROVE_TIMESHEET)\n  const [mutatedeleteTimesheet,{ loading:deleteLoading }] = useMutation(DELETE_TIMESHEET)\n  const [requestClarification,{ loading:clarifyLoading }] = useMutation(REQUEST_CLARIFICATION)\n\n\n  if (!staffId){\n    staffId = staff.id\n  }\n\n  const deleteTimeSheet = () => {\n    mutatedeleteTimesheet(\n      { variables:{ id: timeSheet.id },\n        update: (store,response) => {\n          if(response.data.deleteTimeSheet && response.data.deleteTimeSheet.status === 'SUCCESS') {\n            store.evict({\n              id: `TimeSheet:${timeSheet.id}`\n            })\n            store.modify({\n              fields:{\n                getAllTimeSheets(existingTimeSheetRefs, { readField }){\n                  const period = params.period\n                  if(!period){\n                    return existingTimeSheetRefs\n                  }\n\n                  const modify = _.cloneDeep(existingTimeSheetRefs)\n\n\n                  const totHours = modify[period][timeSheet.staff.name].totHours-totalHours\n                  if (totHours === 0){\n                    delete (modify[period])\n                    return modify\n                  }\n\n                  const stations = modify[period][timeSheet.staff.name].station\n                  modify[period][timeSheet.staff.name] = {\n                    ...modify[period][timeSheet.staff.name],\n                    itemsPending:modify[period][timeSheet.staff.name].itemsPending-1,\n                    totHours: totHours,\n                    station:  { ...stations,[timeSheet.station.location]: stations[timeSheet.station.location]-1 }\n\n                  }\n\n                  return modify\n                }\n              },\n\n            })\n\n          }\n\n        }\n      })\n\n  }\n\n  const askToclarify = () => {\n    const vars = {\n      id: timeSheet.id,\n      clearify: clarifyText\n    }\n\n    requestClarification({ variables: vars }\n\n\n    )\n\n  }\n\n  const updateTimeSheetApproval = () => {\n    approveTimesheet({\n      variables:{ id:timeSheet.id , status:timeSheet.status==='APPROVED'?'':'APPROVED' },\n      update: (store,response) => {\n        store.modify({\n          fields: {\n            getAllTimeSheets(existingTimeSheetRefs, {  readField }){\n              const period = params.period\n              if(!period){\n                return existingTimeSheetRefs\n              }\n\n              const approved = response.data.approveTimeSheet.status\n              const modify = _.cloneDeep(existingTimeSheetRefs)\n              if(modify.perid){\n                modify[period][timeSheet.staff.id].itemsPending = approved==='APPROVED'? modify[period][timeSheet.staff.id].itemsPending-1: (modify[period][timeSheet.staff.id].itemsPending)+1\n              }\n\n\n\n              return modify\n\n            }\n          }\n        })\n\n\n      }\n    })\n\n  }\n\n  const isWeekDay = ()  => {\n    const today = new Date(date).getDay()\n    if( today === 0 || today ===6){\n      return false\n    }\n    return true\n  }\n  /**If the id is a valid id string, empty rows with no data will not have valid ids. */\n  const isEmptyRow = timeSheet.id.toString().match(/^[0-9a-fA-F]{24}$/) ? false: true\n\n  return (\n    <Table.Row  key = {timeSheet.id} negative= {!isWeekDay()}>\n      {index === 0 && <Table.Cell collapsing rowSpan={rowSpan}>{ date.split('T')[0]}</Table.Cell>}\n      <Table.Cell> {station} </Table.Cell>\n      <Table.Cell onClick= {(e) => {\n        e.preventDefault()\n        openReport({ id: timeSheet.shiftReport && timeSheet.shiftReport.id, open:true })\n      }}>\n        {  // eslint-disable-next-line jsx-a11y/anchor-is-valid\n          timeSheet.shiftReport && timeSheet.shiftReport.id ? <a href =\"\"> {shift} </a> : shift?`${shift} `:''\n        }  </Table.Cell>\n      <Table.Cell >{ startTime && startTime.split(' ')[1]}</Table.Cell>\n      <Table.Cell> {endTime &&endTime.split(' ')[1]} </Table.Cell>\n      <Table.Cell> {breakt} </Table.Cell>\n      <Table.Cell> {totalHours?totalHours:''} </Table.Cell>\n      {index === 0 &&  <Table.Cell  rowSpan={rowSpan} > {ot?ot:''} </Table.Cell>}\n      <Table.Cell> {timeSheet.status === 'PENDING_APPROVAL'? 'No' : timeSheet.status === 'APPROVED'? 'Yes' : timeSheet.status  } </Table.Cell>\n      <Table.Cell>\n        {remarks && remarks.length>0 &&\n        <>{`${remarks[remarks.length-1].title} ${remarks[remarks.length-1].date.split(' ')[0]}` }  <br/>  {remarks[remarks.length-1].text}`  <br/>\n          {// eslint-disable-next-line jsx-a11y/anchor-is-valid\n            <a href='#'\n              onClick = {(e ) => {\n                e.preventDefault()\n                setOpen(true)\n              }\n\n              }>See all</a>}\n\n        </>\n        }</Table.Cell>\n      <Table.Cell  >\n\n        <Segment loading={timesheetSignLoading || deleteLoading || clarifyLoading} disabled={timesheetSignLoading || deleteLoading || clarifyLoading} size='tiny' basic  style={{ width:'max-content', display:'inline-block' }} >\n\n\n          {\n            /**\n               * Add Button,\n               * visible only if data staff is loggedin Staff or  logged in staff has permission and no record exists for  that day\n               */\n            isEmptyRow  && permission && (  staff.permission.admin || permission.sign.length >0 || staff.id === staffId ) &&\n              <Button icon='add' size='mini' circular onClick = {() => {\n                setAdd(true)\n                setOpen(true)\n\n              }}/>\n\n          }\n          {\n          /**\n           * If the record exist for that day\n           */\n            !isEmptyRow &&\n            <>\n              {\n                /**\n                 * Edit Button,\n                 * visible only\n                 *    if data staff is loggedin Staff\n                 *    or\n                 *    logged in staff has permission to sign timesheet for that station\n                 *    and\n                 *    record exists for that day\n                 *    and\n                 *    record is not already approved\n                 *\n                 */\n                timeSheet.status !== 'APPROVED' && ( staff.permission.admin || (permission.sign.filter(station => timeSheet.station && station._id === timeSheet.station.id ).length !== 0 || staff.id === staffId )) &&\n                  <Popup\n                    trigger=  {<Button icon='edit' size='mini' circular onClick = {() => {\n                      setAdd(false)\n                      setOpen(true)\n                    }}/>}\n                    content='Edit Timesheet'\n                    position='bottom center'\n                  />}\n\n\n              { /**\n                   * Approve Button,\n                   * visible only\n                   *    if data staff is not loggedin Staff\n                   *    or\n                   *    logged in staff has permission to sign timesheet for that station\n                   *    and\n                   *    record is not already approved\n                   */\n                ( (staff.permission.admin || permission.sign.filter(station => timeSheet.station && station._id === timeSheet.station.id ).length !== 0)  &&  staff.id !== staffId) &&\n                  <>\n                    <Popup\n                      trigger=  { <Button  color ={timeSheet.status === 'APPROVED'?'green':'grey'} icon='check' size='mini' circular onClick = {() => {\n                        updateTimeSheetApproval()\n                      }}/>}\n                      content={timeSheet.status === 'APPROVED'? 'Undo Approve': 'Approve'}\n                      position='bottom center'\n                    />\n\n                    {\n                      /**\n                      * Request Clarification button,\n                      * visible only\n                      *    record is not already approved\n                      */\n\n                      timeSheet.status !== 'APPROVED' &&\n                      <Popup size='huge' wide='very' style={{ width:'100%' }}\n                        trigger=  { <Button color='blue' icon='talk' size='mini' circular />}\n                        onOpen= {() => setClarifyOpen(true)}\n                        onClose= {() => setClarifyOpen(false)}\n                        open = {clarifyOpen}\n                        content={\n                          <Form onSubmit = {() => {\n                            askToclarify()\n                            setClarifyOpen(false)\n                          }}>\n                            <Header as ='h5'>Request Clearification </Header>\n                            <Form.TextArea\n                              value= {clarifyText}\n                              onChange= {\n                                (e,{ value }) => setClarifyText(value)\n                              }>\n\n                            </Form.TextArea>\n                            <Form.Button floated='right' type= 'submit' primary> Send</Form.Button>\n                          </Form>\n                        }\n                        on='click'\n                        position='bottom right'\n                      />\n                    }\n                  </>\n              }\n\n              {\n                /**\n                * Delete Button,\n                * visible only\n                *    if data staff is  loggedin Staff\n                *    or\n                *    logged in staff has permission to edit timesheet for that station\n                *    and\n                *    record is not already approved\n                */\n\n                timeSheet.status !== 'APPROVED' &&((staff.permission.admin || permission.sign.filter(station => timeSheet.station && station._id === timeSheet.station.id ).length !== 0)   || staff.id === staffId  ) &&\n                <Popup as={Message} warning\n                  trigger=  { <Button  color = 'red' icon='trash' size='mini' circular />}\n                  content={\n                    <>\n\n                      <Message.Header>Are you sure, you want to remove this record?</Message.Header>\n                      <p> Action is non reversible and will remove all the instances of this record from the system.</p>\n\n                      <Button fluid color='red' icon='trash' content='Confirm' onClick = {() => {\n                        deleteTimeSheet(timeSheet.id)\n                        setDeleteOpen(false)\n\n                      }} /></>}\n                  on='click'\n                  onOpen= {() => setDeleteOpen(true)}\n                  onClose= {() => setDeleteOpen(false)}\n                  open={deleteOpen}\n                  position='bottom center'\n                />}\n            </>}\n        </Segment>\n\n\n\n      </Table.Cell>\n      { open &&\n       <TimeSheetEditModel\n         staffId = {staffId}\n         id= {timeSheet.id}\n         openReport={openReport}\n         date = {date}\n         open={open}\n         station = {timeSheet.station}\n         status ={timeSheet.status}\n         setOpen= {setOpen}\n         startTime= {startTime}\n         endTime= {endTime}\n         break= {breakt}\n         add= {add}\n         remarks= {remarks} >\n       </TimeSheetEditModel>}\n    </Table.Row>)\n\n}\n\nexport default TimeSheetRow","import React,{ Fragment, useState } from 'react'\nimport { Header, Table } from 'semantic-ui-react'\nimport { toDate } from '../../utils/DateHelper'\nimport _ from 'lodash'\nimport ReportViewModal from '../ShiftReport/ReportViewModal'\nimport TimeSheetRow from './TImeSheetRow'\n\n\nconst TimeSheetsReport = ({ startDate,endDate,data, staffId, title })  => {\n  const [openReport,setOpenReport]= useState({ id:'', open: false })\n\n  /** sets the calender from start date and end dates so the empty dates will also be displayed on report*/\n  const calenderArray =[...new Array( Math.ceil((endDate - startDate)/(24*60*60*1000)) +1 )].map((n,index) => {\n    const day = index\n    const date = new Date ( Date.UTC(startDate.getFullYear() , startDate.getMonth() , startDate.getDate()+day)).toISOString()\n    return date\n  } )\n\n  /**Converting calender array to object */\n  const calenderObject = _.zipObject(calenderArray,calenderArray.map((val,index) => [{ id:index }]))\n  let netTotal =0\n  let netOt = 0\n\n  let shiftDate\n  if(data) {\n\n    /**There is chance that the staff might be on 2 shifts on the day so grouping by date */\n    shiftDate = _.groupBy(data.getTimeSheetByUser, 'date')\n\n    const formatData = shiftDate && _.mapValues(shiftDate,(timeSheets,date) => {\n      let totalDaily = 0\n      let ot = 0\n      timeSheets = timeSheets.map((timesheet,index) => {\n        const breakt = (timesheet.break*60*1000)\n        const total =  ((toDate(timesheet.endTime) - toDate(timesheet.startTime) - breakt)/ (60*1000*60)).toFixed(1)\n\n        timesheet = { ...timesheet,total:parseFloat(total) }\n\n        totalDaily = totalDaily + parseFloat(total)\n\n        /**Overtime rules can be imlemented here\n         * For now for simplicity for Employee sundays is 100% saturday is 50%  and 8 hrs(specified by contractType) + is overtime, for contractor 10hrs + is overtime\n         */\n\n        /**If staff is a employee\n        const today = new Date(toDate(timesheet.startTime)).getDay()\n        if( timesheet.staff.contractType === 'Employee') {\n          /**If sunday */\n        /*if(today === 0 ){\n            ot = (totalDaily+parseFloat(total) - timesheet.staff.reqHours).toFixed(1)\n          }\n          /**If saturday */\n        /* else if(today === 6 ){\n            ot = (totalDaily + 0.5 * parseFloat(total) - timesheet.staff.reqHours).toFixed(1)\n          }\n          else{\n            ot = (totalDaily - timesheet.staff.reqHours).toFixed(1)\n          }\n        }\n        else{\n          ot =  (totalDaily - timesheet.staff.reqHours).toFixed(1)\n        }*/\n        ot =  (totalDaily - timesheet.staff.reqHours).toFixed(1)\n        return timesheet\n      })\n      timeSheets[0] = { ...timeSheets[0],overTime:ot }\n      netOt = netOt + parseFloat(ot)\n      netTotal = netTotal + totalDaily\n      return timeSheets\n    } )\n\n    shiftDate = ( { ...calenderObject,...formatData })\n\n  }\n\n  const stickyTh = {\n    position: 'sticky',\n    top : '0',\n    zIndex: 1\n\n\n  }\n\n  return (\n    <>\n      {title &&\n     <Header as = 'h5' floated='right'>{title}</Header>\n      }\n      <Table celled striped structured textAlign='center'>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell style= {stickyTh}> Date </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Station </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Shift </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Start Time </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> End Time </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Break (Mins) </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Total (Hrs) </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> OverTime </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Approved </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Remarks </Table.HeaderCell>\n            <Table.HeaderCell style= {stickyTh}> Actions</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {shiftDate && _.map(shiftDate,(timeSheets,date) =>\n            <Fragment key = {date}>\n              {timeSheets.map( (timeSheet,index) =>\n                <TimeSheetRow  staffId= {staffId} date = {date} index = {index} key = {timeSheet.id} openReport= {setOpenReport} timeSheet={timeSheet} rowSpan={timeSheets.length} />\n              )\n              }</Fragment>\n          )\n          }\n\n        </Table.Body>\n        <Table.Footer>\n          <Table.Row >\n            <Table.HeaderCell  colSpan='6'>Total</Table.HeaderCell>\n            <Table.HeaderCell> {netTotal.toFixed(1)} </Table.HeaderCell>\n            <Table.HeaderCell> {netOt.toFixed(1)} </Table.HeaderCell>\n            <Table.HeaderCell colSpan='3' />\n          </Table.Row>\n        </Table.Footer>\n      </Table>\n\n      <ReportViewModal setOpenReport= {setOpenReport} openReport={openReport}></ReportViewModal>\n    </>)\n}\n\nexport default TimeSheetsReport","import { useQuery } from '@apollo/client'\r\nimport React ,{ useEffect, useState } from 'react'\r\nimport { Loader, Header, Segment,Dropdown, Button ,Form, Popup } from 'semantic-ui-react'\r\n\r\nimport { GET_TIMESHEETS } from '../../queries/timeSheetQuery'\r\nimport { getWeekNumber, getDatefromWeek, getMonthOptions, getWeekOptions, getMonthName, getFilterYear  } from '../../utils/DateHelper'\r\nimport TimeSheetsReport from '../TimeSheetsReport'\r\n\r\nconst TimeSheet = ({ staffId,setStaffName, period ,selected ,selectedYear ,timesheetOnly }) => {\r\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\r\n  const [selectBy,setSelectBy] = useState (period || 'week')\r\n  const today = new Date()\r\n  const [number,setNumber] = useState (!isNaN(selected)?selected:getWeekNumber(today))\r\n\r\n  const queryParams = { staff: staffId || staff.id , filterDuration: selectBy  , number:number, year: getFilterYear(selectBy,number) }\r\n\r\n  const { error,loading,data } = useQuery(GET_TIMESHEETS, { variables:queryParams })\r\n\r\n  useEffect(() => {\r\n    if (data)\r\n      setStaffName(data.getStaffName)\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  },[data])\r\n\r\n\r\n  /**Get startDate of timeSheet Report */\r\n  const filterStartDate  =  () => {\r\n    let sdate\r\n    const year = getFilterYear(selectBy,number)\r\n    if(selectBy==='month'){\r\n      sdate = new Date(year,number,1)\r\n    } else {\r\n      sdate  = getDatefromWeek(number,year)\r\n    }\r\n\r\n    sdate = new Date(Date.UTC( sdate.getFullYear(), sdate.getMonth(), sdate.getDate()))\r\n    return (sdate)\r\n  }\r\n\r\n  /**Get startDate of timeSheet Report */\r\n  const filterEndDate  =  () => {\r\n    let ed\r\n    const year = getFilterYear(selectBy,number)\r\n    if(selectBy==='month'){\r\n      ed = new Date(year,number+1,0)\r\n    } else {\r\n      const sd  = getDatefromWeek(number,year)\r\n      ed = new Date(Date.UTC( sd.getFullYear(), sd.getMonth(), sd.getDate()+6))\r\n    }\r\n    if(ed >= today ){\r\n      ed = new Date(Date.UTC(today.getFullYear(),today.getMonth(),today.getDate()))\r\n    }\r\n    return (ed )\r\n  }\r\n\r\n  const start = filterStartDate()\r\n  const end = filterEndDate()\r\n\r\n  //console.log(start,end)\r\n\r\n  if (loading) {\r\n    return (\r\n      <Loader active>Fetching timesheets</Loader>\r\n    )\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Header as ='h5'>Something Went Wrong, Please try again</Header>\r\n    )\r\n  }\r\n\r\n  const isAllApproved = () => {\r\n    let approved = false\r\n    if(data && data.getTimeSheetByUser && data.getTimeSheetByUser.length > 0){\r\n      approved = !data.getTimeSheetByUser.some(timeSheet => timeSheet.status !== 'APPROVED')\r\n    }\r\n\r\n    return approved\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Segment basic style= {{ marginBottom:'20em' }} >\r\n        <Form>\r\n          {!timesheetOnly &&\r\n            <><label> Select by: </label>\r\n              <Form.Group>\r\n                <Form.Field>\r\n                  <Dropdown\r\n                    selection\r\n                    options = {[ { key:1 ,text: 'Month' , value: 'month' }, { key:2 ,text: 'Week' , value: 'week' }]}\r\n                    onChange = {(e,{ value }) => {\r\n                      setSelectBy(value)\r\n                      if(value==='month') {\r\n                        setNumber (today.getMonth())\r\n                      }else {\r\n                        setNumber (getWeekNumber(today))\r\n                      }\r\n\r\n                    }\r\n                    }\r\n                    value = {selectBy}/>\r\n                </Form.Field>\r\n                <Form.Field>\r\n                  <Dropdown\r\n                    compact = { selectBy === 'month'? false:true }\r\n                    selection\r\n                    options = { selectBy === 'month'?getMonthOptions(4):getWeekOptions(4)}\r\n                    onChange ={(e,{ value }) => {\r\n                      setNumber(value)\r\n                    }}\r\n                    value = {number}/>\r\n                </Form.Field>\r\n              </Form.Group>\r\n            </> }\r\n          <TimeSheetsReport staffId={staffId} startDate={start} endDate= {end} data={data} title = {`Timesheet ${selectBy === 'month'? getMonthName(number):  `Week ${number},` } ${getFilterYear(selectBy,number)} `}></TimeSheetsReport>\r\n\r\n\r\n          { staffId === staff.id &&\r\n            <Segment  basic clearing>\r\n              <Popup\r\n                trigger = {<span  floated='right' ><Button  floated='right' disabled ={!isAllApproved()} type='button' color='blue'> Submit to Payroll</Button></span>}\r\n                disabled= {isAllApproved()}\r\n                content= ' All records should be approved for submission'\r\n              />\r\n            </Segment>\r\n          }\r\n\r\n\r\n\r\n        </Form>\r\n      </Segment>\r\n\r\n\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TimeSheet","import { gql } from '@apollo/client'\nexport const GET_STAFF = gql`\nquery fetchStaff($id:String, $registerCode:String, $withPermission: Boolean!){\n    getStaff(\n      id: $id\n      registerCode: $registerCode\n      ){ \n    id     \n    name\n    idCardCode\n    currentStation{\n      location\n    }\n    email\n    position\n    contractType\n    lastActive{\n      station{\n        location\n      }\n      activeAt\n    }\n    username\n    resetCode\n    phone\n    reqHours\n    registerCode\n    permission  @include(if: $withPermission ) {\n      id\n      station\n      timesheet\n      staff\n      admin\n    }\n    }\n  }\n`\nexport const GET_STAFF_REG = gql`\nquery fetchStaff($registerCode:String,){\n    getStaff(\n      registerCode: $registerCode\n      ){ \n    name\n    }\n  }\n`\n\nexport const GET_ALL_STAFF_MINIMAL = gql`\n  query allStaffMinimal ($minimal: Boolean = true) { \n    allStaff (minimal :$minimal){\n    id\n    name   \n  }}\n`\n\nexport const GET_ALL_STAFF = gql`\n  query{ allStaff {\n    id\n    name\n    email\n    phone\n    disabled\n    lastActive{\n      station{\n        location\n      }\n      activeAt\n    }\n  }}\n`\n\n\nexport const VERIFY_USERNAME = gql`\n  query verifyUsername( $username: String!){\n    verifyUsername(   \n      username: $username,\n    ){\n      status,\n      message\n    }\n  }`","import { useLazyQuery } from '@apollo/client'\nimport React, { useEffect, useState } from 'react'\nimport { useLocation, useParams } from 'react-router-dom'\nimport { DateInput } from 'semantic-ui-calendar-react'\nimport { Form, FormGroup, Segment,Label } from 'semantic-ui-react'\n//import { GET_ALL_STAFF_MINIMAL } from '../../../queries/staffQuery'\nimport { formatDate, getMonthOptions, getWeekOptions,getWeekNumber } from '../../utils/DateHelper'\nimport { GET_ALL_STAFF_MINIMAL } from '../../queries/staffQuery'\nimport { ALL_STATION } from '../../queries/stationQuery'\n\nconst TimeSheetsFilter = ({ setFilter }) => {\n  const loggedInStaff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const params = useParams()\n  const today = new Date()\n  const [staff,setStaff] = useState([])\n  const [period,setPeriod] = useState('date')\n  const [stations,setStations] = useState( [])\n  const [groupBy,setGroupBy] = useState('week')\n  const [from,setFrom] = useState(formatDate(new Date(today.getFullYear(), today.getMonth() -3, 1 )).split(' ')[0])\n  const [to,setTo] = useState(formatDate(today).split(' ')[0])\n  const [number,setNumber] = useState(getWeekNumber(today))\n\n  const location = useLocation ()\n  const basePage =  location.pathname.split('/')[2]\n\n\n  const [filterStatus,setFilterStatus] = useState('')\n\n  const [staffOptions,setStaffOptions] = useState([])\n\n  const [stationOptions,setStationOptions] = useState(loggedInStaff.permission.timesheet.view.map((station,index ) => {\n    return { key: index, value:station._id, text: station.location }})\n  ) //Setting the permitted station list\n\n  /**If staff has admin rights then all station should be displayed in options */\n  const [getAllStations,{ loading: stationLoading, data: stationData  }] = useLazyQuery(ALL_STATION )\n  useEffect(() => {\n    if(stationData && stationData.allStations){\n      const stOpt=  stationData.allStations.map((station,i) => {\n        return { key: i, value:station.id, text: station.location }\n      })\n      setStationOptions(stOpt)\n    }\n\n\n  }, [stationData])\n\n  const [getAllStaffs,{ loading: staffLoading, data: staffData }] = useLazyQuery(GET_ALL_STAFF_MINIMAL)\n\n  useEffect(() => {\n    if(staffData){\n      const staffOpt = staffData.allStaff.map((staff,index) => {\n        return { key:index, value:staff.id, text: staff.name }\n      } )\n      setStaffOptions(staffOpt)\n    }\n\n\n  }, [staffData])\n\n\n  useEffect(() => {\n    setFilter({ staff, period ,stations ,groupBy ,from ,to , number,  filterStatus })\n  },[staff, period, stations, groupBy, from, to, number, filterStatus, setFilter])\n\n  useEffect(() => {\n    if(params.staffId ){\n      setStaff([params.staffId])\n    }else{\n      setStaff([])\n    }\n    if(basePage.toLowerCase() === 'mypage'){\n      setStaff([loggedInStaff.id])\n    }\n  },[basePage, loggedInStaff.id, params])\n\n\n  return (\n\n    <>\n\n      <Segment size='tiny' clearing>\n        <Label size='mini' attached='top left'>Filters</Label>\n        <Form size='mini'>\n          <FormGroup widths='equal' >\n            {\n              !params.staffId && basePage.toLowerCase() !== 'mypage' &&\n              <Form.Dropdown\n                label='Staff'\n                value= {staff}\n                loading={staffLoading}\n                options={staffOptions}\n                selection multiple clearable\n                placeholder='All'\n                onFocus= {() => getAllStaffs()}\n                onChange= {(e,{ value }) => setStaff(value)}></Form.Dropdown>\n            }\n            <Form.Dropdown label='Period'\n              value= {period}\n              options= {[{ key:1, value:'date', text:'Date' },{ key:2, value:'week', text:'Week' },{ key:3, value:'month', text:'Month' }, ]}\n              placeholder='All' selection clearable compact\n              onChange ={(e,{ value }) => {\n                if(value ==='week'){\n                  setNumber(getWeekNumber(today))\n                }\n                if(value === 'month'){\n                  setNumber(today.getMonth())\n                }\n                setPeriod(value)\n              } }></Form.Dropdown>\n\n\n            {period === 'date' && <>\n              <DateInput value={from}  label='From'\n                dateFormat='DD-MM-YYYY'\n                onChange = {(e,{ value }) => {\n                  setFrom(value)\n                }}></DateInput>\n              <DateInput value={to} label='To' dateFormat='DD-MM-YYYY'\n                onChange = {(e,{ value }) => {\n                  setTo(value)\n                }}></DateInput>\n            </>}\n\n            {\n              (period === 'week' || period === 'month') && <>\n                <Form.Dropdown\n                  value={number}\n                  label={`Select ${period}`}\n                  options={period==='week'?getWeekOptions():getMonthOptions()}\n                  selection compact\n                  onChange ={(e,{ value }) => {\n                    setNumber(value)\n                  }}></Form.Dropdown>\n              </>\n            }\n            <Form.Dropdown label= 'Group By'\n              value= {groupBy}\n              options= {[{ key:1,value:'week',text:'Week' }, { key:2,value:'month',text:'Month' },]}\n              onChange = {(e,{ value }) => setGroupBy(value)}\n              selection\n              compact>\n\n            </Form.Dropdown >\n            <Form.Dropdown\n              label= 'Station'\n              loading= {stationLoading}\n              options={stationOptions}\n              value= {stations}\n              selection multiple clearable\n              placeholder='All'\n              onFocus= {() => {\n                if(loggedInStaff.permission.admin) {\n                  getAllStations()\n                }\n              }\n              }\n              onChange = {(e,{ value }) => setStations(value)}></Form.Dropdown>\n\n            <Form.Dropdown label= 'Status'\n              value= {filterStatus}\n              options= {[{ key:1,value:'approved',text:'Approved' }, { key:2,value:'pending',text:'Pending' },]}\n              onChange = {(e,{ value }) => setFilterStatus(value)}\n              placeholder='All'\n              clearable\n              selection\n              compact>\n\n            </Form.Dropdown >\n\n          </FormGroup>\n        </Form>\n      </Segment>\n    </>)\n\n\n\n\n\n}\nexport default TimeSheetsFilter","import { useQuery } from '@apollo/client'\nimport React, { useEffect, useState } from 'react'\nimport { Link, useLocation, useParams } from 'react-router-dom'\nimport  _  from 'lodash'\nimport { Table, TableHeader, TableRow, TableHeaderCell, TableBody, TableCell, Loader } from 'semantic-ui-react'\nimport { formatDate, getWeekNumber,getMonthInt, getFilterYear } from '../../utils/DateHelper'\nimport TimeSheet from '../StaffPage/TimeSheet'\nimport { GET_ALL_TIMESHEETS } from '../../queries/timeSheetQuery'\nimport TimeSheetsFilter from './TimeSheetsFilter'\n\nconst TimeSheetsOverview = ({ setStaffName  }) => {\n  const today = new Date()\n  const params = useParams()\n  const location = useLocation()\n  const basePage =  location.pathname.split('/')[2]\n\n  const [filter,setFilter] = useState({\n    staff:[],\n    period:'date',\n    from:formatDate(new Date(today.getFullYear(), today.getMonth() -3, 1 )).split(' ')[0],\n    to:formatDate(today).split(' ')[0],\n    number:getWeekNumber(today),\n    groupBy:'week',\n    stations:[],\n    filterStatus: '' })\n\n  const variables  = { ...filter }\n\n  if(filter.staff.length === 1){\n    variables.staffId = filter.staff[0]\n  }\n\n  variables.year = getFilterYear(filter.period, filter.number)\n\n  const { loading,data } = useQuery(GET_ALL_TIMESHEETS,{ variables: variables,skip: params.period })\n\n  useEffect (() => {\n    if(data ){\n      setStaffName(data.getStaffName)\n    }\n  },[data, setStaffName])\n\n\n  if(params.period) {\n    const periodTitle = params.period.split(' ')\n    let period\n    let selected\n    let selectedYear\n    if(periodTitle[0] === 'Week'){\n      period='week'\n      selected = periodTitle[1]\n      selectedYear = periodTitle[2]\n    }\n    else{\n      period='month'\n      selected = getMonthInt(periodTitle[0])\n      selectedYear = periodTitle[1]\n    }\n\n    return <TimeSheet period= {period} selected={parseInt(selected)} selectedYear={parseInt(selectedYear) } staffId={params.staffId } setStaffName={setStaffName} timesheetOnly />\n  }\n\n  return (\n\n    <>\n      <TimeSheetsFilter setFilter= {setFilter}></TimeSheetsFilter>\n\n      <Loader active={loading}> Loading TimeSheet Overview</Loader>\n\n      <Table >\n        <TableHeader>\n          <TableRow>\n            {!params.staffId && basePage.toLowerCase() !== 'mypage' &&\n            <TableHeaderCell>Staff Name</TableHeaderCell>\n            }\n            <TableHeaderCell>Period</TableHeaderCell>\n            <TableHeaderCell> Stations</TableHeaderCell>\n            <TableHeaderCell> Total Hours</TableHeaderCell>\n            <TableHeaderCell> Status</TableHeaderCell>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {data && data.getAllTimeSheets && _.map(data.getAllTimeSheets, (staffs,period) =>\n            _.map(staffs,(staff,id) =>\n              <TableRow key={id} positive= {staff.itemsPending?false:true} negative= {staff.itemsPending?true:false}>\n                {!params.staffId   && basePage.toLowerCase() !== 'mypage' &&\n                <TableCell><Link to={`/Manage/ManageTimesheets/${id}`} onClick={() => {\n\n                }}> {staff.name}</Link></TableCell> }\n                <TableCell>{period}</TableCell>\n                <TableCell>{\n                  _.reduce(staff.station,(p,c,key) => {\n                    if(c !== 0){\n                      return ( (p?p+'/':'')+key)\n                    }\n                    return p\n\n                  },'')}\n                </TableCell>\n                <TableCell>{staff.totHours}</TableCell>\n                <TableCell><Link to={`${location.pathname}/${params.staffId?'':`${id}/`}${period}`}\n                  onClick={() => {\n\n                  }}>{staff.itemsPending ?  `${staff.itemsPending}  Items Pending`: 'All Approved' } </Link></TableCell>\n              </TableRow>)\n\n          )\n          }\n\n        </TableBody>\n      </Table>\n\n\n\n\n    </>)\n\n\n\n\n\n}\nexport default TimeSheetsOverview","import React, { useState } from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport { Breadcrumb } from 'semantic-ui-react'\nimport TimeSheetsOverview from '../TimeSheetsOverview'\n\nconst ManageTimeSheets = ({ setName , }) => {\n  const params = useParams()\n  const [staffName, setStaffName ] = useState('')\n\n  return <>\n    { /** If current page is not timesheetsoverview then show breadcrumbs*/\n      !(params.page && params.page.toLowerCase() === 'timesheetsoverview') &&\n      <>\n        <Breadcrumb>\n          { /**If currentpage is overview page of a staff or period is set on params */\n            (params.staffId) &&\n            <>\n              <Breadcrumb.Section link as = {Link} to = {'/Manage/ManageTimesheets'}> Manage Timesheets </Breadcrumb.Section>\n              <Breadcrumb.Divider/>\n              <Breadcrumb.Section active = {params.period? false: true}  as={params.period?  Link: ''} to={`/Manage/ManageTimesheets/${params.staffId}`}> {staffName } </Breadcrumb.Section>\n            </>\n          }\n          {params.period && <>\n            <Breadcrumb.Divider icon='right chevron'/>\n            <Breadcrumb.Section active>{params.period.replace('_',' ')}</Breadcrumb.Section>\n          </>}\n        </Breadcrumb>\n      </>\n    }\n\n    <TimeSheetsOverview setStaffName= { setName || setStaffName } ></TimeSheetsOverview>\n  </>\n\n}\nexport default ManageTimeSheets","import { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useContext } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { Button, Form, Header, Segment } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { RESET_PASSWORD } from '../../mutations/staffMutation'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nconst PasswordResetPage = () => {\n  const[,dispatch] = useContext(NotificationContext)\n  const params= useParams()\n  const history = useHistory()\n\n  sessionStorage.removeItem('staffKey') //Logout any logged in staff\n\n  const [resetPassword,{ loading }] = useMutation(RESET_PASSWORD,{\n    onCompleted: () => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content:'Success, password reset. you can now login',type: 'SUCCESS' } })\n      history.push('/staffLogin')\n    },\n\n    onError: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, password reset failed '}<br/> {err.message}</> ,type: 'ERROR' } })\n    }\n  })\n\n  if(!params.resetCode){\n    return <Header>Reset code mising or invalid</Header>\n  }\n\n  const initVal = {\n    password:'',\n    confirmPassword:''\n  }\n\n  return(\n    <Segment basic loading ={loading}>\n      <Formik\n        initialValues = { initVal }\n        validate= {(values) =>\n        {\n          const errors = {}\n          if(!values.password || values.password.trim() === '') {\n            errors.password = 'Password is required'\n          }\n\n          if(values.password !== values.confirmPassword){\n            errors.confirmPassword = 'New password and confirm password must match'\n          }\n\n          return errors\n        }\n\n        }\n        onSubmit= {(values) => {\n\n          resetPassword({ variables:{ resetCode: params.resetCode, password: values.password } })\n\n\n        }}\n      >\n        {({ handleSubmit,dirty ,errors }) => <Form style={{ marginBottom:'5rem' }} onSubmit= {handleSubmit}>\n          <Segment>\n            <InputField name='password' label='New Password' type='password' width='8'/>\n\n            <InputField name='confirmPassword' label='Confirm Password' type='password' width='8'/>\n\n            <Button disabled = {!( dirty && _.isEmpty(errors)) } type='submit' style={{ marginTop: '1rem' }} positive>Reset</Button>\n\n          </Segment>\n\n\n        </Form>\n        }\n      </Formik>\n    </Segment>\n\n  )\n}\nexport default PasswordResetPage","import { gql } from '@apollo/client'\n\nexport const CHANGE_PERMISSION = gql`\nmutation changePermission( $id: String! $staff: JsonObject, $station: JsonObject, $timesheet: JsonObject ,$admin: Boolean){\n  changePermission(\n    id: $id\n    staff: $staff\n    station: $station\n    timesheet: $timesheet\n    admin: $admin\n    ){\n      id\n      staff\n      station\n      timesheet\n      admin\n    }\n}`","import { useMutation, useQuery } from '@apollo/client'\nimport React, { Fragment, useContext, useEffect, useState } from 'react'\nimport { Button, Checkbox, Form, Header,Message,Table, TableBody } from 'semantic-ui-react'\nimport _ from 'lodash'\nimport { ALL_STATION } from '../../queries/stationQuery'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nimport { FieldArray, Formik } from 'formik'\nimport { CHANGE_PERMISSION } from '../../mutations/permissionMutation'\nimport { NotificationContext } from '../../contexts/NotificationContext'\n\n\nconst PermissionManager = ({ permissions }) => {\n  const [,dispatch] = useContext(NotificationContext)\n  const [options,setOptions] = useState([]) // List permitted stations\n  const staff =  JSON.parse(sessionStorage.getItem('staffKey'))\n  const [superUserSet,setSuperUserSet] = useState((permissions && permissions.admin )|| false) //If the staff is assigned admin permission\n\n  const hasSuperPermission = staff.permission.admin\n\n  // console.log(hasSuperPermission,staff ,superUserSet)\n  const [updatePermission,{ loading: pLoading }] = useMutation(CHANGE_PERMISSION,{\n    onCompleted: () => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, permission changed' ,type: 'SUCCESS' } })\n    },\n\n    onError: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to change permission'}<br/> {err.message}</> ,type: 'ERROR' } })\n    }\n  })\n\n  const mapPermission = (permssionType) => permssionType && permssionType.map(v => {\n    if(!v) return null\n    return v._id\n  })\n\n  /**Generates station option based on user permission\n   * User can only assign permsission if the user have rights for the station\n   */\n\n  const hasPermission = (permissions) => {\n    if(hasSuperPermission){\n      return true\n    }\n    if((typeof permissions === 'object' )) {\n      if(!_.isEmpty(permissions)){\n        return true\n      }\n    }  else if(permissions){\n      return true\n    }\n    return false\n  }\n\n  const permission = _.mapValues(permissions,(v,k) => {\n    if(typeof v === 'object'){\n      const mod = { ...v }\n      if(k==='station'){\n        mod.edit = mapPermission (mod.edit )\n\n      }\n\n      if(k==='timesheet'){\n        mod.view = mapPermission (mod.view )\n        mod.sign = mapPermission (mod.sign)\n\n      }\n      return mod\n\n    }\n    else return v\n\n  })\n\n  const { loading,data } = useQuery(ALL_STATION,{ skip: !hasSuperPermission })\n  useEffect(() => {\n    if(data){\n      const stations = data.allStations\n      const stationOptions = stations.map((station,index) => {\n        return { key:index, value: station.id, text: station.location }\n      })\n      setOptions(stationOptions)\n    }\n  },[data])\n\n\n\n  const getStationOptions = (fieldName) => {\n    if (hasSuperPermission) {\n      return options\n    }\n    /**Set return station options based on users current permitted station  */\n    let soptions = []\n    switch (fieldName){\n    case 'station.edit':\n      if(staff.permission.station.edit.length ) {\n        soptions= staff.permission.station.edit.map((v,i) => {\n          return { key:i, value: v._id, text: v.location }\n        })\n\n      }\n      return soptions\n\n    case 'timesheet.view':\n      if(staff.permission.timesheet.view.length ) {\n        soptions = staff.permission.timesheet.view.map((v,i) => {\n          return { key:i, value: v._id, text: v.location }\n        })\n\n      }\n      return  soptions\n    case 'timesheet.sign':\n      if(staff.permission.timesheet.sign.length ) {\n        soptions =  staff.permission.timesheet.sign.map((v,i) => {\n          return { key:i, value: v._id, text: v.location }\n        })\n      }\n      return soptions\n\n    default:\n      return soptions\n\n    }\n\n  }\n\n  const allStationIds =  options.map(station => station.value)\n\n  return (\n    <Formik\n      enableReinitialize\n      initialValues = {{ ...permission }}\n      onSubmit= { (values ) => {\n        const formValues = { ...values }\n\n        if(!formValues.admin) {\n          _.reduce(values,(prev,cur,scope) =>\n          {\n            if(permission[scope] && _.isEqual(permission[scope] , formValues[scope] )){\n              delete formValues[scope]\n\n            }\n            if(permission[scope] && !_.isEqual( permission[scope] ,formValues[scope] )){\n              _.reduce(formValues[scope],(prev,cur,pType) => {\n                if( _.isEqual(permissions[scope][pType],formValues[scope][pType] )){\n                  delete formValues[scope][pType]\n                }\n              },{})\n\n            }\n          },{})\n          updatePermission({ variables: { ...formValues,id: permissions.id } })\n        }\n        else{\n\n          updatePermission({ variables: { admin:true,id: permissions.id } })\n        }\n\n\n      }\n\n      }\n\n    >\n      {({ setFieldValue,values,handleSubmit,dirty,resetForm }) => <>\n        <Header as ='h3'>Permission</Header>\n        <Checkbox\n          label = 'Administrator (All Permissions for all stations)'\n          disabled = { !hasSuperPermission}\n          toggle\n          name= 'admin'\n          checked = {values.admin}\n          onChange= {(e,{ checked }) => {\n            setFieldValue('admin',checked)\n            setSuperUserSet(checked)\n\n            /**If superUser is set then set all permission fileds  */\n            if(checked) {\n              setFieldValue('station.edit',allStationIds)\n              setFieldValue('station.add',true)\n              setFieldValue('timesheet.view',allStationIds)\n              setFieldValue('timesheet.sign',allStationIds)\n              setFieldValue('staff.edit',true)\n              setFieldValue('staff.add',true)\n              setFieldValue('staff.view',true)\n\n            }\n          }}/>\n\n        {\n          dirty && <Message warning >Remember to save the changes for changes to take effect </Message>\n        }\n\n\n\n        <Form as='table' loading={loading || pLoading} className='ui celled padded table' onSubmit={handleSubmit}>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>\n          Scope\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n          Edit\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n          Add\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n          View\n              </Table.HeaderCell>\n              <Table.HeaderCell>\n          Sign\n              </Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <TableBody>\n\n            {_.map(permissions,(val,key) => <Fragment key={key}>\n              {key !== '__typename' && key !== 'id' &&  key !== 'admin' &&\n              <FieldArray>\n                {() => <Table.Row key={key}>\n                  <Table.Cell>\n                    {key.toUpperCase()}\n                  </Table.Cell>\n                  {/**EDIT COLUMN */}\n                  <Table.Cell >\n                    {(key=== 'station') &&\n                    <DropDownField\n                      multiple\n                      selection\n                      options= {getStationOptions(`${key}.edit`)}\n                      placeholder = 'Add Stations'\n                      disabled = {loading || !hasPermission(staff.permission[key].edit) || superUserSet}\n                      loading= {loading}\n                      name={`${key}.edit`}\n                    />}\n\n                    {key === 'staff'?\n                      <Checkbox\n                        disabled = {  !hasPermission(staff.permission[key].edit) || superUserSet}\n                        toggle name={`${key}.edit` }\n                        checked = {values[`${key}`].edit }\n                        onChange= {(e,{ checked }) => {\n                          setFieldValue(`${key}.edit`,checked)\n\n                          /** If edit is enabled then user must have view permission */\n                          if(checked) {\n                            setFieldValue(`${key}.view`,checked)\n                          }\n\n                        }}/> : ''\n                    }\n                  </Table.Cell >\n\n                  {/**ADD COLUMN */}\n                  {<Table.Cell >\n                    {key!== 'timesheet' &&\n                    <Checkbox\n                      toggle\n                      disabled = {  !hasPermission(staff.permission[key].add) || superUserSet}\n                      name={`${key}.add`}\n                      checked = {values[`${key}`].add }\n                      onChange= {(e,{ checked }) => {\n                        setFieldValue(`${key}.add`,checked)\n                        if(key === 'staff' && checked){\n                          /**If staff has add permission then must have view permission by default */\n                          setFieldValue(`${key}.view`,true)\n                        }\n                      }}/>}\n\n                  </Table.Cell>}\n\n                  {/**VIEW COLUMN */}\n                  <Table.Cell  >\n                    {key === 'staff' &&\n                     <Checkbox\n                       disabled = {  !hasPermission(staff.permission[key].view) || superUserSet }\n                       toggle\n                       name={`${key}.view` }\n                       checked = {values[`${key}`].view }\n                       onChange= {(e,{ checked }) => {\n                       /** If edit is enabled then user must have view permission */\n                         if(values.staff.edit || values.staff.add ){\n                           setFieldValue(`${key}.view`,true)\n                         }else{\n                           setFieldValue(`${key}.view`,checked)\n                         }\n                       }}/>\n                    }\n\n                    {key === 'timesheet' &&\n                     <DropDownField\n                       multiple\n                       selection\n                       options={getStationOptions(`${key}.view`)}\n                       placeholder = 'Add Stations'\n                       disabled = {loading  ||  !hasPermission(staff.permission[key].view) || superUserSet}\n                       loading= {loading}\n                       name={`${key}.view`}\n                       onChange = {(e,{ value }) => {\n                         /**If user has permission to sign the station timesheet then user must have permission to view the timesheet for that station as well */\n                         const newViewValues  = [...new Set([...values.timesheet.sign, ...value])]\n                         setFieldValue(`${key}.view`,newViewValues)\n                       }}\n                     />\n                    }\n\n                  </Table.Cell>\n\n                  {/**SIGN COLUMN */}\n                  <Table.Cell disabled = {key !== 'timesheet'}>\n                    {key === 'timesheet' &&\n                    <DropDownField\n                      multiple\n                      selection\n                      name={`${key}.sign`}\n                      options={getStationOptions(`${key}.sign`)}\n                      placeholder = 'Add Stations'\n                      disabled = {loading ||  !hasPermission(staff.permission[key].sign) || superUserSet}\n                      onChange = {(e,{ value }) => {\n                        setFieldValue(`${key}.sign`,value)\n                        /**If user has permission to sign the station timesheet then user must have permission to view the timesheet for that station as well */\n                        const newViewValues  = [...new Set([...values.timesheet.view, ...value])]\n                        setFieldValue(`${key}.view`,newViewValues)\n                      }}\n                      loading= {loading}\n\n                    />\n                    }\n                  </Table.Cell>\n                </Table.Row>}\n\n              </FieldArray>\n              }</Fragment>\n            )\n            }\n\n          </TableBody>\n        </Form>\n        {dirty &&\n        <>\n          <Button positive onClick = {() => handleSubmit()}> Save Changes</Button>\n          <Button  negative onClick = {() => resetForm()}> Discard Changes</Button>\n        </>\n        }</>\n      }\n    </Formik>\n\n  )\n\n}\n\nexport default PermissionManager","import { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useContext } from 'react'\nimport { Button, Dimmer, Form, Grid, Loader, Modal,ModalContent, ModalHeader } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { STAFF_EDIT } from '../../mutations/staffMutation'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { validateEmail } from '../StationReportPage/NewReportForm/validator'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nconst StaffEditModel = (props) => {\n  const [,dispatch] = useContext(NotificationContext)\n\n  const [updateStaff,{ loading: updateStaffLoading }] = useMutation(STAFF_EDIT,{\n    onCompleted: () => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, staff information saved' ,type: 'SUCCESS' } })\n      props.setOpen(false)\n    },\n\n    onError: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to save edited information'}<br/> {err.message}</> ,type: 'ERROR' } })\n      props.setOpen(false)\n    }\n  })\n\n\n  const initVal = { email: props.email,\n    phone: props.phone || '',\n    contractType: props.contractType,\n    contractHours: props.reqHours,\n    position: props.position || '',\n  }\n  return(\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {props.open}\n      onClose= {() =>  props.setOpen(false)}\n      onOpen= {() => props.setOpen (true)}\n    >\n      <ModalHeader>Editing Staff {props.name} </ModalHeader>\n      <ModalContent>\n\n        {updateStaffLoading &&\n            <Dimmer active>\n              <Loader />\n            </Dimmer>\n        }\n\n        <Formik\n          initialValues = { initVal }\n          validate= {(values) =>\n          {\n            const errors = {}\n            if(/[a-z]/i.test(values.phone)){\n              errors.phone='Phone number cannot contain alphabets '\n            }\n            if(values.phone && values.phone.length < 8){\n              errors.phone='Phone number should be at least 8 charter long '\n            }\n            if(validateEmail(values.email)){\n              errors.email ='Invalid Email'\n            }\n            if(isNaN(values.contractHours)){\n              errors.contractHours ='Contract Hours must be number'\n            }\n            return errors\n          }}\n\n          onSubmit= {(values) => {\n            const updatedValues = _.omitBy(values, (v,k) => initVal[k] === v )\n\n            updateStaff({ variables:{ ...updatedValues,id:props.id } })\n          }}\n        >\n          {({ values,handleSubmit,setFieldValue,dirty,errors }) => <Form style={{ marginBottom:'5rem' }} onSubmit= {handleSubmit}>\n            <Grid>\n              <Grid.Row>\n                <InputField name='email' label='Email' type='email'/>\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='phone' label='Phone' type='tel'/>\n\n              </Grid.Row>\n              <Grid.Row>\n                <DropDownField  name='contractType' labeled label='Contract'\n                  selection\n                  options= {[{\n                    key:1, value:'Contractor', text: 'Contractor' },\n                  { key:2, value:'Employee', text: 'Employee' }]}></DropDownField>\n\n\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='contractHours' label='Required Hours per day'/>\n\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='position' label='Position'/>\n              </Grid.Row>\n            </Grid>\n            {dirty &&\n            <Button type='submit' floated='right' positive>Save</Button>}\n\n          </Form>\n          }\n        </Formik></ModalContent>\n    </Modal>\n\n  )\n}\n\nexport default StaffEditModel","import { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useContext } from 'react'\nimport { Button, Dimmer, Form, Grid, Loader, Modal,ModalContent, ModalHeader } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { CHANGE_PASSWORD } from '../../mutations/staffMutation'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nconst PasswordChangeModel = (props) => {\n\n  const [,dispatch] = useContext(NotificationContext)\n  const [changePassword,{ loading }] = useMutation(CHANGE_PASSWORD,{\n    onCompleted: () => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, password cahanged' ,type: 'SUCCESS' } })\n      props.setOpen(false)\n    },\n\n    onError: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to change password'}<br/> {err.message}</> ,type: 'ERROR' } })\n      props.setOpen(false)\n    }\n  })\n\n\n  const initVal = {\n    password:'',\n    newPassword:'',\n    confirmPassword:''\n  }\n\n  return(\n    <Modal\n      closeIcon\n      closeOnEscape={false}\n      closeOnDimmerClick={false}\n      open = {props.open}\n      onClose= {() =>  props.setOpen(false)}\n      onOpen= {() => props.setOpen (true)}\n    >\n      <ModalHeader>Password Change</ModalHeader>\n      <ModalContent>\n\n        {loading &&\n            <Dimmer active>\n              Updating Password\n              <Loader />\n            </Dimmer>\n        }\n\n        <Formik\n          initialValues = { initVal }\n          validate= {(values) =>\n          {\n            const errors = {}\n            if(!values.password){\n              errors.password = 'Old Password is required'\n            }\n\n            if(values.newPassword === values.password){\n              errors.newPassword = 'New password cannot be same as old password'\n            }\n\n            if(!values.newPassword ){\n              errors.newPassword = 'New password cannot be empty'\n            }\n\n            if(values.newPassword !== values.confirmPassword){\n              errors.confirmPassword = 'New password and confirm password must match'\n            }\n            return errors\n          }\n\n          }\n          onSubmit= {(values) => {\n            changePassword({ variables:{ id:props.id,password: values.password, newPassword: values.newPassword } })\n\n          }}\n        >\n          {({ handleSubmit,dirty ,errors }) => <Form style={{ marginBottom:'5rem' }} onSubmit= {handleSubmit}>\n            <Grid>\n              <Grid.Row>\n                <InputField name='password' label='Old Password' type='password'/>\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='newPassword' label='New Password' type='password'/>\n\n              </Grid.Row>\n              <Grid.Row>\n                <InputField name='confirmPassword' label='Confirm Password' type='password'/>\n              </Grid.Row>\n            </Grid>\n            {dirty && _.isEmpty(errors) &&\n            <Button type='submit' style={{ marginTop: '1rem' }} positive>Change Password</Button>}\n\n          </Form>\n          }\n        </Formik></ModalContent>\n    </Modal>\n\n  )\n}\n\nexport default PasswordChangeModel","import { useMutation, useQuery } from '@apollo/client'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { Button, Confirm, Grid,Header,Icon,Loader, Table, TableBody } from 'semantic-ui-react'\nimport { GET_STAFF } from '../../queries/staffQuery'\nimport PermissionManager from './PermissionManager'\nimport StaffEditModel from './StaffEditModel'\nimport {  RESET_PASSWORD_REQ, RESET_REGISTER_CODE } from '../../mutations/staffMutation'\nimport PasswordChangeModel from './PasswordChangeModel'\nimport { useParams } from 'react-router-dom'\nimport { formatDate } from '../../utils/DateHelper'\nimport { NotificationContext } from '../../contexts/NotificationContext'\n\n\nconst Profile = (props) => {\n  const[,dispatch]= useContext(NotificationContext)\n  const params = useParams()\n\n  const [confirm,setConfirm] = useState({ open:false, handleCancel:() => {}, handleConfirm:() => {} })\n\n  const [passwordChangeOpen,setPasswordChangeOpen] = useState(false)\n  const staff =  JSON.parse(sessionStorage.getItem('staffKey'))\n\n  /**Staff can edit if staff has edit or admin  permission and not own profile */\n  let staffId = staff.id\n\n  if(props.id){\n    staffId= props.id\n  } else if(params.staffId) {\n    staffId= params.staffId\n  }else {\n    staffId= staff.id\n  }\n\n\n  const { loading,error,data } = useQuery(GET_STAFF,{ variables:{ id:staffId ,withPermission: props.staffCanEdit || false  } })\n\n\n\n  const [resetPassword,{ loading: rpLoading }] = useMutation(RESET_PASSWORD_REQ,{\n    onCompleted: () => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, password reset code sent to users email' ,type: 'SUCCESS' } })\n    },\n\n    onError: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to reset'}<br/> {err.message}</> ,type: 'ERROR' } })\n    }\n  })\n  const [resetRegisterCode,{ loading: rcLoading }] = useMutation(RESET_REGISTER_CODE,{\n    onCompleted: () => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: 'Success, new register code sent to users email' ,type: 'SUCCESS' } })\n    },\n\n    onError: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to send new register code'}<br/> {err.message}</> ,type: 'ERROR' } })\n    }\n  })\n\n\n  const resetConfirm = () => {\n    setConfirm(({ open:false, handleCancel:() => {}, handleConfirm:() => {}  }))\n  }\n\n  useEffect(() => {\n    if(data && props.setStaffName)\n      props.setStaffName(data.getStaff.name)\n\n  },[data, props])\n\n\n  if (loading) {\n    return (\n      <Loader active>Fetching User Profile</Loader>\n    )\n  }\n\n  if (error) {\n    return (\n      <Header as ='h5'>Something Went Wrong, Please try again</Header>\n    )\n  }\n\n  /**If the user has completed registration\n   * Registered user should have regiserCode empty\n  */\n\n  const registered =  data && data.getStaff.registerCode ? false: true\n\n  return (<>\n\n    <Grid columns='3' style={{ marginTop:'1rem' }}>\n      <Grid.Row centered  textAlign='center'>\n        <Grid.Column>\n          <Header as ='h4'>Basic Info</Header>\n          <Table compact>\n            <TableBody>\n              <Table.Row>\n                <Table.Cell width='8'> <strong> Id Card Saved </strong> </Table.Cell>\n                <Table.Cell width='7'>{data.getStaff.idCardCode ?\n                  <Icon name='checkmark' color='green'></Icon> : <Icon name='cancel' color='red'></Icon> }</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell width='8'> <strong> Registration Complete</strong> </Table.Cell>\n                <Table.Cell width='7'>{registered ?\n                  <Icon name='checkmark' color='green'></Icon> : <Icon name='cancel' color='red'></Icon> }</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Email </strong> </Table.Cell>\n                <Table.Cell > {data.getStaff.email}</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Phone </strong> </Table.Cell>\n                <Table.Cell > {data.getStaff.phone}</Table.Cell>\n              </Table.Row>\n              { registered &&\n              <Table.Row>\n                <Table.Cell> <strong> Username </strong> </Table.Cell>\n                <Table.Cell> {data.getStaff.username}</Table.Cell>\n              </Table.Row>}\n            </TableBody>\n            <Table.Footer>\n              {(props.staffCanEdit || staff.id === data.getStaff.id) &&\n              <Table.Row>\n                <Table.HeaderCell >\n                  <Button\n                    primary\n                    size='small'\n                  >\n                 Scan Id Card\n                  </Button>\n                </Table.HeaderCell>\n                <Table.HeaderCell >\n                  <Button\n                    loading = {rpLoading || rcLoading}\n                    disabled =  {rpLoading || rcLoading}\n                    primary\n                    size='small'\n                    onClick = { (e,{ children }) => {\n\n                      switch( children ){\n                      case 'Change Password':\n                        setPasswordChangeOpen(true)\n                        break\n                      case 'Reset Password':\n                        setConfirm({\n                          open:true,\n                          handleConfirm: () => {\n                            resetPassword({ variables:{ id:data.getStaff.id } })\n                            resetConfirm()\n                          },\n                          handleCancel:() => {\n                            resetConfirm()\n                          },\n                          content: 'Confirm Reset Password',\n                          header:'Confirm'\n                        })\n                        break\n                      case 'Resend Register Link':\n                        setConfirm({\n                          open:true,\n                          handleConfirm: () => {\n                            resetRegisterCode({ variables:{ id:data.getStaff.id } })\n                            resetConfirm()\n                          },\n                          handleCancel:() => {\n                            resetConfirm()\n                          },\n                          content: 'Confirm Reset Registration Link',\n                          header:'Confirm'\n                        })\n                        break\n                      default:\n                        break\n                      }\n                    }\n\n                    }\n                  >\n                    {registered\n                      ?staff.id === data.getStaff.id\n                        ? 'Change Password'\n                        : props.staffCanEdit?  'Reset Password':''\n                      :'Resend Register Link'}\n                  </Button>\n                </Table.HeaderCell>\n              </Table.Row>}\n            </Table.Footer>\n\n          </Table>\n        </Grid.Column>\n        <Grid.Column>\n          <Header as ='h4'>Contract</Header>\n          <Table compact>\n            <TableBody>\n              <Table.Row>\n                <Table.Cell> <strong> Type </strong> </Table.Cell>\n                <Table.Cell>{data && data.getStaff.contractType }</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Required Hrs/Day </strong> </Table.Cell>\n                <Table.Cell > {data && data.getStaff.reqHours}</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Position </strong> </Table.Cell>\n                <Table.Cell> {data && data.getStaff.position}</Table.Cell>\n              </Table.Row>\n            </TableBody>\n\n\n          </Table>\n        </Grid.Column>\n        <Grid.Column>\n          <Header as ='h4'>Last Active</Header>\n          <Table compact>\n            <TableBody>\n              <Table.Row>\n                <Table.Cell> <strong> Station </strong> </Table.Cell>\n                <Table.Cell>{ data && data.getStaff.lastActive &&  data.getStaff.lastActive.station && data.getStaff.lastActive.station.location }</Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell> <strong> Active at </strong> </Table.Cell>\n                <Table.Cell > {data && data.getStaff.lastActive && formatDate(data.getStaff.lastActive.activeAt) }</Table.Cell>\n              </Table.Row>\n            </TableBody>\n\n          </Table>\n        </Grid.Column>\n\n      </Grid.Row>\n      {props.staffCanEdit &&\n      <Grid.Row > <Grid.Column><PermissionManager permissions= {data.getStaff.permission}></PermissionManager> </Grid.Column>  </Grid.Row>}\n\n      <StaffEditModel\n        open={props.editModelOpen}\n        setOpen= {props.setEditModelOpen}\n        email = {data.getStaff.email}\n        phone =  {data.getStaff.phone}\n        contractType ={data.getStaff.contractType}\n        reqHours =  {data.getStaff.reqHours}\n        position = {data.getStaff.position}\n        id= {data.getStaff.id}\n      ></StaffEditModel>\n\n      <PasswordChangeModel\n        open = {passwordChangeOpen}\n        setOpen = {setPasswordChangeOpen}\n        id= {data.getStaff.id }\n      ></PasswordChangeModel>\n\n\n      <Confirm\n        open={confirm.open}\n        content = {confirm.content}\n        header = {confirm.header}\n        onCancel={confirm.handleCancel}\n        onConfirm={confirm.handleConfirm}\n      />\n\n    </Grid>\n  </>\n\n\n\n\n  )\n}\n\n\n\n\n\nexport default Profile","import { useLazyQuery, useMutation, useQuery } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport { Button, Form, Header, Icon, Input, Label,  Message, Segment } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { COMPLETE_REGISTRATION } from '../../mutations/staffMutation'\nimport { GET_STAFF_REG,VERIFY_USERNAME } from '../../queries/staffQuery'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nconst RegisterPage = ({ setName }) => {\n  const [,dispatch] = useContext(NotificationContext)\n  const params= useParams()\n  const history = useHistory()\n\n  const { loading,error,data } = useQuery(GET_STAFF_REG, { variables: { registerCode: params.registerCode }, skip: !params.registerCode  })\n  const [completeRegistration,{ loading:regstrationLoading,data:registrationData }] = useMutation(COMPLETE_REGISTRATION,{\n    onError: (err) => {\n      dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{'Error, failed to register'}<br/> {err.message}</> ,type: 'ERROR' }\n      })}\n  })\n  const [validateUsernameQuery,{ loading:usernameLoading,data:usernameData }] = useLazyQuery(VERIFY_USERNAME)\n  const [usernameVerified,setUsernameVerified] = useState({ verified:false })\n\n\n  useEffect(() => {\n    if(usernameData){\n\n      setUsernameVerified({ verified:true,status:usernameData.verifyUsername.status })\n      //setFieldError('username','This is a error')\n    }\n\n  }, [usernameData])\n\n  if(!params.registerCode){\n    return <Header>Registration code mising or invalid</Header>\n  }\n\n  if(registrationData && registrationData.registerStaff.status === 'SUCCESS'){\n    history.push('/staff')\n    return null\n  }\n\n  if(data && data.getStaff){\n    setName(data.getStaff.name)\n  }\n\n\n  const initVal = {\n    password:'',\n    username:'',\n    confirmPassword:''\n  }\n\n  const validateUsername =(value) => {\n    validateUsernameQuery({ variables:{ username:value } })\n\n  }\n\n\n  return(\n    <Segment basic loading ={loading || regstrationLoading}>\n      <Message success={data && data.getStaff} error={error?true:false}>\n        <Message.Header>\n          {data && data.getStaff && 'Please complete registration by setting  your username and password'}\n          {error && error.message}\n          {(data && !data.getStaff) && 'Registration code Invalid'}\n        </Message.Header>\n      </Message>\n\n      { data && data.getStaff &&\n      <Formik\n        initialValues = { initVal }\n        validate= {(values) =>\n        {\n          const errors = {}\n\n          if(!values.username || values.username.trim() === ''){\n            errors.username = 'Username is required'\n          }\n\n          if(values.username && values.username.length < 4){\n            errors.username = 'Username should be at least 4 character long'\n          }\n          if(!values.password || values.password.trim() === '') {\n            errors.password = 'Password is required'\n          }\n\n          if(values.password !== values.confirmPassword){\n            errors.confirmPassword = 'New password and confirm password must match'\n          }\n\n          return errors\n        }\n\n        }\n        onSubmit= {(values) => {\n\n          completeRegistration({ variables:{ registerCode: params.registerCode, password: values.password ,username: values.username } })\n\n\n        }}\n      >\n        {({ values,handleChange, handleSubmit,dirty ,errors, handleBlur, touched }) => <Form style={{ marginBottom:'5rem' }} onSubmit= {handleSubmit}>\n\n          <Form.Field width='8'>\n            <Input\n              loading={usernameLoading}\n              icon= {<Icon name= {errors.username === undefined && usernameVerified.verified?(usernameVerified.status==='SUCCESS'?'check circle':'cancel'):''} color={usernameVerified.verified?usernameVerified.status==='SUCCESS'?'green':'red':'red'} />}\n              onBlur= {handleBlur}\n              name='username' label='Username' width='8' onChange = {e => {\n              // call the built-in onchange\n                handleChange(e)\n                let username = e.currentTarget.value\n                validateUsername(username)\n              }}/>\n\n            { ((errors.username && touched.username) ||  (errors.username === undefined && usernameVerified.verified && usernameVerified.status!=='SUCCESS')) &&\n           <Label pointing prompt>\n             { errors.username || 'Selected username already taken, please select new username' }\n           </Label>}\n          </Form.Field>\n\n\n\n\n          <InputField name='password' label='Password' type='password' width='8'/>\n\n          <InputField name='confirmPassword' label='Confirm Password' type='password' width='8'/>\n\n\n          <Button disabled = {!( dirty && _.isEmpty(errors) && usernameVerified.verified && usernameVerified.status ==='SUCCESS') }type='submit' style={{ marginTop: '1rem' }} positive>Register</Button>\n\n        </Form>\n        }\n      </Formik>}\n    </Segment>\n\n  )\n}\nexport default RegisterPage","import React from 'react'\r\nimport { Dropdown, Menu } from 'semantic-ui-react'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\n\r\n\r\nconst StaffMenuBar = ({ staffName, activeItem, setActiveItem }) => {\r\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\r\n  const history = useHistory()\r\n\r\n  const location = useLocation()\r\n\r\n  if(location.pathname.split('/')[1].toLowerCase() === 'register'){\r\n    return (\r\n\r\n      <Menu inverted color=\"blue\" stackable >\r\n        <Menu.Item position='right'>\r\n          Welcome {staffName}\r\n        </Menu.Item>\r\n      </Menu>\r\n    )\r\n\r\n  }\r\n\r\n\r\n  const handleMenuClick = (e, { name }) => {\r\n    setActiveItem( name )\r\n    if( ['Profile','Timesheets','TimesheetsOverview'].includes(name) ){\r\n      history.push(`/staff/${staff.id}/${name}`)\r\n    }else{\r\n      history.push(`/${name}`)\r\n    }\r\n  }\r\n\r\n  const logout = () => {\r\n    sessionStorage.removeItem('staffKey')\r\n    history.push('/staffLogin')\r\n  }\r\n\r\n  const menuItems = []\r\n\r\n\r\n  const cornerButton = () => {\r\n    return (\r\n      <Dropdown item text = {`Welcome ${staff.name}` } >\r\n        <Dropdown.Menu>\r\n          <Dropdown.Item text='Logout' onClick={() => logout()}/>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    )\r\n  }\r\n\r\n  /** Add Items to Menu*/\r\n  if (menuItems.length === 0) {\r\n    menuItems.push('Timesheets')\r\n    menuItems.push('TimesheetsOverview')\r\n    menuItems.push('Profile')\r\n  }\r\n\r\n\r\n  const getMenuItems = () => {\r\n    return menuItems.map(item =>\r\n      <Menu.Item  key={ item} name = {item} active = {activeItem ===  item }\r\n        onClick = {handleMenuClick} />)\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <Menu inverted color=\"blue\" stackable >\r\n\r\n      {getMenuItems()}\r\n      <Menu.Menu position='right'>\r\n        {cornerButton()}\r\n      </Menu.Menu>\r\n    </Menu>\r\n\r\n\r\n\r\n\r\n  )\r\n\r\n\r\n}\r\n\r\nexport default StaffMenuBar","import React, { useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Menu } from 'semantic-ui-react'\n\nconst StaffSubMenu = ({  activeItem, setActiveItem ,staffName, staffId ,staffCanEdit ,setEditModelOpen }) => {\n  const loggedInStaffPermissions = JSON.parse( sessionStorage.getItem('staffKey')).permission\n  const history = useHistory()\n  useEffect(() => {\n    setActiveItem('')\n    return () => setActiveItem('')\n  },[setActiveItem])\n  return (\n    <Menu pointing secondary >\n      <Menu.Item header>{staffName}</Menu.Item>\n      <Menu.Item\n        position='right'\n        name='Profile'\n        active = {activeItem === 'Profile'}\n        onClick={() => {\n          setActiveItem('Profile')\n          history.push(`/Manage/AllStaffs/${staffId}/Profile`)\n        }}\n      />\n\n      {(loggedInStaffPermissions.admin || loggedInStaffPermissions.timesheet.view.length || loggedInStaffPermissions.timesheet.sign.length) === true  &&\n        <>\n          <Menu.Item\n            name='Timesheets'\n            active = {activeItem === 'Timesheets'}\n            onClick={() => {\n              setActiveItem('Timesheets')\n              history.push(`/Manage/AllStaffs/${staffId}/Timesheets`)\n            }}\n          />\n\n\n          <Menu.Item\n            name='TimesheetsOverview'\n            active = {activeItem === 'TimesheetsOverview'}\n            onClick={() => {\n              setActiveItem('TimesheetsOverview')\n              history.push(`/Manage/AllStaffs/${staffId}/TimesheetsOverview`)\n\n\n            }}\n          />\n        </>}\n      {staffCanEdit &&<Menu.Item\n        position='right'\n        name='EditProfile'\n        icon = 'edit'\n        onClick={(e) => {\n          e.preventDefault()\n          history.push('Profile')\n          setActiveItem('Profile')\n          setEditModelOpen(true)\n        }}\n      />}\n\n    </Menu>\n\n  )}\n\nexport default StaffSubMenu","import React,{ useEffect, useState } from 'react'\nimport { Link, useHistory, useLocation, useParams } from 'react-router-dom'\nimport { Breadcrumb, BreadcrumbDivider, BreadcrumbSection } from 'semantic-ui-react'\nimport ManageTimeSheets from '../AdminPages/ManageTimeSheets'\nimport PasswordResetPage from './PasswordResetPage'\nimport Profile from './Profile'\nimport RegisterPage from './RegisterPage'\nimport StaffMenuBar from './StaffMenuBar'\nimport StaffSubMenu from './StaffSubMenu'\nimport TimeSheet from './TimeSheet'\n/**\n * Staff page component\n * Can receive staffName as props  if props not set then retrives staffId from url nad fetches name\n * @param props {staffName,id}\n */\nconst StaffPage = ({ name ,id }) => {\n\n  const params = useParams()\n\n  let staffId = params && params.staffId\n  let page = params && params.page\n  const location = useLocation()\n  const history = useHistory()\n  const [staffName, setStaffName] = useState(name)\n\n  const [editModelOpen,setEditModelOpen] = useState(false)\n  const [activeItem, setActiveItem] = useState(page )\n  const [subMenuActiveItem, setSubMenuActiveItem] = useState(page || 'Profile')\n\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\n\n  const [loggedInStaffName, setLoggedInStaffName] = useState(staff && staff.name)\n\n  const locationPaths = location.pathname.split('/')\n\n  useEffect(() => {\n    setActiveItem(page)\n    setSubMenuActiveItem(page)\n  },[page])\n\n  /**If the user is trying to register via registration link  */\n  if(locationPaths[1].toLowerCase() === 'register'){\n    page = 'register'\n    return<>\n      <StaffMenuBar staffName = {loggedInStaffName} activeItem= {activeItem} setActiveItem={setActiveItem}></StaffMenuBar>\n      <RegisterPage setName={setLoggedInStaffName}></RegisterPage></>\n  }\n\n  if(locationPaths[1].toLowerCase() === 'reset-password'){\n    page = 'reset-password'\n    return<>\n      <PasswordResetPage></PasswordResetPage></>\n  }\n\n\n  /**If user is not logged in and is not requesting to register or reset password  */\n  if(!staff && !( page === 'register' || page === 'reset-password')){\n    history.push('/staffLogin')\n    return null\n  }\n\n\n  const staffCanEdit  = (staff.id !== staffId && staffId !== undefined)  && ((staff.permission && staff.permission.staff.edit) ||  staff.permission.admin || false)\n  const staffHasMangeRights =  staff.permission && (\n    staff.permission.admin ||\n    staff.permission.station.edit.length > 0 ||\n      staff.permission.station.add ||\n      staff.permission.staff.view ||\n      staff.permission.staff.add ||\n      staff.permission.staff.edit ||\n      staff.permission.timesheet.view.length > 0\n  )\n\n  /**If id is passed as props then use that as staffId*/\n  if(id){\n    staffId= id\n  }\n  /**If the url have staff Id */\n  else if(params.staffId) {\n    staffId= params.staffId\n  }\n  /**staff is loggedIn user */\n  else {\n    staffId= staff.id\n  }\n\n  const basePage =  locationPaths[1] //root page\n  if(staff.id !== staffId && basePage.toLocaleLowerCase() === 'staff' ){ //if user is not same as logged in user then redirect to manage page\n    history.push(`/Manage/AllStaffs/${staffId}/${activeItem}`)\n  }\n\n  if(staffHasMangeRights && basePage.toLowerCase() !== 'manage' ){ // if user has manage rights then redirect to manage page\n    history.push('/Manage/MyPage/Profile')\n  }\n\n  /**\n   * Set bredcrumbs for diffent view based on root page\n   */\n\n  const getBreadCrumb = () => {\n\n    return(\n      <>\n        <Breadcrumb>\n          { staff.id === staffId &&\n            <>\n              <BreadcrumbSection> My Page </BreadcrumbSection>\n              <BreadcrumbDivider/>\n            </>\n          }\n          {\n            staff.id !== staffId &&\n            <>\n              <BreadcrumbSection link as = {Link} to = {`/${basePage}/${locationPaths[2]}`}> {locationPaths[2]} </BreadcrumbSection>\n              <BreadcrumbDivider/>\n              <BreadcrumbSection link as={Link} to={`/${basePage}/${locationPaths[2]}/${locationPaths[3]}/Profile`}> {staffName || staffId} </BreadcrumbSection>\n              <BreadcrumbDivider/>\n\n            </>\n          }\n          {\n            page && page.toLowerCase()=== 'timesheetsoverview'  && params.period ?\n              <>\n                <BreadcrumbSection link as={Link}\n                  to={\n                    locationPaths.reduce ((p,c,i) => {\n                      if(i === locationPaths.length -1 || c === ''){\n                        return p\n                      }\n                      return p+'/'+c\n                    })}\n                  active> {subMenuActiveItem} </BreadcrumbSection>\n                <BreadcrumbDivider icon='right chevron'/>\n                <BreadcrumbSection active>{params.period.replace('_',' ')}</BreadcrumbSection>\n              </>:\n              <BreadcrumbSection active> {subMenuActiveItem} </BreadcrumbSection>\n          }\n\n        </Breadcrumb>\n      </>\n    )\n  }\n\n  return (\n    <>\n      {!staffHasMangeRights  && <StaffMenuBar staffName = {loggedInStaffName} activeItem= {activeItem} setActiveItem={setActiveItem}></StaffMenuBar> }\n      {getBreadCrumb()}\n\n      {staffId !== staff.id  && //If admin user is browsing staff\n      <StaffSubMenu\n        activeItem= {subMenuActiveItem}\n        setActiveItem = {setSubMenuActiveItem}\n        staffName= {staffName} staffId={staffId}\n        staffCanEdit={staffCanEdit}\n        setEditModelOpen = {setEditModelOpen}/>\n      }\n\n      { /**If submenu is timesheets  Or current page is timesheet */\n        ((subMenuActiveItem &&subMenuActiveItem.toLocaleLowerCase() === 'timesheets' )|| (activeItem && activeItem.toLowerCase() === 'timesheets')) && <>\n          <TimeSheet staffId ={staffId} setStaffName={setStaffName} />\n        </>\n      }\n      {/**If submenu is profile Or current page is profile */\n        ((subMenuActiveItem && subMenuActiveItem.toLocaleLowerCase() === 'profile' ) || ( activeItem && activeItem.toLowerCase() === 'profile') )&&\n        <>\n          <Profile id={staffId} staffCanEdit={staffCanEdit} setEditModelOpen={setEditModelOpen} editModelOpen={editModelOpen} setStaffName={setStaffName}/>\n        </>\n      }\n      {/**If submenu is timesheetsoverview  current page is managetimesheets or  timesheetsoverview*/\n        ((subMenuActiveItem && subMenuActiveItem.toLocaleLowerCase() === 'timesheetsoverview' ) || (activeItem && ( activeItem.toLowerCase() === 'timesheetsoverview'))) &&\n        <>\n          <ManageTimeSheets setName={setStaffName}></ManageTimeSheets>\n        </>\n      }\n    </>\n  )\n}\n\nexport default StaffPage","import { useMutation } from '@apollo/client'\nimport { Formik } from 'formik'\nimport _ from 'lodash'\nimport React, { useContext } from 'react'\nimport { Button, Dimmer, Form, Grid, Icon, Loader, Modal,ModalContent, ModalHeader } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { STAFF_ADD } from '../../mutations/staffMutation'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { validateEmail, validateName } from '../StationReportPage/NewReportForm/validator'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nconst NewStaffModel = (props) => {\n  const [,dispatch]= useContext(NotificationContext)\n\n  const [addStaffMutation,{ loading }] = useMutation(STAFF_ADD)\n\n  const addStaff = (values) => {\n    addStaffMutation({\n      variables: values,\n      update: (store,response) => {\n        store.modify({\n          fields:{\n            allStaff(existingStaffRefs , { readField }){\n              const newStaff = response.data.addStaff\n              if(existingStaffRefs.some(ref => readField('id',ref) === newStaff.id)){\n                return existingStaffRefs\n              }\n              return [...existingStaffRefs,newStaff]\n\n            }\n          }\n\n        })\n      }\n    }).then(\n      () =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, new staff ${values.name} created` ,type: 'SUCCESS' } }),\n      err =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, Cannot create new staff  staff ${values.name}`}<br/> {err.message}</> ,type: 'ERROR' } }),\n      props.setOpen(false)\n    )\n\n  }\n  const initVal = {\n    name: '',\n    email: '',\n    phone: '',\n    contractType: '',\n    contractHours: '',\n    position: '',\n  }\n  return(\n    <Formik\n      initialValues = { initVal }\n      onSubmit= {(values) => {\n        addStaff(values)\n      }}\n      validate = {(values) => {\n        let errors = {}\n\n        errors.name = validateName(values.name)\n        errors.email = validateEmail(values.email)\n\n        if(_.isEmpty(errors.name)) delete errors.name\n        if(_.isEmpty(errors.email)) delete errors.email\n\n        if(!values.contractType ){\n          errors.contractType = 'Please select contract type'\n        }\n\n        if(!values.contractHours || !parseFloat(values.contractHours) ){\n          errors.contractHours = 'Invalid contract hours'\n        }\n\n        return errors\n\n      }}\n    >\n      {({ handleSubmit,setFieldValue,dirty }) =>\n        <Modal\n          closeIcon\n          closeOnEscape={false}\n          closeOnDimmerClick={false}\n          open = {props.open}\n          onClose= {() =>  props.setOpen(false)}\n          onOpen= {() => props.setOpen (true)}\n        >\n          <ModalHeader>New Staff {props.name} </ModalHeader>\n          <ModalContent>\n\n            { loading &&\n            <Dimmer active>\n              <Loader />\n            </Dimmer>\n            }\n\n\n            <Form style={{ marginBottom:'5rem' }}>\n              <Grid>\n                <Grid.Row>\n                  <InputField name='name' label='Name' type='text' width='8'/>\n                </Grid.Row>\n                <Grid.Row>\n                  <InputField name='email' label='Email' type='email'  width='8'/>\n                </Grid.Row>\n                <Grid.Row>\n                  <InputField name='phone' label='Phone' type='tel'  width='8'/>\n\n                </Grid.Row>\n                <Grid.Row>\n                  <DropDownField  name='contractType' labeled label='Contract'\n                    selection\n                    width='8'\n                    options= {[{\n                      key:1, value:'Contractor', text: 'Contractor' },\n                    { key:2, value:'Employee', text: 'Employee' }]}\n                    onChange = {  (e,{ value }) => {\n                      setFieldValue('contractType',value)\n                    }}\n                  >\n\n                  </DropDownField>\n\n\n                </Grid.Row>\n                <Grid.Row>\n                  <InputField name='contractHours' label='Required Hours per day' type='number'  width='8'/>\n\n                </Grid.Row>\n                <Grid.Row>\n                  <InputField name='position' label='Position' width='8'/>\n                </Grid.Row>\n                <Grid.Row>\n                  <Form.Button icon type='button'  labelPosition='right' primary><Icon size='big' name='barcode'/>Link Id card</Form.Button>\n                </Grid.Row>\n              </Grid>\n            </Form>\n          </ModalContent>\n          <Modal.Actions>\n            <Button   negative onClick={() => props.setOpen (false)}>Cancel</Button>\n            {dirty &&\n            <Button  positive onClick= {() => handleSubmit()}>Save</Button>}\n          </Modal.Actions>\n        </Modal>\n      }\n    </Formik>\n\n  )\n}\n\nexport default NewStaffModel","import React, { useState,useEffect, useContext } from 'react'\nimport { useMutation, useQuery } from '@apollo/client'\nimport { GET_ALL_STAFF } from '../../queries/staffQuery'\nimport { Segment, Loader, Table, TableHeaderCell, TableRow, TableCell, Button, Icon, Input, Form, Checkbox } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport NewStaffModel from './NewStaffModal'\nimport { formatDate } from '../../utils/DateHelper'\nimport { DELETE_STAFF, SET_STAFF_STATUS } from '../../mutations/staffMutation'\nimport ConfirmModal from '../ConfirmModal'\nimport { NotificationContext } from '../../contexts/NotificationContext'\n\n\nconst AllStaffs = () => {\n  const[,dispatch] = useContext(NotificationContext)\n  const { loading,error,data } = useQuery(GET_ALL_STAFF)\n  const  [staffsData,setStaffsData]  = useState([])\n  const [staffAddOpen,setStaffAddOpen ]= useState(false)\n  const [confirmModalOpen, setConfirmModalOpen] = useState(false)\n  const [confirm,setConfirm] = useState({ title:'', fn:() => {} })\n\n  const loggedInstaff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const [deleteStaff] = useMutation(DELETE_STAFF)\n  const [toggleStaffStatus] = useMutation ( SET_STAFF_STATUS)\n\n\n  const staffDelete = (id,name) => {\n    deleteStaff({\n      variables: { id: id } ,\n      update: (store) => {\n        store.evict({\n          id: `Staff:${id}`\n        })\n      }\n    }).then(\n      () =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, staff ${name} deleted` ,type: 'SUCCESS' } }),\n      err =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, Cannot delete staff ${name}`}<br/> {err.message}</> ,type: 'ERROR' } })\n    )\n  }\n\n  const staffToggle = (id, name, toggle) => {\n    toggleStaffStatus({\n      variables: { id:id , disabled: !toggle },\n      update: (store) => {\n        store.modify({\n          id: `Staff:${id}`,\n          fields:{\n            disabled(){\n              return !toggle\n            }\n          }\n        })\n      }\n    }).then(\n      () =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, staff ${name} set ${toggle?'active':'disabled'}` ,type: 'SUCCESS' } }),\n      err =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, Cannot toggle status for  staff ${name}`}<br/> {err.message}</> ,type: 'ERROR' } })\n    )\n  }\n\n\n  useEffect  (() => {\n    if(data  && data.allStaff ){\n      setStaffsData(data.allStaff)\n    }\n  }, [data])\n\n  if(loading){\n    return (\n      <Loader active>Fetching Staffs</Loader>\n    )\n  }\n\n  if(error){\n    return <Segment >Something Went Wrong </Segment>\n  }\n\n\n\n\n  return (\n    <>\n      {(loggedInstaff.permission.staff.add || loggedInstaff.permission.admin ) ===true &&\n      <Button primary icon onClick= {() => setStaffAddOpen(true)}>Add New Staff <Icon name = 'add'> </Icon></Button>}\n      {\n        staffsData &&\n      <Input icon='search' placeholder='Search...'\n        onChange ={ (event,{ value }) => {\n          if(!value || value.trim() === ''){\n            setStaffsData(data.allStaff)\n          }else{\n            const filterData = staffsData.filter(staff => staff.name.includes(value) )\n            setStaffsData(filterData)\n          }\n\n\n        }}\n      />}\n      <Table>\n        <Table.Header>\n          <TableRow>\n            <TableHeaderCell> Name </TableHeaderCell>\n            <TableHeaderCell> Email </TableHeaderCell>\n            <TableHeaderCell> Phone </TableHeaderCell>\n            <TableHeaderCell> Last Active </TableHeaderCell>\n            <TableHeaderCell> Recent Station </TableHeaderCell>\n            <TableHeaderCell> Account Status </TableHeaderCell>\n            <TableHeaderCell> </TableHeaderCell>\n          </TableRow>\n        </Table.Header>\n        <Table.Body>\n          {staffsData && staffsData.map( staff =>\n            <Table.Row key= {staff.id}>\n              <TableCell><Link to={`/Manage/AllStaffs/${staff.id}/Profile`}>{staff.name}</Link></TableCell>\n              <TableCell>{staff.email}</TableCell>\n              <TableCell>{staff.phone}</TableCell>\n              <TableCell>{staff.lastActive && formatDate(staff.lastActive.activeAt) }</TableCell>\n              <TableCell>{staff.lastActive && staff.lastActive.station && staff.lastActive.station.location}</TableCell>\n              <TableCell>{staff.accountStatus}<Form.Field>\n\n                <Checkbox checked={!staff.disabled } toggle label={staff.disabled ?'Disabled': 'Active'} disabled = {staff.id === loggedInstaff.id || !(loggedInstaff.permission.staff.edit || loggedInstaff.permission.admin)}\n                  onChange ={(e,{ checked }) => {\n                    staffToggle( staff.id,staff.name,checked)\n                  }}/>\n              </Form.Field></TableCell>\n              <TableCell>\n                {staff.id !== loggedInstaff.id && (loggedInstaff.permission.staff.edit || loggedInstaff.permission.admin)  &&\n                <Button circular size ='mini' icon ='trash' negative disabled = {staff.id === loggedInstaff.id}\n                  onClick={() => {\n                    setConfirmModalOpen(true)\n                    setConfirm({ title:'Are you sure, you want to delete '+ staff.name +'?', fn: () => staffDelete(staff.id,staff.name) })\n                  }}\n                ></Button>}\n              </TableCell>\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n      <NewStaffModel open={staffAddOpen} setOpen= {setStaffAddOpen}></NewStaffModel>\n      {confirmModalOpen &&\n        <ConfirmModal open= {confirmModalOpen} confirm= {confirm} setOpen= {setConfirmModalOpen} ></ConfirmModal>\n      }\n    </>\n\n  )\n}\n\nexport default AllStaffs","import { useMutation, useQuery } from '@apollo/client'\nimport { FieldArray, Formik } from 'formik'\nimport { forEach } from 'lodash'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { Button, Dimmer, Form, Grid, Header, Icon, Loader, Modal,ModalContent, ModalHeader } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { ADD_STATION } from '../../mutations/stationMutation'\nimport { ALL_COSTUMERS } from '../../queries/costumerQuey'\nimport { InputField, TimeInputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { validateEmail } from '../StationReportPage/NewReportForm/validator'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nconst NewStationModel = (props) => {\n\n  const [,dispatch] = useContext(NotificationContext)\n  const [addStationMutation,{ loading }] = useMutation(ADD_STATION)\n  const [countryList,setCountryList]=  useState([])\n  const [costumerList,setCostumerList] = useState([])\n\n  const { loading: costumerLoading } = useQuery(ALL_COSTUMERS, { onCompleted : (data) => {\n    if(data.allCostumers){\n      const costumerOptions =data.allCostumers.map((costumer,index) => {\n        return { key:index, value: costumer.id, text: costumer.name }\n      } )\n      setCostumerList(costumerOptions)\n    }\n  } })\n\n  useEffect(() => {\n    const fetchCountries = async () => {\n      const response = await fetch('https://restcountries.eu/rest/v2/?fields=name;alpha2Code;')\n      const countries = await response.json()\n      const countryArray = countries.map((country,index) => {\n        const exclude = ['aq','bq','cw','gg','im','je','xk','bl','mf','sx','ss']\n        if(exclude.includes(country.alpha2Code.toLowerCase())){ //exclusdw coutry codes have no flags defined on semntic ui so return without flag\n          return { key:index, value: country.name, text:  country.name  }\n        }\n        return { key:index, value: country.name, text:  country.name ,flag: country.alpha2Code.toLowerCase() }\n      })\n      setCountryList(countryArray)\n    }\n\n    fetchCountries()\n  },[])\n\n  const addStation = (values) => {\n    addStationMutation({\n      variables: values,\n      update: (store,{ data:{ addStation } }) => {\n        store.modify({\n          fields:{\n            allStations(existingStationRefs , { readField }){\n              const newStation = addStation\n              if(existingStationRefs.some(ref => readField('id',ref) === newStation.id)){\n                return existingStationRefs\n              }\n              const update = { ...values,id: newStation.id }\n              return [...existingStationRefs,update]\n\n            }\n          }\n\n        })\n        /**Add station information to each added costumer on cache */\n        forEach(values.costumers, costumer => {\n          store.modify({\n            id: `Costumer:${costumer}`,\n            fields:{\n              stations(existingStationRefs, { readField }) {\n                if(existingStationRefs.some(ref => readField('id',ref) === addStation.id)){\n                  return existingStationRefs\n                }\n                return [...existingStationRefs, { '__ref':`Station:${addStation.id}` }]\n              }\n            }\n          })\n        })\n\n\n      }\n    }).then(\n      () =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, ${values.location} added to station list` ,type: 'SUCCESS' } }),\n      err =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, ${values.location} cannot be added to station list`}<br/> {err.message}</> ,type: 'ERROR' } }),\n      props.setOpen(false),\n    )\n  }\n\n\n  const initVal = {\n    location: '',\n    address:{\n      street:'',\n      postcode:'',\n      city:'',\n      country:''\n    },\n    email: '',\n    phone: '',\n    costumers:[],\n    shifts:[{ name:'',startTime:'' }],\n    stationKey:'',\n    stationKeyConfirm:''\n  }\n  return(\n    <Formik\n      initialValues = { initVal }\n      onSubmit= {(values) => {\n        addStation(values)\n      }}\n      validate = {(values) => {\n        let errors = {}\n\n        if(!values.location || (values.location && values.location.length < 3)){\n          errors.location= 'Location is required and must be at least 3 charcter long'\n        }\n\n        if( !values.address.street || (values.address.street && values.address.street.length < 3) ){\n\n          errors.address = { ...errors.address, street: 'Street is required and must be at least 3 charcter long' }\n        }\n\n        if( !values.address.city ){\n          errors.address= { ...errors.address, city: 'City is required and must be at least 3 charcter long' }\n        }\n\n        if( !values.address.country ){\n          errors.address = { ...errors.address,country:'Country is required' }\n        }\n        if( !values.email  || validateEmail(values.email)){\n          errors.email = 'Email is required and must be valid'\n        }\n\n        if(values.shifts.length){\n          forEach(values.shifts, (shift,index) => {\n            if(!shift.name){\n              if (!errors.shifts) errors.shifts=[]\n              if (!errors.shifts[index] ) errors.shifts[index] = {}\n              errors.shifts[index].name = 'Please provide shift name'\n            }\n\n            if(!shift.startTime){\n              if (!errors.shifts) errors.shifts=[]\n              if (!errors.shifts[index] ) errors.shifts[index] = {}\n\n              errors.shifts[index].startTime = 'Shift start time is required'\n            }\n\n            if(shift.startTime){\n              if(!shift.startTime.match(/^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/)){\n                if (!errors.shifts) errors.shifts=[]\n                if (!errors.shifts[index] ) errors.shifts[index] = {}\n\n                errors.shifts[index].startTime = 'Shift start should be on format HH:mm'\n              }\n            }\n\n          }\n          )\n        }\n\n\n        if( !values.stationKey || (values.stationKey && values.stationKey.length < 8)){\n          errors.stationKey = 'Station key is required and should be at least 8 charter long'\n        }\n        if( values.stationKeyConfirm !== values.stationKey){\n          errors.stationKeyConfirm = 'Station key confirm mismatch'\n        }\n\n        return errors\n\n      }}\n    >\n      {({ values,handleSubmit,setFieldValue,dirty }) =>\n        <Modal\n          closeIcon\n          closeOnEscape={false}\n          closeOnDimmerClick={false}\n          open = {props.open }\n          onClose= {() =>  props.setOpen(false)}\n          onOpen= {() => props.setOpen (true)}\n        >\n          <ModalHeader>New Station {props.name} </ModalHeader>\n          <ModalContent>\n\n            { loading &&\n            <Dimmer active>\n              <Loader />\n            </Dimmer>\n            }\n\n\n            <Form style={{ marginBottom:'5rem' }} autoComplete=\"off\">\n              <Grid padded >\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='location' label='Location' type='text' width='8' placeholder='Location identifier ex: Airport code'/>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop:3 }}>\n                  <DropDownField  name='address.country' labeled label='Country'\n                    placeholder='Select Country'\n                    search\n                    selection\n                    width='8'\n                    options= {countryList}\n                    onChange = {  (e,{ value }) => {\n                      setFieldValue('address.country',value)\n                    }}\n                  >\n\n                  </DropDownField>\n\n                </Grid.Row>\n                <Grid.Row><Header as ='h3'>Address</Header></Grid.Row>\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='address.street' label='Street' type='text' width='8'/>\n                </Grid.Row>\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='address.postcode' label='postcode' type='text' width='8'/>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop:0 }}>\n                  <InputField name='address.city' label='city' type='text' width='8'/>\n                </Grid.Row>\n\n                <Grid.Row><Header as ='h3'>Contact Information</Header></Grid.Row>\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='email' label='Email' type='email'  width='8'/>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop:0 }}>\n                  <InputField name='phone' label='Phone' type='tel'  width='8'/>\n                </Grid.Row>\n\n                <Grid.Row ><Header as ='h3'>Working Shift</Header></Grid.Row>\n                <FieldArray  name={'shifts'}>\n                  {({ push,remove }) => (<>\n                    { values.shifts.length > 0 && values.shifts.map((shift,index) =>\n                      <Grid.Row columns='2' key ={index} style={{ padding:0 }}>\n\n                        <InputField name={`shifts[${index}].name`} label='Name' width='5' />\n                        <TimeInputField name={`shifts[${index}].startTime`} label placeholder='Start Time' ></TimeInputField>\n                        {index !== 0 &&\n                        <Icon\n                          link\n                          name =\"cancel\"\n                          color='red'\n                          onClick={ () => remove(index)\n                          }/>}\n\n                      </Grid.Row>\n                    )}\n                    <Button\n                      type='button'\n                      icon\n                      size ='mini'\n                      primary\n                      onClick={ () => push ({ name:'', startTime:'' })\n                      }>\n                      <Icon name=\"plus circle\"/> Add\n                    </Button>\n                  </>)}\n\n\n\n                </FieldArray>\n\n                <Grid.Row><Header as ='h3'>Costumers</Header></Grid.Row>\n                <DropDownField  name='costumers'\n                  placeholder='Select Costumers'\n                  multiple\n                  search\n                  selection\n                  width='8'\n                  loading= {costumerLoading}\n                  options= {costumerList}\n                  onChange = {  (e,{ value }) => {\n                    setFieldValue('costumers',value)\n                  }}\n                >\n\n                </DropDownField>\n                <Grid.Row><Header as ='h3'>Station Key</Header></Grid.Row>\n                <Grid.Row style={{ padding:0 }}> <InputField name='stationKey' type='password' width='8' placeholder='stationKey' /> </Grid.Row>\n                <Grid.Row style={{ padding:0 }}> <InputField name='stationKeyConfirm' type='password' width='8' placeholder='Confirm stationKey' /> </Grid.Row>\n\n\n              </Grid>\n            </Form>\n          </ModalContent>\n          <Modal.Actions>\n            <Button   negative onClick={() => props.setOpen (false)}>Cancel</Button>\n            {dirty &&\n            <Button  positive onClick= {() => handleSubmit()}>Save</Button>}\n          </Modal.Actions>\n        </Modal>\n      }\n    </Formik>\n\n  )\n}\n\nexport default NewStationModel","import React, { useState,useEffect } from 'react'\nimport { useQuery } from '@apollo/client'\nimport { ALL_STATION } from '../../queries/stationQuery'\nimport { Segment, Loader, Table, TableHeaderCell, TableRow, TableCell, Button, Icon, Input, Flag } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport NewStationModel from './NewStationModal'\n\n\nconst AllStations = () => {\n  const { loading,error,data } = useQuery(ALL_STATION , { variables:{ detailed:true } })\n  const  [stationsData,setStationsData]  = useState([])\n  const [stationAddOpen,setStationAddOpen ]= useState(false)\n\n  useEffect  (() => {\n    if(data  && data.allStations ){\n      setStationsData(data.allStations)\n    }\n  }, [data])\n\n  if(loading){\n    return (\n      <Loader active>Fetching Staffs</Loader>\n    )\n  }\n\n  if(error){\n    return <Segment >Something Went Wrong </Segment>\n  }\n\n\n\n\n  return (\n    <>\n      <Button primary icon onClick= {() => setStationAddOpen(true)}>Add New Station <Icon name = 'add'> </Icon></Button>\n      {\n        stationsData &&\n      <Input icon='search'  placeholder='Country or location ...'\n        onChange ={ (event,{ value }) => {\n          if(!value || value.trim() === ''){\n            setStationsData(data.allStations)\n          }else{\n            const filterData = stationsData.filter(station => station.location.toLowerCase().includes(value.toLowerCase()) ||  station.address.country.toLowerCase().includes(value.toLowerCase()))\n            setStationsData(filterData)\n          }\n        }}\n      />}\n      <Table textAlign='center'>\n        <Table.Header>\n          <TableRow>\n            <TableHeaderCell> Location </TableHeaderCell>\n            <TableHeaderCell> Staff Count (Last 24 Hrs) </TableHeaderCell>\n            <TableHeaderCell> Address </TableHeaderCell>\n            <TableHeaderCell> Phone No. </TableHeaderCell>\n            <TableHeaderCell> Email </TableHeaderCell>\n          </TableRow>\n        </Table.Header>\n        <Table.Body>\n          {stationsData && stationsData.map( station =>\n            <Table.Row key= {station.id}>\n              <TableCell><Link to={`/Manage/AllStations/${station.id}`}>{station.location}</Link></TableCell>\n              <TableCell>{station.activeStaffs}</TableCell>\n              <TableCell>{<> {station.address.street} <br/>   {station.address.postcode} {station.address.city} <br/>  {station.address.country}    <Flag name={station.address && station.address.country && station.address.country.toLowerCase()}></Flag> </>}</TableCell>\n              <TableCell>{station.phone && station.phone.reduce((p,c) => <>{c}  <br/> {p}</> , '') } </TableCell>\n              <TableCell>{station.email}</TableCell>\n            </Table.Row>\n          )}\n        </Table.Body>\n      </Table>\n      {stationAddOpen &&\n        <NewStationModel open={stationAddOpen} setOpen= {setStationAddOpen}></NewStationModel>\n      }\n\n    </>\n\n  )\n}\n\nexport default AllStations","import React from 'react'\nimport { Dropdown, Menu } from 'semantic-ui-react'\nimport { useHistory } from 'react-router-dom'\n\n\nconst AdminMenuBar = ({  activeItem, setActiveItem }) => {\n  const staff = JSON.parse( sessionStorage.getItem('staffKey'))\n  const history = useHistory()\n  const handleMenuClick = (e, { name }) => {\n    setActiveItem( name )\n\n    if( ['Profile','Timesheets','TimesheetsOverview'].includes(name) ){ /** If user views personal pages */\n      history.push(`/Manage/MyPage/${name}`)\n    }else{\n      history.push(`/Manage/${name}`)\n    }\n  }\n\n  const logout = () => {\n    sessionStorage.removeItem('staffKey')\n    history.push('/staffLogin')\n  }\n\n  const menuItems = []\n\n  /**If user has some admin rights then add those items to menu and own profile options view will be on dropdown Button */\n  if(staff.permission.admin || staff.permission.station.edit.length > 0 || staff.permission.station.add){\n    menuItems.push ('AllStations')\n  }\n\n  if(staff.permission.admin || staff.permission.staff.view || staff.permission.staff.add  || staff.permission.staff.view || staff.permission.staff.edit){\n    menuItems.push ('AllStaffs')\n  }\n\n  if(staff.permission.admin || staff.permission.timesheet.view.length > 0){\n    menuItems.push ('ManageTimesheets')\n  }\n\n  if(staff.permission.admin){\n    menuItems.push ('Costumers')\n  }\n\n  if(staff.permission.admin || staff.permission.station.edit.length){\n    menuItems.push ('ShiftReports')\n  }\n\n  const getMenuItems = () => {\n    return menuItems.map(item =>\n      <Menu.Item  key={ item} name = {item} active = {activeItem ===  item }\n        onClick = {handleMenuClick} />)\n  }\n\n\n  return (\n    <Menu inverted color=\"blue\" stackable >\n      {getMenuItems()}\n      <Menu.Menu position='right'>\n        <Dropdown item text = {`Welcome ${staff.name}` } >\n          <Dropdown.Menu>\n            {menuItems.length > 0 && <>\n              <Dropdown.Item disabled text='My Pages'  onClick = { handleMenuClick }/>\n              <Dropdown.Item name= 'Profile' text='Profile'  onClick = { handleMenuClick }/>\n              <Dropdown.Item name ='Timesheets' text='Timesheets'  onClick = { handleMenuClick }/>\n              <Dropdown.Item name = 'TimesheetsOverview' text='TimesheetsOverview'  onClick = { handleMenuClick }/>\n              <Dropdown.Divider/>\n            </>\n            }\n            <Dropdown.Item text='Logout' onClick={() => logout()}/>\n\n          </Dropdown.Menu>\n\n        </Dropdown>\n      </Menu.Menu>\n    </Menu>\n  )\n\n\n}\n\nexport default AdminMenuBar","import { useMutation, useLazyQuery, gql } from '@apollo/client'\nimport { FieldArray, Formik } from 'formik'\nimport { forEach } from 'lodash'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { Button, Dimmer, Form, Grid, Header, Icon, Loader, Modal,ModalContent, ModalHeader } from 'semantic-ui-react'\nimport { NotificationContext } from '../../contexts/NotificationContext'\nimport { ADD_COSTUMER } from '../../mutations/costumerMutation'\nimport { VERIFY_REGISTRATION } from '../../queries/costumerQuey'\nimport { ALL_STATION } from '../../queries/stationQuery'\nimport { InputField } from '../StationReportPage/NewReportForm/FormFields'\nimport { validateEmail } from '../StationReportPage/NewReportForm/validator'\nimport { DropDownField } from '../TimeSheetsReport/TimeSheetEditFields'\nconst NewCostumerModel = (props) => {\n  const [,dispatch] = useContext(NotificationContext)\n  const [stationOptions,setStationOptions]=  useState([])\n\n  const[addCostumerMutation, { loading }] = useMutation(ADD_COSTUMER)\n\n  const [loadStations, { loading:stationLoading, data: stationData }] = useLazyQuery(ALL_STATION)\n\n  const [checkAircraftRegistration,{ loading:aircraftCheckLoading,data:aircraftCheckData }] = useLazyQuery(VERIFY_REGISTRATION)\n  const [duplicateAircraftError,setDuplicateAircraftError] = useState([])\n  useEffect(() => {\n    if(aircraftCheckData){\n      setDuplicateAircraftError(aircraftCheckData.verifyAircraftRegistration)\n    }\n  }, [aircraftCheckData,])\n\n\n  useEffect(() => {\n    if(stationData && stationData.allStations){\n      const stations =stationData.allStations.map((station,index) => {\n        return { key:index, value: station.id, text:station.location }\n      } )\n      setStationOptions(stations)\n    }\n\n  },[stationData])\n\n\n  const addCostumer = (values) => {\n    addCostumerMutation({\n      variables: values,\n      update: (store,{ data: { addCostumer } }) => {\n\n        forEach( addCostumer.stations, station => {\n          store.modify({\n            id: `Station:${station.id}`,\n            fields:{\n              costumers(existingCostumerRefs, { readField }) {\n                if(existingCostumerRefs.some(ref => readField('id',ref) === addCostumer.id)){\n                  return existingCostumerRefs\n                }\n                return [...existingCostumerRefs, { '__ref':`Station:${addCostumer.id}` }]\n              }\n            }\n          })\n\n        })\n\n        /**Append to costumers List */\n        store.modify({\n          fields:{\n            allCostumers(existingCostumersRefs = [] , { readField }){\n              const newCostumerRef  = store.writeFragment({\n                data: addCostumer,\n                fragment : gql `\n                  fragment NewCostumer on Costumer {\n                    name\n                    id\n                    contract\n                    aircrafts{\n                      id\n                      registration\n                    }\n                    stations{\n                      id\n                    }\n\n                  }   \n                `\n              })\n\n              if(existingCostumersRefs.some(ref => readField('id',ref) === addCostumer.id)){\n                return existingCostumersRefs\n              }\n              return [...existingCostumersRefs,newCostumerRef]\n            }\n          }\n        })\n\n      }\n    }).then(\n      () =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: `Success, costumer ${values.name} added` ,type: 'SUCCESS' } }),\n      err =>  dispatch({ type:'ADD_NOTIFICATION',  payload:{ content: <>{`Error, Cannot add costumer ${values.name}`}<br/> {err.message}</> ,type: 'ERROR' } }),\n      props.setOpen(false)\n    )\n  }\n\n  const initVal = {\n    name: '',\n    contract:'',\n    keyContacts: [],\n    stations:[],\n    aircrafts:'',\n\n  }\n  return(\n    <Formik\n      initialValues = { initVal }\n      onSubmit= {(values) => {\n\n        const submittedValues = { ...values , aircrafts: values.aircrafts ? values.aircrafts.toUpperCase().split(','):[] }\n        addCostumer(submittedValues)\n      }}\n      validate = {(values) => {\n        let errors = {}\n\n        if(!values.name || (values.name && values.name.length < 3)){\n          errors.name= 'Costumer Name is required and must be at least 3 charcter long'\n        }\n\n        if( !values.contract ){\n          errors.contract = 'Please specify contract type ex: Ad-HOC, LongTerm , Seasonal etc.'\n        }\n\n        if( values.aircrafts.length ){\n          if(!values.aircrafts.match(/^[a-zA-Z, ]+$/)){\n            errors.aircrafts = 'Invalid character detected, check again'\n          }\n\n          const errAircraft =[]\n          forEach(values.aircrafts.split(','), aircraft => {\n            if(aircraft.trim().length < 3) errAircraft.push(aircraft.trim().toUpperCase())\n          })\n          if (errAircraft.length ){\n            errors.aircrafts = `${errAircraft.toString()} invalid Aircraft Registration, should at least 3 characters`\n          }\n\n          /**If no any error then check if the registration is unique */\n          if(!errors.aircrafts){\n            checkAircraftRegistration({ variables:{ registrations: values.aircrafts } })\n            if(duplicateAircraftError.length){\n              errors.aircrafts = `Registration ${duplicateAircraftError.toString()} already exists.`\n            }\n          }\n\n        }else{\n          errors.aircrafts = 'Enter at least one Aircraft'\n        }\n\n        if(values.keyContacts.length){\n          forEach(values.keyContacts, (contact,index) => {\n            if(!contact.description){\n              if (!errors.keyContacts) errors.keyContacts=[]\n              if (!errors.keyContacts[index] ) errors.keyContacts[index] = {}\n              errors.keyContacts[index].description = 'Please provide contact description'\n            }\n\n            if(!contact.phone && !contact.email){\n              if (!errors.keyContacts) errors.keyContacts=[]\n              if (!errors.keyContacts[index] ) errors.keyContacts[index] = {}\n\n              errors.keyContacts[index].phone = 'At least a phone or a email is required'\n              errors.keyContacts[index].email = 'At least a phone or a email is required'\n            }\n\n            if(contact.email){\n              if(validateEmail(contact.email)){\n                if (!errors.keyContacts) errors.keyContacts=[]\n                if (!errors.keyContacts[index] ) errors.keyContacts[index] = {}\n                errors.keyContacts[index].email = 'Invalid Email'\n              }\n            }\n\n          }\n          )\n        }\n\n        return errors\n\n      }}\n    >\n      {({ values,handleSubmit,setFieldValue,dirty }) =>\n        <Modal\n          closeIcon\n          closeOnEscape={false}\n          closeOnDimmerClick={false}\n          open = {props.open}\n          onClose= {() =>  props.setOpen(false)}\n          onOpen= {() => props.setOpen (true)}\n        >\n          <ModalHeader>New Costumer </ModalHeader>\n          <ModalContent>\n\n            { loading &&\n            <Dimmer active>\n              <Loader />\n            </Dimmer>\n            }\n\n\n            <Form style={{ marginBottom:'5rem' }} autoComplete=\"off\"\n              onSubmit={(e) => {\n                e.preventDefault()\n                handleSubmit()\n              }\n              }>\n              <Grid padded >\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='name' label='Name' type='text' width='8' placeholder='Costumer Name'/>\n                </Grid.Row>\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='contract' label='Contract' type='text' width='8' placeholder='Ex: Ad-Hoc, Short-term , Long-term, Seasonal'/>\n                </Grid.Row>\n                <Grid.Row style={{ padding:0 }}>\n                  <InputField name='aircrafts' label='Aircrafts' type='text' width='8' placeholder='Aircrfat Registrations separeted by comma \",\"'/>\n                </Grid.Row>\n                <Grid.Row style={{ paddingTop:3 }}>\n                  <DropDownField  name='stations' labeled label='Station'\n                    placeholder='Select Stations'\n                    search\n                    loading={stationLoading}\n                    selection\n                    multiple\n                    width='8'\n                    options= {stationOptions}\n                    onFocus = {() => loadStations()}\n                    onChange = {  (e,{ value }) => {\n                      setFieldValue('stations',value)\n                    }}\n                  >\n                  </DropDownField>\n                </Grid.Row>\n\n\n                <Grid.Row><Header as ='h3'>Key Contacts</Header></Grid.Row>\n                <FieldArray  name={'keyContacts'}>\n                  {({ push,remove }) => (<>\n                    { values.keyContacts.length > 0 && values.keyContacts.map((contact,index) => <Grid.Row key ={index} style={{ padding:0 }}>\n                      <Form.Group style={{ margin:0 }} widths='13'><InputField name={`keyContacts[${index}].description`} label='Description' /><InputField name={`keyContacts[${index}].phone`} label='Phone' /><InputField name={`keyContacts[${index}].email`} label='Email' />\n                        <Icon\n                          link\n                          name =\"cancel\"\n                          color='red'\n                          onClick={ () => remove(index)\n                          }/>\n                      </Form.Group>\n                    </Grid.Row>\n                    )}\n                    <Button\n                      style= {{ marginTop:'1rem' }}\n                      type='button'\n                      icon\n                      size ='mini'\n                      primary\n                      onClick={ () => push ({ description:'',phone:'' ,email:'' })\n                      }>\n                      <Icon name=\"plus circle\"/> Add\n                    </Button>\n                  </>)}\n                </FieldArray>\n              </Grid>\n            </Form>\n          </ModalContent>\n          <Modal.Actions>\n            <Button   negative onClick={() => props.setOpen (false)}>Cancel</Button>\n            {dirty &&\n            <Button  loading = {aircraftCheckLoading} disabled={aircraftCheckLoading} positive onClick= {(e) => {\n              e.preventDefault()\n              handleSubmit()\n            }}>Save</Button>}\n          </Modal.Actions>\n        </Modal>\n      }\n    </Formik>\n\n  )\n}\n\nexport default NewCostumerModel","import { useQuery } from '@apollo/client'\nimport React, { useState } from 'react'\nimport { Link, useLocation } from 'react-router-dom'\nimport { Button, Card, Header, Icon, Loader, Segment } from 'semantic-ui-react'\nimport { ALL_COSTUMERS } from '../../queries/costumerQuey'\nimport NewCostumerModel from './NewCostumerModal'\n\n\nconst Costumers = () => {\n\n  const [costumerAddOpen,setCostumerAddOpen] = useState(false)\n  const { loading,error,data } = useQuery(ALL_COSTUMERS,{ variables: { detailed: true } })\n\n  const location = useLocation()\n\n  if(!data && !loading){\n    return null\n  }\n\n  if(loading){\n    return <Segment basic ><Loader active> Loading Costumer Data</Loader></Segment>\n  }\n\n  if(error){\n    return <Header as='h4'>Something went wrong</Header>\n  }\n\n  return (\n    <>\n      <Button primary icon style={{ marginBottom: '1rem' }} onClick= {() => setCostumerAddOpen(true)}><Icon name='add circle' />Add New Costumer</Button>\n      {\n        data && data.allCostumers.length> 0 &&\n    <Card.Group>\n      {\n        data.allCostumers.map(costumer =>\n          <Card key={costumer.id} link raised as={Link} to={`${location.pathname}/${costumer.id}`}>\n            <Card.Content textAlign='center' header = {costumer.name} />\n            <Card.Content textAlign='center' >{costumer.contract? costumer.contract + ' Contract':''}</Card.Content>\n            <Card.Content textAlign='center' extra>\n              <Header as ='h5'> <Icon name='plane'/> Total Aircrafts: {costumer.aircrafts && costumer.aircrafts.length}</Header>\n            </Card.Content>\n          </Card>\n        )}\n    </Card.Group>\n      }\n\n      {\n        !data.allCostumers &&\n    <Header as='h4'>No Costumer Data</Header>\n      }\n\n      {costumerAddOpen &&\n        <NewCostumerModel open={costumerAddOpen} setOpen= {setCostumerAddOpen}></NewCostumerModel>\n      }\n    </>\n  )\n\n\n\n}\n\nexport default Costumers","import React, { useEffect, useState } from 'react'\nimport { useLocation, useParams } from 'react-router-dom'\nimport StaffPage from '../StaffPage'\nimport AllStaffs from './AllStaffs'\nimport AllStations from './AllStations'\nimport StationInfo from '../StationInfo/Index'\nimport AdminMenuBar from './AdminMenuBar'\nimport ManageTimeSheets from './ManageTimeSheets'\nimport Costumers from './Costumers'\nimport CostumerInfo from '../CostumerInfo'\nimport ShiftReportsList from '../ShiftReportsList'\n//import AllStaffs from '../../AdminPages/AllStaffs'\n//import AllStations from '../../AdminPages/AllStations'\n\n//import TimeSheetsOverview from '../../TimeSheetsOverview'\n\n\nconst AdminPages = () => {\n  const params = useParams()\n  const location = useLocation()\n\n  const basePage =  location.pathname.split('/')[2] //root page\n\n  const [activeItem, setActiveItem] = useState(basePage)\n\n  useEffect(() => {\n    setActiveItem(basePage)}\n  ,[basePage, location, params])\n\n\n  return (\n    <>\n      <AdminMenuBar activeItem={activeItem} setActiveItem= {setActiveItem}></AdminMenuBar>\n      {/**If submenu is timesheetsoverview and staffId is set Or current page is managetimesheets or  timesheetsoverview*/\n        activeItem && activeItem.toLowerCase() === 'managetimesheets' &&\n        <ManageTimeSheets />\n      }\n\n      { /**If current page is shiftReports and staffId value is not set */\n        activeItem.toLowerCase() === 'shiftreports' &&\n      <>\n        <ShiftReportsList/>\n      </>\n      }\n\n      { /**If current page is allStaffs and staffId value is not set */\n        activeItem.toLowerCase() === 'mypage' &&\n      <>\n        <StaffPage />\n      </>\n      }\n      { /**If current page is allStaffs and staffId value is not set */\n        activeItem.toLowerCase() === 'allstaffs' && !params.staffId &&\n      <>\n        <AllStaffs/>\n      </>\n      }\n      { /**If current page is allStaffs and staffId value is set */\n        activeItem.toLowerCase() === 'allstaffs' && params.staffId &&\n      <>\n        <StaffPage id={params.staffId}/>\n      </>\n      }\n      { /**If current page is allStations and stationId value is not set */\n        activeItem && activeItem.toLowerCase() === 'allstations' && !params.stationId &&\n      <>\n        <AllStations/>\n      </>\n      }\n      { /**If current page is allStations and stationId value is set */\n        activeItem && activeItem.toLowerCase() === 'allstations' && params.stationId &&\n      <>\n        <StationInfo/>\n      </>\n      }\n      { /**If current page is allStations and stationId value is not set */\n        activeItem && activeItem.toLowerCase() === 'costumers' && !params.costumerId &&\n      <>\n        <Costumers/>\n      </>\n      }\n      { /**If current page is allStations and stationId value is set */\n        activeItem && activeItem.toLowerCase() === 'costumers' && params.costumerId &&\n      <>\n        <CostumerInfo/>\n      </>\n      }\n    </>\n  )\n}\n\nexport default AdminPages","import React from 'react'\nimport { BrowserRouter as  Router, Switch, Route, Redirect } from 'react-router-dom'\nimport StationLoginPage from './components/StationLoginPage'\nimport './App.css'\nimport StationReportPage from './components/StationReportPage'\nimport StaffLoginPage from './components/StaffLoginPage'\nimport StaffPage from './components/StaffPage'\nimport AdminPages from './components/AdminPages'\n\n\nconst  AppRouter = () =>   {\n  return (\n    <Router>\n      <Switch>\n        <Route path = {['/shiftReport/:station/:id','/shiftReport/:id']}>\n          <StationReportPage></StationReportPage>\n        </Route>\n\n        <Route path = \"/stationLogin\">\n          <StationLoginPage ></StationLoginPage>\n        </Route>\n\n        <Route path = \"/staffLogin\">\n          <StaffLoginPage />\n        </Route>\n\n        {/**Routing for nonAdmin staff Pages */}\n        <Route path ={[ '/staff/:staffId/:page/:period','/staff/:staffId/:page']}>\n          <StaffPage></StaffPage>\n        </Route>\n        <Redirect from=\"/staff/:staffId\" to=\"/staff/:staffId/Profile\"/>\n        <Route path = \"/staff\">\n          <StaffPage></StaffPage>\n        </Route>\n\n        {/**Routing for /Manage/MyPage */}\n        <Redirect from='/Manage/MyPage/:page/:id/:period' to=\"/Manage/MyPage/:page/:period\"/>\n\n        {/**Routing for /Manage/AllStaffs */}\n        <Route path = {['/Manage/AllStaffs/:staffId/:page/:period','/Manage/AllStaffs/:staffId/:page/', '/Manage/MyPage/:page/:period','/Manage/MyPage/:page/' ]}>\n          <AdminPages></AdminPages>\n        </Route>\n        <Redirect from=\"/Manage/AllStaffs/:staffId\" to=\"/Manage/AllStaffs/:staffId/Profile\"/>\n        <Route path = '/Manage/AllStaffs'>\n          <AdminPages></AdminPages>\n        </Route>\n\n        {/**Routing for /Manage/ManageTimesheets */}\n        <Route path = {['/Manage/ManageTimesheets/:staffId/:period','/Manage/ManageTimesheets/:staffId','/Manage/ManageTimesheets' ]}>\n          <AdminPages></AdminPages>\n        </Route>\n\n\n        {/** Routing for /Manage/AllStations */}\n        <Route path = {['/Manage/AllStations/:stationId/:page/:costumerId','/Manage/AllStations/:stationId/:page' ]}>\n          <AdminPages/>\n        </Route>\n        <Redirect from='/Manage/AllStations/:stationId' to='/Manage/AllStations/:stationId/BasicInfo'/>\n        <Route path = '/Manage/AllStations'>\n          <AdminPages/>\n        </Route>\n\n        {/**Routing for /Manage/Costumers */}\n        <Route path = {['/Manage/Costumers/:costumerId', '/Manage/Costumers']}>\n          <AdminPages/>\n        </Route>\n\n        {/**Routing for /Manage/ShiftReports */}\n        <Route path = {['/Manage/ShiftReports']}>\n          <AdminPages/>\n        </Route>\n\n        {/**Routing for Manage Page */}\n        <Redirect from=\"/Manage\" to=\"/Manage/MyPage/Profile\"/>\n        <Route path = '/Manage'>\n          <AdminPages></AdminPages>\n        </Route>\n\n        <Route path = \"/Register/:registerCode\">\n          <StaffPage></StaffPage>\n        </Route>\n\n        <Route path = \"/Reset-Password/:resetCode\">\n          <StaffPage></StaffPage>\n        </Route>\n\n        <Route path = \"/\">\n          <StationLoginPage ></StationLoginPage>\n        </Route>\n      </Switch>\n    </Router>\n\n\n  )\n}\n\nexport default AppRouter\n","import React from 'react'\nimport './App.css'\nimport AppRouter from './router'\nimport { NotificationProvider } from './contexts/NotificationContext'\n\n\nconst  App = () =>   {\n  return (\n    <NotificationProvider>\n      <AppRouter></AppRouter>\n    </NotificationProvider>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'semantic-ui-css/semantic.min.css'\nimport { Container } from 'semantic-ui-react'\n\nimport { ApolloClient, HttpLink , InMemoryCache, ApolloProvider } from '@apollo/client'\n\nimport { setContext } from 'apollo-link-context'\n\nconst authLink = setContext((_, { headers }) => {\n  /**\n   * If the user is on staffs page session must have staffKey set , then set authorisation header to staffKey\n   */\n  let key = JSON.parse(sessionStorage.getItem('staffKey'))\n\n  /**If the staff page is not active then authorisation header is set to stationKey */\n  if(!key){\n    /**If the login info was saved preiously key will be set else retrive key from session*/\n    key =  JSON.parse(localStorage.getItem('stationKey'))\n    if(!key) {\n      key = JSON.parse(sessionStorage.getItem('stationKey'))\n    }\n  }\n\n  const token = key? key.value:null\n\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst httpLink = new HttpLink({ uri: window.location.href })\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link:  authLink.concat(httpLink)\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Container><App /></Container>\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}